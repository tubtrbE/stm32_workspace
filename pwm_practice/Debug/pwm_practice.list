
pwm_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005550  08005550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ba0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002838  00000000  00000000  00030c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00033478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258ff  00000000  00000000  00035150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129c0  00000000  00000000  0005aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16f1  00000000  00000000  0006d40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eb00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f0  00000000  00000000  0014eb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052c4 	.word	0x080052c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080052c4 	.word	0x080052c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_GPIO_Init+0x84>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <MX_GPIO_Init+0x84>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_GPIO_Init+0x84>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_GPIO_Init+0x84>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <MX_GPIO_Init+0x84>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_GPIO_Init+0x84>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_GPIO_Init+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <MX_GPIO_Init+0x84>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_GPIO_Init+0x84>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x84>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x84>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x84>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <__io_putchar>:
void note(uint32_t pitch, uint32_t volume, uint32_t time, uint32_t octave);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2201      	movs	r2, #1
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <__io_putchar+0x20>)
 800062c:	f002 fe25 	bl	800327a <HAL_UART_Transmit>
	return ch;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000f8 	.word	0x200000f8

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0b0      	sub	sp, #192	; 0xc0
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fbfd 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f85d 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffa1 	bl	8000594 <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 f8dd 	bl	8000810 <MX_RTC_Init>
  MX_TIM3_Init();
 8000656:	f000 fa3d 	bl	8000ad4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800065a:	f000 fb57 	bl	8000d0c <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800065e:	f000 f8c5 	bl	80007ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000662:	2100      	movs	r1, #0
 8000664:	4825      	ldr	r0, [pc, #148]	; (80006fc <main+0xbc>)
 8000666:	f001 ffdd 	bl	8002624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800066a:	2104      	movs	r1, #4
 800066c:	4823      	ldr	r0, [pc, #140]	; (80006fc <main+0xbc>)
 800066e:	f001 ffd9 	bl	8002624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000672:	2108      	movs	r1, #8
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <main+0xbc>)
 8000676:	f001 ffd5 	bl	8002624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800067a:	210c      	movs	r1, #12
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <main+0xbc>)
 800067e:	f001 ffd1 	bl	8002624 <HAL_TIM_PWM_Start>

  //이무진 신호등 1절

  char* verse1[] = {
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <main+0xc0>)
 8000684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000688:	4611      	mov	r1, r2
 800068a:	2278      	movs	r2, #120	; 0x78
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fde9 	bl	8004264 <memcpy>
		  "N5N" ,"C5N", "D5N", "E5N","C5N","G4N",
		  "C5N","G4N","C5N","C5N","E5N"    ,"F5N","E5N","D5N","C5N","C5N",
		  /////////////////////////////////////////////////////
  };

  uint16_t* verse1_time[15] = {
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	223c      	movs	r2, #60	; 0x3c
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fdf1 	bl	8004280 <memset>
 800069e:	2304      	movs	r3, #4
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	2308      	movs	r3, #8
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	2304      	movs	r3, #4
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	2308      	movs	r3, #8
 80006ac:	613b      	str	r3, [r7, #16]
		  {4,8,8,4,8,8},
		  {8,16,16,32,16,32,4,4},
		  {4,8,8,4,8,8},
		  {8,16,16,16,6,16,16,16,8,16},
  };
  int n = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  for (int i = 0; i < 20; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80006ba:	e019      	b.n	80006f0 <main+0xb0>
		  n = atoi(verse1[i]);
 80006bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	33c0      	adds	r3, #192	; 0xc0
 80006c4:	443b      	add	r3, r7
 80006c6:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fd9c 	bl	8004208 <atoi>
 80006d0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
		  printf("%d\r\n", n);
 80006d4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0xc4>)
 80006da:	f003 fdd9 	bl	8004290 <iprintf>
		  HAL_Delay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f000 fc21 	bl	8000f28 <HAL_Delay>
	  for (int i = 0; i < 20; i++) {
 80006e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006ea:	3301      	adds	r3, #1
 80006ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80006f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006f4:	2b13      	cmp	r3, #19
 80006f6:	dde1      	ble.n	80006bc <main+0x7c>
 80006f8:	e7dc      	b.n	80006b4 <main+0x74>
 80006fa:	bf00      	nop
 80006fc:	200000b0 	.word	0x200000b0
 8000700:	080052fc 	.word	0x080052fc
 8000704:	080052f4 	.word	0x080052f4

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fdb2 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <SystemClock_Config+0xdc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xdc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <SystemClock_Config+0xe0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000764:	2306      	movs	r3, #6
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000780:	23b4      	movs	r3, #180	; 0xb4
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ff8d 	bl	80016b0 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800079c:	f000 f832 	bl	8000804 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a0:	f000 ff36 	bl	8001610 <HAL_PWREx_EnableOverDrive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007aa:	f000 f82b 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2105      	movs	r1, #5
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f9e7 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d8:	f000 f814 	bl	8000804 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2027      	movs	r0, #39	; 0x27
 80007f6:	f000 fc96 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007fa:	2027      	movs	r0, #39	; 0x27
 80007fc:	f000 fcaf 	bl	800115e <HAL_NVIC_EnableIRQ>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_RTC_Init+0x44>)
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_RTC_Init+0x48>)
 8000818:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_RTC_Init+0x44>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_RTC_Init+0x44>)
 8000822:	227f      	movs	r2, #127	; 0x7f
 8000824:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_RTC_Init+0x44>)
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_RTC_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_RTC_Init+0x44>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_RTC_Init+0x44>)
 8000840:	f001 fd4e 	bl	80022e0 <HAL_RTC_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800084a:	f7ff ffdb 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c
 8000858:	40002800 	.word	0x40002800

0800085c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2230      	movs	r2, #48	; 0x30
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fd07 	bl	8004280 <memset>
  if(rtcHandle->Instance==RTC)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <HAL_RTC_MspInit+0x4c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d111      	bne.n	80008a0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800087c:	2320      	movs	r3, #32
 800087e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fb68 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000896:	f7ff ffb5 	bl	8000804 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <HAL_RTC_MspInit+0x50>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40002800 	.word	0x40002800
 80008ac:	42470e3c 	.word	0x42470e3c

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 facc 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART3_IRQHandler+0x10>)
 800095a:	f002 fd21 	bl	80033a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000f8 	.word	0x200000f8

08000968 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e00a      	b.n	8000990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800097a:	f3af 8000 	nop.w
 800097e:	4601      	mov	r1, r0
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	b2ca      	uxtb	r2, r1
 8000988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	dbf0      	blt.n	800097a <_read+0x12>
	}

return len;
 8000998:	687b      	ldr	r3, [r7, #4]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e009      	b.n	80009c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe2d 	bl	800061c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf1      	blt.n	80009b4 <_write+0x12>
	}
	return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a02:	605a      	str	r2, [r3, #4]
	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f003 fbcc 	bl	8004210 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20030000 	.word	0x20030000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	200000ac 	.word	0x200000ac
 8000aac:	20000150 	.word	0x20000150

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b06:	4a42      	ldr	r2, [pc, #264]	; (8000c10 <MX_TIM3_Init+0x13c>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30 - 1;
 8000b0a:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b0c:	221d      	movs	r2, #29
 8000b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3286 - 1;
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b18:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000b1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b2a:	4838      	ldr	r0, [pc, #224]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b2c:	f001 fcd2 	bl	80024d4 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b36:	f7ff fe65 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4831      	ldr	r0, [pc, #196]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b48:	f001 fef6 	bl	8002938 <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b52:	f7ff fe57 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b56:	482d      	ldr	r0, [pc, #180]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b58:	f001 fd0b 	bl	8002572 <HAL_TIM_PWM_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b62:	f7ff fe4f 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4619      	mov	r1, r3
 8000b74:	4825      	ldr	r0, [pc, #148]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b76:	f002 fab7 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b80:	f7ff fe40 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b84:	2360      	movs	r3, #96	; 0x60
 8000b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8000b88:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481b      	ldr	r0, [pc, #108]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000b9e:	f001 fe09 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ba8:	f7ff fe2c 	bl	8000804 <Error_Handler>
  }
  sConfigOC.Pulse = 750-1;
 8000bac:	f240 23ed 	movw	r3, #749	; 0x2ed
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000bba:	f001 fdfb 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000bc4:	f7ff fe1e 	bl	8000804 <Error_Handler>
  }
  sConfigOC.Pulse = 375-1;
 8000bc8:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000bd6:	f001 fded 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000be0:	f7ff fe10 	bl	8000804 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	220c      	movs	r2, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000bf0:	f001 fde0 	bl	80027b4 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000bfa:	f7ff fe03 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM3_Init+0x138>)
 8000c00:	f000 f82a 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000b0 	.word	0x200000b0
 8000c10:	40000400 	.word	0x40000400

08000c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10d      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40000400 	.word	0x40000400
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_TIM_MspPostInit+0xa4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d13b      	bne.n	8000cf2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_MspPostInit+0xa8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23c0      	movs	r3, #192	; 0xc0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <HAL_TIM_MspPostInit+0xac>)
 8000cce:	f000 faf3 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_TIM_MspPostInit+0xb0>)
 8000cee:	f000 fae3 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400

08000d0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_USART3_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d44:	f002 fa4c 	bl	80031e0 <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f7ff fd59 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000f8 	.word	0x200000f8
 8000d5c:	40004800 	.word	0x40004800

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12c      	bne.n	8000ddc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0x8c>)
 8000dd8:	f000 fa6e 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff fe49 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f003 f9fd 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fc0d 	bl	8000640 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e34:	08005558 	.word	0x08005558
  ldr r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e3c:	20000150 	.word	0x20000150

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f94f 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fd1a 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f967 	bl	800117a <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f92f 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	2000013c 	.word	0x2000013c

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000013c 	.word	0x2000013c

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff feb6 	bl	8000f10 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d008      	beq.n	80011c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e052      	b.n	800126a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0216 	bic.w	r2, r2, #22
 80011d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <HAL_DMA_Abort+0x62>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0208 	bic.w	r2, r2, #8
 8001202:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001214:	e013      	b.n	800123e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001216:	f7ff fe7b 	bl	8000f10 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b05      	cmp	r3, #5
 8001222:	d90c      	bls.n	800123e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e015      	b.n	800126a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e4      	bne.n	8001216 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	223f      	movs	r2, #63	; 0x3f
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d004      	beq.n	8001290 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e00c      	b.n	80012aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2205      	movs	r2, #5
 8001294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e177      	b.n	80015c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8166 	bne.w	80015be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80c0 	beq.w	80015be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_GPIO_Init+0x324>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a61      	ldr	r2, [pc, #388]	; (80015e0 <HAL_GPIO_Init+0x328>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_GPIO_Init+0x32c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d037      	beq.n	80014f6 <HAL_GPIO_Init+0x23e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a57      	ldr	r2, [pc, #348]	; (80015e8 <HAL_GPIO_Init+0x330>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d031      	beq.n	80014f2 <HAL_GPIO_Init+0x23a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a56      	ldr	r2, [pc, #344]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x236>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a55      	ldr	r2, [pc, #340]	; (80015f0 <HAL_GPIO_Init+0x338>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x232>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_GPIO_Init+0x33c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x22e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a53      	ldr	r2, [pc, #332]	; (80015f8 <HAL_GPIO_Init+0x340>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x22a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_GPIO_Init+0x344>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_GPIO_Init+0x348>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_GPIO_Init+0x34c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x350>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x21a>
 80014ce:	2309      	movs	r3, #9
 80014d0:	e012      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014d2:	230a      	movs	r3, #10
 80014d4:	e010      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00e      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00c      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00a      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014e2:	2305      	movs	r3, #5
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x240>
 80014f6:	2300      	movs	r3, #0
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	4935      	ldr	r1, [pc, #212]	; (80015e0 <HAL_GPIO_Init+0x328>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_GPIO_Init+0x354>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a34      	ldr	r2, [pc, #208]	; (800160c <HAL_GPIO_Init+0x354>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_GPIO_Init+0x354>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_GPIO_Init+0x354>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_GPIO_Init+0x354>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_GPIO_Init+0x354>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_GPIO_Init+0x354>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_GPIO_Init+0x354>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f67f ae84 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40021c00 	.word	0x40021c00
 8001604:	40022000 	.word	0x40022000
 8001608:	40022400 	.word	0x40022400
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163c:	f7ff fc68 	bl	8000f10 <HAL_GetTick>
 8001640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001642:	e009      	b.n	8001658 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001644:	f7ff fc64 	bl	8000f10 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001652:	d901      	bls.n	8001658 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e01f      	b.n	8001698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d1ee      	bne.n	8001644 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166c:	f7ff fc50 	bl	8000f10 <HAL_GetTick>
 8001670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001672:	e009      	b.n	8001688 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001674:	f7ff fc4c 	bl	8000f10 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001682:	d901      	bls.n	8001688 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e007      	b.n	8001698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001694:	d1ee      	bne.n	8001674 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	420e0040 	.word	0x420e0040
 80016a8:	40007000 	.word	0x40007000
 80016ac:	420e0044 	.word	0x420e0044

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e267      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d075      	beq.n	80017ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d00c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d112      	bne.n	800170c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f2:	d10b      	bne.n	800170c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d05b      	beq.n	80017b8 <HAL_RCC_OscConfig+0x108>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d157      	bne.n	80017b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e242      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d106      	bne.n	8001724 <HAL_RCC_OscConfig+0x74>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0xb0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6f      	ldr	r2, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6c      	ldr	r2, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xb0>
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a68      	ldr	r2, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fbd2 	bl	8000f10 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fbce 	bl	8000f10 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e207      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xc0>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fbbe 	bl	8000f10 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fbba 	bl	8000f10 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1f3      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0xe8>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d11c      	bne.n	8001818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d116      	bne.n	8001818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x152>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1c7      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4937      	ldr	r1, [pc, #220]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	e03a      	b.n	800188e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x244>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fb73 	bl	8000f10 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fb6f 	bl	8000f10 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1a8      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4925      	ldr	r1, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_OscConfig+0x244>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb52 	bl	8000f10 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fb4e 	bl	8000f10 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e187      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d036      	beq.n	8001908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d016      	beq.n	80018d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_RCC_OscConfig+0x248>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fb32 	bl	8000f10 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fb2e 	bl	8000f10 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e167      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x200>
 80018ce:	e01b      	b.n	8001908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x248>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb1b 	bl	8000f10 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e00e      	b.n	80018fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff fb17 	bl	8000f10 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d907      	bls.n	80018fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e150      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470000 	.word	0x42470000
 80018f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ea      	bne.n	80018de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8097 	beq.w	8001a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a7c      	ldr	r2, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001952:	4b74      	ldr	r3, [pc, #464]	; (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a73      	ldr	r2, [pc, #460]	; (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195e:	f7ff fad7 	bl	8000f10 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001966:	f7ff fad3 	bl	8000f10 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e10c      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x474>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x2ea>
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x324>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x30c>
 80019a2:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a5e      	ldr	r2, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	4b5c      	ldr	r3, [pc, #368]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a5b      	ldr	r2, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x324>
 80019bc:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a54      	ldr	r2, [pc, #336]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019ce:	f023 0304 	bic.w	r3, r3, #4
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d015      	beq.n	8001a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff fa98 	bl	8000f10 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff fa94 	bl	8000f10 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0cb      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ee      	beq.n	80019e4 <HAL_RCC_OscConfig+0x334>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fa82 	bl	8000f10 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff fa7e 	bl	8000f10 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0b5      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ee      	bne.n	8001a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a1 	beq.w	8001b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d05c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d141      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa52 	bl	8000f10 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff fa4e 	bl	8000f10 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e087      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fa27 	bl	8000f10 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff fa23 	bl	8000f10 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e05c      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x416>
 8001ae4:	e054      	b.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa10 	bl	8000f10 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa0c 	bl	8000f10 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e045      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
 8001b12:	e03d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e038      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x4ec>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d028      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d121      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	3b01      	subs	r3, #1
 8001b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cc      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d90c      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b8      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	494d      	ldr	r1, [pc, #308]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d044      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d119      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e067      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4934      	ldr	r1, [pc, #208]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f93e 	bl	8000f10 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f93a 	bl	8000f10 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e04f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d20c      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e032      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4916      	ldr	r1, [pc, #88]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	490e      	ldr	r1, [pc, #56]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d26:	f000 f821 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	490a      	ldr	r1, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	5ccb      	ldrb	r3, [r1, r3]
 8001d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f89e 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08005394 	.word	0x08005394
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d70:	b090      	sub	sp, #64	; 0x40
 8001d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d00d      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x40>
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	f200 80a1 	bhi.w	8001ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x34>
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d9e:	e09b      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001da4:	e09b      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001daa:	e098      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db6:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d028      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	2200      	movs	r2, #0
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	627a      	str	r2, [r7, #36]	; 0x24
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd8:	fb03 f201 	mul.w	r2, r3, r1
 8001ddc:	2300      	movs	r3, #0
 8001dde:	fb00 f303 	mul.w	r3, r0, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001de6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dec:	460a      	mov	r2, r1
 8001dee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df2:	4413      	add	r3, r2
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	61fa      	str	r2, [r7, #28]
 8001dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e06:	f7fe fa43 	bl	8000290 <__aeabi_uldivmod>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4613      	mov	r3, r2
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e12:	e053      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	617a      	str	r2, [r7, #20]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e26:	f04f 0b00 	mov.w	fp, #0
 8001e2a:	4652      	mov	r2, sl
 8001e2c:	465b      	mov	r3, fp
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e3c:	0150      	lsls	r0, r2, #5
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	ebb2 080a 	subs.w	r8, r2, sl
 8001e46:	eb63 090b 	sbc.w	r9, r3, fp
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e62:	eb63 0509 	sbc.w	r5, r3, r9
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	00eb      	lsls	r3, r5, #3
 8001e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e74:	00e2      	lsls	r2, r4, #3
 8001e76:	4614      	mov	r4, r2
 8001e78:	461d      	mov	r5, r3
 8001e7a:	eb14 030a 	adds.w	r3, r4, sl
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	eb45 030b 	adc.w	r3, r5, fp
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e92:	4629      	mov	r1, r5
 8001e94:	028b      	lsls	r3, r1, #10
 8001e96:	4621      	mov	r1, r4
 8001e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	028a      	lsls	r2, r1, #10
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	60fa      	str	r2, [r7, #12]
 8001eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb0:	f7fe f9ee 	bl	8000290 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_GetSysClockFreq+0x180>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3740      	adds	r7, #64	; 0x40
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	017d7840 	.word	0x017d7840

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000000 	.word	0x20000000

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a9b      	lsrs	r3, r3, #10
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	080053a4 	.word	0x080053a4

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f3c:	f7ff ffdc 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0b5b      	lsrs	r3, r3, #13
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	080053a4 	.word	0x080053a4

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d075      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f9a:	f7fe ffb9 	bl	8000f10 <HAL_GetTick>
 8001f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fa2:	f7fe ffb5 	bl	8000f10 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e189      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb4:	4b8a      	ldr	r3, [pc, #552]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	019a      	lsls	r2, r3, #6
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	071b      	lsls	r3, r3, #28
 8001fd8:	4981      	ldr	r1, [pc, #516]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fec:	4b7c      	ldr	r3, [pc, #496]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	0f1b      	lsrs	r3, r3, #28
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	019a      	lsls	r2, r3, #6
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	431a      	orrs	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	071b      	lsls	r3, r3, #28
 800200c:	4974      	ldr	r1, [pc, #464]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002014:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201a:	f023 021f 	bic.w	r2, r3, #31
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	3b01      	subs	r3, #1
 8002024:	496e      	ldr	r1, [pc, #440]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	019a      	lsls	r2, r3, #6
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	071b      	lsls	r3, r3, #28
 800204c:	4964      	ldr	r1, [pc, #400]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800205a:	f7fe ff59 	bl	8000f10 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002062:	f7fe ff55 	bl	8000f10 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e129      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002094:	2b00      	cmp	r3, #0
 8002096:	d079      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002098:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800209e:	f7fe ff37 	bl	8000f10 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020a6:	f7fe ff33 	bl	8000f10 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e107      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020c4:	d0ef      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d8:	0f1b      	lsrs	r3, r3, #28
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	019a      	lsls	r2, r3, #6
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	431a      	orrs	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	493b      	ldr	r1, [pc, #236]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	3b01      	subs	r3, #1
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4934      	ldr	r1, [pc, #208]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01e      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	0e1b      	lsrs	r3, r3, #24
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	019a      	lsls	r2, r3, #6
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002164:	f7fe fed4 	bl	8000f10 <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800216c:	f7fe fed0 	bl	8000f10 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0a4      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218a:	d1ef      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808b 	beq.w	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021c2:	f7fe fea5 	bl	8000f10 <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021c8:	e010      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe fea1 	bl	8000f10 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d909      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e075      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80021dc:	42470068 	.word	0x42470068
 80021e0:	40023800 	.word	0x40023800
 80021e4:	42470070 	.word	0x42470070
 80021e8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0e8      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002200:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d02f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	429a      	cmp	r2, r3
 8002214:	d028      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800222c:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d114      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fe67 	bl	8000f10 <HAL_GetTick>
 8002242:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fe63 	bl	8000f10 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e035      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002274:	d10d      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	4912      	ldr	r1, [pc, #72]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
 8002290:	e005      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002298:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80022c4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40007000 	.word	0x40007000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	42470e40 	.word	0x42470e40
 80022dc:	424711e0 	.word	0x424711e0

080022e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e066      	b.n	80023c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f5b      	ldrb	r3, [r3, #29]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe faa8 	bl	800085c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	22ca      	movs	r2, #202	; 0xca
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2253      	movs	r2, #83	; 0x53
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f87a 	bl	800241c <RTC_EnterInitMode>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12c      	bne.n	800238c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002344:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68d2      	ldr	r2, [r2, #12]
 800236c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6919      	ldr	r1, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f881 	bl	800248a <RTC_ExitInitMode>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e8:	f7fe fd92 	bl	8000f10 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023ee:	e009      	b.n	8002404 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023f0:	f7fe fd8e 	bl	8000f10 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023fe:	d901      	bls.n	8002404 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e007      	b.n	8002414 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ee      	beq.n	80023f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d122      	bne.n	8002480 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002448:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800244a:	f7fe fd61 	bl	8000f10 <HAL_GetTick>
 800244e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002450:	e00c      	b.n	800246c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002452:	f7fe fd5d 	bl	8000f10 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002460:	d904      	bls.n	800246c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2204      	movs	r2, #4
 8002466:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <RTC_EnterInitMode+0x64>
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d1e8      	bne.n	8002452 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff89 	bl	80023cc <HAL_RTC_WaitForSynchro>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2204      	movs	r2, #4
 80024c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fb8a 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 fad8 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e041      	b.n	8002608 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f839 	bl	8002610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f000 fa89 	bl	8002ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_TIM_PWM_Start+0x24>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e022      	b.n	800268e <HAL_TIM_PWM_Start+0x6a>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d109      	bne.n	8002662 <HAL_TIM_PWM_Start+0x3e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e015      	b.n	800268e <HAL_TIM_PWM_Start+0x6a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d109      	bne.n	800267c <HAL_TIM_PWM_Start+0x58>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e008      	b.n	800268e <HAL_TIM_PWM_Start+0x6a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07c      	b.n	8002790 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x82>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a4:	e013      	b.n	80026ce <HAL_TIM_PWM_Start+0xaa>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0x92>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b4:	e00b      	b.n	80026ce <HAL_TIM_PWM_Start+0xaa>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0xa2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c4:	e003      	b.n	80026ce <HAL_TIM_PWM_Start+0xaa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fce0 	bl	800309c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <HAL_TIM_PWM_Start+0x174>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_TIM_PWM_Start+0xcc>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2c      	ldr	r2, [pc, #176]	; (800279c <HAL_TIM_PWM_Start+0x178>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_PWM_Start+0xd0>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_PWM_Start+0xd2>
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_TIM_PWM_Start+0x174>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d01d      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_TIM_PWM_Start+0x17c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d018      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_TIM_PWM_Start+0x180>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_TIM_PWM_Start+0x184>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_TIM_PWM_Start+0x178>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_TIM_PWM_Start+0x188>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIM_PWM_Start+0x136>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_TIM_PWM_Start+0x18c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d111      	bne.n	800277e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b06      	cmp	r3, #6
 800276a:	d010      	beq.n	800278e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277c:	e007      	b.n	800278e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010000 	.word	0x40010000
 800279c:	40010400 	.word	0x40010400
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40001800 	.word	0x40001800

080027b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0ae      	b.n	8002930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	f200 809f 	bhi.w	8002920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	0800281d 	.word	0x0800281d
 80027ec:	08002921 	.word	0x08002921
 80027f0:	08002921 	.word	0x08002921
 80027f4:	08002921 	.word	0x08002921
 80027f8:	0800285d 	.word	0x0800285d
 80027fc:	08002921 	.word	0x08002921
 8002800:	08002921 	.word	0x08002921
 8002804:	08002921 	.word	0x08002921
 8002808:	0800289f 	.word	0x0800289f
 800280c:	08002921 	.word	0x08002921
 8002810:	08002921 	.word	0x08002921
 8002814:	08002921 	.word	0x08002921
 8002818:	080028df 	.word	0x080028df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f9f0 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
      break;
 800285a:	e064      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa40 	bl	8002ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
      break;
 800289c:	e043      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fa95 	bl	8002dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0208 	orr.w	r2, r2, #8
 80028b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0204 	bic.w	r2, r2, #4
 80028c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	61da      	str	r2, [r3, #28]
      break;
 80028dc:	e023      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fae9 	bl	8002ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
      break;
 800291e:	e002      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
      break;
 8002924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIM_ConfigClockSource+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e0b4      	b.n	8002abe <HAL_TIM_ConfigClockSource+0x186>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d03e      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0xd4>
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002992:	f200 8087 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	f000 8086 	beq.w	8002aaa <HAL_TIM_ConfigClockSource+0x172>
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d87f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b70      	cmp	r3, #112	; 0x70
 80029a6:	d01a      	beq.n	80029de <HAL_TIM_ConfigClockSource+0xa6>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d87b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d050      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x11a>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d877      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b50      	cmp	r3, #80	; 0x50
 80029b6:	d03c      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0xfa>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d873      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d058      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x13a>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d86f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b30      	cmp	r3, #48	; 0x30
 80029c6:	d064      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d86b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d060      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d867      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d05a      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x15a>
 80029dc:	e062      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f000 fb35 	bl	800305c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	609a      	str	r2, [r3, #8]
      break;
 8002a0a:	e04f      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f000 fb1e 	bl	800305c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2e:	609a      	str	r2, [r3, #8]
      break;
 8002a30:	e03c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 fa92 	bl	8002f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2150      	movs	r1, #80	; 0x50
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faeb 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a50:	e02c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 fab1 	bl	8002fc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2160      	movs	r1, #96	; 0x60
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fadb 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e01c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 fa72 	bl	8002f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2140      	movs	r1, #64	; 0x40
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 facb 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e00c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f000 fac2 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002aa2:	e003      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e000      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d00f      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b28:	d027      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <TIM_Base_SetConfig+0x118>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d023      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <TIM_Base_SetConfig+0x11c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <TIM_Base_SetConfig+0x120>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d017      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <TIM_Base_SetConfig+0x128>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <TIM_Base_SetConfig+0x12c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <TIM_Base_SetConfig+0x130>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <TIM_Base_SetConfig+0x134>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <TIM_Base_SetConfig+0x138>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <TIM_Base_SetConfig+0x13c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0xf8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	40001800 	.word	0x40001800
 8002c00:	40001c00 	.word	0x40001c00
 8002c04:	40002000 	.word	0x40002000

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC1_SetConfig+0x64>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0308 	bic.w	r3, r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <TIM_OC1_SetConfig+0xd8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_OC1_SetConfig+0x8e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <TIM_OC1_SetConfig+0xdc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0210 	bic.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0320 	bic.w	r3, r3, #32
 8002d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC2_SetConfig+0x68>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <TIM_OC2_SetConfig+0xe8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <TIM_OC2_SetConfig+0xe4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC2_SetConfig+0x94>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <TIM_OC2_SetConfig+0xe8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <TIM_OC3_SetConfig+0xe0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_OC3_SetConfig+0x66>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <TIM_OC3_SetConfig+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10d      	bne.n	8002e56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <TIM_OC3_SetConfig+0xe0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_OC3_SetConfig+0x92>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <TIM_OC3_SetConfig+0xe4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d113      	bne.n	8002e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40010400 	.word	0x40010400

08002ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	031b      	lsls	r3, r3, #12
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <TIM_OC4_SetConfig+0xa4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC4_SetConfig+0x68>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <TIM_OC4_SetConfig+0xa8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0210 	bic.w	r2, r3, #16
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	031b      	lsls	r3, r3, #12
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	f043 0307 	orr.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	431a      	orrs	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2201      	movs	r2, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	43db      	mvns	r3, r3
 80030be:	401a      	ands	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e05a      	b.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d01d      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10c      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40010400 	.word	0x40010400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40001800 	.word	0x40001800

080031e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e03f      	b.n	8003272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fdaa 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fd7b 	bl	8003d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08a      	sub	sp, #40	; 0x28
 800327e:	af02      	add	r7, sp, #8
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	d17c      	bne.n	8003394 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_UART_Transmit+0x2c>
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e075      	b.n	8003396 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Transmit+0x3e>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e06e      	b.n	8003396 <HAL_UART_Transmit+0x11c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	; 0x21
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ce:	f7fd fe1f 	bl	8000f10 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e8:	d108      	bne.n	80032fc <HAL_UART_Transmit+0x82>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e003      	b.n	8003304 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800330c:	e02a      	b.n	8003364 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 faf9 	bl	8003910 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e036      	b.n	8003396 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	3302      	adds	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e007      	b.n	8003356 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1cf      	bne.n	800330e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fac9 	bl	8003910 <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e006      	b.n	8003396 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0ba      	sub	sp, #232	; 0xe8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
 80033f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fbd3 	bl	8003baa <UART_Receive_IT>
      return;
 8003404:	e256      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80de 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80d1 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
 800345a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
 800347e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0208 	orr.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 81ed 	beq.w	80038aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fb5e 	bl	8003baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_UART_IRQHandler+0x17a>
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04f      	beq.n	80035ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa66 	bl	80039ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d141      	bne.n	80035b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1d9      	bne.n	800352e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4a7d      	ldr	r2, [pc, #500]	; (800377c <HAL_UART_IRQHandler+0x3dc>)
 8003588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fe6f 	bl	8001272 <HAL_DMA_Abort_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00e      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f99a 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e00a      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f996 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	e006      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f992 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035c6:	e170      	b.n	80038aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	bf00      	nop
    return;
 80035ca:	e16e      	b.n	80038aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 814a 	bne.w	800386a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8143 	beq.w	800386a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 813c 	beq.w	800386a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	f040 80b4 	bne.w	8003780 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8140 	beq.w	80038ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003636:	429a      	cmp	r2, r3
 8003638:	f080 8139 	bcs.w	80038ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	f000 8088 	beq.w	8003762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800367e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800368a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d9      	bne.n	8003652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e1      	bne.n	800369e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3314      	adds	r3, #20
 80036fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800370c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e3      	bne.n	80036da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003744:	65ba      	str	r2, [r7, #88]	; 0x58
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800374a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e3      	bne.n	8003720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fd18 	bl	8001192 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376a:	b29b      	uxth	r3, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8c0 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003778:	e099      	b.n	80038ae <HAL_UART_IRQHandler+0x50e>
 800377a:	bf00      	nop
 800377c:	08003ab3 	.word	0x08003ab3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 808b 	beq.w	80038b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800379c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8086 	beq.w	80038b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ca:	647a      	str	r2, [r7, #68]	; 0x44
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e3      	bne.n	80037a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	623b      	str	r3, [r7, #32]
   return(result);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003802:	633a      	str	r2, [r7, #48]	; 0x30
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e3      	bne.n	80037de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60fb      	str	r3, [r7, #12]
   return(result);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003848:	61fa      	str	r2, [r7, #28]
 800384a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	69b9      	ldr	r1, [r7, #24]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	617b      	str	r3, [r7, #20]
   return(result);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e3      	bne.n	8003824 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f848 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003868:	e023      	b.n	80038b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_UART_IRQHandler+0x4ea>
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f929 	bl	8003ada <UART_Transmit_IT>
    return;
 8003888:	e014      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <HAL_UART_IRQHandler+0x514>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f969 	bl	8003b7a <UART_EndTransmit_IT>
    return;
 80038a8:	e004      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
    return;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
      return;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
      return;
 80038b2:	bf00      	nop
  }
}
 80038b4:	37e8      	adds	r7, #232	; 0xe8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b090      	sub	sp, #64	; 0x40
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003920:	e050      	b.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d04c      	beq.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <UART_WaitOnFlagUntilTimeout+0x30>
 8003930:	f7fd faee 	bl	8000f10 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393c:	429a      	cmp	r2, r3
 800393e:	d241      	bcs.n	80039c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003960:	637a      	str	r2, [r7, #52]	; 0x34
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003994:	623a      	str	r2, [r7, #32]
 8003996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e00f      	b.n	80039e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d09f      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3740      	adds	r7, #64	; 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b095      	sub	sp, #84	; 0x54
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a14:	643a      	str	r2, [r7, #64]	; 0x40
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d119      	bne.n	8003a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f023 0310 	bic.w	r3, r3, #16
 8003a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a84:	61ba      	str	r2, [r7, #24]
 8003a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6979      	ldr	r1, [r7, #20]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	613b      	str	r3, [r7, #16]
   return(result);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aa6:	bf00      	nop
 8003aa8:	3754      	adds	r7, #84	; 0x54
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ff09 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b21      	cmp	r3, #33	; 0x21
 8003aec:	d13e      	bne.n	8003b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d114      	bne.n	8003b22 <UART_Transmit_IT+0x48>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d110      	bne.n	8003b22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]
 8003b20:	e008      	b.n	8003b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6211      	str	r1, [r2, #32]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4619      	mov	r1, r3
 8003b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fe8e 	bl	80038bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b08c      	sub	sp, #48	; 0x30
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b22      	cmp	r3, #34	; 0x22
 8003bbc:	f040 80ab 	bne.w	8003d16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d117      	bne.n	8003bfa <UART_Receive_IT+0x50>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf8:	e026      	b.n	8003c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d007      	beq.n	8003c1e <UART_Receive_IT+0x74>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <UART_Receive_IT+0x82>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e008      	b.n	8003c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4619      	mov	r1, r3
 8003c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d15a      	bne.n	8003d12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0220 	bic.w	r2, r2, #32
 8003c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d135      	bne.n	8003d08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 0310 	bic.w	r3, r3, #16
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	623a      	str	r2, [r7, #32]
 8003cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d10a      	bne.n	8003cfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fdf9 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
 8003d06:	e002      	b.n	8003d0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fde1 	bl	80038d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e002      	b.n	8003d18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3730      	adds	r7, #48	; 0x30
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b0c0      	sub	sp, #256	; 0x100
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	68d9      	ldr	r1, [r3, #12]
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d78:	f021 010c 	bic.w	r1, r1, #12
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d86:	430b      	orrs	r3, r1
 8003d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	6999      	ldr	r1, [r3, #24]
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	ea40 0301 	orr.w	r3, r0, r1
 8003da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b8f      	ldr	r3, [pc, #572]	; (8003fec <UART_SetConfig+0x2cc>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0xa0>
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <UART_SetConfig+0x2d0>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d104      	bne.n	8003dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7fe f8ba 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc8:	e003      	b.n	8003dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dca:	f7fe f8a1 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8003dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	f040 810c 	bne.w	8003ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e02:	4621      	mov	r1, r4
 8003e04:	eb12 0801 	adds.w	r8, r2, r1
 8003e08:	4629      	mov	r1, r5
 8003e0a:	eb43 0901 	adc.w	r9, r3, r1
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e22:	4690      	mov	r8, r2
 8003e24:	4699      	mov	r9, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	eb18 0303 	adds.w	r3, r8, r3
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e30:	462b      	mov	r3, r5
 8003e32:	eb49 0303 	adc.w	r3, r9, r3
 8003e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e4e:	460b      	mov	r3, r1
 8003e50:	18db      	adds	r3, r3, r3
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
 8003e54:	4613      	mov	r3, r2
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e64:	f7fc fa14 	bl	8000290 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011c      	lsls	r4, r3, #4
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e90:	415b      	adcs	r3, r3
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e98:	4641      	mov	r1, r8
 8003e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	4692      	mov	sl, r2
 8003eba:	469b      	mov	fp, r3
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003efa:	f7fc f9c9 	bl	8000290 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	; 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	441c      	add	r4, r3
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f44:	415b      	adcs	r3, r3
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	1851      	adds	r1, r2, r1
 8003f50:	6339      	str	r1, [r7, #48]	; 0x30
 8003f52:	4649      	mov	r1, r9
 8003f54:	414b      	adcs	r3, r1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f64:	4659      	mov	r1, fp
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4651      	mov	r1, sl
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f80:	464b      	mov	r3, r9
 8003f82:	460a      	mov	r2, r1
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	18db      	adds	r3, r3, r3
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fb6:	f7fc f96b 	bl	8000290 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4422      	add	r2, r4
 8003fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe8:	e105      	b.n	80041f6 <UART_SetConfig+0x4d6>
 8003fea:	bf00      	nop
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	1891      	adds	r1, r2, r2
 8004010:	6239      	str	r1, [r7, #32]
 8004012:	415b      	adcs	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800401a:	4641      	mov	r1, r8
 800401c:	1854      	adds	r4, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb43 0501 	adc.w	r5, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004040:	464b      	mov	r3, r9
 8004042:	eb45 0303 	adc.w	r3, r5, r3
 8004046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004066:	4629      	mov	r1, r5
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004070:	4621      	mov	r1, r4
 8004072:	008a      	lsls	r2, r1, #2
 8004074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004078:	f7fc f90a 	bl	8000290 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <UART_SetConfig+0x4e4>)
 8004082:	fba3 2302 	umull	r2, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	011c      	lsls	r4, r3, #4
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	61b9      	str	r1, [r7, #24]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ac:	4641      	mov	r1, r8
 80040ae:	1851      	adds	r1, r2, r1
 80040b0:	6139      	str	r1, [r7, #16]
 80040b2:	4649      	mov	r1, r9
 80040b4:	414b      	adcs	r3, r1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c4:	4659      	mov	r1, fp
 80040c6:	00cb      	lsls	r3, r1, #3
 80040c8:	4651      	mov	r1, sl
 80040ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ce:	4651      	mov	r1, sl
 80040d0:	00ca      	lsls	r2, r1, #3
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	4642      	mov	r2, r8
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040e0:	464b      	mov	r3, r9
 80040e2:	460a      	mov	r2, r1
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004104:	4649      	mov	r1, r9
 8004106:	008b      	lsls	r3, r1, #2
 8004108:	4641      	mov	r1, r8
 800410a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410e:	4641      	mov	r1, r8
 8004110:	008a      	lsls	r2, r1, #2
 8004112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004116:	f7fc f8bb 	bl	8000290 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <UART_SetConfig+0x4e4>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2164      	movs	r1, #100	; 0x64
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3332      	adds	r3, #50	; 0x32
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <UART_SetConfig+0x4e4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413e:	441c      	add	r4, r3
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	673b      	str	r3, [r7, #112]	; 0x70
 8004148:	677a      	str	r2, [r7, #116]	; 0x74
 800414a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800414e:	4642      	mov	r2, r8
 8004150:	464b      	mov	r3, r9
 8004152:	1891      	adds	r1, r2, r2
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	415b      	adcs	r3, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800415e:	4641      	mov	r1, r8
 8004160:	1851      	adds	r1, r2, r1
 8004162:	6039      	str	r1, [r7, #0]
 8004164:	4649      	mov	r1, r9
 8004166:	414b      	adcs	r3, r1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004176:	4659      	mov	r1, fp
 8004178:	00cb      	lsls	r3, r1, #3
 800417a:	4651      	mov	r1, sl
 800417c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004180:	4651      	mov	r1, sl
 8004182:	00ca      	lsls	r2, r1, #3
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	4603      	mov	r3, r0
 800418a:	4642      	mov	r2, r8
 800418c:	189b      	adds	r3, r3, r2
 800418e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	663b      	str	r3, [r7, #96]	; 0x60
 80041a4:	667a      	str	r2, [r7, #100]	; 0x64
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041b2:	4649      	mov	r1, r9
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	4641      	mov	r1, r8
 80041b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041bc:	4641      	mov	r1, r8
 80041be:	008a      	lsls	r2, r1, #2
 80041c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041c4:	f7fc f864 	bl	8000290 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 1302 	umull	r1, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <UART_SetConfig+0x4e4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4422      	add	r2, r4
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	bf00      	nop
 80041f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	51eb851f 	.word	0x51eb851f

08004208 <atoi>:
 8004208:	220a      	movs	r2, #10
 800420a:	2100      	movs	r1, #0
 800420c:	f000 b8da 	b.w	80043c4 <strtol>

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4d0d      	ldr	r5, [pc, #52]	; (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2600      	movs	r6, #0
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4d0b      	ldr	r5, [pc, #44]	; (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	; (8004260 <__libc_init_array+0x44>)
 8004230:	f001 f848 	bl	80052c4 <_init>
 8004234:	1b64      	subs	r4, r4, r5
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2600      	movs	r6, #0
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08005550 	.word	0x08005550
 8004258:	08005550 	.word	0x08005550
 800425c:	08005550 	.word	0x08005550
 8004260:	08005554 	.word	0x08005554

08004264 <memcpy>:
 8004264:	440a      	add	r2, r1
 8004266:	4291      	cmp	r1, r2
 8004268:	f100 33ff 	add.w	r3, r0, #4294967295
 800426c:	d100      	bne.n	8004270 <memcpy+0xc>
 800426e:	4770      	bx	lr
 8004270:	b510      	push	{r4, lr}
 8004272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800427a:	4291      	cmp	r1, r2
 800427c:	d1f9      	bne.n	8004272 <memcpy+0xe>
 800427e:	bd10      	pop	{r4, pc}

08004280 <memset>:
 8004280:	4402      	add	r2, r0
 8004282:	4603      	mov	r3, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <iprintf>:
 8004290:	b40f      	push	{r0, r1, r2, r3}
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <iprintf+0x2c>)
 8004294:	b513      	push	{r0, r1, r4, lr}
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	b124      	cbz	r4, 80042a4 <iprintf+0x14>
 800429a:	69a3      	ldr	r3, [r4, #24]
 800429c:	b913      	cbnz	r3, 80042a4 <iprintf+0x14>
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 f8f2 	bl	8004488 <__sinit>
 80042a4:	ab05      	add	r3, sp, #20
 80042a6:	9a04      	ldr	r2, [sp, #16]
 80042a8:	68a1      	ldr	r1, [r4, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fa49 	bl	8004744 <_vfiprintf_r>
 80042b2:	b002      	add	sp, #8
 80042b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b8:	b004      	add	sp, #16
 80042ba:	4770      	bx	lr
 80042bc:	2000000c 	.word	0x2000000c

080042c0 <_strtol_l.constprop.0>:
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c6:	d001      	beq.n	80042cc <_strtol_l.constprop.0+0xc>
 80042c8:	2b24      	cmp	r3, #36	; 0x24
 80042ca:	d906      	bls.n	80042da <_strtol_l.constprop.0+0x1a>
 80042cc:	f7ff ffa0 	bl	8004210 <__errno>
 80042d0:	2316      	movs	r3, #22
 80042d2:	6003      	str	r3, [r0, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80043c0 <_strtol_l.constprop.0+0x100>
 80042de:	460d      	mov	r5, r1
 80042e0:	462e      	mov	r6, r5
 80042e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80042ea:	f017 0708 	ands.w	r7, r7, #8
 80042ee:	d1f7      	bne.n	80042e0 <_strtol_l.constprop.0+0x20>
 80042f0:	2c2d      	cmp	r4, #45	; 0x2d
 80042f2:	d132      	bne.n	800435a <_strtol_l.constprop.0+0x9a>
 80042f4:	782c      	ldrb	r4, [r5, #0]
 80042f6:	2701      	movs	r7, #1
 80042f8:	1cb5      	adds	r5, r6, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d05b      	beq.n	80043b6 <_strtol_l.constprop.0+0xf6>
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d109      	bne.n	8004316 <_strtol_l.constprop.0+0x56>
 8004302:	2c30      	cmp	r4, #48	; 0x30
 8004304:	d107      	bne.n	8004316 <_strtol_l.constprop.0+0x56>
 8004306:	782c      	ldrb	r4, [r5, #0]
 8004308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800430c:	2c58      	cmp	r4, #88	; 0x58
 800430e:	d14d      	bne.n	80043ac <_strtol_l.constprop.0+0xec>
 8004310:	786c      	ldrb	r4, [r5, #1]
 8004312:	2310      	movs	r3, #16
 8004314:	3502      	adds	r5, #2
 8004316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800431a:	f108 38ff 	add.w	r8, r8, #4294967295
 800431e:	f04f 0c00 	mov.w	ip, #0
 8004322:	fbb8 f9f3 	udiv	r9, r8, r3
 8004326:	4666      	mov	r6, ip
 8004328:	fb03 8a19 	mls	sl, r3, r9, r8
 800432c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004330:	f1be 0f09 	cmp.w	lr, #9
 8004334:	d816      	bhi.n	8004364 <_strtol_l.constprop.0+0xa4>
 8004336:	4674      	mov	r4, lr
 8004338:	42a3      	cmp	r3, r4
 800433a:	dd24      	ble.n	8004386 <_strtol_l.constprop.0+0xc6>
 800433c:	f1bc 0f00 	cmp.w	ip, #0
 8004340:	db1e      	blt.n	8004380 <_strtol_l.constprop.0+0xc0>
 8004342:	45b1      	cmp	r9, r6
 8004344:	d31c      	bcc.n	8004380 <_strtol_l.constprop.0+0xc0>
 8004346:	d101      	bne.n	800434c <_strtol_l.constprop.0+0x8c>
 8004348:	45a2      	cmp	sl, r4
 800434a:	db19      	blt.n	8004380 <_strtol_l.constprop.0+0xc0>
 800434c:	fb06 4603 	mla	r6, r6, r3, r4
 8004350:	f04f 0c01 	mov.w	ip, #1
 8004354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004358:	e7e8      	b.n	800432c <_strtol_l.constprop.0+0x6c>
 800435a:	2c2b      	cmp	r4, #43	; 0x2b
 800435c:	bf04      	itt	eq
 800435e:	782c      	ldrbeq	r4, [r5, #0]
 8004360:	1cb5      	addeq	r5, r6, #2
 8004362:	e7ca      	b.n	80042fa <_strtol_l.constprop.0+0x3a>
 8004364:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004368:	f1be 0f19 	cmp.w	lr, #25
 800436c:	d801      	bhi.n	8004372 <_strtol_l.constprop.0+0xb2>
 800436e:	3c37      	subs	r4, #55	; 0x37
 8004370:	e7e2      	b.n	8004338 <_strtol_l.constprop.0+0x78>
 8004372:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004376:	f1be 0f19 	cmp.w	lr, #25
 800437a:	d804      	bhi.n	8004386 <_strtol_l.constprop.0+0xc6>
 800437c:	3c57      	subs	r4, #87	; 0x57
 800437e:	e7db      	b.n	8004338 <_strtol_l.constprop.0+0x78>
 8004380:	f04f 3cff 	mov.w	ip, #4294967295
 8004384:	e7e6      	b.n	8004354 <_strtol_l.constprop.0+0x94>
 8004386:	f1bc 0f00 	cmp.w	ip, #0
 800438a:	da05      	bge.n	8004398 <_strtol_l.constprop.0+0xd8>
 800438c:	2322      	movs	r3, #34	; 0x22
 800438e:	6003      	str	r3, [r0, #0]
 8004390:	4646      	mov	r6, r8
 8004392:	b942      	cbnz	r2, 80043a6 <_strtol_l.constprop.0+0xe6>
 8004394:	4630      	mov	r0, r6
 8004396:	e79e      	b.n	80042d6 <_strtol_l.constprop.0+0x16>
 8004398:	b107      	cbz	r7, 800439c <_strtol_l.constprop.0+0xdc>
 800439a:	4276      	negs	r6, r6
 800439c:	2a00      	cmp	r2, #0
 800439e:	d0f9      	beq.n	8004394 <_strtol_l.constprop.0+0xd4>
 80043a0:	f1bc 0f00 	cmp.w	ip, #0
 80043a4:	d000      	beq.n	80043a8 <_strtol_l.constprop.0+0xe8>
 80043a6:	1e69      	subs	r1, r5, #1
 80043a8:	6011      	str	r1, [r2, #0]
 80043aa:	e7f3      	b.n	8004394 <_strtol_l.constprop.0+0xd4>
 80043ac:	2430      	movs	r4, #48	; 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1b1      	bne.n	8004316 <_strtol_l.constprop.0+0x56>
 80043b2:	2308      	movs	r3, #8
 80043b4:	e7af      	b.n	8004316 <_strtol_l.constprop.0+0x56>
 80043b6:	2c30      	cmp	r4, #48	; 0x30
 80043b8:	d0a5      	beq.n	8004306 <_strtol_l.constprop.0+0x46>
 80043ba:	230a      	movs	r3, #10
 80043bc:	e7ab      	b.n	8004316 <_strtol_l.constprop.0+0x56>
 80043be:	bf00      	nop
 80043c0:	080053b1 	.word	0x080053b1

080043c4 <strtol>:
 80043c4:	4613      	mov	r3, r2
 80043c6:	460a      	mov	r2, r1
 80043c8:	4601      	mov	r1, r0
 80043ca:	4802      	ldr	r0, [pc, #8]	; (80043d4 <strtol+0x10>)
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f7ff bf77 	b.w	80042c0 <_strtol_l.constprop.0>
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c

080043d8 <std>:
 80043d8:	2300      	movs	r3, #0
 80043da:	b510      	push	{r4, lr}
 80043dc:	4604      	mov	r4, r0
 80043de:	e9c0 3300 	strd	r3, r3, [r0]
 80043e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043e6:	6083      	str	r3, [r0, #8]
 80043e8:	8181      	strh	r1, [r0, #12]
 80043ea:	6643      	str	r3, [r0, #100]	; 0x64
 80043ec:	81c2      	strh	r2, [r0, #14]
 80043ee:	6183      	str	r3, [r0, #24]
 80043f0:	4619      	mov	r1, r3
 80043f2:	2208      	movs	r2, #8
 80043f4:	305c      	adds	r0, #92	; 0x5c
 80043f6:	f7ff ff43 	bl	8004280 <memset>
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <std+0x38>)
 80043fc:	6263      	str	r3, [r4, #36]	; 0x24
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <std+0x3c>)
 8004400:	62a3      	str	r3, [r4, #40]	; 0x28
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <std+0x40>)
 8004404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <std+0x44>)
 8004408:	6224      	str	r4, [r4, #32]
 800440a:	6323      	str	r3, [r4, #48]	; 0x30
 800440c:	bd10      	pop	{r4, pc}
 800440e:	bf00      	nop
 8004410:	08004ced 	.word	0x08004ced
 8004414:	08004d0f 	.word	0x08004d0f
 8004418:	08004d47 	.word	0x08004d47
 800441c:	08004d6b 	.word	0x08004d6b

08004420 <_cleanup_r>:
 8004420:	4901      	ldr	r1, [pc, #4]	; (8004428 <_cleanup_r+0x8>)
 8004422:	f000 b8af 	b.w	8004584 <_fwalk_reent>
 8004426:	bf00      	nop
 8004428:	08005045 	.word	0x08005045

0800442c <__sfmoreglue>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	2268      	movs	r2, #104	; 0x68
 8004430:	1e4d      	subs	r5, r1, #1
 8004432:	4355      	muls	r5, r2
 8004434:	460e      	mov	r6, r1
 8004436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800443a:	f000 f8e5 	bl	8004608 <_malloc_r>
 800443e:	4604      	mov	r4, r0
 8004440:	b140      	cbz	r0, 8004454 <__sfmoreglue+0x28>
 8004442:	2100      	movs	r1, #0
 8004444:	e9c0 1600 	strd	r1, r6, [r0]
 8004448:	300c      	adds	r0, #12
 800444a:	60a0      	str	r0, [r4, #8]
 800444c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004450:	f7ff ff16 	bl	8004280 <memset>
 8004454:	4620      	mov	r0, r4
 8004456:	bd70      	pop	{r4, r5, r6, pc}

08004458 <__sfp_lock_acquire>:
 8004458:	4801      	ldr	r0, [pc, #4]	; (8004460 <__sfp_lock_acquire+0x8>)
 800445a:	f000 b8b3 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 800445e:	bf00      	nop
 8004460:	20000141 	.word	0x20000141

08004464 <__sfp_lock_release>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__sfp_lock_release+0x8>)
 8004466:	f000 b8ae 	b.w	80045c6 <__retarget_lock_release_recursive>
 800446a:	bf00      	nop
 800446c:	20000141 	.word	0x20000141

08004470 <__sinit_lock_acquire>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__sinit_lock_acquire+0x8>)
 8004472:	f000 b8a7 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 8004476:	bf00      	nop
 8004478:	20000142 	.word	0x20000142

0800447c <__sinit_lock_release>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__sinit_lock_release+0x8>)
 800447e:	f000 b8a2 	b.w	80045c6 <__retarget_lock_release_recursive>
 8004482:	bf00      	nop
 8004484:	20000142 	.word	0x20000142

08004488 <__sinit>:
 8004488:	b510      	push	{r4, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	f7ff fff0 	bl	8004470 <__sinit_lock_acquire>
 8004490:	69a3      	ldr	r3, [r4, #24]
 8004492:	b11b      	cbz	r3, 800449c <__sinit+0x14>
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f7ff bff0 	b.w	800447c <__sinit_lock_release>
 800449c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044a0:	6523      	str	r3, [r4, #80]	; 0x50
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <__sinit+0x68>)
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <__sinit+0x6c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	bf04      	itt	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	61a3      	streq	r3, [r4, #24]
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f820 	bl	80044f8 <__sfp>
 80044b8:	6060      	str	r0, [r4, #4]
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f81c 	bl	80044f8 <__sfp>
 80044c0:	60a0      	str	r0, [r4, #8]
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 f818 	bl	80044f8 <__sfp>
 80044c8:	2200      	movs	r2, #0
 80044ca:	60e0      	str	r0, [r4, #12]
 80044cc:	2104      	movs	r1, #4
 80044ce:	6860      	ldr	r0, [r4, #4]
 80044d0:	f7ff ff82 	bl	80043d8 <std>
 80044d4:	68a0      	ldr	r0, [r4, #8]
 80044d6:	2201      	movs	r2, #1
 80044d8:	2109      	movs	r1, #9
 80044da:	f7ff ff7d 	bl	80043d8 <std>
 80044de:	68e0      	ldr	r0, [r4, #12]
 80044e0:	2202      	movs	r2, #2
 80044e2:	2112      	movs	r1, #18
 80044e4:	f7ff ff78 	bl	80043d8 <std>
 80044e8:	2301      	movs	r3, #1
 80044ea:	61a3      	str	r3, [r4, #24]
 80044ec:	e7d2      	b.n	8004494 <__sinit+0xc>
 80044ee:	bf00      	nop
 80044f0:	080053ac 	.word	0x080053ac
 80044f4:	08004421 	.word	0x08004421

080044f8 <__sfp>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	4607      	mov	r7, r0
 80044fc:	f7ff ffac 	bl	8004458 <__sfp_lock_acquire>
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <__sfp+0x84>)
 8004502:	681e      	ldr	r6, [r3, #0]
 8004504:	69b3      	ldr	r3, [r6, #24]
 8004506:	b913      	cbnz	r3, 800450e <__sfp+0x16>
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff ffbd 	bl	8004488 <__sinit>
 800450e:	3648      	adds	r6, #72	; 0x48
 8004510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004514:	3b01      	subs	r3, #1
 8004516:	d503      	bpl.n	8004520 <__sfp+0x28>
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	b30b      	cbz	r3, 8004560 <__sfp+0x68>
 800451c:	6836      	ldr	r6, [r6, #0]
 800451e:	e7f7      	b.n	8004510 <__sfp+0x18>
 8004520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004524:	b9d5      	cbnz	r5, 800455c <__sfp+0x64>
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <__sfp+0x88>)
 8004528:	60e3      	str	r3, [r4, #12]
 800452a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800452e:	6665      	str	r5, [r4, #100]	; 0x64
 8004530:	f000 f847 	bl	80045c2 <__retarget_lock_init_recursive>
 8004534:	f7ff ff96 	bl	8004464 <__sfp_lock_release>
 8004538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800453c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004540:	6025      	str	r5, [r4, #0]
 8004542:	61a5      	str	r5, [r4, #24]
 8004544:	2208      	movs	r2, #8
 8004546:	4629      	mov	r1, r5
 8004548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800454c:	f7ff fe98 	bl	8004280 <memset>
 8004550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004558:	4620      	mov	r0, r4
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	3468      	adds	r4, #104	; 0x68
 800455e:	e7d9      	b.n	8004514 <__sfp+0x1c>
 8004560:	2104      	movs	r1, #4
 8004562:	4638      	mov	r0, r7
 8004564:	f7ff ff62 	bl	800442c <__sfmoreglue>
 8004568:	4604      	mov	r4, r0
 800456a:	6030      	str	r0, [r6, #0]
 800456c:	2800      	cmp	r0, #0
 800456e:	d1d5      	bne.n	800451c <__sfp+0x24>
 8004570:	f7ff ff78 	bl	8004464 <__sfp_lock_release>
 8004574:	230c      	movs	r3, #12
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	e7ee      	b.n	8004558 <__sfp+0x60>
 800457a:	bf00      	nop
 800457c:	080053ac 	.word	0x080053ac
 8004580:	ffff0001 	.word	0xffff0001

08004584 <_fwalk_reent>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	4606      	mov	r6, r0
 800458a:	4688      	mov	r8, r1
 800458c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004590:	2700      	movs	r7, #0
 8004592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004596:	f1b9 0901 	subs.w	r9, r9, #1
 800459a:	d505      	bpl.n	80045a8 <_fwalk_reent+0x24>
 800459c:	6824      	ldr	r4, [r4, #0]
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d1f7      	bne.n	8004592 <_fwalk_reent+0xe>
 80045a2:	4638      	mov	r0, r7
 80045a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a8:	89ab      	ldrh	r3, [r5, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d907      	bls.n	80045be <_fwalk_reent+0x3a>
 80045ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045b2:	3301      	adds	r3, #1
 80045b4:	d003      	beq.n	80045be <_fwalk_reent+0x3a>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	47c0      	blx	r8
 80045bc:	4307      	orrs	r7, r0
 80045be:	3568      	adds	r5, #104	; 0x68
 80045c0:	e7e9      	b.n	8004596 <_fwalk_reent+0x12>

080045c2 <__retarget_lock_init_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <__retarget_lock_acquire_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_release_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <sbrk_aligned>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0e      	ldr	r6, [pc, #56]	; (8004604 <sbrk_aligned+0x3c>)
 80045cc:	460c      	mov	r4, r1
 80045ce:	6831      	ldr	r1, [r6, #0]
 80045d0:	4605      	mov	r5, r0
 80045d2:	b911      	cbnz	r1, 80045da <sbrk_aligned+0x12>
 80045d4:	f000 fb7a 	bl	8004ccc <_sbrk_r>
 80045d8:	6030      	str	r0, [r6, #0]
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 fb75 	bl	8004ccc <_sbrk_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d00a      	beq.n	80045fc <sbrk_aligned+0x34>
 80045e6:	1cc4      	adds	r4, r0, #3
 80045e8:	f024 0403 	bic.w	r4, r4, #3
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d007      	beq.n	8004600 <sbrk_aligned+0x38>
 80045f0:	1a21      	subs	r1, r4, r0
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 fb6a 	bl	8004ccc <_sbrk_r>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d101      	bne.n	8004600 <sbrk_aligned+0x38>
 80045fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004600:	4620      	mov	r0, r4
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	20000148 	.word	0x20000148

08004608 <_malloc_r>:
 8004608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460c:	1ccd      	adds	r5, r1, #3
 800460e:	f025 0503 	bic.w	r5, r5, #3
 8004612:	3508      	adds	r5, #8
 8004614:	2d0c      	cmp	r5, #12
 8004616:	bf38      	it	cc
 8004618:	250c      	movcc	r5, #12
 800461a:	2d00      	cmp	r5, #0
 800461c:	4607      	mov	r7, r0
 800461e:	db01      	blt.n	8004624 <_malloc_r+0x1c>
 8004620:	42a9      	cmp	r1, r5
 8004622:	d905      	bls.n	8004630 <_malloc_r+0x28>
 8004624:	230c      	movs	r3, #12
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	2600      	movs	r6, #0
 800462a:	4630      	mov	r0, r6
 800462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004630:	4e2e      	ldr	r6, [pc, #184]	; (80046ec <_malloc_r+0xe4>)
 8004632:	f000 fdbb 	bl	80051ac <__malloc_lock>
 8004636:	6833      	ldr	r3, [r6, #0]
 8004638:	461c      	mov	r4, r3
 800463a:	bb34      	cbnz	r4, 800468a <_malloc_r+0x82>
 800463c:	4629      	mov	r1, r5
 800463e:	4638      	mov	r0, r7
 8004640:	f7ff ffc2 	bl	80045c8 <sbrk_aligned>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	4604      	mov	r4, r0
 8004648:	d14d      	bne.n	80046e6 <_malloc_r+0xde>
 800464a:	6834      	ldr	r4, [r6, #0]
 800464c:	4626      	mov	r6, r4
 800464e:	2e00      	cmp	r6, #0
 8004650:	d140      	bne.n	80046d4 <_malloc_r+0xcc>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	4631      	mov	r1, r6
 8004656:	4638      	mov	r0, r7
 8004658:	eb04 0803 	add.w	r8, r4, r3
 800465c:	f000 fb36 	bl	8004ccc <_sbrk_r>
 8004660:	4580      	cmp	r8, r0
 8004662:	d13a      	bne.n	80046da <_malloc_r+0xd2>
 8004664:	6821      	ldr	r1, [r4, #0]
 8004666:	3503      	adds	r5, #3
 8004668:	1a6d      	subs	r5, r5, r1
 800466a:	f025 0503 	bic.w	r5, r5, #3
 800466e:	3508      	adds	r5, #8
 8004670:	2d0c      	cmp	r5, #12
 8004672:	bf38      	it	cc
 8004674:	250c      	movcc	r5, #12
 8004676:	4629      	mov	r1, r5
 8004678:	4638      	mov	r0, r7
 800467a:	f7ff ffa5 	bl	80045c8 <sbrk_aligned>
 800467e:	3001      	adds	r0, #1
 8004680:	d02b      	beq.n	80046da <_malloc_r+0xd2>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	442b      	add	r3, r5
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	e00e      	b.n	80046a8 <_malloc_r+0xa0>
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	1b52      	subs	r2, r2, r5
 800468e:	d41e      	bmi.n	80046ce <_malloc_r+0xc6>
 8004690:	2a0b      	cmp	r2, #11
 8004692:	d916      	bls.n	80046c2 <_malloc_r+0xba>
 8004694:	1961      	adds	r1, r4, r5
 8004696:	42a3      	cmp	r3, r4
 8004698:	6025      	str	r5, [r4, #0]
 800469a:	bf18      	it	ne
 800469c:	6059      	strne	r1, [r3, #4]
 800469e:	6863      	ldr	r3, [r4, #4]
 80046a0:	bf08      	it	eq
 80046a2:	6031      	streq	r1, [r6, #0]
 80046a4:	5162      	str	r2, [r4, r5]
 80046a6:	604b      	str	r3, [r1, #4]
 80046a8:	4638      	mov	r0, r7
 80046aa:	f104 060b 	add.w	r6, r4, #11
 80046ae:	f000 fd83 	bl	80051b8 <__malloc_unlock>
 80046b2:	f026 0607 	bic.w	r6, r6, #7
 80046b6:	1d23      	adds	r3, r4, #4
 80046b8:	1af2      	subs	r2, r6, r3
 80046ba:	d0b6      	beq.n	800462a <_malloc_r+0x22>
 80046bc:	1b9b      	subs	r3, r3, r6
 80046be:	50a3      	str	r3, [r4, r2]
 80046c0:	e7b3      	b.n	800462a <_malloc_r+0x22>
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	bf0c      	ite	eq
 80046c8:	6032      	streq	r2, [r6, #0]
 80046ca:	605a      	strne	r2, [r3, #4]
 80046cc:	e7ec      	b.n	80046a8 <_malloc_r+0xa0>
 80046ce:	4623      	mov	r3, r4
 80046d0:	6864      	ldr	r4, [r4, #4]
 80046d2:	e7b2      	b.n	800463a <_malloc_r+0x32>
 80046d4:	4634      	mov	r4, r6
 80046d6:	6876      	ldr	r6, [r6, #4]
 80046d8:	e7b9      	b.n	800464e <_malloc_r+0x46>
 80046da:	230c      	movs	r3, #12
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4638      	mov	r0, r7
 80046e0:	f000 fd6a 	bl	80051b8 <__malloc_unlock>
 80046e4:	e7a1      	b.n	800462a <_malloc_r+0x22>
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	e7de      	b.n	80046a8 <_malloc_r+0xa0>
 80046ea:	bf00      	nop
 80046ec:	20000144 	.word	0x20000144

080046f0 <__sfputc_r>:
 80046f0:	6893      	ldr	r3, [r2, #8]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	b410      	push	{r4}
 80046f8:	6093      	str	r3, [r2, #8]
 80046fa:	da08      	bge.n	800470e <__sfputc_r+0x1e>
 80046fc:	6994      	ldr	r4, [r2, #24]
 80046fe:	42a3      	cmp	r3, r4
 8004700:	db01      	blt.n	8004706 <__sfputc_r+0x16>
 8004702:	290a      	cmp	r1, #10
 8004704:	d103      	bne.n	800470e <__sfputc_r+0x1e>
 8004706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800470a:	f000 bb33 	b.w	8004d74 <__swbuf_r>
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	1c58      	adds	r0, r3, #1
 8004712:	6010      	str	r0, [r2, #0]
 8004714:	7019      	strb	r1, [r3, #0]
 8004716:	4608      	mov	r0, r1
 8004718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800471c:	4770      	bx	lr

0800471e <__sfputs_r>:
 800471e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004720:	4606      	mov	r6, r0
 8004722:	460f      	mov	r7, r1
 8004724:	4614      	mov	r4, r2
 8004726:	18d5      	adds	r5, r2, r3
 8004728:	42ac      	cmp	r4, r5
 800472a:	d101      	bne.n	8004730 <__sfputs_r+0x12>
 800472c:	2000      	movs	r0, #0
 800472e:	e007      	b.n	8004740 <__sfputs_r+0x22>
 8004730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004734:	463a      	mov	r2, r7
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffda 	bl	80046f0 <__sfputc_r>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d1f3      	bne.n	8004728 <__sfputs_r+0xa>
 8004740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004744 <_vfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	460d      	mov	r5, r1
 800474a:	b09d      	sub	sp, #116	; 0x74
 800474c:	4614      	mov	r4, r2
 800474e:	4698      	mov	r8, r3
 8004750:	4606      	mov	r6, r0
 8004752:	b118      	cbz	r0, 800475c <_vfiprintf_r+0x18>
 8004754:	6983      	ldr	r3, [r0, #24]
 8004756:	b90b      	cbnz	r3, 800475c <_vfiprintf_r+0x18>
 8004758:	f7ff fe96 	bl	8004488 <__sinit>
 800475c:	4b89      	ldr	r3, [pc, #548]	; (8004984 <_vfiprintf_r+0x240>)
 800475e:	429d      	cmp	r5, r3
 8004760:	d11b      	bne.n	800479a <_vfiprintf_r+0x56>
 8004762:	6875      	ldr	r5, [r6, #4]
 8004764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004766:	07d9      	lsls	r1, r3, #31
 8004768:	d405      	bmi.n	8004776 <_vfiprintf_r+0x32>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	059a      	lsls	r2, r3, #22
 800476e:	d402      	bmi.n	8004776 <_vfiprintf_r+0x32>
 8004770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004772:	f7ff ff27 	bl	80045c4 <__retarget_lock_acquire_recursive>
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	071b      	lsls	r3, r3, #28
 800477a:	d501      	bpl.n	8004780 <_vfiprintf_r+0x3c>
 800477c:	692b      	ldr	r3, [r5, #16]
 800477e:	b9eb      	cbnz	r3, 80047bc <_vfiprintf_r+0x78>
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f000 fb5a 	bl	8004e3c <__swsetup_r>
 8004788:	b1c0      	cbz	r0, 80047bc <_vfiprintf_r+0x78>
 800478a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800478c:	07dc      	lsls	r4, r3, #31
 800478e:	d50e      	bpl.n	80047ae <_vfiprintf_r+0x6a>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b01d      	add	sp, #116	; 0x74
 8004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479a:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <_vfiprintf_r+0x244>)
 800479c:	429d      	cmp	r5, r3
 800479e:	d101      	bne.n	80047a4 <_vfiprintf_r+0x60>
 80047a0:	68b5      	ldr	r5, [r6, #8]
 80047a2:	e7df      	b.n	8004764 <_vfiprintf_r+0x20>
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <_vfiprintf_r+0x248>)
 80047a6:	429d      	cmp	r5, r3
 80047a8:	bf08      	it	eq
 80047aa:	68f5      	ldreq	r5, [r6, #12]
 80047ac:	e7da      	b.n	8004764 <_vfiprintf_r+0x20>
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	0598      	lsls	r0, r3, #22
 80047b2:	d4ed      	bmi.n	8004790 <_vfiprintf_r+0x4c>
 80047b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047b6:	f7ff ff06 	bl	80045c6 <__retarget_lock_release_recursive>
 80047ba:	e7e9      	b.n	8004790 <_vfiprintf_r+0x4c>
 80047bc:	2300      	movs	r3, #0
 80047be:	9309      	str	r3, [sp, #36]	; 0x24
 80047c0:	2320      	movs	r3, #32
 80047c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ca:	2330      	movs	r3, #48	; 0x30
 80047cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004990 <_vfiprintf_r+0x24c>
 80047d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d4:	f04f 0901 	mov.w	r9, #1
 80047d8:	4623      	mov	r3, r4
 80047da:	469a      	mov	sl, r3
 80047dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047e0:	b10a      	cbz	r2, 80047e6 <_vfiprintf_r+0xa2>
 80047e2:	2a25      	cmp	r2, #37	; 0x25
 80047e4:	d1f9      	bne.n	80047da <_vfiprintf_r+0x96>
 80047e6:	ebba 0b04 	subs.w	fp, sl, r4
 80047ea:	d00b      	beq.n	8004804 <_vfiprintf_r+0xc0>
 80047ec:	465b      	mov	r3, fp
 80047ee:	4622      	mov	r2, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	4630      	mov	r0, r6
 80047f4:	f7ff ff93 	bl	800471e <__sfputs_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	f000 80aa 	beq.w	8004952 <_vfiprintf_r+0x20e>
 80047fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004800:	445a      	add	r2, fp
 8004802:	9209      	str	r2, [sp, #36]	; 0x24
 8004804:	f89a 3000 	ldrb.w	r3, [sl]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a2 	beq.w	8004952 <_vfiprintf_r+0x20e>
 800480e:	2300      	movs	r3, #0
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004818:	f10a 0a01 	add.w	sl, sl, #1
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	9307      	str	r3, [sp, #28]
 8004820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004824:	931a      	str	r3, [sp, #104]	; 0x68
 8004826:	4654      	mov	r4, sl
 8004828:	2205      	movs	r2, #5
 800482a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482e:	4858      	ldr	r0, [pc, #352]	; (8004990 <_vfiprintf_r+0x24c>)
 8004830:	f7fb fcde 	bl	80001f0 <memchr>
 8004834:	9a04      	ldr	r2, [sp, #16]
 8004836:	b9d8      	cbnz	r0, 8004870 <_vfiprintf_r+0x12c>
 8004838:	06d1      	lsls	r1, r2, #27
 800483a:	bf44      	itt	mi
 800483c:	2320      	movmi	r3, #32
 800483e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004842:	0713      	lsls	r3, r2, #28
 8004844:	bf44      	itt	mi
 8004846:	232b      	movmi	r3, #43	; 0x2b
 8004848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800484c:	f89a 3000 	ldrb.w	r3, [sl]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d015      	beq.n	8004880 <_vfiprintf_r+0x13c>
 8004854:	9a07      	ldr	r2, [sp, #28]
 8004856:	4654      	mov	r4, sl
 8004858:	2000      	movs	r0, #0
 800485a:	f04f 0c0a 	mov.w	ip, #10
 800485e:	4621      	mov	r1, r4
 8004860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004864:	3b30      	subs	r3, #48	; 0x30
 8004866:	2b09      	cmp	r3, #9
 8004868:	d94e      	bls.n	8004908 <_vfiprintf_r+0x1c4>
 800486a:	b1b0      	cbz	r0, 800489a <_vfiprintf_r+0x156>
 800486c:	9207      	str	r2, [sp, #28]
 800486e:	e014      	b.n	800489a <_vfiprintf_r+0x156>
 8004870:	eba0 0308 	sub.w	r3, r0, r8
 8004874:	fa09 f303 	lsl.w	r3, r9, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	46a2      	mov	sl, r4
 800487e:	e7d2      	b.n	8004826 <_vfiprintf_r+0xe2>
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	1d19      	adds	r1, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9103      	str	r1, [sp, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfbb      	ittet	lt
 800488c:	425b      	neglt	r3, r3
 800488e:	f042 0202 	orrlt.w	r2, r2, #2
 8004892:	9307      	strge	r3, [sp, #28]
 8004894:	9307      	strlt	r3, [sp, #28]
 8004896:	bfb8      	it	lt
 8004898:	9204      	strlt	r2, [sp, #16]
 800489a:	7823      	ldrb	r3, [r4, #0]
 800489c:	2b2e      	cmp	r3, #46	; 0x2e
 800489e:	d10c      	bne.n	80048ba <_vfiprintf_r+0x176>
 80048a0:	7863      	ldrb	r3, [r4, #1]
 80048a2:	2b2a      	cmp	r3, #42	; 0x2a
 80048a4:	d135      	bne.n	8004912 <_vfiprintf_r+0x1ce>
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	1d1a      	adds	r2, r3, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	9203      	str	r2, [sp, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80048b6:	3402      	adds	r4, #2
 80048b8:	9305      	str	r3, [sp, #20]
 80048ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049a0 <_vfiprintf_r+0x25c>
 80048be:	7821      	ldrb	r1, [r4, #0]
 80048c0:	2203      	movs	r2, #3
 80048c2:	4650      	mov	r0, sl
 80048c4:	f7fb fc94 	bl	80001f0 <memchr>
 80048c8:	b140      	cbz	r0, 80048dc <_vfiprintf_r+0x198>
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	eba0 000a 	sub.w	r0, r0, sl
 80048d0:	fa03 f000 	lsl.w	r0, r3, r0
 80048d4:	9b04      	ldr	r3, [sp, #16]
 80048d6:	4303      	orrs	r3, r0
 80048d8:	3401      	adds	r4, #1
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e0:	482c      	ldr	r0, [pc, #176]	; (8004994 <_vfiprintf_r+0x250>)
 80048e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e6:	2206      	movs	r2, #6
 80048e8:	f7fb fc82 	bl	80001f0 <memchr>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d03f      	beq.n	8004970 <_vfiprintf_r+0x22c>
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <_vfiprintf_r+0x254>)
 80048f2:	bb1b      	cbnz	r3, 800493c <_vfiprintf_r+0x1f8>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	3307      	adds	r3, #7
 80048f8:	f023 0307 	bic.w	r3, r3, #7
 80048fc:	3308      	adds	r3, #8
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004902:	443b      	add	r3, r7
 8004904:	9309      	str	r3, [sp, #36]	; 0x24
 8004906:	e767      	b.n	80047d8 <_vfiprintf_r+0x94>
 8004908:	fb0c 3202 	mla	r2, ip, r2, r3
 800490c:	460c      	mov	r4, r1
 800490e:	2001      	movs	r0, #1
 8004910:	e7a5      	b.n	800485e <_vfiprintf_r+0x11a>
 8004912:	2300      	movs	r3, #0
 8004914:	3401      	adds	r4, #1
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0c0a 	mov.w	ip, #10
 800491e:	4620      	mov	r0, r4
 8004920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004924:	3a30      	subs	r2, #48	; 0x30
 8004926:	2a09      	cmp	r2, #9
 8004928:	d903      	bls.n	8004932 <_vfiprintf_r+0x1ee>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0c5      	beq.n	80048ba <_vfiprintf_r+0x176>
 800492e:	9105      	str	r1, [sp, #20]
 8004930:	e7c3      	b.n	80048ba <_vfiprintf_r+0x176>
 8004932:	fb0c 2101 	mla	r1, ip, r1, r2
 8004936:	4604      	mov	r4, r0
 8004938:	2301      	movs	r3, #1
 800493a:	e7f0      	b.n	800491e <_vfiprintf_r+0x1da>
 800493c:	ab03      	add	r3, sp, #12
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	462a      	mov	r2, r5
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <_vfiprintf_r+0x258>)
 8004944:	a904      	add	r1, sp, #16
 8004946:	4630      	mov	r0, r6
 8004948:	f3af 8000 	nop.w
 800494c:	4607      	mov	r7, r0
 800494e:	1c78      	adds	r0, r7, #1
 8004950:	d1d6      	bne.n	8004900 <_vfiprintf_r+0x1bc>
 8004952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004954:	07d9      	lsls	r1, r3, #31
 8004956:	d405      	bmi.n	8004964 <_vfiprintf_r+0x220>
 8004958:	89ab      	ldrh	r3, [r5, #12]
 800495a:	059a      	lsls	r2, r3, #22
 800495c:	d402      	bmi.n	8004964 <_vfiprintf_r+0x220>
 800495e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004960:	f7ff fe31 	bl	80045c6 <__retarget_lock_release_recursive>
 8004964:	89ab      	ldrh	r3, [r5, #12]
 8004966:	065b      	lsls	r3, r3, #25
 8004968:	f53f af12 	bmi.w	8004790 <_vfiprintf_r+0x4c>
 800496c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496e:	e711      	b.n	8004794 <_vfiprintf_r+0x50>
 8004970:	ab03      	add	r3, sp, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	462a      	mov	r2, r5
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <_vfiprintf_r+0x258>)
 8004978:	a904      	add	r1, sp, #16
 800497a:	4630      	mov	r0, r6
 800497c:	f000 f880 	bl	8004a80 <_printf_i>
 8004980:	e7e4      	b.n	800494c <_vfiprintf_r+0x208>
 8004982:	bf00      	nop
 8004984:	080054d4 	.word	0x080054d4
 8004988:	080054f4 	.word	0x080054f4
 800498c:	080054b4 	.word	0x080054b4
 8004990:	08005514 	.word	0x08005514
 8004994:	0800551e 	.word	0x0800551e
 8004998:	00000000 	.word	0x00000000
 800499c:	0800471f 	.word	0x0800471f
 80049a0:	0800551a 	.word	0x0800551a

080049a4 <_printf_common>:
 80049a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a8:	4616      	mov	r6, r2
 80049aa:	4699      	mov	r9, r3
 80049ac:	688a      	ldr	r2, [r1, #8]
 80049ae:	690b      	ldr	r3, [r1, #16]
 80049b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b4:	4293      	cmp	r3, r2
 80049b6:	bfb8      	it	lt
 80049b8:	4613      	movlt	r3, r2
 80049ba:	6033      	str	r3, [r6, #0]
 80049bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c0:	4607      	mov	r7, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	b10a      	cbz	r2, 80049ca <_printf_common+0x26>
 80049c6:	3301      	adds	r3, #1
 80049c8:	6033      	str	r3, [r6, #0]
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	0699      	lsls	r1, r3, #26
 80049ce:	bf42      	ittt	mi
 80049d0:	6833      	ldrmi	r3, [r6, #0]
 80049d2:	3302      	addmi	r3, #2
 80049d4:	6033      	strmi	r3, [r6, #0]
 80049d6:	6825      	ldr	r5, [r4, #0]
 80049d8:	f015 0506 	ands.w	r5, r5, #6
 80049dc:	d106      	bne.n	80049ec <_printf_common+0x48>
 80049de:	f104 0a19 	add.w	sl, r4, #25
 80049e2:	68e3      	ldr	r3, [r4, #12]
 80049e4:	6832      	ldr	r2, [r6, #0]
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	42ab      	cmp	r3, r5
 80049ea:	dc26      	bgt.n	8004a3a <_printf_common+0x96>
 80049ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049f0:	1e13      	subs	r3, r2, #0
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	bf18      	it	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	0692      	lsls	r2, r2, #26
 80049fa:	d42b      	bmi.n	8004a54 <_printf_common+0xb0>
 80049fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a00:	4649      	mov	r1, r9
 8004a02:	4638      	mov	r0, r7
 8004a04:	47c0      	blx	r8
 8004a06:	3001      	adds	r0, #1
 8004a08:	d01e      	beq.n	8004a48 <_printf_common+0xa4>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	68e5      	ldr	r5, [r4, #12]
 8004a0e:	6832      	ldr	r2, [r6, #0]
 8004a10:	f003 0306 	and.w	r3, r3, #6
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	bf08      	it	eq
 8004a18:	1aad      	subeq	r5, r5, r2
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	6922      	ldr	r2, [r4, #16]
 8004a1e:	bf0c      	ite	eq
 8004a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a24:	2500      	movne	r5, #0
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bfc4      	itt	gt
 8004a2a:	1a9b      	subgt	r3, r3, r2
 8004a2c:	18ed      	addgt	r5, r5, r3
 8004a2e:	2600      	movs	r6, #0
 8004a30:	341a      	adds	r4, #26
 8004a32:	42b5      	cmp	r5, r6
 8004a34:	d11a      	bne.n	8004a6c <_printf_common+0xc8>
 8004a36:	2000      	movs	r0, #0
 8004a38:	e008      	b.n	8004a4c <_printf_common+0xa8>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4638      	mov	r0, r7
 8004a42:	47c0      	blx	r8
 8004a44:	3001      	adds	r0, #1
 8004a46:	d103      	bne.n	8004a50 <_printf_common+0xac>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	3501      	adds	r5, #1
 8004a52:	e7c6      	b.n	80049e2 <_printf_common+0x3e>
 8004a54:	18e1      	adds	r1, r4, r3
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	2030      	movs	r0, #48	; 0x30
 8004a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a5e:	4422      	add	r2, r4
 8004a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a68:	3302      	adds	r3, #2
 8004a6a:	e7c7      	b.n	80049fc <_printf_common+0x58>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4649      	mov	r1, r9
 8004a72:	4638      	mov	r0, r7
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d0e6      	beq.n	8004a48 <_printf_common+0xa4>
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	e7d9      	b.n	8004a32 <_printf_common+0x8e>
	...

08004a80 <_printf_i>:
 8004a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	7e0f      	ldrb	r7, [r1, #24]
 8004a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a88:	2f78      	cmp	r7, #120	; 0x78
 8004a8a:	4691      	mov	r9, r2
 8004a8c:	4680      	mov	r8, r0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	469a      	mov	sl, r3
 8004a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a96:	d807      	bhi.n	8004aa8 <_printf_i+0x28>
 8004a98:	2f62      	cmp	r7, #98	; 0x62
 8004a9a:	d80a      	bhi.n	8004ab2 <_printf_i+0x32>
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	f000 80d8 	beq.w	8004c52 <_printf_i+0x1d2>
 8004aa2:	2f58      	cmp	r7, #88	; 0x58
 8004aa4:	f000 80a3 	beq.w	8004bee <_printf_i+0x16e>
 8004aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ab0:	e03a      	b.n	8004b28 <_printf_i+0xa8>
 8004ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ab6:	2b15      	cmp	r3, #21
 8004ab8:	d8f6      	bhi.n	8004aa8 <_printf_i+0x28>
 8004aba:	a101      	add	r1, pc, #4	; (adr r1, 8004ac0 <_printf_i+0x40>)
 8004abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004aa9 	.word	0x08004aa9
 8004acc:	08004aa9 	.word	0x08004aa9
 8004ad0:	08004aa9 	.word	0x08004aa9
 8004ad4:	08004aa9 	.word	0x08004aa9
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004aa9 	.word	0x08004aa9
 8004ae0:	08004aa9 	.word	0x08004aa9
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004c39 	.word	0x08004c39
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004c1b 	.word	0x08004c1b
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004aa9 	.word	0x08004aa9
 8004b00:	08004c5b 	.word	0x08004c5b
 8004b04:	08004aa9 	.word	0x08004aa9
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004aa9 	.word	0x08004aa9
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004c23 	.word	0x08004c23
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	602a      	str	r2, [r5, #0]
 8004b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0a3      	b.n	8004c74 <_printf_i+0x1f4>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	6829      	ldr	r1, [r5, #0]
 8004b30:	0606      	lsls	r6, r0, #24
 8004b32:	f101 0304 	add.w	r3, r1, #4
 8004b36:	d50a      	bpl.n	8004b4e <_printf_i+0xce>
 8004b38:	680e      	ldr	r6, [r1, #0]
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	da03      	bge.n	8004b48 <_printf_i+0xc8>
 8004b40:	232d      	movs	r3, #45	; 0x2d
 8004b42:	4276      	negs	r6, r6
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	485e      	ldr	r0, [pc, #376]	; (8004cc4 <_printf_i+0x244>)
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	e019      	b.n	8004b82 <_printf_i+0x102>
 8004b4e:	680e      	ldr	r6, [r1, #0]
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b56:	bf18      	it	ne
 8004b58:	b236      	sxthne	r6, r6
 8004b5a:	e7ef      	b.n	8004b3c <_printf_i+0xbc>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	1d19      	adds	r1, r3, #4
 8004b62:	6029      	str	r1, [r5, #0]
 8004b64:	0601      	lsls	r1, r0, #24
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0xec>
 8004b68:	681e      	ldr	r6, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <_printf_i+0xf2>
 8004b6c:	0646      	lsls	r6, r0, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0xe8>
 8004b70:	881e      	ldrh	r6, [r3, #0]
 8004b72:	4854      	ldr	r0, [pc, #336]	; (8004cc4 <_printf_i+0x244>)
 8004b74:	2f6f      	cmp	r7, #111	; 0x6f
 8004b76:	bf0c      	ite	eq
 8004b78:	2308      	moveq	r3, #8
 8004b7a:	230a      	movne	r3, #10
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b82:	6865      	ldr	r5, [r4, #4]
 8004b84:	60a5      	str	r5, [r4, #8]
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	bfa2      	ittt	ge
 8004b8a:	6821      	ldrge	r1, [r4, #0]
 8004b8c:	f021 0104 	bicge.w	r1, r1, #4
 8004b90:	6021      	strge	r1, [r4, #0]
 8004b92:	b90e      	cbnz	r6, 8004b98 <_printf_i+0x118>
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	d04d      	beq.n	8004c34 <_printf_i+0x1b4>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8004ba2:	5dc7      	ldrb	r7, [r0, r7]
 8004ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ba8:	4637      	mov	r7, r6
 8004baa:	42bb      	cmp	r3, r7
 8004bac:	460e      	mov	r6, r1
 8004bae:	d9f4      	bls.n	8004b9a <_printf_i+0x11a>
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d10b      	bne.n	8004bcc <_printf_i+0x14c>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	07de      	lsls	r6, r3, #31
 8004bb8:	d508      	bpl.n	8004bcc <_printf_i+0x14c>
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	6861      	ldr	r1, [r4, #4]
 8004bbe:	4299      	cmp	r1, r3
 8004bc0:	bfde      	ittt	le
 8004bc2:	2330      	movle	r3, #48	; 0x30
 8004bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bcc:	1b52      	subs	r2, r2, r5
 8004bce:	6122      	str	r2, [r4, #16]
 8004bd0:	f8cd a000 	str.w	sl, [sp]
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	aa03      	add	r2, sp, #12
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f7ff fee2 	bl	80049a4 <_printf_common>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d14c      	bne.n	8004c7e <_printf_i+0x1fe>
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	b004      	add	sp, #16
 8004bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bee:	4835      	ldr	r0, [pc, #212]	; (8004cc4 <_printf_i+0x244>)
 8004bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bf4:	6829      	ldr	r1, [r5, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bfc:	6029      	str	r1, [r5, #0]
 8004bfe:	061d      	lsls	r5, r3, #24
 8004c00:	d514      	bpl.n	8004c2c <_printf_i+0x1ac>
 8004c02:	07df      	lsls	r7, r3, #31
 8004c04:	bf44      	itt	mi
 8004c06:	f043 0320 	orrmi.w	r3, r3, #32
 8004c0a:	6023      	strmi	r3, [r4, #0]
 8004c0c:	b91e      	cbnz	r6, 8004c16 <_printf_i+0x196>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	f023 0320 	bic.w	r3, r3, #32
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	2310      	movs	r3, #16
 8004c18:	e7b0      	b.n	8004b7c <_printf_i+0xfc>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f043 0320 	orr.w	r3, r3, #32
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	2378      	movs	r3, #120	; 0x78
 8004c24:	4828      	ldr	r0, [pc, #160]	; (8004cc8 <_printf_i+0x248>)
 8004c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c2a:	e7e3      	b.n	8004bf4 <_printf_i+0x174>
 8004c2c:	0659      	lsls	r1, r3, #25
 8004c2e:	bf48      	it	mi
 8004c30:	b2b6      	uxthmi	r6, r6
 8004c32:	e7e6      	b.n	8004c02 <_printf_i+0x182>
 8004c34:	4615      	mov	r5, r2
 8004c36:	e7bb      	b.n	8004bb0 <_printf_i+0x130>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6826      	ldr	r6, [r4, #0]
 8004c3c:	6961      	ldr	r1, [r4, #20]
 8004c3e:	1d18      	adds	r0, r3, #4
 8004c40:	6028      	str	r0, [r5, #0]
 8004c42:	0635      	lsls	r5, r6, #24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0x1cc>
 8004c48:	6019      	str	r1, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <_printf_i+0x1d2>
 8004c4c:	0670      	lsls	r0, r6, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0x1c8>
 8004c50:	8019      	strh	r1, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	4615      	mov	r5, r2
 8004c58:	e7ba      	b.n	8004bd0 <_printf_i+0x150>
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	602a      	str	r2, [r5, #0]
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7fb fac2 	bl	80001f0 <memchr>
 8004c6c:	b108      	cbz	r0, 8004c72 <_printf_i+0x1f2>
 8004c6e:	1b40      	subs	r0, r0, r5
 8004c70:	6060      	str	r0, [r4, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	2300      	movs	r3, #0
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7c:	e7a8      	b.n	8004bd0 <_printf_i+0x150>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	462a      	mov	r2, r5
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d0ab      	beq.n	8004be4 <_printf_i+0x164>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	079b      	lsls	r3, r3, #30
 8004c90:	d413      	bmi.n	8004cba <_printf_i+0x23a>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	4298      	cmp	r0, r3
 8004c98:	bfb8      	it	lt
 8004c9a:	4618      	movlt	r0, r3
 8004c9c:	e7a4      	b.n	8004be8 <_printf_i+0x168>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	47d0      	blx	sl
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d09b      	beq.n	8004be4 <_printf_i+0x164>
 8004cac:	3501      	adds	r5, #1
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	9903      	ldr	r1, [sp, #12]
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dcf2      	bgt.n	8004c9e <_printf_i+0x21e>
 8004cb8:	e7eb      	b.n	8004c92 <_printf_i+0x212>
 8004cba:	2500      	movs	r5, #0
 8004cbc:	f104 0619 	add.w	r6, r4, #25
 8004cc0:	e7f5      	b.n	8004cae <_printf_i+0x22e>
 8004cc2:	bf00      	nop
 8004cc4:	08005525 	.word	0x08005525
 8004cc8:	08005536 	.word	0x08005536

08004ccc <_sbrk_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d06      	ldr	r5, [pc, #24]	; (8004ce8 <_sbrk_r+0x1c>)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	f7fb feb4 	bl	8000a44 <_sbrk>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_sbrk_r+0x1a>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_sbrk_r+0x1a>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	2000014c 	.word	0x2000014c

08004cec <__sread>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	460c      	mov	r4, r1
 8004cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf4:	f000 fab2 	bl	800525c <_read_r>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	bfab      	itete	ge
 8004cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8004d00:	181b      	addge	r3, r3, r0
 8004d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d06:	bfac      	ite	ge
 8004d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d0a:	81a3      	strhlt	r3, [r4, #12]
 8004d0c:	bd10      	pop	{r4, pc}

08004d0e <__swrite>:
 8004d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	461f      	mov	r7, r3
 8004d14:	898b      	ldrh	r3, [r1, #12]
 8004d16:	05db      	lsls	r3, r3, #23
 8004d18:	4605      	mov	r5, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	d505      	bpl.n	8004d2c <__swrite+0x1e>
 8004d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d24:	2302      	movs	r3, #2
 8004d26:	2200      	movs	r2, #0
 8004d28:	f000 f9c8 	bl	80050bc <_lseek_r>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	4632      	mov	r2, r6
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	f000 b869 	b.w	8004e18 <_write_r>

08004d46 <__sseek>:
 8004d46:	b510      	push	{r4, lr}
 8004d48:	460c      	mov	r4, r1
 8004d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4e:	f000 f9b5 	bl	80050bc <_lseek_r>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	bf15      	itete	ne
 8004d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d62:	81a3      	strheq	r3, [r4, #12]
 8004d64:	bf18      	it	ne
 8004d66:	81a3      	strhne	r3, [r4, #12]
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <__sclose>:
 8004d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6e:	f000 b8d3 	b.w	8004f18 <_close_r>
	...

08004d74 <__swbuf_r>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	460e      	mov	r6, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	b118      	cbz	r0, 8004d86 <__swbuf_r+0x12>
 8004d7e:	6983      	ldr	r3, [r0, #24]
 8004d80:	b90b      	cbnz	r3, 8004d86 <__swbuf_r+0x12>
 8004d82:	f7ff fb81 	bl	8004488 <__sinit>
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <__swbuf_r+0x98>)
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	d12b      	bne.n	8004de4 <__swbuf_r+0x70>
 8004d8c:	686c      	ldr	r4, [r5, #4]
 8004d8e:	69a3      	ldr	r3, [r4, #24]
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	071a      	lsls	r2, r3, #28
 8004d96:	d52f      	bpl.n	8004df8 <__swbuf_r+0x84>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	b36b      	cbz	r3, 8004df8 <__swbuf_r+0x84>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	1ac0      	subs	r0, r0, r3
 8004da2:	6963      	ldr	r3, [r4, #20]
 8004da4:	b2f6      	uxtb	r6, r6
 8004da6:	4283      	cmp	r3, r0
 8004da8:	4637      	mov	r7, r6
 8004daa:	dc04      	bgt.n	8004db6 <__swbuf_r+0x42>
 8004dac:	4621      	mov	r1, r4
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 f948 	bl	8005044 <_fflush_r>
 8004db4:	bb30      	cbnz	r0, 8004e04 <__swbuf_r+0x90>
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	60a3      	str	r3, [r4, #8]
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	701e      	strb	r6, [r3, #0]
 8004dc4:	6963      	ldr	r3, [r4, #20]
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	4283      	cmp	r3, r0
 8004dca:	d004      	beq.n	8004dd6 <__swbuf_r+0x62>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	07db      	lsls	r3, r3, #31
 8004dd0:	d506      	bpl.n	8004de0 <__swbuf_r+0x6c>
 8004dd2:	2e0a      	cmp	r6, #10
 8004dd4:	d104      	bne.n	8004de0 <__swbuf_r+0x6c>
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f000 f933 	bl	8005044 <_fflush_r>
 8004dde:	b988      	cbnz	r0, 8004e04 <__swbuf_r+0x90>
 8004de0:	4638      	mov	r0, r7
 8004de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de4:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <__swbuf_r+0x9c>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d101      	bne.n	8004dee <__swbuf_r+0x7a>
 8004dea:	68ac      	ldr	r4, [r5, #8]
 8004dec:	e7cf      	b.n	8004d8e <__swbuf_r+0x1a>
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <__swbuf_r+0xa0>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	bf08      	it	eq
 8004df4:	68ec      	ldreq	r4, [r5, #12]
 8004df6:	e7ca      	b.n	8004d8e <__swbuf_r+0x1a>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f81e 	bl	8004e3c <__swsetup_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0cb      	beq.n	8004d9c <__swbuf_r+0x28>
 8004e04:	f04f 37ff 	mov.w	r7, #4294967295
 8004e08:	e7ea      	b.n	8004de0 <__swbuf_r+0x6c>
 8004e0a:	bf00      	nop
 8004e0c:	080054d4 	.word	0x080054d4
 8004e10:	080054f4 	.word	0x080054f4
 8004e14:	080054b4 	.word	0x080054b4

08004e18 <_write_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4d07      	ldr	r5, [pc, #28]	; (8004e38 <_write_r+0x20>)
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	4608      	mov	r0, r1
 8004e20:	4611      	mov	r1, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	602a      	str	r2, [r5, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f7fb fdbb 	bl	80009a2 <_write>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_write_r+0x1e>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_write_r+0x1e>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	2000014c 	.word	0x2000014c

08004e3c <__swsetup_r>:
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <__swsetup_r+0xcc>)
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	b125      	cbz	r5, 8004e52 <__swsetup_r+0x16>
 8004e48:	69ab      	ldr	r3, [r5, #24]
 8004e4a:	b913      	cbnz	r3, 8004e52 <__swsetup_r+0x16>
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7ff fb1b 	bl	8004488 <__sinit>
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <__swsetup_r+0xd0>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	d10f      	bne.n	8004e78 <__swsetup_r+0x3c>
 8004e58:	686c      	ldr	r4, [r5, #4]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e60:	0719      	lsls	r1, r3, #28
 8004e62:	d42c      	bmi.n	8004ebe <__swsetup_r+0x82>
 8004e64:	06dd      	lsls	r5, r3, #27
 8004e66:	d411      	bmi.n	8004e8c <__swsetup_r+0x50>
 8004e68:	2309      	movs	r3, #9
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	e03e      	b.n	8004ef6 <__swsetup_r+0xba>
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <__swsetup_r+0xd4>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d101      	bne.n	8004e82 <__swsetup_r+0x46>
 8004e7e:	68ac      	ldr	r4, [r5, #8]
 8004e80:	e7eb      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <__swsetup_r+0xd8>)
 8004e84:	429c      	cmp	r4, r3
 8004e86:	bf08      	it	eq
 8004e88:	68ec      	ldreq	r4, [r5, #12]
 8004e8a:	e7e6      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e8c:	0758      	lsls	r0, r3, #29
 8004e8e:	d512      	bpl.n	8004eb6 <__swsetup_r+0x7a>
 8004e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e92:	b141      	cbz	r1, 8004ea6 <__swsetup_r+0x6a>
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d002      	beq.n	8004ea2 <__swsetup_r+0x66>
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 f991 	bl	80051c4 <_free_r>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	b94b      	cbnz	r3, 8004ed6 <__swsetup_r+0x9a>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d003      	beq.n	8004ed6 <__swsetup_r+0x9a>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f92b 	bl	800512c <__smakebuf_r>
 8004ed6:	89a0      	ldrh	r0, [r4, #12]
 8004ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004edc:	f010 0301 	ands.w	r3, r0, #1
 8004ee0:	d00a      	beq.n	8004ef8 <__swsetup_r+0xbc>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6963      	ldr	r3, [r4, #20]
 8004ee8:	425b      	negs	r3, r3
 8004eea:	61a3      	str	r3, [r4, #24]
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	b943      	cbnz	r3, 8004f02 <__swsetup_r+0xc6>
 8004ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef4:	d1ba      	bne.n	8004e6c <__swsetup_r+0x30>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	0781      	lsls	r1, r0, #30
 8004efa:	bf58      	it	pl
 8004efc:	6963      	ldrpl	r3, [r4, #20]
 8004efe:	60a3      	str	r3, [r4, #8]
 8004f00:	e7f4      	b.n	8004eec <__swsetup_r+0xb0>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7f7      	b.n	8004ef6 <__swsetup_r+0xba>
 8004f06:	bf00      	nop
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	080054d4 	.word	0x080054d4
 8004f10:	080054f4 	.word	0x080054f4
 8004f14:	080054b4 	.word	0x080054b4

08004f18 <_close_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_close_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fb fd59 	bl	80009da <_close>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_close_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_close_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	2000014c 	.word	0x2000014c

08004f38 <__sflush_r>:
 8004f38:	898a      	ldrh	r2, [r1, #12]
 8004f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	4605      	mov	r5, r0
 8004f40:	0710      	lsls	r0, r2, #28
 8004f42:	460c      	mov	r4, r1
 8004f44:	d458      	bmi.n	8004ff8 <__sflush_r+0xc0>
 8004f46:	684b      	ldr	r3, [r1, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dc05      	bgt.n	8004f58 <__sflush_r+0x20>
 8004f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	dc02      	bgt.n	8004f58 <__sflush_r+0x20>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	d0f9      	beq.n	8004f52 <__sflush_r+0x1a>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f64:	682f      	ldr	r7, [r5, #0]
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	d032      	beq.n	8004fd0 <__sflush_r+0x98>
 8004f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	075a      	lsls	r2, r3, #29
 8004f70:	d505      	bpl.n	8004f7e <__sflush_r+0x46>
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	1ac0      	subs	r0, r0, r3
 8004f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f78:	b10b      	cbz	r3, 8004f7e <__sflush_r+0x46>
 8004f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f7c:	1ac0      	subs	r0, r0, r3
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4602      	mov	r2, r0
 8004f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f84:	6a21      	ldr	r1, [r4, #32]
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b0      	blx	r6
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	d106      	bne.n	8004f9e <__sflush_r+0x66>
 8004f90:	6829      	ldr	r1, [r5, #0]
 8004f92:	291d      	cmp	r1, #29
 8004f94:	d82c      	bhi.n	8004ff0 <__sflush_r+0xb8>
 8004f96:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <__sflush_r+0x108>)
 8004f98:	40ca      	lsrs	r2, r1
 8004f9a:	07d6      	lsls	r6, r2, #31
 8004f9c:	d528      	bpl.n	8004ff0 <__sflush_r+0xb8>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	6062      	str	r2, [r4, #4]
 8004fa2:	04d9      	lsls	r1, r3, #19
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	d504      	bpl.n	8004fb4 <__sflush_r+0x7c>
 8004faa:	1c42      	adds	r2, r0, #1
 8004fac:	d101      	bne.n	8004fb2 <__sflush_r+0x7a>
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	b903      	cbnz	r3, 8004fb4 <__sflush_r+0x7c>
 8004fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8004fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb6:	602f      	str	r7, [r5, #0]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d0ca      	beq.n	8004f52 <__sflush_r+0x1a>
 8004fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	d002      	beq.n	8004fca <__sflush_r+0x92>
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f8fd 	bl	80051c4 <_free_r>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8004fce:	e7c1      	b.n	8004f54 <__sflush_r+0x1c>
 8004fd0:	6a21      	ldr	r1, [r4, #32]
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b0      	blx	r6
 8004fd8:	1c41      	adds	r1, r0, #1
 8004fda:	d1c7      	bne.n	8004f6c <__sflush_r+0x34>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0c4      	beq.n	8004f6c <__sflush_r+0x34>
 8004fe2:	2b1d      	cmp	r3, #29
 8004fe4:	d001      	beq.n	8004fea <__sflush_r+0xb2>
 8004fe6:	2b16      	cmp	r3, #22
 8004fe8:	d101      	bne.n	8004fee <__sflush_r+0xb6>
 8004fea:	602f      	str	r7, [r5, #0]
 8004fec:	e7b1      	b.n	8004f52 <__sflush_r+0x1a>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	e7ad      	b.n	8004f54 <__sflush_r+0x1c>
 8004ff8:	690f      	ldr	r7, [r1, #16]
 8004ffa:	2f00      	cmp	r7, #0
 8004ffc:	d0a9      	beq.n	8004f52 <__sflush_r+0x1a>
 8004ffe:	0793      	lsls	r3, r2, #30
 8005000:	680e      	ldr	r6, [r1, #0]
 8005002:	bf08      	it	eq
 8005004:	694b      	ldreq	r3, [r1, #20]
 8005006:	600f      	str	r7, [r1, #0]
 8005008:	bf18      	it	ne
 800500a:	2300      	movne	r3, #0
 800500c:	eba6 0807 	sub.w	r8, r6, r7
 8005010:	608b      	str	r3, [r1, #8]
 8005012:	f1b8 0f00 	cmp.w	r8, #0
 8005016:	dd9c      	ble.n	8004f52 <__sflush_r+0x1a>
 8005018:	6a21      	ldr	r1, [r4, #32]
 800501a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800501c:	4643      	mov	r3, r8
 800501e:	463a      	mov	r2, r7
 8005020:	4628      	mov	r0, r5
 8005022:	47b0      	blx	r6
 8005024:	2800      	cmp	r0, #0
 8005026:	dc06      	bgt.n	8005036 <__sflush_r+0xfe>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e78e      	b.n	8004f54 <__sflush_r+0x1c>
 8005036:	4407      	add	r7, r0
 8005038:	eba8 0800 	sub.w	r8, r8, r0
 800503c:	e7e9      	b.n	8005012 <__sflush_r+0xda>
 800503e:	bf00      	nop
 8005040:	20400001 	.word	0x20400001

08005044 <_fflush_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	4605      	mov	r5, r0
 800504a:	460c      	mov	r4, r1
 800504c:	b913      	cbnz	r3, 8005054 <_fflush_r+0x10>
 800504e:	2500      	movs	r5, #0
 8005050:	4628      	mov	r0, r5
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	b118      	cbz	r0, 800505e <_fflush_r+0x1a>
 8005056:	6983      	ldr	r3, [r0, #24]
 8005058:	b90b      	cbnz	r3, 800505e <_fflush_r+0x1a>
 800505a:	f7ff fa15 	bl	8004488 <__sinit>
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <_fflush_r+0x6c>)
 8005060:	429c      	cmp	r4, r3
 8005062:	d11b      	bne.n	800509c <_fflush_r+0x58>
 8005064:	686c      	ldr	r4, [r5, #4]
 8005066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0ef      	beq.n	800504e <_fflush_r+0xa>
 800506e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005070:	07d0      	lsls	r0, r2, #31
 8005072:	d404      	bmi.n	800507e <_fflush_r+0x3a>
 8005074:	0599      	lsls	r1, r3, #22
 8005076:	d402      	bmi.n	800507e <_fflush_r+0x3a>
 8005078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507a:	f7ff faa3 	bl	80045c4 <__retarget_lock_acquire_recursive>
 800507e:	4628      	mov	r0, r5
 8005080:	4621      	mov	r1, r4
 8005082:	f7ff ff59 	bl	8004f38 <__sflush_r>
 8005086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005088:	07da      	lsls	r2, r3, #31
 800508a:	4605      	mov	r5, r0
 800508c:	d4e0      	bmi.n	8005050 <_fflush_r+0xc>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	059b      	lsls	r3, r3, #22
 8005092:	d4dd      	bmi.n	8005050 <_fflush_r+0xc>
 8005094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005096:	f7ff fa96 	bl	80045c6 <__retarget_lock_release_recursive>
 800509a:	e7d9      	b.n	8005050 <_fflush_r+0xc>
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <_fflush_r+0x70>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <_fflush_r+0x62>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7df      	b.n	8005066 <_fflush_r+0x22>
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <_fflush_r+0x74>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7da      	b.n	8005066 <_fflush_r+0x22>
 80050b0:	080054d4 	.word	0x080054d4
 80050b4:	080054f4 	.word	0x080054f4
 80050b8:	080054b4 	.word	0x080054b4

080050bc <_lseek_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d07      	ldr	r5, [pc, #28]	; (80050dc <_lseek_r+0x20>)
 80050c0:	4604      	mov	r4, r0
 80050c2:	4608      	mov	r0, r1
 80050c4:	4611      	mov	r1, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f7fb fcac 	bl	8000a28 <_lseek>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_lseek_r+0x1e>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_lseek_r+0x1e>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	2000014c 	.word	0x2000014c

080050e0 <__swhatbuf_r>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	460e      	mov	r6, r1
 80050e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e8:	2900      	cmp	r1, #0
 80050ea:	b096      	sub	sp, #88	; 0x58
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	da08      	bge.n	8005104 <__swhatbuf_r+0x24>
 80050f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	061a      	lsls	r2, r3, #24
 80050fc:	d410      	bmi.n	8005120 <__swhatbuf_r+0x40>
 80050fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005102:	e00e      	b.n	8005122 <__swhatbuf_r+0x42>
 8005104:	466a      	mov	r2, sp
 8005106:	f000 f8bb 	bl	8005280 <_fstat_r>
 800510a:	2800      	cmp	r0, #0
 800510c:	dbf1      	blt.n	80050f2 <__swhatbuf_r+0x12>
 800510e:	9a01      	ldr	r2, [sp, #4]
 8005110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005118:	425a      	negs	r2, r3
 800511a:	415a      	adcs	r2, r3
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	e7ee      	b.n	80050fe <__swhatbuf_r+0x1e>
 8005120:	2340      	movs	r3, #64	; 0x40
 8005122:	2000      	movs	r0, #0
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	b016      	add	sp, #88	; 0x58
 8005128:	bd70      	pop	{r4, r5, r6, pc}
	...

0800512c <__smakebuf_r>:
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005130:	079d      	lsls	r5, r3, #30
 8005132:	4606      	mov	r6, r0
 8005134:	460c      	mov	r4, r1
 8005136:	d507      	bpl.n	8005148 <__smakebuf_r+0x1c>
 8005138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	2301      	movs	r3, #1
 8005142:	6163      	str	r3, [r4, #20]
 8005144:	b002      	add	sp, #8
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	ab01      	add	r3, sp, #4
 800514a:	466a      	mov	r2, sp
 800514c:	f7ff ffc8 	bl	80050e0 <__swhatbuf_r>
 8005150:	9900      	ldr	r1, [sp, #0]
 8005152:	4605      	mov	r5, r0
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff fa57 	bl	8004608 <_malloc_r>
 800515a:	b948      	cbnz	r0, 8005170 <__smakebuf_r+0x44>
 800515c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005160:	059a      	lsls	r2, r3, #22
 8005162:	d4ef      	bmi.n	8005144 <__smakebuf_r+0x18>
 8005164:	f023 0303 	bic.w	r3, r3, #3
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	e7e3      	b.n	8005138 <__smakebuf_r+0xc>
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <__smakebuf_r+0x7c>)
 8005172:	62b3      	str	r3, [r6, #40]	; 0x28
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	6020      	str	r0, [r4, #0]
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	6163      	str	r3, [r4, #20]
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	6120      	str	r0, [r4, #16]
 8005186:	b15b      	cbz	r3, 80051a0 <__smakebuf_r+0x74>
 8005188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518c:	4630      	mov	r0, r6
 800518e:	f000 f889 	bl	80052a4 <_isatty_r>
 8005192:	b128      	cbz	r0, 80051a0 <__smakebuf_r+0x74>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	89a0      	ldrh	r0, [r4, #12]
 80051a2:	4305      	orrs	r5, r0
 80051a4:	81a5      	strh	r5, [r4, #12]
 80051a6:	e7cd      	b.n	8005144 <__smakebuf_r+0x18>
 80051a8:	08004421 	.word	0x08004421

080051ac <__malloc_lock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__malloc_lock+0x8>)
 80051ae:	f7ff ba09 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	20000140 	.word	0x20000140

080051b8 <__malloc_unlock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_unlock+0x8>)
 80051ba:	f7ff ba04 	b.w	80045c6 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	20000140 	.word	0x20000140

080051c4 <_free_r>:
 80051c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051c6:	2900      	cmp	r1, #0
 80051c8:	d044      	beq.n	8005254 <_free_r+0x90>
 80051ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ce:	9001      	str	r0, [sp, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f1a1 0404 	sub.w	r4, r1, #4
 80051d6:	bfb8      	it	lt
 80051d8:	18e4      	addlt	r4, r4, r3
 80051da:	f7ff ffe7 	bl	80051ac <__malloc_lock>
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <_free_r+0x94>)
 80051e0:	9801      	ldr	r0, [sp, #4]
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	b933      	cbnz	r3, 80051f4 <_free_r+0x30>
 80051e6:	6063      	str	r3, [r4, #4]
 80051e8:	6014      	str	r4, [r2, #0]
 80051ea:	b003      	add	sp, #12
 80051ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f0:	f7ff bfe2 	b.w	80051b8 <__malloc_unlock>
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d908      	bls.n	800520a <_free_r+0x46>
 80051f8:	6825      	ldr	r5, [r4, #0]
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf01      	itttt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	1949      	addeq	r1, r1, r5
 8005206:	6021      	streq	r1, [r4, #0]
 8005208:	e7ed      	b.n	80051e6 <_free_r+0x22>
 800520a:	461a      	mov	r2, r3
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b10b      	cbz	r3, 8005214 <_free_r+0x50>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d9fa      	bls.n	800520a <_free_r+0x46>
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	1855      	adds	r5, r2, r1
 8005218:	42a5      	cmp	r5, r4
 800521a:	d10b      	bne.n	8005234 <_free_r+0x70>
 800521c:	6824      	ldr	r4, [r4, #0]
 800521e:	4421      	add	r1, r4
 8005220:	1854      	adds	r4, r2, r1
 8005222:	42a3      	cmp	r3, r4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	d1e0      	bne.n	80051ea <_free_r+0x26>
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	4421      	add	r1, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	e7da      	b.n	80051ea <_free_r+0x26>
 8005234:	d902      	bls.n	800523c <_free_r+0x78>
 8005236:	230c      	movs	r3, #12
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	e7d6      	b.n	80051ea <_free_r+0x26>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	1961      	adds	r1, r4, r5
 8005240:	428b      	cmp	r3, r1
 8005242:	bf04      	itt	eq
 8005244:	6819      	ldreq	r1, [r3, #0]
 8005246:	685b      	ldreq	r3, [r3, #4]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	bf04      	itt	eq
 800524c:	1949      	addeq	r1, r1, r5
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	6054      	str	r4, [r2, #4]
 8005252:	e7ca      	b.n	80051ea <_free_r+0x26>
 8005254:	b003      	add	sp, #12
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	20000144 	.word	0x20000144

0800525c <_read_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_read_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fb fb7c 	bl	8000968 <_read>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_read_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_read_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	2000014c 	.word	0x2000014c

08005280 <_fstat_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	; (80052a0 <_fstat_r+0x20>)
 8005284:	2300      	movs	r3, #0
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	f7fb fbb0 	bl	80009f2 <_fstat>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d102      	bne.n	800529c <_fstat_r+0x1c>
 8005296:	682b      	ldr	r3, [r5, #0]
 8005298:	b103      	cbz	r3, 800529c <_fstat_r+0x1c>
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	bd38      	pop	{r3, r4, r5, pc}
 800529e:	bf00      	nop
 80052a0:	2000014c 	.word	0x2000014c

080052a4 <_isatty_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d06      	ldr	r5, [pc, #24]	; (80052c0 <_isatty_r+0x1c>)
 80052a8:	2300      	movs	r3, #0
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	f7fb fbaf 	bl	8000a12 <_isatty>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_isatty_r+0x1a>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_isatty_r+0x1a>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	2000014c 	.word	0x2000014c

080052c4 <_init>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr

080052d0 <_fini>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr
