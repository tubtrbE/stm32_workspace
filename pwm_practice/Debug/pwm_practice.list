
pwm_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b54  08005b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000289d  00000000  00000000  00030e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e08  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025965  00000000  00000000  00035450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001297a  00000000  00000000  0005adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e17c9  00000000  00000000  0006d72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eef8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045d8  00000000  00000000  0014ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005454 	.word	0x08005454

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005454 	.word	0x08005454

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_GPIO_Init+0xac>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a23      	ldr	r2, [pc, #140]	; (8000650 <MX_GPIO_Init+0xac>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_GPIO_Init+0xac>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_GPIO_Init+0xac>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_GPIO_Init+0xac>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_GPIO_Init+0xac>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_GPIO_Init+0xac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_GPIO_Init+0xac>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_GPIO_Init+0xac>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_GPIO_Init+0xac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <MX_GPIO_Init+0xac>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_GPIO_Init+0xac>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800062a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000630:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0xb0>)
 8000642:	f000 ff91 	bl	8001568 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40020800 	.word	0x40020800

08000658 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <__io_putchar+0x20>)
 8000668:	f002 ff5f 	bl	800352a <HAL_UART_Transmit>
	return ch;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000f8 	.word	0x200000f8

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	f2ad 6d04 	subw	sp, sp, #1540	; 0x604
 8000682:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fd5a 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f8aa 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f7ff ff8a 	bl	80005a4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000690:	f000 fa3a 	bl	8000b08 <MX_RTC_Init>
  MX_TIM3_Init();
 8000694:	f000 fb9a 	bl	8000dcc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fcb4 	bl	8001004 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800069c:	f000 f912 	bl	80008c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	484c      	ldr	r0, [pc, #304]	; (80007d4 <main+0x158>)
 80006a4:	f002 f916 	bl	80028d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	484a      	ldr	r0, [pc, #296]	; (80007d4 <main+0x158>)
 80006ac:	f002 f912 	bl	80028d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006b0:	2108      	movs	r1, #8
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <main+0x158>)
 80006b4:	f002 f90e 	bl	80028d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80006b8:	210c      	movs	r1, #12
 80006ba:	4846      	ldr	r0, [pc, #280]	; (80007d4 <main+0x158>)
 80006bc:	f002 f90a 	bl	80028d4 <HAL_TIM_PWM_Start>


	char *verse1[] = {
 80006c0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80006c4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80006c8:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <main+0x15c>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	4611      	mov	r1, r2
 80006ce:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80006d2:	461a      	mov	r2, r3
 80006d4:	f003 ff1a 	bl	800450c <memcpy>
			//노래끝
			"0",
	///////////////////////////////////////////////////////////
			};

	int verse1_time[] = {
 80006d8:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80006dc:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80006e0:	4a3e      	ldr	r2, [pc, #248]	; (80007dc <main+0x160>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	4611      	mov	r1, r2
 80006e6:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 80006ea:	461a      	mov	r2, r3
 80006ec:	f003 ff0e 	bl	800450c <memcpy>
//				break;
//			}
//		}


		int i = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
		int j = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
		int count_time = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
		while (strlen(verse1[i]) == 3) {
 8000702:	e055      	b.n	80007b0 <main+0x134>
			int time = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
			char tempP = verse1[i][0];
 800070a:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800070e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8000712:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8000716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f887 35e7 	strb.w	r3, [r7, #1511]	; 0x5e7
			char tempO = verse1[i][1];
 8000720:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000724:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8000728:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800072c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	f887 35e6 	strb.w	r3, [r7, #1510]	; 0x5e6
			char tempT = verse1[i][2];
 8000736:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800073a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800073e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8000742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	f887 35e5 	strb.w	r3, [r7, #1509]	; 0x5e5
				time = verse1_time[count_time];
 800074c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000750:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8000754:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8000758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800075c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
				count_time++;
 8000760:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8000764:	3301      	adds	r3, #1
 8000766:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				note(tempP, tempO, tempT, 2000 / time, 4);
 800076a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800076e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000772:	fb92 f3f3 	sdiv	r3, r2, r3
 8000776:	f897 25e5 	ldrb.w	r2, [r7, #1509]	; 0x5e5
 800077a:	f897 15e6 	ldrb.w	r1, [r7, #1510]	; 0x5e6
 800077e:	f897 05e7 	ldrb.w	r0, [r7, #1511]	; 0x5e7
 8000782:	2404      	movs	r4, #4
 8000784:	9400      	str	r4, [sp, #0]
 8000786:	f000 f8a9 	bl	80008dc <note>
				i++;
 800078a:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800078e:	3301      	adds	r3, #1
 8000790:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
				if (strlen(verse1[i]) == 1){
 8000794:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000798:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800079c:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80007a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd23 	bl	80001f0 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d00e      	beq.n	80007ce <main+0x152>
		while (strlen(verse1[i]) == 3) {
 80007b0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80007b4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80007b8:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80007bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd15 	bl	80001f0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d09b      	beq.n	8000704 <main+0x88>
 80007cc:	e790      	b.n	80006f0 <main+0x74>
				break;
 80007ce:	bf00      	nop
	while (1) {
 80007d0:	e78e      	b.n	80006f0 <main+0x74>
 80007d2:	bf00      	nop
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	080054a4 	.word	0x080054a4
 80007dc:	08005798 	.word	0x08005798

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fe9a 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <SystemClock_Config+0xdc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <SystemClock_Config+0xdc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xdc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <SystemClock_Config+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <SystemClock_Config+0xe0>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xe0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800083c:	2306      	movs	r3, #6
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000854:	2308      	movs	r3, #8
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000858:	23b4      	movs	r3, #180	; 0xb4
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f879 	bl	8001960 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000874:	f000 f942 	bl	8000afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000878:	f001 f822 	bl	80018c0 <HAL_PWREx_EnableOverDrive>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000882:	f000 f93b 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2105      	movs	r1, #5
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fad3 	bl	8001e50 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b0:	f000 f924 	bl	8000afc <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2027      	movs	r0, #39	; 0x27
 80008ce:	f000 fd82 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008d2:	2027      	movs	r0, #39	; 0x27
 80008d4:	f000 fd9b 	bl	800140e <HAL_NVIC_EnableIRQ>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <note>:

/* USER CODE BEGIN 4 */
void note(char pitch_text, char octave_text, char temp_text, int time, int volume) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	460b      	mov	r3, r1
 80008ea:	71bb      	strb	r3, [r7, #6]
 80008ec:	4613      	mov	r3, r2
 80008ee:	717b      	strb	r3, [r7, #5]


	int pitch = pitch_change(pitch_text);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f89e 	bl	8000a34 <pitch_change>
 80008f8:	4603      	mov	r3, r0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
	int octave = octave_change(octave_text);
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f8d3 	bl	8000aaa <octave_change>
 8000904:	4603      	mov	r3, r0
 8000906:	61bb      	str	r3, [r7, #24]
	int temp = temp_change(temp_text);
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f8da 	bl	8000ac4 <temp_change>
 8000910:	4603      	mov	r3, r0
 8000912:	617b      	str	r3, [r7, #20]

//	printf("%d %d %d %d %d\n\r", pitch, octave, temp, time, volume);


	uint32_t start_tick = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
	uint32_t cur_tick = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
	uint32_t tick_gap = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]

	// 1/1000 is enough to turn off the volume
	if (pitch == 0) {
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <note+0x50>
		volume = 2000;
 8000926:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
	}

	// avoid error(ARR == CCR)
	if (volume <= 2) {
 800092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092e:	2b02      	cmp	r3, #2
 8000930:	dc01      	bgt.n	8000936 <note+0x5a>
		volume = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
	}

	// setting the octave
	if (octave != 4) {
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d022      	beq.n	8000982 <note+0xa6>
		if (octave < 4) {
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2b03      	cmp	r3, #3
 8000940:	dc0f      	bgt.n	8000962 <note+0x86>
			for (int i = 0; i < 4 - octave; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
 8000946:	e005      	b.n	8000954 <note+0x78>
				pitch *= 2;
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < 4 - octave; i++) {
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3301      	adds	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	f1c3 0304 	rsb	r3, r3, #4
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf3      	blt.n	8000948 <note+0x6c>
 8000960:	e00f      	b.n	8000982 <note+0xa6>
			}
		} else {
			for (int i = 0; i < octave - 4; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e007      	b.n	8000978 <note+0x9c>
				pitch /= 2;
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	0fda      	lsrs	r2, r3, #31
 800096c:	4413      	add	r3, r2
 800096e:	105b      	asrs	r3, r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < octave - 4; i++) {
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3301      	adds	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3b04      	subs	r3, #4
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	429a      	cmp	r2, r3
 8000980:	dbf2      	blt.n	8000968 <note+0x8c>
			}
		}
	}

	TIM3->ARR = pitch;
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <note+0x148>)
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR1 = pitch / volume;
 8000988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800098c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <note+0x148>)
 8000992:	635a      	str	r2, [r3, #52]	; 0x34

	start_tick = HAL_GetTick();
 8000994:	f000 fc38 	bl	8001208 <HAL_GetTick>
 8000998:	6138      	str	r0, [r7, #16]
	tick_gap = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
	while (tick_gap >= 0) {
		cur_tick = HAL_GetTick();
 800099e:	f000 fc33 	bl	8001208 <HAL_GetTick>
 80009a2:	60f8      	str	r0, [r7, #12]
		tick_gap = cur_tick - start_tick;
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	60bb      	str	r3, [r7, #8]
		TIM3->CCR1 = pitch / volume;
 80009ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <note+0x148>)
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34

		if (tick_gap >= time) {
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d304      	bcc.n	80009ca <note+0xee>
			volume = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
			tick_gap = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
			break;
 80009c8:	e028      	b.n	8000a1c <note+0x140>
		}
		// if printf is not activated this while loop doesnt work correctly
		printf("%d %d %d %d %d\n\r", pitch, octave, temp, time, volume);
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <note+0x14c>)
 80009da:	f003 fdad 	bl	8004538 <iprintf>
//		printf("tick_gap : %d\r\n", tick_gap);
//		printf("\r\n");
		if (tick_gap % 5 == 0 || tick_gap % 4 == 0 || tick_gap % 3 == 0) {
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <note+0x150>)
 80009e2:	fba3 2301 	umull	r2, r3, r3, r1
 80009e6:	089a      	lsrs	r2, r3, #2
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	1aca      	subs	r2, r1, r3
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d00f      	beq.n	8000a14 <note+0x138>
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00a      	beq.n	8000a14 <note+0x138>
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <note+0x154>)
 8000a02:	fba3 2301 	umull	r2, r3, r3, r1
 8000a06:	085a      	lsrs	r2, r3, #1
 8000a08:	4613      	mov	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	1aca      	subs	r2, r1, r3
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1c4      	bne.n	800099e <note+0xc2>
			volume += 2;
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	3302      	adds	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
	while (tick_gap >= 0) {
 8000a1a:	e7c0      	b.n	800099e <note+0xc2>
		}
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40000400 	.word	0x40000400
 8000a28:	08005a88 	.word	0x08005a88
 8000a2c:	cccccccd 	.word	0xcccccccd
 8000a30:	aaaaaaab 	.word	0xaaaaaaab

08000a34 <pitch_change>:
uint32_t pitch_change (char pitch_text) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b4e      	cmp	r3, #78	; 0x4e
 8000a42:	d101      	bne.n	8000a48 <pitch_change+0x14>
		return N;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e02a      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'C') {
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b43      	cmp	r3, #67	; 0x43
 8000a4c:	d102      	bne.n	8000a54 <pitch_change+0x20>
		return C;
 8000a4e:	f642 53f2 	movw	r3, #11762	; 0x2df2
 8000a52:	e024      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'D') {
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b44      	cmp	r3, #68	; 0x44
 8000a58:	d102      	bne.n	8000a60 <pitch_change+0x2c>
		return D;
 8000a5a:	f642 03e5 	movw	r3, #10469	; 0x28e5
 8000a5e:	e01e      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'E') {
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b45      	cmp	r3, #69	; 0x45
 8000a64:	d102      	bne.n	8000a6c <pitch_change+0x38>
		return E;
 8000a66:	f242 4366 	movw	r3, #9318	; 0x2466
 8000a6a:	e018      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'F') {
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b46      	cmp	r3, #70	; 0x46
 8000a70:	d102      	bne.n	8000a78 <pitch_change+0x44>
		return F;
 8000a72:	f242 2357 	movw	r3, #8791	; 0x2257
 8000a76:	e012      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'G') {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b47      	cmp	r3, #71	; 0x47
 8000a7c:	d102      	bne.n	8000a84 <pitch_change+0x50>
		return G;
 8000a7e:	f641 6391 	movw	r3, #7825	; 0x1e91
 8000a82:	e00c      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'A') {
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b41      	cmp	r3, #65	; 0x41
 8000a88:	d102      	bne.n	8000a90 <pitch_change+0x5c>
		return A;
 8000a8a:	f641 3336 	movw	r3, #6966	; 0x1b36
 8000a8e:	e006      	b.n	8000a9e <pitch_change+0x6a>
	}
	else if (pitch_text == 'B') {
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b42      	cmp	r3, #66	; 0x42
 8000a94:	d102      	bne.n	8000a9c <pitch_change+0x68>
		return B;
 8000a96:	f641 0338 	movw	r3, #6200	; 0x1838
 8000a9a:	e000      	b.n	8000a9e <pitch_change+0x6a>
	}
	else {
		return N;
 8000a9c:	2300      	movs	r3, #0
	}
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <octave_change>:
uint32_t octave_change (char octave_text) {
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3b30      	subs	r3, #48	; 0x30
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <temp_change>:
uint32_t temp_change (char temp_text) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b4e      	cmp	r3, #78	; 0x4e
 8000ad2:	d101      	bne.n	8000ad8 <temp_change+0x14>
		return 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00b      	b.n	8000af0 <temp_change+0x2c>
	}
	else if (temp_text == 'S') {
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b53      	cmp	r3, #83	; 0x53
 8000adc:	d101      	bne.n	8000ae2 <temp_change+0x1e>
		return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e006      	b.n	8000af0 <temp_change+0x2c>
	}
	else if (temp_text == 'F') {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b46      	cmp	r3, #70	; 0x46
 8000ae6:	d102      	bne.n	8000aee <temp_change+0x2a>
		return -1;
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	e000      	b.n	8000af0 <temp_change+0x2c>
	}
	else {
		return 0;
 8000aee:	2300      	movs	r3, #0
	}
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <MX_RTC_Init+0x48>)
 8000b10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b1a:	227f      	movs	r2, #127	; 0x7f
 8000b1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_RTC_Init+0x44>)
 8000b38:	f001 fd2a 	bl	8002590 <HAL_RTC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b42:	f7ff ffdb 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	40002800 	.word	0x40002800

08000b54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2230      	movs	r2, #48	; 0x30
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fcdf 	bl	8004528 <memset>
  if(rtcHandle->Instance==RTC)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_RTC_MspInit+0x4c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d111      	bne.n	8000b98 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b74:	2320      	movs	r3, #32
 8000b76:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fb44 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b8e:	f7ff ffb5 	bl	8000afc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_RTC_MspInit+0x50>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40002800 	.word	0x40002800
 8000ba4:	42470e3c 	.word	0x42470e3c

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 facc 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <USART3_IRQHandler+0x10>)
 8000c52:	f002 fcfd 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000f8 	.word	0x200000f8

08000c60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e00a      	b.n	8000c88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	4601      	mov	r1, r0
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf0      	blt.n	8000c72 <_read+0x12>
	}

return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fccf 	bl	8000658 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
	}
	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_close>:

int _close(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_isatty>:

int _isatty(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	return 1;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f003 fba4 	bl	80044b8 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20030000 	.word	0x20030000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200000ac 	.word	0x200000ac
 8000da4:	20000150 	.word	0x20000150

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000dfe:	4a42      	ldr	r2, [pc, #264]	; (8000f08 <MX_TIM3_Init+0x13c>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30 - 1;
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e04:	221d      	movs	r2, #29
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3286 - 1;
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e10:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e24:	f001 fcae 	bl	8002784 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e2e:	f7ff fe65 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4831      	ldr	r0, [pc, #196]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e40:	f001 fed2 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e4a:	f7ff fe57 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e4e:	482d      	ldr	r0, [pc, #180]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e50:	f001 fce7 	bl	8002822 <HAL_TIM_PWM_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e5a:	f7ff fe4f 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e6e:	f002 fa93 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e78:	f7ff fe40 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8000e80:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000e96:	f001 fde5 	bl	8002a64 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ea0:	f7ff fe2c 	bl	8000afc <Error_Handler>
  }
  sConfigOC.Pulse = 750-1;
 8000ea4:	f240 23ed 	movw	r3, #749	; 0x2ed
 8000ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000eb2:	f001 fdd7 	bl	8002a64 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000ebc:	f7ff fe1e 	bl	8000afc <Error_Handler>
  }
  sConfigOC.Pulse = 375-1;
 8000ec0:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000ece:	f001 fdc9 	bl	8002a64 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000ed8:	f7ff fe10 	bl	8000afc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000ee8:	f001 fdbc 	bl	8002a64 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000ef2:	f7ff fe03 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM3_Init+0x138>)
 8000ef8:	f000 f82a 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000efc:	bf00      	nop
 8000efe:	3738      	adds	r7, #56	; 0x38
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000b0 	.word	0x200000b0
 8000f08:	40000400 	.word	0x40000400

08000f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_TIM_Base_MspInit+0x3c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10d      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_Base_MspInit+0x40>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_Base_MspInit+0x40>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_TIM_Base_MspInit+0x40>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <HAL_TIM_MspPostInit+0xa4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13b      	bne.n	8000fea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_TIM_MspPostInit+0xa8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000faa:	23c0      	movs	r3, #192	; 0xc0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <HAL_TIM_MspPostInit+0xac>)
 8000fc6:	f000 facf 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <HAL_TIM_MspPostInit+0xb0>)
 8000fe6:	f000 fabf 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400

08001004 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART3_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800103c:	f002 fa28 	bl	8003490 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f7ff fd59 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000f8 	.word	0x200000f8
 8001054:	40004800 	.word	0x40004800

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_UART_MspInit+0x84>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12c      	bne.n	80010d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x88>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x88>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_UART_MspInit+0x88>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_UART_MspInit+0x8c>)
 80010d0:	f000 fa4a 	bl	8001568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004800 	.word	0x40004800
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001112:	f7ff fe49 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 f9d5 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff faaf 	bl	800067c <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001120:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800112c:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8001130:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001134:	20000150 	.word	0x20000150

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f92b 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fd1a 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f943 	bl	800142a <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f90b 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	2000013c 	.word	0x2000013c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000013c 	.word	0x2000013c

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff feda 	bl	8001208 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d008      	beq.n	8001474 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e052      	b.n	800151a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0216 	bic.w	r2, r2, #22
 8001482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001492:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <HAL_DMA_Abort+0x62>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0208 	bic.w	r2, r2, #8
 80014b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c4:	e013      	b.n	80014ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c6:	f7ff fe9f 	bl	8001208 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d90c      	bls.n	80014ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e015      	b.n	800151a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e4      	bne.n	80014c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	223f      	movs	r2, #63	; 0x3f
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e00c      	b.n	800155a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e177      	b.n	8001874 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8166 	bne.w	800186e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d130      	bne.n	800161c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80c0 	beq.w	800186e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_GPIO_Init+0x324>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a65      	ldr	r2, [pc, #404]	; (800188c <HAL_GPIO_Init+0x324>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_GPIO_Init+0x324>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a61      	ldr	r2, [pc, #388]	; (8001890 <HAL_GPIO_Init+0x328>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <HAL_GPIO_Init+0x32c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d037      	beq.n	80017a6 <HAL_GPIO_Init+0x23e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_GPIO_Init+0x330>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d031      	beq.n	80017a2 <HAL_GPIO_Init+0x23a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a56      	ldr	r2, [pc, #344]	; (800189c <HAL_GPIO_Init+0x334>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x236>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a55      	ldr	r2, [pc, #340]	; (80018a0 <HAL_GPIO_Init+0x338>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x232>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x33c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x22e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a53      	ldr	r2, [pc, #332]	; (80018a8 <HAL_GPIO_Init+0x340>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x22a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_GPIO_Init+0x344>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x226>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_GPIO_Init+0x348>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x222>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <HAL_GPIO_Init+0x34c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x21e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <HAL_GPIO_Init+0x350>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x21a>
 800177e:	2309      	movs	r3, #9
 8001780:	e012      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 8001782:	230a      	movs	r3, #10
 8001784:	e010      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 8001786:	2308      	movs	r3, #8
 8001788:	e00e      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 800178a:	2307      	movs	r3, #7
 800178c:	e00c      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 800178e:	2306      	movs	r3, #6
 8001790:	e00a      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 8001792:	2305      	movs	r3, #5
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x240>
 80017a6:	2300      	movs	r3, #0
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4935      	ldr	r1, [pc, #212]	; (8001890 <HAL_GPIO_Init+0x328>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_GPIO_Init+0x354>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a34      	ldr	r2, [pc, #208]	; (80018bc <HAL_GPIO_Init+0x354>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_GPIO_Init+0x354>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_GPIO_Init+0x354>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_GPIO_Init+0x354>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800183e:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <HAL_GPIO_Init+0x354>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_GPIO_Init+0x354>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_GPIO_Init+0x354>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	f67f ae84 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40021c00 	.word	0x40021c00
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40022400 	.word	0x40022400
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_PWREx_EnableOverDrive+0x90>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_PWREx_EnableOverDrive+0x90>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_PWREx_EnableOverDrive+0x90>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_PWREx_EnableOverDrive+0x94>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fc8c 	bl	8001208 <HAL_GetTick>
 80018f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018f2:	e009      	b.n	8001908 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018f4:	f7ff fc88 	bl	8001208 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d901      	bls.n	8001908 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e01f      	b.n	8001948 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_PWREx_EnableOverDrive+0x98>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001914:	d1ee      	bne.n	80018f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7ff fc74 	bl	8001208 <HAL_GetTick>
 8001920:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001922:	e009      	b.n	8001938 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001924:	f7ff fc70 	bl	8001208 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001932:	d901      	bls.n	8001938 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e007      	b.n	8001948 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_PWREx_EnableOverDrive+0x98>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001944:	d1ee      	bne.n	8001924 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	420e0040 	.word	0x420e0040
 8001958:	40007000 	.word	0x40007000
 800195c:	420e0044 	.word	0x420e0044

08001960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e267      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d075      	beq.n	8001a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d00c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e242      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x74>
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6c      	ldr	r2, [pc, #432]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a68      	ldr	r2, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fbf6 	bl	8001208 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fbf2 	bl	8001208 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e207      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fbe2 	bl	8001208 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fbde 	bl	8001208 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1f3      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e1c7      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	e03a      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb97 	bl	8001208 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff fb93 	bl	8001208 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1a8      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb76 	bl	8001208 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff fb72 	bl	8001208 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e187      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fb56 	bl	8001208 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff fb52 	bl	8001208 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e167      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x200>
 8001b7e:	e01b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb3f 	bl	8001208 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00e      	b.n	8001bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fb3b 	bl	8001208 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d907      	bls.n	8001bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e150      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	42470000 	.word	0x42470000
 8001ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ea      	bne.n	8001b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8097 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a73      	ldr	r2, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fafb 	bl	8001208 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff faf7 	bl	8001208 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e10c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ea>
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x30c>
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d015      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fabc 	bl	8001208 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff fab8 	bl	8001208 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0cb      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ee      	beq.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff faa6 	bl	8001208 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff faa2 	bl	8001208 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0b5      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a38      	ldr	r2, [pc, #224]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a1 	beq.w	8001e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d05c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d141      	bne.n	8001d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fa76 	bl	8001208 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff fa72 	bl	8001208 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e087      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	491b      	ldr	r1, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fa4b 	bl	8001208 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fa47 	bl	8001208 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e05c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x416>
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fa34 	bl	8001208 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff fa30 	bl	8001208 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e045      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
 8001dc2:	e03d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e038      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4ec>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d028      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d121      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0cc      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d90c      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e067      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4934      	ldr	r1, [pc, #208]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f962 	bl	8001208 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7ff f95e 	bl	8001208 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d20c      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490a      	ldr	r1, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8c2 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00
 800200c:	40023800 	.word	0x40023800
 8002010:	08005a9c 	.word	0x08005a9c
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d00d      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x40>
 8002040:	2b08      	cmp	r3, #8
 8002042:	f200 80a1 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
 800204a:	2b04      	cmp	r3, #4
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x3a>
 800204e:	e09b      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002054:	e09b      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205a:	e098      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4b4f      	ldr	r3, [pc, #316]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d028      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	627a      	str	r2, [r7, #36]	; 0x24
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002084:	2100      	movs	r1, #0
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	fb03 f201 	mul.w	r2, r3, r1
 800208c:	2300      	movs	r3, #0
 800208e:	fb00 f303 	mul.w	r3, r0, r3
 8002092:	4413      	add	r3, r2
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002096:	fba0 1202 	umull	r1, r2, r0, r2
 800209a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800209c:	460a      	mov	r2, r1
 800209e:	62ba      	str	r2, [r7, #40]	; 0x28
 80020a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a2:	4413      	add	r3, r2
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	2200      	movs	r2, #0
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	61fa      	str	r2, [r7, #28]
 80020ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b6:	f7fe f8f3 	bl	80002a0 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4613      	mov	r3, r2
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c2:	e053      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	2200      	movs	r2, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	617a      	str	r2, [r7, #20]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020d6:	f04f 0b00 	mov.w	fp, #0
 80020da:	4652      	mov	r2, sl
 80020dc:	465b      	mov	r3, fp
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ebb2 080a 	subs.w	r8, r2, sl
 80020f6:	eb63 090b 	sbc.w	r9, r3, fp
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800210a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800210e:	ebb2 0408 	subs.w	r4, r2, r8
 8002112:	eb63 0509 	sbc.w	r5, r3, r9
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	00eb      	lsls	r3, r5, #3
 8002120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002124:	00e2      	lsls	r2, r4, #3
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	eb14 030a 	adds.w	r3, r4, sl
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	eb45 030b 	adc.w	r3, r5, fp
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002142:	4629      	mov	r1, r5
 8002144:	028b      	lsls	r3, r1, #10
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800214c:	4621      	mov	r1, r4
 800214e:	028a      	lsls	r2, r1, #10
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	2200      	movs	r2, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	60fa      	str	r2, [r7, #12]
 800215c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002160:	f7fe f89e 	bl	80002a0 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002190:	4618      	mov	r0, r3
 8002192:	3740      	adds	r7, #64	; 0x40
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	017d7840 	.word	0x017d7840

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000000 	.word	0x20000000

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff0 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08005aac 	.word	0x08005aac

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f7ff ffdc 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	08005aac 	.word	0x08005aac

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002240:	2b00      	cmp	r3, #0
 8002242:	d075      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800224a:	f7fe ffdd 	bl	8001208 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002252:	f7fe ffd9 	bl	8001208 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e189      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002264:	4b8a      	ldr	r3, [pc, #552]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	019a      	lsls	r2, r3, #6
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	071b      	lsls	r3, r3, #28
 8002288:	4981      	ldr	r1, [pc, #516]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800229c:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a2:	0f1b      	lsrs	r3, r3, #28
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	019a      	lsls	r2, r3, #6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	431a      	orrs	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	071b      	lsls	r3, r3, #28
 80022bc:	4974      	ldr	r1, [pc, #464]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022c4:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ca:	f023 021f 	bic.w	r2, r3, #31
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	496e      	ldr	r1, [pc, #440]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	019a      	lsls	r2, r3, #6
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	071b      	lsls	r3, r3, #28
 80022fc:	4964      	ldr	r1, [pc, #400]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800230a:	f7fe ff7d 	bl	8001208 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002312:	f7fe ff79 	bl	8001208 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e129      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002324:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002344:	2b00      	cmp	r3, #0
 8002346:	d079      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002348:	4b52      	ldr	r3, [pc, #328]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800234e:	f7fe ff5b 	bl	8001208 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002356:	f7fe ff57 	bl	8001208 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e107      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002368:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d0ef      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d020      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	0f1b      	lsrs	r3, r3, #28
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	019a      	lsls	r2, r3, #6
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	431a      	orrs	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	071b      	lsls	r3, r3, #28
 80023a2:	493b      	ldr	r1, [pc, #236]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4934      	ldr	r1, [pc, #208]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01e      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	0e1b      	lsrs	r3, r3, #24
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	019a      	lsls	r2, r3, #6
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	071b      	lsls	r3, r3, #28
 80023f0:	4927      	ldr	r1, [pc, #156]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fef8 	bl	8001208 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800241c:	f7fe fef4 	bl	8001208 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0a4      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243a:	d1ef      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 808b 	beq.w	8002560 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002472:	f7fe fec9 	bl	8001208 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002478:	e010      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7fe fec5 	bl	8001208 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d909      	bls.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e075      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800248c:	42470068 	.word	0x42470068
 8002490:	40023800 	.word	0x40023800
 8002494:	42470070 	.word	0x42470070
 8002498:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0e8      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02f      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d028      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d114      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fe8b 	bl	8001208 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fe87 	bl	8001208 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e035      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002524:	d10d      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253a:	4912      	ldr	r1, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
 8002540:	e005      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002548:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800254c:	6093      	str	r3, [r2, #8]
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800255c:	4313      	orrs	r3, r2
 800255e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002574:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40007000 	.word	0x40007000
 8002584:	40023800 	.word	0x40023800
 8002588:	42470e40 	.word	0x42470e40
 800258c:	424711e0 	.word	0x424711e0

08002590 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e066      	b.n	8002674 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7f5b      	ldrb	r3, [r3, #29]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe facc 	bl	8000b54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	22ca      	movs	r2, #202	; 0xca
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2253      	movs	r2, #83	; 0x53
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f87a 	bl	80026cc <RTC_EnterInitMode>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d12c      	bne.n	800263c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f881 	bl	800273a <RTC_ExitInitMode>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002696:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7fe fdb6 	bl	8001208 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800269e:	e009      	b.n	80026b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026a0:	f7fe fdb2 	bl	8001208 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ae:	d901      	bls.n	80026b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e007      	b.n	80026c4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d122      	bne.n	8002730 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fd85 	bl	8001208 <HAL_GetTick>
 80026fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002700:	e00c      	b.n	800271c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002702:	f7fe fd81 	bl	8001208 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002710:	d904      	bls.n	800271c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <RTC_EnterInitMode+0x64>
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d1e8      	bne.n	8002702 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002754:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff89 	bl	800267c <HAL_RTC_WaitForSynchro>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e041      	b.n	800281a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fbae 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fad8 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e041      	b.n	80028b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f839 	bl	80028c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f000 fa89 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_TIM_PWM_Start+0x24>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e022      	b.n	800293e <HAL_TIM_PWM_Start+0x6a>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d109      	bne.n	8002912 <HAL_TIM_PWM_Start+0x3e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e015      	b.n	800293e <HAL_TIM_PWM_Start+0x6a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d109      	bne.n	800292c <HAL_TIM_PWM_Start+0x58>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e008      	b.n	800293e <HAL_TIM_PWM_Start+0x6a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07c      	b.n	8002a40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start+0x82>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	e013      	b.n	800297e <HAL_TIM_PWM_Start+0xaa>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start+0x92>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002964:	e00b      	b.n	800297e <HAL_TIM_PWM_Start+0xaa>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0xa2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002974:	e003      	b.n	800297e <HAL_TIM_PWM_Start+0xaa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fce0 	bl	800334c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_TIM_PWM_Start+0x174>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_PWM_Start+0xcc>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_TIM_PWM_Start+0x178>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_TIM_PWM_Start+0xd0>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_TIM_PWM_Start+0xd2>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_TIM_PWM_Start+0x174>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d01d      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_TIM_PWM_Start+0x17c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_TIM_PWM_Start+0x180>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_TIM_PWM_Start+0x184>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_PWM_Start+0x178>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_TIM_PWM_Start+0x188>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIM_PWM_Start+0x136>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_TIM_PWM_Start+0x18c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d010      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	e007      	b.n	8002a3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40010400 	.word	0x40010400
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40001800 	.word	0x40001800

08002a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0ae      	b.n	8002be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	f200 809f 	bhi.w	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002bd1 	.word	0x08002bd1
 8002aa0:	08002bd1 	.word	0x08002bd1
 8002aa4:	08002bd1 	.word	0x08002bd1
 8002aa8:	08002b0d 	.word	0x08002b0d
 8002aac:	08002bd1 	.word	0x08002bd1
 8002ab0:	08002bd1 	.word	0x08002bd1
 8002ab4:	08002bd1 	.word	0x08002bd1
 8002ab8:	08002b4f 	.word	0x08002b4f
 8002abc:	08002bd1 	.word	0x08002bd1
 8002ac0:	08002bd1 	.word	0x08002bd1
 8002ac4:	08002bd1 	.word	0x08002bd1
 8002ac8:	08002b8f 	.word	0x08002b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f9f0 	bl	8002eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0208 	orr.w	r2, r2, #8
 8002ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6999      	ldr	r1, [r3, #24]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]
      break;
 8002b0a:	e064      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fa40 	bl	8002f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	619a      	str	r2, [r3, #24]
      break;
 8002b4c:	e043      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fa95 	bl	8003084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0208 	orr.w	r2, r2, #8
 8002b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0204 	bic.w	r2, r2, #4
 8002b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69d9      	ldr	r1, [r3, #28]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	61da      	str	r2, [r3, #28]
      break;
 8002b8c:	e023      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fae9 	bl	800316c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	61da      	str	r2, [r3, #28]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0b4      	b.n	8002d6e <HAL_TIM_ConfigClockSource+0x186>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	d03e      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0xd4>
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	f200 8087 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	f000 8086 	beq.w	8002d5a <HAL_TIM_ConfigClockSource+0x172>
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d87f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b70      	cmp	r3, #112	; 0x70
 8002c56:	d01a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xa6>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d87b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b60      	cmp	r3, #96	; 0x60
 8002c5e:	d050      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x11a>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d877      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b50      	cmp	r3, #80	; 0x50
 8002c66:	d03c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d873      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d058      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x13a>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d86f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	d064      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d86b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d060      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d867      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05c      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d05a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	e062      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f000 fb35 	bl	800330c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
      break;
 8002cba:	e04f      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f000 fb1e 	bl	800330c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cde:	609a      	str	r2, [r3, #8]
      break;
 8002ce0:	e03c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 fa92 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2150      	movs	r1, #80	; 0x50
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 faeb 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e02c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 fab1 	bl	8003276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2160      	movs	r1, #96	; 0x60
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fadb 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e01c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 fa72 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 facb 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 fac2 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d027      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d023      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d017      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <TIM_Base_SetConfig+0x12c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0x134>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <TIM_Base_SetConfig+0x138>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <TIM_Base_SetConfig+0x13c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	40001800 	.word	0x40001800
 8002eb0:	40001c00 	.word	0x40001c00
 8002eb4:	40002000 	.word	0x40002000

08002eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f023 0302 	bic.w	r3, r3, #2
 8002f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <TIM_OC1_SetConfig+0xd8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_OC1_SetConfig+0x64>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <TIM_OC1_SetConfig+0xdc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0308 	bic.w	r3, r3, #8
 8002f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <TIM_OC1_SetConfig+0xd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_OC1_SetConfig+0x8e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <TIM_OC1_SetConfig+0xdc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d111      	bne.n	8002f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010400 	.word	0x40010400

08002f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0210 	bic.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0320 	bic.w	r3, r3, #32
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <TIM_OC2_SetConfig+0xe4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC2_SetConfig+0x68>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <TIM_OC2_SetConfig+0xe8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <TIM_OC2_SetConfig+0xe4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_OC2_SetConfig+0x94>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <TIM_OC2_SetConfig+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d113      	bne.n	8003054 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40010400 	.word	0x40010400

08003084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <TIM_OC3_SetConfig+0xe0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_OC3_SetConfig+0x66>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a20      	ldr	r2, [pc, #128]	; (8003168 <TIM_OC3_SetConfig+0xe4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10d      	bne.n	8003106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <TIM_OC3_SetConfig+0xe0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_OC3_SetConfig+0x92>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC3_SetConfig+0xe4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d113      	bne.n	800313e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40010000 	.word	0x40010000
 8003168:	40010400 	.word	0x40010400

0800316c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <TIM_OC4_SetConfig+0xa4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_OC4_SetConfig+0x68>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <TIM_OC4_SetConfig+0xa8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d109      	bne.n	80031e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40010400 	.word	0x40010400

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0210 	bic.w	r2, r3, #16
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f043 0307 	orr.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	431a      	orrs	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2201      	movs	r2, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1a      	ldr	r2, [r3, #32]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e05a      	b.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a21      	ldr	r2, [pc, #132]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d01d      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10c      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40010400 	.word	0x40010400
 8003488:	40014000 	.word	0x40014000
 800348c:	40001800 	.word	0x40001800

08003490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03f      	b.n	8003522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fdce 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fd7b 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08a      	sub	sp, #40	; 0x28
 800352e:	af02      	add	r7, sp, #8
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d17c      	bne.n	8003644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x2c>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e075      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x3e>
 8003564:	2302      	movs	r3, #2
 8003566:	e06e      	b.n	8003646 <HAL_UART_Transmit+0x11c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd fe43 	bl	8001208 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x82>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035bc:	e02a      	b.n	8003614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 faf9 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e036      	b.n	8003646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cf      	bne.n	80035be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fac9 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0ba      	sub	sp, #232	; 0xe8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800368e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fbd3 	bl	8003e5a <UART_Receive_IT>
      return;
 80036b4:	e256      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80de 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
 80036c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80d1 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d011      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800375e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 81ed 	beq.w	8003b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fb5e 	bl	8003e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_UART_IRQHandler+0x17a>
 80037c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04f      	beq.n	800386a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa66 	bl	8003c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d141      	bne.n	8003862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800380a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800380e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d9      	bne.n	80037de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	4a7d      	ldr	r2, [pc, #500]	; (8003a2c <HAL_UART_IRQHandler+0x3dc>)
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fe6f 	bl	8001522 <HAL_DMA_Abort_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003854:	4610      	mov	r0, r2
 8003856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00e      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f99a 	bl	8003b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00a      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f996 	bl	8003b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f992 	bl	8003b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003876:	e170      	b.n	8003b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	bf00      	nop
    return;
 800387a:	e16e      	b.n	8003b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 814a 	bne.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8143 	beq.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 813c 	beq.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	f040 80b4 	bne.w	8003a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8140 	beq.w	8003b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e6:	429a      	cmp	r2, r3
 80038e8:	f080 8139 	bcs.w	8003b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	f000 8088 	beq.w	8003a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800392e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800393a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1d9      	bne.n	8003902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800395e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800397a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e1      	bne.n	800394e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e3      	bne.n	800398a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	f023 0310 	bic.w	r3, r3, #16
 80039e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e3      	bne.n	80039d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fd18 	bl	8001442 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8c0 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a28:	e099      	b.n	8003b5e <HAL_UART_IRQHandler+0x50e>
 8003a2a:	bf00      	nop
 8003a2c:	08003d63 	.word	0x08003d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 808b 	beq.w	8003b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8086 	beq.w	8003b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e3      	bne.n	8003a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3314      	adds	r3, #20
 8003aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	617b      	str	r3, [r7, #20]
   return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e3      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f848 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b18:	e023      	b.n	8003b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_UART_IRQHandler+0x4ea>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f929 	bl	8003d8a <UART_Transmit_IT>
    return;
 8003b38:	e014      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <HAL_UART_IRQHandler+0x514>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f969 	bl	8003e2a <UART_EndTransmit_IT>
    return;
 8003b58:	e004      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
    return;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
      return;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
      return;
 8003b62:	bf00      	nop
  }
}
 8003b64:	37e8      	adds	r7, #232	; 0xe8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b090      	sub	sp, #64	; 0x40
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e050      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d04c      	beq.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be0:	f7fd fb12 	bl	8001208 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d241      	bcs.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c10:	637a      	str	r2, [r7, #52]	; 0x34
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	613b      	str	r3, [r7, #16]
   return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c44:	623a      	str	r2, [r7, #32]
 8003c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	69f9      	ldr	r1, [r7, #28]
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00f      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d09f      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3740      	adds	r7, #64	; 0x40
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b095      	sub	sp, #84	; 0x54
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d119      	bne.n	8003d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d34:	61ba      	str	r2, [r7, #24]
 8003d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	613b      	str	r3, [r7, #16]
   return(result);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d56:	bf00      	nop
 8003d58:	3754      	adds	r7, #84	; 0x54
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff09 	bl	8003b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b21      	cmp	r3, #33	; 0x21
 8003d9c:	d13e      	bne.n	8003e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d114      	bne.n	8003dd2 <UART_Transmit_IT+0x48>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]
 8003dd0:	e008      	b.n	8003de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6211      	str	r1, [r2, #32]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fe8e 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08c      	sub	sp, #48	; 0x30
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b22      	cmp	r3, #34	; 0x22
 8003e6c:	f040 80ab 	bne.w	8003fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e78:	d117      	bne.n	8003eaa <UART_Receive_IT+0x50>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d113      	bne.n	8003eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ea8:	e026      	b.n	8003ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d007      	beq.n	8003ece <UART_Receive_IT+0x74>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <UART_Receive_IT+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e008      	b.n	8003eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4619      	mov	r1, r3
 8003f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d15a      	bne.n	8003fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0220 	bic.w	r2, r2, #32
 8003f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d135      	bne.n	8003fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	623a      	str	r2, [r7, #32]
 8003f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d10a      	bne.n	8003faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fdf9 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
 8003fb6:	e002      	b.n	8003fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fde1 	bl	8003b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e002      	b.n	8003fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b0c0      	sub	sp, #256	; 0x100
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	ea40 0301 	orr.w	r3, r0, r1
 8003ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004028:	f021 010c 	bic.w	r1, r1, #12
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004036:	430b      	orrs	r3, r1
 8004038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	6999      	ldr	r1, [r3, #24]
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	ea40 0301 	orr.w	r3, r0, r1
 8004056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b8f      	ldr	r3, [pc, #572]	; (800429c <UART_SetConfig+0x2cc>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d005      	beq.n	8004070 <UART_SetConfig+0xa0>
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b8d      	ldr	r3, [pc, #564]	; (80042a0 <UART_SetConfig+0x2d0>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d104      	bne.n	800407a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7fe f8ba 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8004074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004078:	e003      	b.n	8004082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800407a:	f7fe f8a1 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 800407e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	f040 810c 	bne.w	80042a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800409a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800409e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	1891      	adds	r1, r2, r2
 80040a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040aa:	415b      	adcs	r3, r3
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040b2:	4621      	mov	r1, r4
 80040b4:	eb12 0801 	adds.w	r8, r2, r1
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb43 0901 	adc.w	r9, r3, r1
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d2:	4690      	mov	r8, r2
 80040d4:	4699      	mov	r9, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	eb18 0303 	adds.w	r3, r8, r3
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040e0:	462b      	mov	r3, r5
 80040e2:	eb49 0303 	adc.w	r3, r9, r3
 80040e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040fe:	460b      	mov	r3, r1
 8004100:	18db      	adds	r3, r3, r3
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
 8004104:	4613      	mov	r3, r2
 8004106:	eb42 0303 	adc.w	r3, r2, r3
 800410a:	657b      	str	r3, [r7, #84]	; 0x54
 800410c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004114:	f7fc f8c4 	bl	80002a0 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <UART_SetConfig+0x2d4>)
 800411e:	fba3 2302 	umull	r2, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	011c      	lsls	r4, r3, #4
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004140:	415b      	adcs	r3, r3
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004148:	4641      	mov	r1, r8
 800414a:	eb12 0a01 	adds.w	sl, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb43 0b01 	adc.w	fp, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004168:	4692      	mov	sl, r2
 800416a:	469b      	mov	fp, r3
 800416c:	4643      	mov	r3, r8
 800416e:	eb1a 0303 	adds.w	r3, sl, r3
 8004172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004176:	464b      	mov	r3, r9
 8004178:	eb4b 0303 	adc.w	r3, fp, r3
 800417c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004194:	460b      	mov	r3, r1
 8004196:	18db      	adds	r3, r3, r3
 8004198:	643b      	str	r3, [r7, #64]	; 0x40
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041aa:	f7fc f879 	bl	80002a0 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <UART_SetConfig+0x2d4>)
 80041b6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2264      	movs	r2, #100	; 0x64
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	1acb      	subs	r3, r1, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <UART_SetConfig+0x2d4>)
 80041cc:	fba3 2302 	umull	r2, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041d8:	441c      	add	r4, r3
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041f4:	415b      	adcs	r3, r3
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041fc:	4641      	mov	r1, r8
 80041fe:	1851      	adds	r1, r2, r1
 8004200:	6339      	str	r1, [r7, #48]	; 0x30
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004214:	4659      	mov	r1, fp
 8004216:	00cb      	lsls	r3, r1, #3
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421e:	4651      	mov	r1, sl
 8004220:	00ca      	lsls	r2, r1, #3
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	4603      	mov	r3, r0
 8004228:	4642      	mov	r2, r8
 800422a:	189b      	adds	r3, r3, r2
 800422c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004230:	464b      	mov	r3, r9
 8004232:	460a      	mov	r2, r1
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800424c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004250:	460b      	mov	r3, r1
 8004252:	18db      	adds	r3, r3, r3
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	4613      	mov	r3, r2
 8004258:	eb42 0303 	adc.w	r3, r2, r3
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004266:	f7fc f81b 	bl	80002a0 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4422      	add	r2, r4
 8004296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004298:	e105      	b.n	80044a6 <UART_SetConfig+0x4d6>
 800429a:	bf00      	nop
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042ba:	4642      	mov	r2, r8
 80042bc:	464b      	mov	r3, r9
 80042be:	1891      	adds	r1, r2, r2
 80042c0:	6239      	str	r1, [r7, #32]
 80042c2:	415b      	adcs	r3, r3
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ca:	4641      	mov	r1, r8
 80042cc:	1854      	adds	r4, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb43 0501 	adc.w	r5, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	00eb      	lsls	r3, r5, #3
 80042de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e2:	00e2      	lsls	r2, r4, #3
 80042e4:	4614      	mov	r4, r2
 80042e6:	461d      	mov	r5, r3
 80042e8:	4643      	mov	r3, r8
 80042ea:	18e3      	adds	r3, r4, r3
 80042ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042f0:	464b      	mov	r3, r9
 80042f2:	eb45 0303 	adc.w	r3, r5, r3
 80042f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004316:	4629      	mov	r1, r5
 8004318:	008b      	lsls	r3, r1, #2
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004320:	4621      	mov	r1, r4
 8004322:	008a      	lsls	r2, r1, #2
 8004324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004328:	f7fb ffba 	bl	80002a0 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b60      	ldr	r3, [pc, #384]	; (80044b4 <UART_SetConfig+0x4e4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011c      	lsls	r4, r3, #4
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	61b9      	str	r1, [r7, #24]
 8004354:	415b      	adcs	r3, r3
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6139      	str	r1, [r7, #16]
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043b4:	4649      	mov	r1, r9
 80043b6:	008b      	lsls	r3, r1, #2
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043be:	4641      	mov	r1, r8
 80043c0:	008a      	lsls	r2, r1, #2
 80043c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043c6:	f7fb ff6b 	bl	80002a0 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <UART_SetConfig+0x4e4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	; 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a34      	ldr	r2, [pc, #208]	; (80044b4 <UART_SetConfig+0x4e4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ee:	441c      	add	r4, r3
 80043f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f4:	2200      	movs	r2, #0
 80043f6:	673b      	str	r3, [r7, #112]	; 0x70
 80043f8:	677a      	str	r2, [r7, #116]	; 0x74
 80043fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	1891      	adds	r1, r2, r2
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	415b      	adcs	r3, r3
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800440e:	4641      	mov	r1, r8
 8004410:	1851      	adds	r1, r2, r1
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	4649      	mov	r1, r9
 8004416:	414b      	adcs	r3, r1
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004426:	4659      	mov	r1, fp
 8004428:	00cb      	lsls	r3, r1, #3
 800442a:	4651      	mov	r1, sl
 800442c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004430:	4651      	mov	r1, sl
 8004432:	00ca      	lsls	r2, r1, #3
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	4603      	mov	r3, r0
 800443a:	4642      	mov	r2, r8
 800443c:	189b      	adds	r3, r3, r2
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	464b      	mov	r3, r9
 8004442:	460a      	mov	r2, r1
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	663b      	str	r3, [r7, #96]	; 0x60
 8004454:	667a      	str	r2, [r7, #100]	; 0x64
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004462:	4649      	mov	r1, r9
 8004464:	008b      	lsls	r3, r1, #2
 8004466:	4641      	mov	r1, r8
 8004468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446c:	4641      	mov	r1, r8
 800446e:	008a      	lsls	r2, r1, #2
 8004470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004474:	f7fb ff14 	bl	80002a0 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <UART_SetConfig+0x4e4>)
 800447e:	fba3 1302 	umull	r1, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2164      	movs	r1, #100	; 0x64
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	3332      	adds	r3, #50	; 0x32
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <UART_SetConfig+0x4e4>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	f003 020f 	and.w	r2, r3, #15
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4422      	add	r2, r4
 80044a4:	609a      	str	r2, [r3, #8]
}
 80044a6:	bf00      	nop
 80044a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	51eb851f 	.word	0x51eb851f

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	; (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	; (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	; (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	; (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 ffbc 	bl	8005454 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08005b54 	.word	0x08005b54
 8004500:	08005b54 	.word	0x08005b54
 8004504:	08005b54 	.word	0x08005b54
 8004508:	08005b58 	.word	0x08005b58

0800450c <memcpy>:
 800450c:	440a      	add	r2, r1
 800450e:	4291      	cmp	r1, r2
 8004510:	f100 33ff 	add.w	r3, r0, #4294967295
 8004514:	d100      	bne.n	8004518 <memcpy+0xc>
 8004516:	4770      	bx	lr
 8004518:	b510      	push	{r4, lr}
 800451a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800451e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004522:	4291      	cmp	r1, r2
 8004524:	d1f9      	bne.n	800451a <memcpy+0xe>
 8004526:	bd10      	pop	{r4, pc}

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <iprintf>:
 8004538:	b40f      	push	{r0, r1, r2, r3}
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <iprintf+0x2c>)
 800453c:	b513      	push	{r0, r1, r4, lr}
 800453e:	681c      	ldr	r4, [r3, #0]
 8004540:	b124      	cbz	r4, 800454c <iprintf+0x14>
 8004542:	69a3      	ldr	r3, [r4, #24]
 8004544:	b913      	cbnz	r3, 800454c <iprintf+0x14>
 8004546:	4620      	mov	r0, r4
 8004548:	f000 f866 	bl	8004618 <__sinit>
 800454c:	ab05      	add	r3, sp, #20
 800454e:	9a04      	ldr	r2, [sp, #16]
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4620      	mov	r0, r4
 8004556:	f000 f9bd 	bl	80048d4 <_vfiprintf_r>
 800455a:	b002      	add	sp, #8
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	b004      	add	sp, #16
 8004562:	4770      	bx	lr
 8004564:	2000000c 	.word	0x2000000c

08004568 <std>:
 8004568:	2300      	movs	r3, #0
 800456a:	b510      	push	{r4, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	e9c0 3300 	strd	r3, r3, [r0]
 8004572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004576:	6083      	str	r3, [r0, #8]
 8004578:	8181      	strh	r1, [r0, #12]
 800457a:	6643      	str	r3, [r0, #100]	; 0x64
 800457c:	81c2      	strh	r2, [r0, #14]
 800457e:	6183      	str	r3, [r0, #24]
 8004580:	4619      	mov	r1, r3
 8004582:	2208      	movs	r2, #8
 8004584:	305c      	adds	r0, #92	; 0x5c
 8004586:	f7ff ffcf 	bl	8004528 <memset>
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <std+0x38>)
 800458c:	6263      	str	r3, [r4, #36]	; 0x24
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <std+0x3c>)
 8004590:	62a3      	str	r3, [r4, #40]	; 0x28
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <std+0x40>)
 8004594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <std+0x44>)
 8004598:	6224      	str	r4, [r4, #32]
 800459a:	6323      	str	r3, [r4, #48]	; 0x30
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	08004e7d 	.word	0x08004e7d
 80045a4:	08004e9f 	.word	0x08004e9f
 80045a8:	08004ed7 	.word	0x08004ed7
 80045ac:	08004efb 	.word	0x08004efb

080045b0 <_cleanup_r>:
 80045b0:	4901      	ldr	r1, [pc, #4]	; (80045b8 <_cleanup_r+0x8>)
 80045b2:	f000 b8af 	b.w	8004714 <_fwalk_reent>
 80045b6:	bf00      	nop
 80045b8:	080051d5 	.word	0x080051d5

080045bc <__sfmoreglue>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	2268      	movs	r2, #104	; 0x68
 80045c0:	1e4d      	subs	r5, r1, #1
 80045c2:	4355      	muls	r5, r2
 80045c4:	460e      	mov	r6, r1
 80045c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045ca:	f000 f8e5 	bl	8004798 <_malloc_r>
 80045ce:	4604      	mov	r4, r0
 80045d0:	b140      	cbz	r0, 80045e4 <__sfmoreglue+0x28>
 80045d2:	2100      	movs	r1, #0
 80045d4:	e9c0 1600 	strd	r1, r6, [r0]
 80045d8:	300c      	adds	r0, #12
 80045da:	60a0      	str	r0, [r4, #8]
 80045dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045e0:	f7ff ffa2 	bl	8004528 <memset>
 80045e4:	4620      	mov	r0, r4
 80045e6:	bd70      	pop	{r4, r5, r6, pc}

080045e8 <__sfp_lock_acquire>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__sfp_lock_acquire+0x8>)
 80045ea:	f000 b8b3 	b.w	8004754 <__retarget_lock_acquire_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000141 	.word	0x20000141

080045f4 <__sfp_lock_release>:
 80045f4:	4801      	ldr	r0, [pc, #4]	; (80045fc <__sfp_lock_release+0x8>)
 80045f6:	f000 b8ae 	b.w	8004756 <__retarget_lock_release_recursive>
 80045fa:	bf00      	nop
 80045fc:	20000141 	.word	0x20000141

08004600 <__sinit_lock_acquire>:
 8004600:	4801      	ldr	r0, [pc, #4]	; (8004608 <__sinit_lock_acquire+0x8>)
 8004602:	f000 b8a7 	b.w	8004754 <__retarget_lock_acquire_recursive>
 8004606:	bf00      	nop
 8004608:	20000142 	.word	0x20000142

0800460c <__sinit_lock_release>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__sinit_lock_release+0x8>)
 800460e:	f000 b8a2 	b.w	8004756 <__retarget_lock_release_recursive>
 8004612:	bf00      	nop
 8004614:	20000142 	.word	0x20000142

08004618 <__sinit>:
 8004618:	b510      	push	{r4, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	f7ff fff0 	bl	8004600 <__sinit_lock_acquire>
 8004620:	69a3      	ldr	r3, [r4, #24]
 8004622:	b11b      	cbz	r3, 800462c <__sinit+0x14>
 8004624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004628:	f7ff bff0 	b.w	800460c <__sinit_lock_release>
 800462c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004630:	6523      	str	r3, [r4, #80]	; 0x50
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <__sinit+0x68>)
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <__sinit+0x6c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	62a2      	str	r2, [r4, #40]	; 0x28
 800463a:	42a3      	cmp	r3, r4
 800463c:	bf04      	itt	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	61a3      	streq	r3, [r4, #24]
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f820 	bl	8004688 <__sfp>
 8004648:	6060      	str	r0, [r4, #4]
 800464a:	4620      	mov	r0, r4
 800464c:	f000 f81c 	bl	8004688 <__sfp>
 8004650:	60a0      	str	r0, [r4, #8]
 8004652:	4620      	mov	r0, r4
 8004654:	f000 f818 	bl	8004688 <__sfp>
 8004658:	2200      	movs	r2, #0
 800465a:	60e0      	str	r0, [r4, #12]
 800465c:	2104      	movs	r1, #4
 800465e:	6860      	ldr	r0, [r4, #4]
 8004660:	f7ff ff82 	bl	8004568 <std>
 8004664:	68a0      	ldr	r0, [r4, #8]
 8004666:	2201      	movs	r2, #1
 8004668:	2109      	movs	r1, #9
 800466a:	f7ff ff7d 	bl	8004568 <std>
 800466e:	68e0      	ldr	r0, [r4, #12]
 8004670:	2202      	movs	r2, #2
 8004672:	2112      	movs	r1, #18
 8004674:	f7ff ff78 	bl	8004568 <std>
 8004678:	2301      	movs	r3, #1
 800467a:	61a3      	str	r3, [r4, #24]
 800467c:	e7d2      	b.n	8004624 <__sinit+0xc>
 800467e:	bf00      	nop
 8004680:	08005ab4 	.word	0x08005ab4
 8004684:	080045b1 	.word	0x080045b1

08004688 <__sfp>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	4607      	mov	r7, r0
 800468c:	f7ff ffac 	bl	80045e8 <__sfp_lock_acquire>
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <__sfp+0x84>)
 8004692:	681e      	ldr	r6, [r3, #0]
 8004694:	69b3      	ldr	r3, [r6, #24]
 8004696:	b913      	cbnz	r3, 800469e <__sfp+0x16>
 8004698:	4630      	mov	r0, r6
 800469a:	f7ff ffbd 	bl	8004618 <__sinit>
 800469e:	3648      	adds	r6, #72	; 0x48
 80046a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	d503      	bpl.n	80046b0 <__sfp+0x28>
 80046a8:	6833      	ldr	r3, [r6, #0]
 80046aa:	b30b      	cbz	r3, 80046f0 <__sfp+0x68>
 80046ac:	6836      	ldr	r6, [r6, #0]
 80046ae:	e7f7      	b.n	80046a0 <__sfp+0x18>
 80046b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046b4:	b9d5      	cbnz	r5, 80046ec <__sfp+0x64>
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <__sfp+0x88>)
 80046b8:	60e3      	str	r3, [r4, #12]
 80046ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046be:	6665      	str	r5, [r4, #100]	; 0x64
 80046c0:	f000 f847 	bl	8004752 <__retarget_lock_init_recursive>
 80046c4:	f7ff ff96 	bl	80045f4 <__sfp_lock_release>
 80046c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046d0:	6025      	str	r5, [r4, #0]
 80046d2:	61a5      	str	r5, [r4, #24]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4629      	mov	r1, r5
 80046d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046dc:	f7ff ff24 	bl	8004528 <memset>
 80046e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046e8:	4620      	mov	r0, r4
 80046ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ec:	3468      	adds	r4, #104	; 0x68
 80046ee:	e7d9      	b.n	80046a4 <__sfp+0x1c>
 80046f0:	2104      	movs	r1, #4
 80046f2:	4638      	mov	r0, r7
 80046f4:	f7ff ff62 	bl	80045bc <__sfmoreglue>
 80046f8:	4604      	mov	r4, r0
 80046fa:	6030      	str	r0, [r6, #0]
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1d5      	bne.n	80046ac <__sfp+0x24>
 8004700:	f7ff ff78 	bl	80045f4 <__sfp_lock_release>
 8004704:	230c      	movs	r3, #12
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	e7ee      	b.n	80046e8 <__sfp+0x60>
 800470a:	bf00      	nop
 800470c:	08005ab4 	.word	0x08005ab4
 8004710:	ffff0001 	.word	0xffff0001

08004714 <_fwalk_reent>:
 8004714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004718:	4606      	mov	r6, r0
 800471a:	4688      	mov	r8, r1
 800471c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004720:	2700      	movs	r7, #0
 8004722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004726:	f1b9 0901 	subs.w	r9, r9, #1
 800472a:	d505      	bpl.n	8004738 <_fwalk_reent+0x24>
 800472c:	6824      	ldr	r4, [r4, #0]
 800472e:	2c00      	cmp	r4, #0
 8004730:	d1f7      	bne.n	8004722 <_fwalk_reent+0xe>
 8004732:	4638      	mov	r0, r7
 8004734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004738:	89ab      	ldrh	r3, [r5, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d907      	bls.n	800474e <_fwalk_reent+0x3a>
 800473e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004742:	3301      	adds	r3, #1
 8004744:	d003      	beq.n	800474e <_fwalk_reent+0x3a>
 8004746:	4629      	mov	r1, r5
 8004748:	4630      	mov	r0, r6
 800474a:	47c0      	blx	r8
 800474c:	4307      	orrs	r7, r0
 800474e:	3568      	adds	r5, #104	; 0x68
 8004750:	e7e9      	b.n	8004726 <_fwalk_reent+0x12>

08004752 <__retarget_lock_init_recursive>:
 8004752:	4770      	bx	lr

08004754 <__retarget_lock_acquire_recursive>:
 8004754:	4770      	bx	lr

08004756 <__retarget_lock_release_recursive>:
 8004756:	4770      	bx	lr

08004758 <sbrk_aligned>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4e0e      	ldr	r6, [pc, #56]	; (8004794 <sbrk_aligned+0x3c>)
 800475c:	460c      	mov	r4, r1
 800475e:	6831      	ldr	r1, [r6, #0]
 8004760:	4605      	mov	r5, r0
 8004762:	b911      	cbnz	r1, 800476a <sbrk_aligned+0x12>
 8004764:	f000 fb7a 	bl	8004e5c <_sbrk_r>
 8004768:	6030      	str	r0, [r6, #0]
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 fb75 	bl	8004e5c <_sbrk_r>
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	d00a      	beq.n	800478c <sbrk_aligned+0x34>
 8004776:	1cc4      	adds	r4, r0, #3
 8004778:	f024 0403 	bic.w	r4, r4, #3
 800477c:	42a0      	cmp	r0, r4
 800477e:	d007      	beq.n	8004790 <sbrk_aligned+0x38>
 8004780:	1a21      	subs	r1, r4, r0
 8004782:	4628      	mov	r0, r5
 8004784:	f000 fb6a 	bl	8004e5c <_sbrk_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d101      	bne.n	8004790 <sbrk_aligned+0x38>
 800478c:	f04f 34ff 	mov.w	r4, #4294967295
 8004790:	4620      	mov	r0, r4
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	20000148 	.word	0x20000148

08004798 <_malloc_r>:
 8004798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479c:	1ccd      	adds	r5, r1, #3
 800479e:	f025 0503 	bic.w	r5, r5, #3
 80047a2:	3508      	adds	r5, #8
 80047a4:	2d0c      	cmp	r5, #12
 80047a6:	bf38      	it	cc
 80047a8:	250c      	movcc	r5, #12
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	4607      	mov	r7, r0
 80047ae:	db01      	blt.n	80047b4 <_malloc_r+0x1c>
 80047b0:	42a9      	cmp	r1, r5
 80047b2:	d905      	bls.n	80047c0 <_malloc_r+0x28>
 80047b4:	230c      	movs	r3, #12
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	2600      	movs	r6, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	4e2e      	ldr	r6, [pc, #184]	; (800487c <_malloc_r+0xe4>)
 80047c2:	f000 fdbb 	bl	800533c <__malloc_lock>
 80047c6:	6833      	ldr	r3, [r6, #0]
 80047c8:	461c      	mov	r4, r3
 80047ca:	bb34      	cbnz	r4, 800481a <_malloc_r+0x82>
 80047cc:	4629      	mov	r1, r5
 80047ce:	4638      	mov	r0, r7
 80047d0:	f7ff ffc2 	bl	8004758 <sbrk_aligned>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	4604      	mov	r4, r0
 80047d8:	d14d      	bne.n	8004876 <_malloc_r+0xde>
 80047da:	6834      	ldr	r4, [r6, #0]
 80047dc:	4626      	mov	r6, r4
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d140      	bne.n	8004864 <_malloc_r+0xcc>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	4631      	mov	r1, r6
 80047e6:	4638      	mov	r0, r7
 80047e8:	eb04 0803 	add.w	r8, r4, r3
 80047ec:	f000 fb36 	bl	8004e5c <_sbrk_r>
 80047f0:	4580      	cmp	r8, r0
 80047f2:	d13a      	bne.n	800486a <_malloc_r+0xd2>
 80047f4:	6821      	ldr	r1, [r4, #0]
 80047f6:	3503      	adds	r5, #3
 80047f8:	1a6d      	subs	r5, r5, r1
 80047fa:	f025 0503 	bic.w	r5, r5, #3
 80047fe:	3508      	adds	r5, #8
 8004800:	2d0c      	cmp	r5, #12
 8004802:	bf38      	it	cc
 8004804:	250c      	movcc	r5, #12
 8004806:	4629      	mov	r1, r5
 8004808:	4638      	mov	r0, r7
 800480a:	f7ff ffa5 	bl	8004758 <sbrk_aligned>
 800480e:	3001      	adds	r0, #1
 8004810:	d02b      	beq.n	800486a <_malloc_r+0xd2>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	442b      	add	r3, r5
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	e00e      	b.n	8004838 <_malloc_r+0xa0>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	1b52      	subs	r2, r2, r5
 800481e:	d41e      	bmi.n	800485e <_malloc_r+0xc6>
 8004820:	2a0b      	cmp	r2, #11
 8004822:	d916      	bls.n	8004852 <_malloc_r+0xba>
 8004824:	1961      	adds	r1, r4, r5
 8004826:	42a3      	cmp	r3, r4
 8004828:	6025      	str	r5, [r4, #0]
 800482a:	bf18      	it	ne
 800482c:	6059      	strne	r1, [r3, #4]
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	bf08      	it	eq
 8004832:	6031      	streq	r1, [r6, #0]
 8004834:	5162      	str	r2, [r4, r5]
 8004836:	604b      	str	r3, [r1, #4]
 8004838:	4638      	mov	r0, r7
 800483a:	f104 060b 	add.w	r6, r4, #11
 800483e:	f000 fd83 	bl	8005348 <__malloc_unlock>
 8004842:	f026 0607 	bic.w	r6, r6, #7
 8004846:	1d23      	adds	r3, r4, #4
 8004848:	1af2      	subs	r2, r6, r3
 800484a:	d0b6      	beq.n	80047ba <_malloc_r+0x22>
 800484c:	1b9b      	subs	r3, r3, r6
 800484e:	50a3      	str	r3, [r4, r2]
 8004850:	e7b3      	b.n	80047ba <_malloc_r+0x22>
 8004852:	6862      	ldr	r2, [r4, #4]
 8004854:	42a3      	cmp	r3, r4
 8004856:	bf0c      	ite	eq
 8004858:	6032      	streq	r2, [r6, #0]
 800485a:	605a      	strne	r2, [r3, #4]
 800485c:	e7ec      	b.n	8004838 <_malloc_r+0xa0>
 800485e:	4623      	mov	r3, r4
 8004860:	6864      	ldr	r4, [r4, #4]
 8004862:	e7b2      	b.n	80047ca <_malloc_r+0x32>
 8004864:	4634      	mov	r4, r6
 8004866:	6876      	ldr	r6, [r6, #4]
 8004868:	e7b9      	b.n	80047de <_malloc_r+0x46>
 800486a:	230c      	movs	r3, #12
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4638      	mov	r0, r7
 8004870:	f000 fd6a 	bl	8005348 <__malloc_unlock>
 8004874:	e7a1      	b.n	80047ba <_malloc_r+0x22>
 8004876:	6025      	str	r5, [r4, #0]
 8004878:	e7de      	b.n	8004838 <_malloc_r+0xa0>
 800487a:	bf00      	nop
 800487c:	20000144 	.word	0x20000144

08004880 <__sfputc_r>:
 8004880:	6893      	ldr	r3, [r2, #8]
 8004882:	3b01      	subs	r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	b410      	push	{r4}
 8004888:	6093      	str	r3, [r2, #8]
 800488a:	da08      	bge.n	800489e <__sfputc_r+0x1e>
 800488c:	6994      	ldr	r4, [r2, #24]
 800488e:	42a3      	cmp	r3, r4
 8004890:	db01      	blt.n	8004896 <__sfputc_r+0x16>
 8004892:	290a      	cmp	r1, #10
 8004894:	d103      	bne.n	800489e <__sfputc_r+0x1e>
 8004896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800489a:	f000 bb33 	b.w	8004f04 <__swbuf_r>
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	1c58      	adds	r0, r3, #1
 80048a2:	6010      	str	r0, [r2, #0]
 80048a4:	7019      	strb	r1, [r3, #0]
 80048a6:	4608      	mov	r0, r1
 80048a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <__sfputs_r>:
 80048ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b0:	4606      	mov	r6, r0
 80048b2:	460f      	mov	r7, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	18d5      	adds	r5, r2, r3
 80048b8:	42ac      	cmp	r4, r5
 80048ba:	d101      	bne.n	80048c0 <__sfputs_r+0x12>
 80048bc:	2000      	movs	r0, #0
 80048be:	e007      	b.n	80048d0 <__sfputs_r+0x22>
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	463a      	mov	r2, r7
 80048c6:	4630      	mov	r0, r6
 80048c8:	f7ff ffda 	bl	8004880 <__sfputc_r>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d1f3      	bne.n	80048b8 <__sfputs_r+0xa>
 80048d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048d4 <_vfiprintf_r>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	460d      	mov	r5, r1
 80048da:	b09d      	sub	sp, #116	; 0x74
 80048dc:	4614      	mov	r4, r2
 80048de:	4698      	mov	r8, r3
 80048e0:	4606      	mov	r6, r0
 80048e2:	b118      	cbz	r0, 80048ec <_vfiprintf_r+0x18>
 80048e4:	6983      	ldr	r3, [r0, #24]
 80048e6:	b90b      	cbnz	r3, 80048ec <_vfiprintf_r+0x18>
 80048e8:	f7ff fe96 	bl	8004618 <__sinit>
 80048ec:	4b89      	ldr	r3, [pc, #548]	; (8004b14 <_vfiprintf_r+0x240>)
 80048ee:	429d      	cmp	r5, r3
 80048f0:	d11b      	bne.n	800492a <_vfiprintf_r+0x56>
 80048f2:	6875      	ldr	r5, [r6, #4]
 80048f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048f6:	07d9      	lsls	r1, r3, #31
 80048f8:	d405      	bmi.n	8004906 <_vfiprintf_r+0x32>
 80048fa:	89ab      	ldrh	r3, [r5, #12]
 80048fc:	059a      	lsls	r2, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_vfiprintf_r+0x32>
 8004900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004902:	f7ff ff27 	bl	8004754 <__retarget_lock_acquire_recursive>
 8004906:	89ab      	ldrh	r3, [r5, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	d501      	bpl.n	8004910 <_vfiprintf_r+0x3c>
 800490c:	692b      	ldr	r3, [r5, #16]
 800490e:	b9eb      	cbnz	r3, 800494c <_vfiprintf_r+0x78>
 8004910:	4629      	mov	r1, r5
 8004912:	4630      	mov	r0, r6
 8004914:	f000 fb5a 	bl	8004fcc <__swsetup_r>
 8004918:	b1c0      	cbz	r0, 800494c <_vfiprintf_r+0x78>
 800491a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800491c:	07dc      	lsls	r4, r3, #31
 800491e:	d50e      	bpl.n	800493e <_vfiprintf_r+0x6a>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b01d      	add	sp, #116	; 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	4b7b      	ldr	r3, [pc, #492]	; (8004b18 <_vfiprintf_r+0x244>)
 800492c:	429d      	cmp	r5, r3
 800492e:	d101      	bne.n	8004934 <_vfiprintf_r+0x60>
 8004930:	68b5      	ldr	r5, [r6, #8]
 8004932:	e7df      	b.n	80048f4 <_vfiprintf_r+0x20>
 8004934:	4b79      	ldr	r3, [pc, #484]	; (8004b1c <_vfiprintf_r+0x248>)
 8004936:	429d      	cmp	r5, r3
 8004938:	bf08      	it	eq
 800493a:	68f5      	ldreq	r5, [r6, #12]
 800493c:	e7da      	b.n	80048f4 <_vfiprintf_r+0x20>
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	0598      	lsls	r0, r3, #22
 8004942:	d4ed      	bmi.n	8004920 <_vfiprintf_r+0x4c>
 8004944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004946:	f7ff ff06 	bl	8004756 <__retarget_lock_release_recursive>
 800494a:	e7e9      	b.n	8004920 <_vfiprintf_r+0x4c>
 800494c:	2300      	movs	r3, #0
 800494e:	9309      	str	r3, [sp, #36]	; 0x24
 8004950:	2320      	movs	r3, #32
 8004952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004956:	f8cd 800c 	str.w	r8, [sp, #12]
 800495a:	2330      	movs	r3, #48	; 0x30
 800495c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b20 <_vfiprintf_r+0x24c>
 8004960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004964:	f04f 0901 	mov.w	r9, #1
 8004968:	4623      	mov	r3, r4
 800496a:	469a      	mov	sl, r3
 800496c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004970:	b10a      	cbz	r2, 8004976 <_vfiprintf_r+0xa2>
 8004972:	2a25      	cmp	r2, #37	; 0x25
 8004974:	d1f9      	bne.n	800496a <_vfiprintf_r+0x96>
 8004976:	ebba 0b04 	subs.w	fp, sl, r4
 800497a:	d00b      	beq.n	8004994 <_vfiprintf_r+0xc0>
 800497c:	465b      	mov	r3, fp
 800497e:	4622      	mov	r2, r4
 8004980:	4629      	mov	r1, r5
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff ff93 	bl	80048ae <__sfputs_r>
 8004988:	3001      	adds	r0, #1
 800498a:	f000 80aa 	beq.w	8004ae2 <_vfiprintf_r+0x20e>
 800498e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004990:	445a      	add	r2, fp
 8004992:	9209      	str	r2, [sp, #36]	; 0x24
 8004994:	f89a 3000 	ldrb.w	r3, [sl]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80a2 	beq.w	8004ae2 <_vfiprintf_r+0x20e>
 800499e:	2300      	movs	r3, #0
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a8:	f10a 0a01 	add.w	sl, sl, #1
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049b4:	931a      	str	r3, [sp, #104]	; 0x68
 80049b6:	4654      	mov	r4, sl
 80049b8:	2205      	movs	r2, #5
 80049ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049be:	4858      	ldr	r0, [pc, #352]	; (8004b20 <_vfiprintf_r+0x24c>)
 80049c0:	f7fb fc1e 	bl	8000200 <memchr>
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	b9d8      	cbnz	r0, 8004a00 <_vfiprintf_r+0x12c>
 80049c8:	06d1      	lsls	r1, r2, #27
 80049ca:	bf44      	itt	mi
 80049cc:	2320      	movmi	r3, #32
 80049ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d2:	0713      	lsls	r3, r2, #28
 80049d4:	bf44      	itt	mi
 80049d6:	232b      	movmi	r3, #43	; 0x2b
 80049d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049dc:	f89a 3000 	ldrb.w	r3, [sl]
 80049e0:	2b2a      	cmp	r3, #42	; 0x2a
 80049e2:	d015      	beq.n	8004a10 <_vfiprintf_r+0x13c>
 80049e4:	9a07      	ldr	r2, [sp, #28]
 80049e6:	4654      	mov	r4, sl
 80049e8:	2000      	movs	r0, #0
 80049ea:	f04f 0c0a 	mov.w	ip, #10
 80049ee:	4621      	mov	r1, r4
 80049f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f4:	3b30      	subs	r3, #48	; 0x30
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	d94e      	bls.n	8004a98 <_vfiprintf_r+0x1c4>
 80049fa:	b1b0      	cbz	r0, 8004a2a <_vfiprintf_r+0x156>
 80049fc:	9207      	str	r2, [sp, #28]
 80049fe:	e014      	b.n	8004a2a <_vfiprintf_r+0x156>
 8004a00:	eba0 0308 	sub.w	r3, r0, r8
 8004a04:	fa09 f303 	lsl.w	r3, r9, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	46a2      	mov	sl, r4
 8004a0e:	e7d2      	b.n	80049b6 <_vfiprintf_r+0xe2>
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	1d19      	adds	r1, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	9103      	str	r1, [sp, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bfbb      	ittet	lt
 8004a1c:	425b      	neglt	r3, r3
 8004a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a22:	9307      	strge	r3, [sp, #28]
 8004a24:	9307      	strlt	r3, [sp, #28]
 8004a26:	bfb8      	it	lt
 8004a28:	9204      	strlt	r2, [sp, #16]
 8004a2a:	7823      	ldrb	r3, [r4, #0]
 8004a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2e:	d10c      	bne.n	8004a4a <_vfiprintf_r+0x176>
 8004a30:	7863      	ldrb	r3, [r4, #1]
 8004a32:	2b2a      	cmp	r3, #42	; 0x2a
 8004a34:	d135      	bne.n	8004aa2 <_vfiprintf_r+0x1ce>
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9203      	str	r2, [sp, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfb8      	it	lt
 8004a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a46:	3402      	adds	r4, #2
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b30 <_vfiprintf_r+0x25c>
 8004a4e:	7821      	ldrb	r1, [r4, #0]
 8004a50:	2203      	movs	r2, #3
 8004a52:	4650      	mov	r0, sl
 8004a54:	f7fb fbd4 	bl	8000200 <memchr>
 8004a58:	b140      	cbz	r0, 8004a6c <_vfiprintf_r+0x198>
 8004a5a:	2340      	movs	r3, #64	; 0x40
 8004a5c:	eba0 000a 	sub.w	r0, r0, sl
 8004a60:	fa03 f000 	lsl.w	r0, r3, r0
 8004a64:	9b04      	ldr	r3, [sp, #16]
 8004a66:	4303      	orrs	r3, r0
 8004a68:	3401      	adds	r4, #1
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a70:	482c      	ldr	r0, [pc, #176]	; (8004b24 <_vfiprintf_r+0x250>)
 8004a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a76:	2206      	movs	r2, #6
 8004a78:	f7fb fbc2 	bl	8000200 <memchr>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d03f      	beq.n	8004b00 <_vfiprintf_r+0x22c>
 8004a80:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <_vfiprintf_r+0x254>)
 8004a82:	bb1b      	cbnz	r3, 8004acc <_vfiprintf_r+0x1f8>
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	3307      	adds	r3, #7
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a92:	443b      	add	r3, r7
 8004a94:	9309      	str	r3, [sp, #36]	; 0x24
 8004a96:	e767      	b.n	8004968 <_vfiprintf_r+0x94>
 8004a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e7a5      	b.n	80049ee <_vfiprintf_r+0x11a>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f04f 0c0a 	mov.w	ip, #10
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab4:	3a30      	subs	r2, #48	; 0x30
 8004ab6:	2a09      	cmp	r2, #9
 8004ab8:	d903      	bls.n	8004ac2 <_vfiprintf_r+0x1ee>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c5      	beq.n	8004a4a <_vfiprintf_r+0x176>
 8004abe:	9105      	str	r1, [sp, #20]
 8004ac0:	e7c3      	b.n	8004a4a <_vfiprintf_r+0x176>
 8004ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e7f0      	b.n	8004aae <_vfiprintf_r+0x1da>
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <_vfiprintf_r+0x258>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f3af 8000 	nop.w
 8004adc:	4607      	mov	r7, r0
 8004ade:	1c78      	adds	r0, r7, #1
 8004ae0:	d1d6      	bne.n	8004a90 <_vfiprintf_r+0x1bc>
 8004ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ae4:	07d9      	lsls	r1, r3, #31
 8004ae6:	d405      	bmi.n	8004af4 <_vfiprintf_r+0x220>
 8004ae8:	89ab      	ldrh	r3, [r5, #12]
 8004aea:	059a      	lsls	r2, r3, #22
 8004aec:	d402      	bmi.n	8004af4 <_vfiprintf_r+0x220>
 8004aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af0:	f7ff fe31 	bl	8004756 <__retarget_lock_release_recursive>
 8004af4:	89ab      	ldrh	r3, [r5, #12]
 8004af6:	065b      	lsls	r3, r3, #25
 8004af8:	f53f af12 	bmi.w	8004920 <_vfiprintf_r+0x4c>
 8004afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afe:	e711      	b.n	8004924 <_vfiprintf_r+0x50>
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	462a      	mov	r2, r5
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <_vfiprintf_r+0x258>)
 8004b08:	a904      	add	r1, sp, #16
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f000 f880 	bl	8004c10 <_printf_i>
 8004b10:	e7e4      	b.n	8004adc <_vfiprintf_r+0x208>
 8004b12:	bf00      	nop
 8004b14:	08005ad8 	.word	0x08005ad8
 8004b18:	08005af8 	.word	0x08005af8
 8004b1c:	08005ab8 	.word	0x08005ab8
 8004b20:	08005b18 	.word	0x08005b18
 8004b24:	08005b22 	.word	0x08005b22
 8004b28:	00000000 	.word	0x00000000
 8004b2c:	080048af 	.word	0x080048af
 8004b30:	08005b1e 	.word	0x08005b1e

08004b34 <_printf_common>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	4616      	mov	r6, r2
 8004b3a:	4699      	mov	r9, r3
 8004b3c:	688a      	ldr	r2, [r1, #8]
 8004b3e:	690b      	ldr	r3, [r1, #16]
 8004b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b44:	4293      	cmp	r3, r2
 8004b46:	bfb8      	it	lt
 8004b48:	4613      	movlt	r3, r2
 8004b4a:	6033      	str	r3, [r6, #0]
 8004b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b50:	4607      	mov	r7, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	b10a      	cbz	r2, 8004b5a <_printf_common+0x26>
 8004b56:	3301      	adds	r3, #1
 8004b58:	6033      	str	r3, [r6, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	0699      	lsls	r1, r3, #26
 8004b5e:	bf42      	ittt	mi
 8004b60:	6833      	ldrmi	r3, [r6, #0]
 8004b62:	3302      	addmi	r3, #2
 8004b64:	6033      	strmi	r3, [r6, #0]
 8004b66:	6825      	ldr	r5, [r4, #0]
 8004b68:	f015 0506 	ands.w	r5, r5, #6
 8004b6c:	d106      	bne.n	8004b7c <_printf_common+0x48>
 8004b6e:	f104 0a19 	add.w	sl, r4, #25
 8004b72:	68e3      	ldr	r3, [r4, #12]
 8004b74:	6832      	ldr	r2, [r6, #0]
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	42ab      	cmp	r3, r5
 8004b7a:	dc26      	bgt.n	8004bca <_printf_common+0x96>
 8004b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b80:	1e13      	subs	r3, r2, #0
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	0692      	lsls	r2, r2, #26
 8004b8a:	d42b      	bmi.n	8004be4 <_printf_common+0xb0>
 8004b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b90:	4649      	mov	r1, r9
 8004b92:	4638      	mov	r0, r7
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d01e      	beq.n	8004bd8 <_printf_common+0xa4>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	68e5      	ldr	r5, [r4, #12]
 8004b9e:	6832      	ldr	r2, [r6, #0]
 8004ba0:	f003 0306 	and.w	r3, r3, #6
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	bf08      	it	eq
 8004ba8:	1aad      	subeq	r5, r5, r2
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	6922      	ldr	r2, [r4, #16]
 8004bae:	bf0c      	ite	eq
 8004bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb4:	2500      	movne	r5, #0
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	bfc4      	itt	gt
 8004bba:	1a9b      	subgt	r3, r3, r2
 8004bbc:	18ed      	addgt	r5, r5, r3
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	341a      	adds	r4, #26
 8004bc2:	42b5      	cmp	r5, r6
 8004bc4:	d11a      	bne.n	8004bfc <_printf_common+0xc8>
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e008      	b.n	8004bdc <_printf_common+0xa8>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4652      	mov	r2, sl
 8004bce:	4649      	mov	r1, r9
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	47c0      	blx	r8
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d103      	bne.n	8004be0 <_printf_common+0xac>
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be0:	3501      	adds	r5, #1
 8004be2:	e7c6      	b.n	8004b72 <_printf_common+0x3e>
 8004be4:	18e1      	adds	r1, r4, r3
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	2030      	movs	r0, #48	; 0x30
 8004bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bee:	4422      	add	r2, r4
 8004bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	e7c7      	b.n	8004b8c <_printf_common+0x58>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4622      	mov	r2, r4
 8004c00:	4649      	mov	r1, r9
 8004c02:	4638      	mov	r0, r7
 8004c04:	47c0      	blx	r8
 8004c06:	3001      	adds	r0, #1
 8004c08:	d0e6      	beq.n	8004bd8 <_printf_common+0xa4>
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7d9      	b.n	8004bc2 <_printf_common+0x8e>
	...

08004c10 <_printf_i>:
 8004c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c14:	7e0f      	ldrb	r7, [r1, #24]
 8004c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c18:	2f78      	cmp	r7, #120	; 0x78
 8004c1a:	4691      	mov	r9, r2
 8004c1c:	4680      	mov	r8, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	469a      	mov	sl, r3
 8004c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c26:	d807      	bhi.n	8004c38 <_printf_i+0x28>
 8004c28:	2f62      	cmp	r7, #98	; 0x62
 8004c2a:	d80a      	bhi.n	8004c42 <_printf_i+0x32>
 8004c2c:	2f00      	cmp	r7, #0
 8004c2e:	f000 80d8 	beq.w	8004de2 <_printf_i+0x1d2>
 8004c32:	2f58      	cmp	r7, #88	; 0x58
 8004c34:	f000 80a3 	beq.w	8004d7e <_printf_i+0x16e>
 8004c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c40:	e03a      	b.n	8004cb8 <_printf_i+0xa8>
 8004c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c46:	2b15      	cmp	r3, #21
 8004c48:	d8f6      	bhi.n	8004c38 <_printf_i+0x28>
 8004c4a:	a101      	add	r1, pc, #4	; (adr r1, 8004c50 <_printf_i+0x40>)
 8004c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c50:	08004ca9 	.word	0x08004ca9
 8004c54:	08004cbd 	.word	0x08004cbd
 8004c58:	08004c39 	.word	0x08004c39
 8004c5c:	08004c39 	.word	0x08004c39
 8004c60:	08004c39 	.word	0x08004c39
 8004c64:	08004c39 	.word	0x08004c39
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004c39 	.word	0x08004c39
 8004c70:	08004c39 	.word	0x08004c39
 8004c74:	08004c39 	.word	0x08004c39
 8004c78:	08004c39 	.word	0x08004c39
 8004c7c:	08004dc9 	.word	0x08004dc9
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004dab 	.word	0x08004dab
 8004c88:	08004c39 	.word	0x08004c39
 8004c8c:	08004c39 	.word	0x08004c39
 8004c90:	08004deb 	.word	0x08004deb
 8004c94:	08004c39 	.word	0x08004c39
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004c39 	.word	0x08004c39
 8004ca0:	08004c39 	.word	0x08004c39
 8004ca4:	08004db3 	.word	0x08004db3
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	602a      	str	r2, [r5, #0]
 8004cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0a3      	b.n	8004e04 <_printf_i+0x1f4>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	6829      	ldr	r1, [r5, #0]
 8004cc0:	0606      	lsls	r6, r0, #24
 8004cc2:	f101 0304 	add.w	r3, r1, #4
 8004cc6:	d50a      	bpl.n	8004cde <_printf_i+0xce>
 8004cc8:	680e      	ldr	r6, [r1, #0]
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	da03      	bge.n	8004cd8 <_printf_i+0xc8>
 8004cd0:	232d      	movs	r3, #45	; 0x2d
 8004cd2:	4276      	negs	r6, r6
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd8:	485e      	ldr	r0, [pc, #376]	; (8004e54 <_printf_i+0x244>)
 8004cda:	230a      	movs	r3, #10
 8004cdc:	e019      	b.n	8004d12 <_printf_i+0x102>
 8004cde:	680e      	ldr	r6, [r1, #0]
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ce6:	bf18      	it	ne
 8004ce8:	b236      	sxthne	r6, r6
 8004cea:	e7ef      	b.n	8004ccc <_printf_i+0xbc>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	6820      	ldr	r0, [r4, #0]
 8004cf0:	1d19      	adds	r1, r3, #4
 8004cf2:	6029      	str	r1, [r5, #0]
 8004cf4:	0601      	lsls	r1, r0, #24
 8004cf6:	d501      	bpl.n	8004cfc <_printf_i+0xec>
 8004cf8:	681e      	ldr	r6, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <_printf_i+0xf2>
 8004cfc:	0646      	lsls	r6, r0, #25
 8004cfe:	d5fb      	bpl.n	8004cf8 <_printf_i+0xe8>
 8004d00:	881e      	ldrh	r6, [r3, #0]
 8004d02:	4854      	ldr	r0, [pc, #336]	; (8004e54 <_printf_i+0x244>)
 8004d04:	2f6f      	cmp	r7, #111	; 0x6f
 8004d06:	bf0c      	ite	eq
 8004d08:	2308      	moveq	r3, #8
 8004d0a:	230a      	movne	r3, #10
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d12:	6865      	ldr	r5, [r4, #4]
 8004d14:	60a5      	str	r5, [r4, #8]
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	bfa2      	ittt	ge
 8004d1a:	6821      	ldrge	r1, [r4, #0]
 8004d1c:	f021 0104 	bicge.w	r1, r1, #4
 8004d20:	6021      	strge	r1, [r4, #0]
 8004d22:	b90e      	cbnz	r6, 8004d28 <_printf_i+0x118>
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	d04d      	beq.n	8004dc4 <_printf_i+0x1b4>
 8004d28:	4615      	mov	r5, r2
 8004d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d32:	5dc7      	ldrb	r7, [r0, r7]
 8004d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d38:	4637      	mov	r7, r6
 8004d3a:	42bb      	cmp	r3, r7
 8004d3c:	460e      	mov	r6, r1
 8004d3e:	d9f4      	bls.n	8004d2a <_printf_i+0x11a>
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d10b      	bne.n	8004d5c <_printf_i+0x14c>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07de      	lsls	r6, r3, #31
 8004d48:	d508      	bpl.n	8004d5c <_printf_i+0x14c>
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	4299      	cmp	r1, r3
 8004d50:	bfde      	ittt	le
 8004d52:	2330      	movle	r3, #48	; 0x30
 8004d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d5c:	1b52      	subs	r2, r2, r5
 8004d5e:	6122      	str	r2, [r4, #16]
 8004d60:	f8cd a000 	str.w	sl, [sp]
 8004d64:	464b      	mov	r3, r9
 8004d66:	aa03      	add	r2, sp, #12
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff fee2 	bl	8004b34 <_printf_common>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d14c      	bne.n	8004e0e <_printf_i+0x1fe>
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	b004      	add	sp, #16
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	4835      	ldr	r0, [pc, #212]	; (8004e54 <_printf_i+0x244>)
 8004d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d84:	6829      	ldr	r1, [r5, #0]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d8c:	6029      	str	r1, [r5, #0]
 8004d8e:	061d      	lsls	r5, r3, #24
 8004d90:	d514      	bpl.n	8004dbc <_printf_i+0x1ac>
 8004d92:	07df      	lsls	r7, r3, #31
 8004d94:	bf44      	itt	mi
 8004d96:	f043 0320 	orrmi.w	r3, r3, #32
 8004d9a:	6023      	strmi	r3, [r4, #0]
 8004d9c:	b91e      	cbnz	r6, 8004da6 <_printf_i+0x196>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	f023 0320 	bic.w	r3, r3, #32
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	2310      	movs	r3, #16
 8004da8:	e7b0      	b.n	8004d0c <_printf_i+0xfc>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f043 0320 	orr.w	r3, r3, #32
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	2378      	movs	r3, #120	; 0x78
 8004db4:	4828      	ldr	r0, [pc, #160]	; (8004e58 <_printf_i+0x248>)
 8004db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dba:	e7e3      	b.n	8004d84 <_printf_i+0x174>
 8004dbc:	0659      	lsls	r1, r3, #25
 8004dbe:	bf48      	it	mi
 8004dc0:	b2b6      	uxthmi	r6, r6
 8004dc2:	e7e6      	b.n	8004d92 <_printf_i+0x182>
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	e7bb      	b.n	8004d40 <_printf_i+0x130>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	6826      	ldr	r6, [r4, #0]
 8004dcc:	6961      	ldr	r1, [r4, #20]
 8004dce:	1d18      	adds	r0, r3, #4
 8004dd0:	6028      	str	r0, [r5, #0]
 8004dd2:	0635      	lsls	r5, r6, #24
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	d501      	bpl.n	8004ddc <_printf_i+0x1cc>
 8004dd8:	6019      	str	r1, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <_printf_i+0x1d2>
 8004ddc:	0670      	lsls	r0, r6, #25
 8004dde:	d5fb      	bpl.n	8004dd8 <_printf_i+0x1c8>
 8004de0:	8019      	strh	r1, [r3, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	4615      	mov	r5, r2
 8004de8:	e7ba      	b.n	8004d60 <_printf_i+0x150>
 8004dea:	682b      	ldr	r3, [r5, #0]
 8004dec:	1d1a      	adds	r2, r3, #4
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	681d      	ldr	r5, [r3, #0]
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	2100      	movs	r1, #0
 8004df6:	4628      	mov	r0, r5
 8004df8:	f7fb fa02 	bl	8000200 <memchr>
 8004dfc:	b108      	cbz	r0, 8004e02 <_printf_i+0x1f2>
 8004dfe:	1b40      	subs	r0, r0, r5
 8004e00:	6060      	str	r0, [r4, #4]
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	6123      	str	r3, [r4, #16]
 8004e06:	2300      	movs	r3, #0
 8004e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0c:	e7a8      	b.n	8004d60 <_printf_i+0x150>
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	462a      	mov	r2, r5
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	47d0      	blx	sl
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d0ab      	beq.n	8004d74 <_printf_i+0x164>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	079b      	lsls	r3, r3, #30
 8004e20:	d413      	bmi.n	8004e4a <_printf_i+0x23a>
 8004e22:	68e0      	ldr	r0, [r4, #12]
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	4298      	cmp	r0, r3
 8004e28:	bfb8      	it	lt
 8004e2a:	4618      	movlt	r0, r3
 8004e2c:	e7a4      	b.n	8004d78 <_printf_i+0x168>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4632      	mov	r2, r6
 8004e32:	4649      	mov	r1, r9
 8004e34:	4640      	mov	r0, r8
 8004e36:	47d0      	blx	sl
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d09b      	beq.n	8004d74 <_printf_i+0x164>
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	9903      	ldr	r1, [sp, #12]
 8004e42:	1a5b      	subs	r3, r3, r1
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dcf2      	bgt.n	8004e2e <_printf_i+0x21e>
 8004e48:	e7eb      	b.n	8004e22 <_printf_i+0x212>
 8004e4a:	2500      	movs	r5, #0
 8004e4c:	f104 0619 	add.w	r6, r4, #25
 8004e50:	e7f5      	b.n	8004e3e <_printf_i+0x22e>
 8004e52:	bf00      	nop
 8004e54:	08005b29 	.word	0x08005b29
 8004e58:	08005b3a 	.word	0x08005b3a

08004e5c <_sbrk_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4d06      	ldr	r5, [pc, #24]	; (8004e78 <_sbrk_r+0x1c>)
 8004e60:	2300      	movs	r3, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f7fb ff68 	bl	8000d3c <_sbrk>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_sbrk_r+0x1a>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_sbrk_r+0x1a>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	2000014c 	.word	0x2000014c

08004e7c <__sread>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	460c      	mov	r4, r1
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	f000 fab2 	bl	80053ec <_read_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bfab      	itete	ge
 8004e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e90:	181b      	addge	r3, r3, r0
 8004e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e96:	bfac      	ite	ge
 8004e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e9a:	81a3      	strhlt	r3, [r4, #12]
 8004e9c:	bd10      	pop	{r4, pc}

08004e9e <__swrite>:
 8004e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	898b      	ldrh	r3, [r1, #12]
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4616      	mov	r6, r2
 8004eae:	d505      	bpl.n	8004ebc <__swrite+0x1e>
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f000 f9c8 	bl	800524c <_lseek_r>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	f000 b869 	b.w	8004fa8 <_write_r>

08004ed6 <__sseek>:
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	460c      	mov	r4, r1
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 f9b5 	bl	800524c <_lseek_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	bf15      	itete	ne
 8004ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ef2:	81a3      	strheq	r3, [r4, #12]
 8004ef4:	bf18      	it	ne
 8004ef6:	81a3      	strhne	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__sclose>:
 8004efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efe:	f000 b8d3 	b.w	80050a8 <_close_r>
	...

08004f04 <__swbuf_r>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	460e      	mov	r6, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	b118      	cbz	r0, 8004f16 <__swbuf_r+0x12>
 8004f0e:	6983      	ldr	r3, [r0, #24]
 8004f10:	b90b      	cbnz	r3, 8004f16 <__swbuf_r+0x12>
 8004f12:	f7ff fb81 	bl	8004618 <__sinit>
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <__swbuf_r+0x98>)
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	d12b      	bne.n	8004f74 <__swbuf_r+0x70>
 8004f1c:	686c      	ldr	r4, [r5, #4]
 8004f1e:	69a3      	ldr	r3, [r4, #24]
 8004f20:	60a3      	str	r3, [r4, #8]
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	071a      	lsls	r2, r3, #28
 8004f26:	d52f      	bpl.n	8004f88 <__swbuf_r+0x84>
 8004f28:	6923      	ldr	r3, [r4, #16]
 8004f2a:	b36b      	cbz	r3, 8004f88 <__swbuf_r+0x84>
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1ac0      	subs	r0, r0, r3
 8004f32:	6963      	ldr	r3, [r4, #20]
 8004f34:	b2f6      	uxtb	r6, r6
 8004f36:	4283      	cmp	r3, r0
 8004f38:	4637      	mov	r7, r6
 8004f3a:	dc04      	bgt.n	8004f46 <__swbuf_r+0x42>
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 f948 	bl	80051d4 <_fflush_r>
 8004f44:	bb30      	cbnz	r0, 8004f94 <__swbuf_r+0x90>
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60a3      	str	r3, [r4, #8]
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	701e      	strb	r6, [r3, #0]
 8004f54:	6963      	ldr	r3, [r4, #20]
 8004f56:	3001      	adds	r0, #1
 8004f58:	4283      	cmp	r3, r0
 8004f5a:	d004      	beq.n	8004f66 <__swbuf_r+0x62>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	07db      	lsls	r3, r3, #31
 8004f60:	d506      	bpl.n	8004f70 <__swbuf_r+0x6c>
 8004f62:	2e0a      	cmp	r6, #10
 8004f64:	d104      	bne.n	8004f70 <__swbuf_r+0x6c>
 8004f66:	4621      	mov	r1, r4
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f000 f933 	bl	80051d4 <_fflush_r>
 8004f6e:	b988      	cbnz	r0, 8004f94 <__swbuf_r+0x90>
 8004f70:	4638      	mov	r0, r7
 8004f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <__swbuf_r+0x9c>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	d101      	bne.n	8004f7e <__swbuf_r+0x7a>
 8004f7a:	68ac      	ldr	r4, [r5, #8]
 8004f7c:	e7cf      	b.n	8004f1e <__swbuf_r+0x1a>
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <__swbuf_r+0xa0>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	bf08      	it	eq
 8004f84:	68ec      	ldreq	r4, [r5, #12]
 8004f86:	e7ca      	b.n	8004f1e <__swbuf_r+0x1a>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f81e 	bl	8004fcc <__swsetup_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d0cb      	beq.n	8004f2c <__swbuf_r+0x28>
 8004f94:	f04f 37ff 	mov.w	r7, #4294967295
 8004f98:	e7ea      	b.n	8004f70 <__swbuf_r+0x6c>
 8004f9a:	bf00      	nop
 8004f9c:	08005ad8 	.word	0x08005ad8
 8004fa0:	08005af8 	.word	0x08005af8
 8004fa4:	08005ab8 	.word	0x08005ab8

08004fa8 <_write_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_write_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fb fe6f 	bl	8000c9a <_write>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_write_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_write_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	2000014c 	.word	0x2000014c

08004fcc <__swsetup_r>:
 8004fcc:	4b32      	ldr	r3, [pc, #200]	; (8005098 <__swsetup_r+0xcc>)
 8004fce:	b570      	push	{r4, r5, r6, lr}
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	b125      	cbz	r5, 8004fe2 <__swsetup_r+0x16>
 8004fd8:	69ab      	ldr	r3, [r5, #24]
 8004fda:	b913      	cbnz	r3, 8004fe2 <__swsetup_r+0x16>
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7ff fb1b 	bl	8004618 <__sinit>
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	; (800509c <__swsetup_r+0xd0>)
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	d10f      	bne.n	8005008 <__swsetup_r+0x3c>
 8004fe8:	686c      	ldr	r4, [r5, #4]
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ff0:	0719      	lsls	r1, r3, #28
 8004ff2:	d42c      	bmi.n	800504e <__swsetup_r+0x82>
 8004ff4:	06dd      	lsls	r5, r3, #27
 8004ff6:	d411      	bmi.n	800501c <__swsetup_r+0x50>
 8004ff8:	2309      	movs	r3, #9
 8004ffa:	6033      	str	r3, [r6, #0]
 8004ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005000:	81a3      	strh	r3, [r4, #12]
 8005002:	f04f 30ff 	mov.w	r0, #4294967295
 8005006:	e03e      	b.n	8005086 <__swsetup_r+0xba>
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <__swsetup_r+0xd4>)
 800500a:	429c      	cmp	r4, r3
 800500c:	d101      	bne.n	8005012 <__swsetup_r+0x46>
 800500e:	68ac      	ldr	r4, [r5, #8]
 8005010:	e7eb      	b.n	8004fea <__swsetup_r+0x1e>
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <__swsetup_r+0xd8>)
 8005014:	429c      	cmp	r4, r3
 8005016:	bf08      	it	eq
 8005018:	68ec      	ldreq	r4, [r5, #12]
 800501a:	e7e6      	b.n	8004fea <__swsetup_r+0x1e>
 800501c:	0758      	lsls	r0, r3, #29
 800501e:	d512      	bpl.n	8005046 <__swsetup_r+0x7a>
 8005020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005022:	b141      	cbz	r1, 8005036 <__swsetup_r+0x6a>
 8005024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005028:	4299      	cmp	r1, r3
 800502a:	d002      	beq.n	8005032 <__swsetup_r+0x66>
 800502c:	4630      	mov	r0, r6
 800502e:	f000 f991 	bl	8005354 <_free_r>
 8005032:	2300      	movs	r3, #0
 8005034:	6363      	str	r3, [r4, #52]	; 0x34
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	2300      	movs	r3, #0
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	b94b      	cbnz	r3, 8005066 <__swsetup_r+0x9a>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d003      	beq.n	8005066 <__swsetup_r+0x9a>
 800505e:	4621      	mov	r1, r4
 8005060:	4630      	mov	r0, r6
 8005062:	f000 f92b 	bl	80052bc <__smakebuf_r>
 8005066:	89a0      	ldrh	r0, [r4, #12]
 8005068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800506c:	f010 0301 	ands.w	r3, r0, #1
 8005070:	d00a      	beq.n	8005088 <__swsetup_r+0xbc>
 8005072:	2300      	movs	r3, #0
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	6963      	ldr	r3, [r4, #20]
 8005078:	425b      	negs	r3, r3
 800507a:	61a3      	str	r3, [r4, #24]
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	b943      	cbnz	r3, 8005092 <__swsetup_r+0xc6>
 8005080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005084:	d1ba      	bne.n	8004ffc <__swsetup_r+0x30>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	0781      	lsls	r1, r0, #30
 800508a:	bf58      	it	pl
 800508c:	6963      	ldrpl	r3, [r4, #20]
 800508e:	60a3      	str	r3, [r4, #8]
 8005090:	e7f4      	b.n	800507c <__swsetup_r+0xb0>
 8005092:	2000      	movs	r0, #0
 8005094:	e7f7      	b.n	8005086 <__swsetup_r+0xba>
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c
 800509c:	08005ad8 	.word	0x08005ad8
 80050a0:	08005af8 	.word	0x08005af8
 80050a4:	08005ab8 	.word	0x08005ab8

080050a8 <_close_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d06      	ldr	r5, [pc, #24]	; (80050c4 <_close_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fb fe0d 	bl	8000cd2 <_close>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_close_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_close_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	2000014c 	.word	0x2000014c

080050c8 <__sflush_r>:
 80050c8:	898a      	ldrh	r2, [r1, #12]
 80050ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	4605      	mov	r5, r0
 80050d0:	0710      	lsls	r0, r2, #28
 80050d2:	460c      	mov	r4, r1
 80050d4:	d458      	bmi.n	8005188 <__sflush_r+0xc0>
 80050d6:	684b      	ldr	r3, [r1, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dc05      	bgt.n	80050e8 <__sflush_r+0x20>
 80050dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dc02      	bgt.n	80050e8 <__sflush_r+0x20>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d0f9      	beq.n	80050e2 <__sflush_r+0x1a>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050f4:	682f      	ldr	r7, [r5, #0]
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	d032      	beq.n	8005160 <__sflush_r+0x98>
 80050fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	075a      	lsls	r2, r3, #29
 8005100:	d505      	bpl.n	800510e <__sflush_r+0x46>
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	1ac0      	subs	r0, r0, r3
 8005106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005108:	b10b      	cbz	r3, 800510e <__sflush_r+0x46>
 800510a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800510c:	1ac0      	subs	r0, r0, r3
 800510e:	2300      	movs	r3, #0
 8005110:	4602      	mov	r2, r0
 8005112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	4628      	mov	r0, r5
 8005118:	47b0      	blx	r6
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	d106      	bne.n	800512e <__sflush_r+0x66>
 8005120:	6829      	ldr	r1, [r5, #0]
 8005122:	291d      	cmp	r1, #29
 8005124:	d82c      	bhi.n	8005180 <__sflush_r+0xb8>
 8005126:	4a2a      	ldr	r2, [pc, #168]	; (80051d0 <__sflush_r+0x108>)
 8005128:	40ca      	lsrs	r2, r1
 800512a:	07d6      	lsls	r6, r2, #31
 800512c:	d528      	bpl.n	8005180 <__sflush_r+0xb8>
 800512e:	2200      	movs	r2, #0
 8005130:	6062      	str	r2, [r4, #4]
 8005132:	04d9      	lsls	r1, r3, #19
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	d504      	bpl.n	8005144 <__sflush_r+0x7c>
 800513a:	1c42      	adds	r2, r0, #1
 800513c:	d101      	bne.n	8005142 <__sflush_r+0x7a>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	b903      	cbnz	r3, 8005144 <__sflush_r+0x7c>
 8005142:	6560      	str	r0, [r4, #84]	; 0x54
 8005144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005146:	602f      	str	r7, [r5, #0]
 8005148:	2900      	cmp	r1, #0
 800514a:	d0ca      	beq.n	80050e2 <__sflush_r+0x1a>
 800514c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <__sflush_r+0x92>
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f8fd 	bl	8005354 <_free_r>
 800515a:	2000      	movs	r0, #0
 800515c:	6360      	str	r0, [r4, #52]	; 0x34
 800515e:	e7c1      	b.n	80050e4 <__sflush_r+0x1c>
 8005160:	6a21      	ldr	r1, [r4, #32]
 8005162:	2301      	movs	r3, #1
 8005164:	4628      	mov	r0, r5
 8005166:	47b0      	blx	r6
 8005168:	1c41      	adds	r1, r0, #1
 800516a:	d1c7      	bne.n	80050fc <__sflush_r+0x34>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0c4      	beq.n	80050fc <__sflush_r+0x34>
 8005172:	2b1d      	cmp	r3, #29
 8005174:	d001      	beq.n	800517a <__sflush_r+0xb2>
 8005176:	2b16      	cmp	r3, #22
 8005178:	d101      	bne.n	800517e <__sflush_r+0xb6>
 800517a:	602f      	str	r7, [r5, #0]
 800517c:	e7b1      	b.n	80050e2 <__sflush_r+0x1a>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	e7ad      	b.n	80050e4 <__sflush_r+0x1c>
 8005188:	690f      	ldr	r7, [r1, #16]
 800518a:	2f00      	cmp	r7, #0
 800518c:	d0a9      	beq.n	80050e2 <__sflush_r+0x1a>
 800518e:	0793      	lsls	r3, r2, #30
 8005190:	680e      	ldr	r6, [r1, #0]
 8005192:	bf08      	it	eq
 8005194:	694b      	ldreq	r3, [r1, #20]
 8005196:	600f      	str	r7, [r1, #0]
 8005198:	bf18      	it	ne
 800519a:	2300      	movne	r3, #0
 800519c:	eba6 0807 	sub.w	r8, r6, r7
 80051a0:	608b      	str	r3, [r1, #8]
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	dd9c      	ble.n	80050e2 <__sflush_r+0x1a>
 80051a8:	6a21      	ldr	r1, [r4, #32]
 80051aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051ac:	4643      	mov	r3, r8
 80051ae:	463a      	mov	r2, r7
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b0      	blx	r6
 80051b4:	2800      	cmp	r0, #0
 80051b6:	dc06      	bgt.n	80051c6 <__sflush_r+0xfe>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e78e      	b.n	80050e4 <__sflush_r+0x1c>
 80051c6:	4407      	add	r7, r0
 80051c8:	eba8 0800 	sub.w	r8, r8, r0
 80051cc:	e7e9      	b.n	80051a2 <__sflush_r+0xda>
 80051ce:	bf00      	nop
 80051d0:	20400001 	.word	0x20400001

080051d4 <_fflush_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	4605      	mov	r5, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b913      	cbnz	r3, 80051e4 <_fflush_r+0x10>
 80051de:	2500      	movs	r5, #0
 80051e0:	4628      	mov	r0, r5
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	b118      	cbz	r0, 80051ee <_fflush_r+0x1a>
 80051e6:	6983      	ldr	r3, [r0, #24]
 80051e8:	b90b      	cbnz	r3, 80051ee <_fflush_r+0x1a>
 80051ea:	f7ff fa15 	bl	8004618 <__sinit>
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <_fflush_r+0x6c>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d11b      	bne.n	800522c <_fflush_r+0x58>
 80051f4:	686c      	ldr	r4, [r5, #4]
 80051f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ef      	beq.n	80051de <_fflush_r+0xa>
 80051fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005200:	07d0      	lsls	r0, r2, #31
 8005202:	d404      	bmi.n	800520e <_fflush_r+0x3a>
 8005204:	0599      	lsls	r1, r3, #22
 8005206:	d402      	bmi.n	800520e <_fflush_r+0x3a>
 8005208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520a:	f7ff faa3 	bl	8004754 <__retarget_lock_acquire_recursive>
 800520e:	4628      	mov	r0, r5
 8005210:	4621      	mov	r1, r4
 8005212:	f7ff ff59 	bl	80050c8 <__sflush_r>
 8005216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005218:	07da      	lsls	r2, r3, #31
 800521a:	4605      	mov	r5, r0
 800521c:	d4e0      	bmi.n	80051e0 <_fflush_r+0xc>
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	059b      	lsls	r3, r3, #22
 8005222:	d4dd      	bmi.n	80051e0 <_fflush_r+0xc>
 8005224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005226:	f7ff fa96 	bl	8004756 <__retarget_lock_release_recursive>
 800522a:	e7d9      	b.n	80051e0 <_fflush_r+0xc>
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <_fflush_r+0x70>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d101      	bne.n	8005236 <_fflush_r+0x62>
 8005232:	68ac      	ldr	r4, [r5, #8]
 8005234:	e7df      	b.n	80051f6 <_fflush_r+0x22>
 8005236:	4b04      	ldr	r3, [pc, #16]	; (8005248 <_fflush_r+0x74>)
 8005238:	429c      	cmp	r4, r3
 800523a:	bf08      	it	eq
 800523c:	68ec      	ldreq	r4, [r5, #12]
 800523e:	e7da      	b.n	80051f6 <_fflush_r+0x22>
 8005240:	08005ad8 	.word	0x08005ad8
 8005244:	08005af8 	.word	0x08005af8
 8005248:	08005ab8 	.word	0x08005ab8

0800524c <_lseek_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	; (800526c <_lseek_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fb fd60 	bl	8000d20 <_lseek>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_lseek_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_lseek_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	2000014c 	.word	0x2000014c

08005270 <__swhatbuf_r>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	460e      	mov	r6, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	2900      	cmp	r1, #0
 800527a:	b096      	sub	sp, #88	; 0x58
 800527c:	4614      	mov	r4, r2
 800527e:	461d      	mov	r5, r3
 8005280:	da08      	bge.n	8005294 <__swhatbuf_r+0x24>
 8005282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	602a      	str	r2, [r5, #0]
 800528a:	061a      	lsls	r2, r3, #24
 800528c:	d410      	bmi.n	80052b0 <__swhatbuf_r+0x40>
 800528e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005292:	e00e      	b.n	80052b2 <__swhatbuf_r+0x42>
 8005294:	466a      	mov	r2, sp
 8005296:	f000 f8bb 	bl	8005410 <_fstat_r>
 800529a:	2800      	cmp	r0, #0
 800529c:	dbf1      	blt.n	8005282 <__swhatbuf_r+0x12>
 800529e:	9a01      	ldr	r2, [sp, #4]
 80052a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052a8:	425a      	negs	r2, r3
 80052aa:	415a      	adcs	r2, r3
 80052ac:	602a      	str	r2, [r5, #0]
 80052ae:	e7ee      	b.n	800528e <__swhatbuf_r+0x1e>
 80052b0:	2340      	movs	r3, #64	; 0x40
 80052b2:	2000      	movs	r0, #0
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	b016      	add	sp, #88	; 0x58
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052bc <__smakebuf_r>:
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052c0:	079d      	lsls	r5, r3, #30
 80052c2:	4606      	mov	r6, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	d507      	bpl.n	80052d8 <__smakebuf_r+0x1c>
 80052c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	2301      	movs	r3, #1
 80052d2:	6163      	str	r3, [r4, #20]
 80052d4:	b002      	add	sp, #8
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	ab01      	add	r3, sp, #4
 80052da:	466a      	mov	r2, sp
 80052dc:	f7ff ffc8 	bl	8005270 <__swhatbuf_r>
 80052e0:	9900      	ldr	r1, [sp, #0]
 80052e2:	4605      	mov	r5, r0
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff fa57 	bl	8004798 <_malloc_r>
 80052ea:	b948      	cbnz	r0, 8005300 <__smakebuf_r+0x44>
 80052ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f0:	059a      	lsls	r2, r3, #22
 80052f2:	d4ef      	bmi.n	80052d4 <__smakebuf_r+0x18>
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	e7e3      	b.n	80052c8 <__smakebuf_r+0xc>
 8005300:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <__smakebuf_r+0x7c>)
 8005302:	62b3      	str	r3, [r6, #40]	; 0x28
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	6020      	str	r0, [r4, #0]
 8005308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	6163      	str	r3, [r4, #20]
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	6120      	str	r0, [r4, #16]
 8005316:	b15b      	cbz	r3, 8005330 <__smakebuf_r+0x74>
 8005318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531c:	4630      	mov	r0, r6
 800531e:	f000 f889 	bl	8005434 <_isatty_r>
 8005322:	b128      	cbz	r0, 8005330 <__smakebuf_r+0x74>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	89a0      	ldrh	r0, [r4, #12]
 8005332:	4305      	orrs	r5, r0
 8005334:	81a5      	strh	r5, [r4, #12]
 8005336:	e7cd      	b.n	80052d4 <__smakebuf_r+0x18>
 8005338:	080045b1 	.word	0x080045b1

0800533c <__malloc_lock>:
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <__malloc_lock+0x8>)
 800533e:	f7ff ba09 	b.w	8004754 <__retarget_lock_acquire_recursive>
 8005342:	bf00      	nop
 8005344:	20000140 	.word	0x20000140

08005348 <__malloc_unlock>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__malloc_unlock+0x8>)
 800534a:	f7ff ba04 	b.w	8004756 <__retarget_lock_release_recursive>
 800534e:	bf00      	nop
 8005350:	20000140 	.word	0x20000140

08005354 <_free_r>:
 8005354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005356:	2900      	cmp	r1, #0
 8005358:	d044      	beq.n	80053e4 <_free_r+0x90>
 800535a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535e:	9001      	str	r0, [sp, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f1a1 0404 	sub.w	r4, r1, #4
 8005366:	bfb8      	it	lt
 8005368:	18e4      	addlt	r4, r4, r3
 800536a:	f7ff ffe7 	bl	800533c <__malloc_lock>
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <_free_r+0x94>)
 8005370:	9801      	ldr	r0, [sp, #4]
 8005372:	6813      	ldr	r3, [r2, #0]
 8005374:	b933      	cbnz	r3, 8005384 <_free_r+0x30>
 8005376:	6063      	str	r3, [r4, #4]
 8005378:	6014      	str	r4, [r2, #0]
 800537a:	b003      	add	sp, #12
 800537c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005380:	f7ff bfe2 	b.w	8005348 <__malloc_unlock>
 8005384:	42a3      	cmp	r3, r4
 8005386:	d908      	bls.n	800539a <_free_r+0x46>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf01      	itttt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	1949      	addeq	r1, r1, r5
 8005396:	6021      	streq	r1, [r4, #0]
 8005398:	e7ed      	b.n	8005376 <_free_r+0x22>
 800539a:	461a      	mov	r2, r3
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	b10b      	cbz	r3, 80053a4 <_free_r+0x50>
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	d9fa      	bls.n	800539a <_free_r+0x46>
 80053a4:	6811      	ldr	r1, [r2, #0]
 80053a6:	1855      	adds	r5, r2, r1
 80053a8:	42a5      	cmp	r5, r4
 80053aa:	d10b      	bne.n	80053c4 <_free_r+0x70>
 80053ac:	6824      	ldr	r4, [r4, #0]
 80053ae:	4421      	add	r1, r4
 80053b0:	1854      	adds	r4, r2, r1
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	d1e0      	bne.n	800537a <_free_r+0x26>
 80053b8:	681c      	ldr	r4, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	6053      	str	r3, [r2, #4]
 80053be:	4421      	add	r1, r4
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	e7da      	b.n	800537a <_free_r+0x26>
 80053c4:	d902      	bls.n	80053cc <_free_r+0x78>
 80053c6:	230c      	movs	r3, #12
 80053c8:	6003      	str	r3, [r0, #0]
 80053ca:	e7d6      	b.n	800537a <_free_r+0x26>
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	1961      	adds	r1, r4, r5
 80053d0:	428b      	cmp	r3, r1
 80053d2:	bf04      	itt	eq
 80053d4:	6819      	ldreq	r1, [r3, #0]
 80053d6:	685b      	ldreq	r3, [r3, #4]
 80053d8:	6063      	str	r3, [r4, #4]
 80053da:	bf04      	itt	eq
 80053dc:	1949      	addeq	r1, r1, r5
 80053de:	6021      	streq	r1, [r4, #0]
 80053e0:	6054      	str	r4, [r2, #4]
 80053e2:	e7ca      	b.n	800537a <_free_r+0x26>
 80053e4:	b003      	add	sp, #12
 80053e6:	bd30      	pop	{r4, r5, pc}
 80053e8:	20000144 	.word	0x20000144

080053ec <_read_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_read_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fc30 	bl	8000c60 <_read>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_read_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_read_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	2000014c 	.word	0x2000014c

08005410 <_fstat_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	; (8005430 <_fstat_r+0x20>)
 8005414:	2300      	movs	r3, #0
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	f7fb fc64 	bl	8000cea <_fstat>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d102      	bne.n	800542c <_fstat_r+0x1c>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	b103      	cbz	r3, 800542c <_fstat_r+0x1c>
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	2000014c 	.word	0x2000014c

08005434 <_isatty_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	; (8005450 <_isatty_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fb fc63 	bl	8000d0a <_isatty>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_isatty_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_isatty_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	2000014c 	.word	0x2000014c

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
