
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d17  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fc  00000000  00000000  00030db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257e1  00000000  00000000  00035290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126fe  00000000  00000000  0005aa71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1674  00000000  00000000  0006d16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e7e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004528  00000000  00000000  0014e834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048a0 	.word	0x080048a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080048a0 	.word	0x080048a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_GPIO_Init+0x68>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <MX_GPIO_Init+0x68>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_GPIO_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_GPIO_Init+0x68>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <MX_GPIO_Init+0x68>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_GPIO_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_GPIO_Init+0x68>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MX_GPIO_Init+0x68>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_GPIO_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	2201      	movs	r2, #1
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <__io_putchar+0x20>)
 8000610:	f002 f9bf 	bl	8002992 <HAL_UART_Transmit>
	return ch;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000fc 	.word	0x200000fc

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t *flash_adder;
	flash_adder = (uint32_t *)0x08000000;
 800062a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800062e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb1e 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f810 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ffac 	bl	8000594 <MX_GPIO_Init>
  MX_RTC_Init();
 800063c:	f000 f8b8 	bl	80007b0 <MX_RTC_Init>
  MX_TIM7_Init();
 8000640:	f000 fa22 	bl	8000a88 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000644:	f000 fa78 	bl	8000b38 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000648:	f000 f878 	bl	800073c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_Base_Start_IT(&htim7);
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <main+0x30>)
 800064e:	f001 fe83 	bl	8002358 <HAL_TIM_Base_Start_IT>
 8000652:	e7fb      	b.n	800064c <main+0x28>
 8000654:	200000b4 	.word	0x200000b4

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f984 	bl	8003974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <SystemClock_Config+0xdc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <SystemClock_Config+0xe0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006b4:	2306      	movs	r3, #6
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d0:	23b4      	movs	r3, #180	; 0xb4
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fed7 	bl	8001494 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 f85a 	bl	80007a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f0:	f000 fe80 	bl	80013f4 <HAL_PWREx_EnableOverDrive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fa:	f000 f853 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f931 	bl	8001984 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 f83c 	bl	80007a4 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2037      	movs	r0, #55	; 0x37
 8000746:	f000 fbe0 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800074a:	2037      	movs	r0, #55	; 0x37
 800074c:	f000 fbf9 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2027      	movs	r0, #39	; 0x27
 8000756:	f000 fbd8 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800075a:	2027      	movs	r0, #39	; 0x27
 800075c:	f000 fbf1 	bl	8000f42 <HAL_NVIC_EnableIRQ>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM7) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d10b      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x2a>
		count++;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000780:	701a      	strb	r2, [r3, #0]
		printf("%d \r\n", count);
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800078a:	f003 f8fb 	bl	8003984 <iprintf>
	}
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40001400 	.word	0x40001400
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	080048b8 	.word	0x080048b8

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_RTC_Init+0x44>)
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <MX_RTC_Init+0x48>)
 80007b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_RTC_Init+0x44>)
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_RTC_Init+0x44>)
 80007c2:	227f      	movs	r2, #127	; 0x7f
 80007c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_RTC_Init+0x44>)
 80007c8:	22ff      	movs	r2, #255	; 0xff
 80007ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_RTC_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_RTC_Init+0x44>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_RTC_Init+0x44>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_RTC_Init+0x44>)
 80007e0:	f001 fc70 	bl	80020c4 <HAL_RTC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007ea:	f7ff ffdb 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000090 	.word	0x20000090
 80007f8:	40002800 	.word	0x40002800

080007fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2230      	movs	r2, #48	; 0x30
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f003 f8b1 	bl	8003974 <memset>
  if(rtcHandle->Instance==RTC)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <HAL_RTC_MspInit+0x4c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d111      	bne.n	8000840 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800081c:	2320      	movs	r3, #32
 800081e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fa8a 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000836:	f7ff ffb5 	bl	80007a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_RTC_MspInit+0x50>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	; 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40002800 	.word	0x40002800
 800084c:	42470e3c 	.word	0x42470e3c

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 fa12 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART3_IRQHandler+0x10>)
 80008fa:	f002 f8dd 	bl	8002ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000fc 	.word	0x200000fc

08000908 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TIM7_IRQHandler+0x10>)
 800090e:	f001 fd93 	bl	8002438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000b4 	.word	0x200000b4

0800091c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
	}

return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe45 	bl	8000600 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
	}
	return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 ff7a 	bl	8003920 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20030000 	.word	0x20030000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200000b0 	.word	0x200000b0
 8000a60:	20000158 	.word	0x20000158

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_TIM7_Init+0x64>)
 8000a98:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_TIM7_Init+0x68>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_TIM7_Init+0x64>)
 8000a9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aa2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8999;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aac:	f242 3227 	movw	r2, #8999	; 0x2327
 8000ab0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_TIM7_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aba:	f001 fbfd 	bl	80022b8 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ac4:	f7ff fe6e 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_TIM7_Init+0x64>)
 8000ad6:	f001 fe7f 	bl	80027d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f7ff fe60 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000b4 	.word	0x200000b4
 8000af0:	40001400 	.word	0x40001400

08000af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <HAL_TIM_Base_MspInit+0x3c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10d      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_TIM_Base_MspInit+0x40>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <HAL_TIM_Base_MspInit+0x40>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <HAL_TIM_Base_MspInit+0x40>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40001400 	.word	0x40001400
 8000b34:	40023800 	.word	0x40023800

08000b38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART3_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART3_UART_Init+0x4c>)
 8000b70:	f001 fec2 	bl	80028f8 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f7ff fe13 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000fc 	.word	0x200000fc
 8000b88:	40004800 	.word	0x40004800

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12c      	bne.n	8000c08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c04:	f000 fa4a 	bl	800109c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004800 	.word	0x40004800
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ff0d 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 fe6f 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fce9 	bl	8000624 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	20000154 	.word	0x20000154

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f92b 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fdd4 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f943 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f90b 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000140 	.word	0x20000140

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000140 	.word	0x20000140

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff feda 	bl	8000d3c <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e052      	b.n	800104e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0216 	bic.w	r2, r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <HAL_DMA_Abort+0x62>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0208 	bic.w	r2, r2, #8
 8000fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff8:	e013      	b.n	8001022 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ffa:	f7ff fe9f 	bl	8000d3c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b05      	cmp	r3, #5
 8001006:	d90c      	bls.n	8001022 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2220      	movs	r2, #32
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e015      	b.n	800104e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e4      	bne.n	8000ffa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d004      	beq.n	8001074 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e00c      	b.n	800108e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2205      	movs	r2, #5
 8001078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0201 	bic.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e177      	b.n	80013a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8166 	bne.w	80013a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80c0 	beq.w	80013a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a61      	ldr	r2, [pc, #388]	; (80013c4 <HAL_GPIO_Init+0x328>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_GPIO_Init+0x32c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d037      	beq.n	80012da <HAL_GPIO_Init+0x23e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_GPIO_Init+0x330>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d031      	beq.n	80012d6 <HAL_GPIO_Init+0x23a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x236>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a55      	ldr	r2, [pc, #340]	; (80013d4 <HAL_GPIO_Init+0x338>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x232>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x33c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x22e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a53      	ldr	r2, [pc, #332]	; (80013dc <HAL_GPIO_Init+0x340>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x22a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x344>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x348>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <HAL_GPIO_Init+0x34c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x21e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x350>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x21a>
 80012b2:	2309      	movs	r3, #9
 80012b4:	e012      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012b6:	230a      	movs	r3, #10
 80012b8:	e010      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ba:	2308      	movs	r3, #8
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x328>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <HAL_GPIO_Init+0x354>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a34      	ldr	r2, [pc, #208]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae84 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40022000 	.word	0x40022000
 80013ec:	40022400 	.word	0x40022400
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_PWREx_EnableOverDrive+0x90>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_PWREx_EnableOverDrive+0x90>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_PWREx_EnableOverDrive+0x90>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_PWREx_EnableOverDrive+0x94>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff fc8c 	bl	8000d3c <HAL_GetTick>
 8001424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001426:	e009      	b.n	800143c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001428:	f7ff fc88 	bl	8000d3c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001436:	d901      	bls.n	800143c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e01f      	b.n	800147c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_PWREx_EnableOverDrive+0x98>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001448:	d1ee      	bne.n	8001428 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fc74 	bl	8000d3c <HAL_GetTick>
 8001454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001456:	e009      	b.n	800146c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001458:	f7ff fc70 	bl	8000d3c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001466:	d901      	bls.n	800146c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e007      	b.n	800147c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_PWREx_EnableOverDrive+0x98>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001478:	d1ee      	bne.n	8001458 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	420e0040 	.word	0x420e0040
 800148c:	40007000 	.word	0x40007000
 8001490:	420e0044 	.word	0x420e0044

08001494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e267      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d075      	beq.n	800159e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d112      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d6:	d10b      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d05b      	beq.n	800159c <HAL_RCC_OscConfig+0x108>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d157      	bne.n	800159c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e242      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x74>
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a75      	ldr	r2, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6f      	ldr	r2, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fbf6 	bl	8000d3c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fbf2 	bl	8000d3c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e207      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xc0>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fbe2 	bl	8000d3c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fbde 	bl	8000d3c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1f3      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0xe8>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1c7      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x244>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb97 	bl	8000d3c <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb93 	bl	8000d3c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a8      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4925      	ldr	r1, [pc, #148]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x244>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb76 	bl	8000d3c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fb72 	bl	8000d3c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e187      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d036      	beq.n	80016ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d016      	beq.n	80016b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x248>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fb56 	bl	8000d3c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fb52 	bl	8000d3c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e167      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x200>
 80016b2:	e01b      	b.n	80016ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_OscConfig+0x248>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb3f 	bl	8000d3c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	e00e      	b.n	80016e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb3b 	bl	8000d3c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d907      	bls.n	80016e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e150      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470000 	.word	0x42470000
 80016dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ea      	bne.n	80016c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8097 	beq.w	8001828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a7c      	ldr	r2, [pc, #496]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b7a      	ldr	r3, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b77      	ldr	r3, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001736:	4b74      	ldr	r3, [pc, #464]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a73      	ldr	r2, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff fafb 	bl	8000d3c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff faf7 	bl	8000d3c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e10c      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x2ea>
 8001770:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a63      	ldr	r2, [pc, #396]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x324>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x30c>
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0x324>
 80017a0:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a57      	ldr	r2, [pc, #348]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fabc 	bl	8000d3c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fab8 	bl	8000d3c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0cb      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0ee      	beq.n	80017c8 <HAL_RCC_OscConfig+0x334>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff faa6 	bl	8000d3c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff faa2 	bl	8000d3c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0b5      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ee      	bne.n	80017f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a1 	beq.w	8001974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d05c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d141      	bne.n	80018ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_OscConfig+0x478>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fa76 	bl	8000d3c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fa72 	bl	8000d3c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e087      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	491b      	ldr	r1, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x478>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa4b 	bl	8000d3c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fa47 	bl	8000d3c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e05c      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x416>
 80018c8:	e054      	b.n	8001974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa34 	bl	8000d3c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fa30 	bl	8000d3c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e045      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x444>
 80018f6:	e03d      	b.n	8001974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e038      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000
 800190c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x4ec>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d028      	beq.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d121      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d11a      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	4293      	cmp	r3, r2
 800194a:	d111      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0cc      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d90c      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	494d      	ldr	r1, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d044      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d119      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e067      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4934      	ldr	r1, [pc, #208]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f962 	bl	8000d3c <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f95e 	bl	8000d3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e04f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d20c      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4916      	ldr	r1, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490a      	ldr	r1, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8c2 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00
 8001b40:	40023800 	.word	0x40023800
 8001b44:	080048c0 	.word	0x080048c0
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b54:	b090      	sub	sp, #64	; 0x40
 8001b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d00d      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x40>
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	f200 80a1 	bhi.w	8001cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b82:	e09b      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b88:	e09b      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8e:	e098      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	2200      	movs	r2, #0
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bbc:	fb03 f201 	mul.w	r2, r3, r1
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	fb00 f303 	mul.w	r3, r0, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bca:	fba0 1202 	umull	r1, r2, r0, r2
 8001bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	4413      	add	r3, r2
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	61fa      	str	r2, [r7, #28]
 8001be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bea:	f7fe fb51 	bl	8000290 <__aeabi_uldivmod>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf6:	e053      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	2200      	movs	r2, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	617a      	str	r2, [r7, #20]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c0a:	f04f 0b00 	mov.w	fp, #0
 8001c0e:	4652      	mov	r2, sl
 8001c10:	465b      	mov	r3, fp
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	0159      	lsls	r1, r3, #5
 8001c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c20:	0150      	lsls	r0, r2, #5
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ebb2 080a 	subs.w	r8, r2, sl
 8001c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c42:	ebb2 0408 	subs.w	r4, r2, r8
 8001c46:	eb63 0509 	sbc.w	r5, r3, r9
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	00eb      	lsls	r3, r5, #3
 8001c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c58:	00e2      	lsls	r2, r4, #3
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	eb14 030a 	adds.w	r3, r4, sl
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	eb45 030b 	adc.w	r3, r5, fp
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c76:	4629      	mov	r1, r5
 8001c78:	028b      	lsls	r3, r1, #10
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c80:	4621      	mov	r1, r4
 8001c82:	028a      	lsls	r2, r1, #10
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c94:	f7fe fafc 	bl	8000290 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3740      	adds	r7, #64	; 0x40
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	017d7840 	.word	0x017d7840

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff0 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	080048d0 	.word	0x080048d0

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffdc 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0b5b      	lsrs	r3, r3, #13
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	080048d0 	.word	0x080048d0

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10b      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d075      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d78:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe ffdd 	bl	8000d3c <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d86:	f7fe ffd9 	bl	8000d3c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e189      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d98:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	019a      	lsls	r2, r3, #6
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	071b      	lsls	r3, r3, #28
 8001dbc:	4981      	ldr	r1, [pc, #516]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01f      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd6:	0f1b      	lsrs	r3, r3, #28
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	019a      	lsls	r2, r3, #6
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	071b      	lsls	r3, r3, #28
 8001df0:	4974      	ldr	r1, [pc, #464]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfe:	f023 021f 	bic.w	r2, r3, #31
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	496e      	ldr	r1, [pc, #440]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	019a      	lsls	r2, r3, #6
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	071b      	lsls	r3, r3, #28
 8001e30:	4964      	ldr	r1, [pc, #400]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e38:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e3e:	f7fe ff7d 	bl	8000d3c <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e46:	f7fe ff79 	bl	8000d3c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e129      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d079      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e7c:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e82:	f7fe ff5b 	bl	8000d3c <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e8a:	f7fe ff57 	bl	8000d3c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e107      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea8:	d0ef      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	0f1b      	lsrs	r3, r3, #28
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	019a      	lsls	r2, r3, #6
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	061b      	lsls	r3, r3, #24
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	071b      	lsls	r3, r3, #28
 8001ed6:	493b      	ldr	r1, [pc, #236]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	4934      	ldr	r1, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01e      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	0e1b      	lsrs	r3, r3, #24
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	019a      	lsls	r2, r3, #6
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	061b      	lsls	r3, r3, #24
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	071b      	lsls	r3, r3, #28
 8001f24:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fef8 	bl	8000d3c <HAL_GetTick>
 8001f4c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f50:	f7fe fef4 	bl	8000d3c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0a4      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f6e:	d1ef      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 808b 	beq.w	8002094 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa6:	f7fe fec9 	bl	8000d3c <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fac:	e010      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe fec5 	bl	8000d3c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d909      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e075      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001fc0:	42470068 	.word	0x42470068
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470070 	.word	0x42470070
 8001fcc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0e8      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02f      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d028      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002002:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002010:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d114      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fe8b 	bl	8000d3c <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fe87 	bl	8000d3c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e035      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ee      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002058:	d10d      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800206a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206e:	4912      	ldr	r1, [pc, #72]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
 8002074:	e005      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800207c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002080:	6093      	str	r3, [r2, #8]
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002090:	4313      	orrs	r3, r2
 8002092:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80020a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40007000 	.word	0x40007000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470e40 	.word	0x42470e40
 80020c0:	424711e0 	.word	0x424711e0

080020c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e066      	b.n	80021a8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7f5b      	ldrb	r3, [r3, #29]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fb86 	bl	80007fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	22ca      	movs	r2, #202	; 0xca
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2253      	movs	r2, #83	; 0x53
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f87a 	bl	8002200 <RTC_EnterInitMode>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d12c      	bne.n	8002170 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002128:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68d2      	ldr	r2, [r2, #12]
 8002150:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6919      	ldr	r1, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f881 	bl	800226e <RTC_ExitInitMode>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d113      	bne.n	800219e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7fe fdb6 	bl	8000d3c <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021d2:	e009      	b.n	80021e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021d4:	f7fe fdb2 	bl	8000d3c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e2:	d901      	bls.n	80021e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e007      	b.n	80021f8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d122      	bne.n	8002264 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800222e:	f7fe fd85 	bl	8000d3c <HAL_GetTick>
 8002232:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002234:	e00c      	b.n	8002250 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002236:	f7fe fd81 	bl	8000d3c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002244:	d904      	bls.n	8002250 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <RTC_EnterInitMode+0x64>
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d1e8      	bne.n	8002236 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002288:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff89 	bl	80021b0 <HAL_RTC_WaitForSynchro>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e041      	b.n	800234e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fc08 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f000 f9ce 	bl	8002698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04e      	b.n	800240e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <HAL_TIM_Base_Start_IT+0xc4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d01d      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_TIM_Base_Start_IT+0xc8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_TIM_Base_Start_IT+0xcc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_TIM_Base_Start_IT+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_TIM_Base_Start_IT+0xd4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_TIM_Base_Start_IT+0xd8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_Base_Start_IT+0xdc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d010      	beq.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e007      	b.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800
 8002428:	40000c00 	.word	0x40000c00
 800242c:	40010400 	.word	0x40010400
 8002430:	40014000 	.word	0x40014000
 8002434:	40001800 	.word	0x40001800

08002438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0202 	mvn.w	r2, #2
 8002464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8ee 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8e0 	bl	8002648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f8f1 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d122      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0204 	mvn.w	r2, #4
 80024b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f8c4 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8b6 	bl	8002648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8c7 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d122      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d11b      	bne.n	800253c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0208 	mvn.w	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f89a 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f88c 	bl	8002648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f89d 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b10      	cmp	r3, #16
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0210 	mvn.w	r2, #16
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2208      	movs	r2, #8
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f870 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f862 	bl	8002648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f873 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0201 	mvn.w	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe f8d4 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f97e 	bl	80028e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f838 	bl	8002684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0220 	mvn.w	r2, #32
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f948 	bl	80028d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a40      	ldr	r2, [pc, #256]	; (80027ac <TIM_Base_SetConfig+0x114>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b6:	d00f      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3d      	ldr	r2, [pc, #244]	; (80027b0 <TIM_Base_SetConfig+0x118>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <TIM_Base_SetConfig+0x11c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <TIM_Base_SetConfig+0x120>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <TIM_Base_SetConfig+0x124>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <TIM_Base_SetConfig+0x114>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d027      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <TIM_Base_SetConfig+0x118>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d023      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <TIM_Base_SetConfig+0x11c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <TIM_Base_SetConfig+0x120>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01b      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a29      	ldr	r2, [pc, #164]	; (80027bc <TIM_Base_SetConfig+0x124>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d017      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <TIM_Base_SetConfig+0x128>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <TIM_Base_SetConfig+0x12c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00f      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <TIM_Base_SetConfig+0x130>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <TIM_Base_SetConfig+0x134>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <TIM_Base_SetConfig+0x138>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <TIM_Base_SetConfig+0x13c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <TIM_Base_SetConfig+0x114>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0xf8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <TIM_Base_SetConfig+0x124>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d103      	bne.n	8002798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	615a      	str	r2, [r3, #20]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800
 80027b8:	40000c00 	.word	0x40000c00
 80027bc:	40010400 	.word	0x40010400
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800
 80027cc:	40001800 	.word	0x40001800
 80027d0:	40001c00 	.word	0x40001c00
 80027d4:	40002000 	.word	0x40002000

080027d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e05a      	b.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d022      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d01d      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d018      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00e      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d009      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10c      	bne.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800
 80028c0:	40000c00 	.word	0x40000c00
 80028c4:	40010400 	.word	0x40010400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40001800 	.word	0x40001800

080028d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e03f      	b.n	800298a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f934 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fd7b 	bl	8003438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d17c      	bne.n	8002aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit+0x2c>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e075      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x3e>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e06e      	b.n	8002aae <HAL_UART_Transmit+0x11c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e6:	f7fe f9a9 	bl	8000d3c <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	d108      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e003      	b.n	8002a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a24:	e02a      	b.n	8002a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 faf9 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e036      	b.n	8002aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e007      	b.n	8002a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1cf      	bne.n	8002a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fac9 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0ba      	sub	sp, #232	; 0xe8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_UART_IRQHandler+0x66>
 8002b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fbd3 	bl	80032c2 <UART_Receive_IT>
      return;
 8002b1c:	e256      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80de 	beq.w	8002ce4 <HAL_UART_IRQHandler+0x22c>
 8002b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80d1 	beq.w	8002ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_UART_IRQHandler+0xae>
 8002b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xd2>
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xf6>
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <HAL_UART_IRQHandler+0x126>
 8002bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f043 0208 	orr.w	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 81ed 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_UART_IRQHandler+0x14e>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb5e 	bl	80032c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <HAL_UART_IRQHandler+0x17a>
 8002c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04f      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa66 	bl	8003104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d141      	bne.n	8002cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1d9      	bne.n	8002c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	4a7d      	ldr	r2, [pc, #500]	; (8002e94 <HAL_UART_IRQHandler+0x3dc>)
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f9d5 	bl	8001056 <HAL_DMA_Abort_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e00e      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f99a 	bl	8002ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	e00a      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f996 	bl	8002ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	e006      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f992 	bl	8002ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cde:	e170      	b.n	8002fc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	bf00      	nop
    return;
 8002ce2:	e16e      	b.n	8002fc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 814a 	bne.w	8002f82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8143 	beq.w	8002f82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 813c 	beq.w	8002f82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	f040 80b4 	bne.w	8002e98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8140 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	f080 8139 	bcs.w	8002fc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d66:	f000 8088 	beq.w	8002e7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1d9      	bne.n	8002d6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e1      	bne.n	8002db6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e3      	bne.n	8002df2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4a:	f023 0310 	bic.w	r3, r3, #16
 8002e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e3      	bne.n	8002e38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f87e 	bl	8000f76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8c0 	bl	8003010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e90:	e099      	b.n	8002fc6 <HAL_UART_IRQHandler+0x50e>
 8002e92:	bf00      	nop
 8002e94:	080031cb 	.word	0x080031cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 808b 	beq.w	8002fca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8086 	beq.w	8002fca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ee2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e3      	bne.n	8002ebe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	623b      	str	r3, [r7, #32]
   return(result);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e3      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	69b9      	ldr	r1, [r7, #24]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e3      	bne.n	8002f3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f848 	bl	8003010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f80:	e023      	b.n	8002fca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x4ea>
 8002f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f929 	bl	80031f2 <UART_Transmit_IT>
    return;
 8002fa0:	e014      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00e      	beq.n	8002fcc <HAL_UART_IRQHandler+0x514>
 8002fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f969 	bl	8003292 <UART_EndTransmit_IT>
    return;
 8002fc0:	e004      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
    return;
 8002fc2:	bf00      	nop
 8002fc4:	e002      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
      return;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
      return;
 8002fca:	bf00      	nop
  }
}
 8002fcc:	37e8      	adds	r7, #232	; 0xe8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b090      	sub	sp, #64	; 0x40
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	e050      	b.n	80030dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d04c      	beq.n	80030dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
 8003048:	f7fd fe78 	bl	8000d3c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003054:	429a      	cmp	r2, r3
 8003056:	d241      	bcs.n	80030dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003078:	637a      	str	r2, [r7, #52]	; 0x34
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800307e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	613b      	str	r3, [r7, #16]
   return(result);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ac:	623a      	str	r2, [r7, #32]
 80030ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	69f9      	ldr	r1, [r7, #28]
 80030b2:	6a3a      	ldr	r2, [r7, #32]
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e5      	bne.n	800308c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e00f      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d09f      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3740      	adds	r7, #64	; 0x40
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b095      	sub	sp, #84	; 0x54
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312c:	643a      	str	r2, [r7, #64]	; 0x40
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3314      	adds	r3, #20
 800315e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	2b01      	cmp	r3, #1
 800317a:	d119      	bne.n	80031b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	60bb      	str	r3, [r7, #8]
   return(result);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 0310 	bic.w	r3, r3, #16
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800319c:	61ba      	str	r2, [r7, #24]
 800319e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	613b      	str	r3, [r7, #16]
   return(result);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e5      	bne.n	800317c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031be:	bf00      	nop
 80031c0:	3754      	adds	r7, #84	; 0x54
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff09 	bl	8002ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b21      	cmp	r3, #33	; 0x21
 8003204:	d13e      	bne.n	8003284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d114      	bne.n	800323a <UART_Transmit_IT+0x48>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	1c9a      	adds	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]
 8003238:	e008      	b.n	800324c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6211      	str	r1, [r2, #32]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4619      	mov	r1, r3
 800325a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10f      	bne.n	8003280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fe8e 	bl	8002fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08c      	sub	sp, #48	; 0x30
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b22      	cmp	r3, #34	; 0x22
 80032d4:	f040 80ab 	bne.w	800342e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d117      	bne.n	8003312 <UART_Receive_IT+0x50>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003300:	b29a      	uxth	r2, r3
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
 8003310:	e026      	b.n	8003360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d007      	beq.n	8003336 <UART_Receive_IT+0x74>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <UART_Receive_IT+0x82>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e008      	b.n	8003356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003350:	b2da      	uxtb	r2, r3
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4619      	mov	r1, r3
 800336e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003370:	2b00      	cmp	r3, #0
 8003372:	d15a      	bne.n	800342a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0220 	bic.w	r2, r2, #32
 8003382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d135      	bne.n	8003420 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f023 0310 	bic.w	r3, r3, #16
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	623a      	str	r2, [r7, #32]
 80033dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	69f9      	ldr	r1, [r7, #28]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d10a      	bne.n	8003412 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fdf9 	bl	8003010 <HAL_UARTEx_RxEventCallback>
 800341e:	e002      	b.n	8003426 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fde1 	bl	8002fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e002      	b.n	8003430 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b0c0      	sub	sp, #256	; 0x100
 800343e:	af00      	add	r7, sp, #0
 8003440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	ea40 0301 	orr.w	r3, r0, r1
 8003460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	431a      	orrs	r2, r3
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003490:	f021 010c 	bic.w	r1, r1, #12
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800349e:	430b      	orrs	r3, r1
 80034a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	6999      	ldr	r1, [r3, #24]
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	ea40 0301 	orr.w	r3, r0, r1
 80034be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <UART_SetConfig+0x2cc>)
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d005      	beq.n	80034d8 <UART_SetConfig+0xa0>
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <UART_SetConfig+0x2d0>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d104      	bne.n	80034e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7fe fc20 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80034dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034e0:	e003      	b.n	80034ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034e2:	f7fe fc07 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 80034e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f4:	f040 810c 	bne.w	8003710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	1891      	adds	r1, r2, r2
 8003510:	65b9      	str	r1, [r7, #88]	; 0x58
 8003512:	415b      	adcs	r3, r3
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800351a:	4621      	mov	r1, r4
 800351c:	eb12 0801 	adds.w	r8, r2, r1
 8003520:	4629      	mov	r1, r5
 8003522:	eb43 0901 	adc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003548:	462b      	mov	r3, r5
 800354a:	eb49 0303 	adc.w	r3, r9, r3
 800354e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800355e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003566:	460b      	mov	r3, r1
 8003568:	18db      	adds	r3, r3, r3
 800356a:	653b      	str	r3, [r7, #80]	; 0x50
 800356c:	4613      	mov	r3, r2
 800356e:	eb42 0303 	adc.w	r3, r2, r3
 8003572:	657b      	str	r3, [r7, #84]	; 0x54
 8003574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800357c:	f7fc fe88 	bl	8000290 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4b61      	ldr	r3, [pc, #388]	; (800370c <UART_SetConfig+0x2d4>)
 8003586:	fba3 2302 	umull	r2, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	011c      	lsls	r4, r3, #4
 800358e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800359c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80035a8:	415b      	adcs	r3, r3
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035b0:	4641      	mov	r1, r8
 80035b2:	eb12 0a01 	adds.w	sl, r2, r1
 80035b6:	4649      	mov	r1, r9
 80035b8:	eb43 0b01 	adc.w	fp, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d0:	4692      	mov	sl, r2
 80035d2:	469b      	mov	fp, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	eb1a 0303 	adds.w	r3, sl, r3
 80035da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035de:	464b      	mov	r3, r9
 80035e0:	eb4b 0303 	adc.w	r3, fp, r3
 80035e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035fc:	460b      	mov	r3, r1
 80035fe:	18db      	adds	r3, r3, r3
 8003600:	643b      	str	r3, [r7, #64]	; 0x40
 8003602:	4613      	mov	r3, r2
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
 800360a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800360e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003612:	f7fc fe3d 	bl	8000290 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4611      	mov	r1, r2
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <UART_SetConfig+0x2d4>)
 800361e:	fba3 2301 	umull	r2, r3, r3, r1
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2264      	movs	r2, #100	; 0x64
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	1acb      	subs	r3, r1, r3
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <UART_SetConfig+0x2d4>)
 8003634:	fba3 2302 	umull	r2, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003640:	441c      	add	r4, r3
 8003642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800364c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	63b9      	str	r1, [r7, #56]	; 0x38
 800365c:	415b      	adcs	r3, r3
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003664:	4641      	mov	r1, r8
 8003666:	1851      	adds	r1, r2, r1
 8003668:	6339      	str	r1, [r7, #48]	; 0x30
 800366a:	4649      	mov	r1, r9
 800366c:	414b      	adcs	r3, r1
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800367c:	4659      	mov	r1, fp
 800367e:	00cb      	lsls	r3, r1, #3
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003686:	4651      	mov	r1, sl
 8003688:	00ca      	lsls	r2, r1, #3
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	4603      	mov	r3, r0
 8003690:	4642      	mov	r2, r8
 8003692:	189b      	adds	r3, r3, r2
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003698:	464b      	mov	r3, r9
 800369a:	460a      	mov	r2, r1
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036b8:	460b      	mov	r3, r1
 80036ba:	18db      	adds	r3, r3, r3
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	4613      	mov	r3, r2
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ce:	f7fc fddf 	bl	8000290 <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <UART_SetConfig+0x2d4>)
 80036d8:	fba3 1302 	umull	r1, r3, r3, r2
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	2164      	movs	r1, #100	; 0x64
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	3332      	adds	r3, #50	; 0x32
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <UART_SetConfig+0x2d4>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4422      	add	r2, r4
 80036fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003700:	e105      	b.n	800390e <UART_SetConfig+0x4d6>
 8003702:	bf00      	nop
 8003704:	40011000 	.word	0x40011000
 8003708:	40011400 	.word	0x40011400
 800370c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800371a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800371e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003722:	4642      	mov	r2, r8
 8003724:	464b      	mov	r3, r9
 8003726:	1891      	adds	r1, r2, r2
 8003728:	6239      	str	r1, [r7, #32]
 800372a:	415b      	adcs	r3, r3
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003732:	4641      	mov	r1, r8
 8003734:	1854      	adds	r4, r2, r1
 8003736:	4649      	mov	r1, r9
 8003738:	eb43 0501 	adc.w	r5, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	00eb      	lsls	r3, r5, #3
 8003746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800374a:	00e2      	lsls	r2, r4, #3
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	4643      	mov	r3, r8
 8003752:	18e3      	adds	r3, r4, r3
 8003754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003758:	464b      	mov	r3, r9
 800375a:	eb45 0303 	adc.w	r3, r5, r3
 800375e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800376e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377e:	4629      	mov	r1, r5
 8003780:	008b      	lsls	r3, r1, #2
 8003782:	4621      	mov	r1, r4
 8003784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003788:	4621      	mov	r1, r4
 800378a:	008a      	lsls	r2, r1, #2
 800378c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003790:	f7fc fd7e 	bl	8000290 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4b60      	ldr	r3, [pc, #384]	; (800391c <UART_SetConfig+0x4e4>)
 800379a:	fba3 2302 	umull	r2, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	011c      	lsls	r4, r3, #4
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	61b9      	str	r1, [r7, #24]
 80037bc:	415b      	adcs	r3, r3
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c4:	4641      	mov	r1, r8
 80037c6:	1851      	adds	r1, r2, r1
 80037c8:	6139      	str	r1, [r7, #16]
 80037ca:	4649      	mov	r1, r9
 80037cc:	414b      	adcs	r3, r1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037dc:	4659      	mov	r1, fp
 80037de:	00cb      	lsls	r3, r1, #3
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e6:	4651      	mov	r1, sl
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	4642      	mov	r2, r8
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037f8:	464b      	mov	r3, r9
 80037fa:	460a      	mov	r2, r1
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	67bb      	str	r3, [r7, #120]	; 0x78
 800380e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800381c:	4649      	mov	r1, r9
 800381e:	008b      	lsls	r3, r1, #2
 8003820:	4641      	mov	r1, r8
 8003822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003826:	4641      	mov	r1, r8
 8003828:	008a      	lsls	r2, r1, #2
 800382a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800382e:	f7fc fd2f 	bl	8000290 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b39      	ldr	r3, [pc, #228]	; (800391c <UART_SetConfig+0x4e4>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a34      	ldr	r2, [pc, #208]	; (800391c <UART_SetConfig+0x4e4>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003856:	441c      	add	r4, r3
 8003858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385c:	2200      	movs	r2, #0
 800385e:	673b      	str	r3, [r7, #112]	; 0x70
 8003860:	677a      	str	r2, [r7, #116]	; 0x74
 8003862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003866:	4642      	mov	r2, r8
 8003868:	464b      	mov	r3, r9
 800386a:	1891      	adds	r1, r2, r2
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	415b      	adcs	r3, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003876:	4641      	mov	r1, r8
 8003878:	1851      	adds	r1, r2, r1
 800387a:	6039      	str	r1, [r7, #0]
 800387c:	4649      	mov	r1, r9
 800387e:	414b      	adcs	r3, r1
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800388e:	4659      	mov	r1, fp
 8003890:	00cb      	lsls	r3, r1, #3
 8003892:	4651      	mov	r1, sl
 8003894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003898:	4651      	mov	r1, sl
 800389a:	00ca      	lsls	r2, r1, #3
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	4642      	mov	r2, r8
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	663b      	str	r3, [r7, #96]	; 0x60
 80038bc:	667a      	str	r2, [r7, #100]	; 0x64
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038ca:	4649      	mov	r1, r9
 80038cc:	008b      	lsls	r3, r1, #2
 80038ce:	4641      	mov	r1, r8
 80038d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d4:	4641      	mov	r1, r8
 80038d6:	008a      	lsls	r2, r1, #2
 80038d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038dc:	f7fc fcd8 	bl	8000290 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <UART_SetConfig+0x4e4>)
 80038e6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2164      	movs	r1, #100	; 0x64
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	3332      	adds	r3, #50	; 0x32
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <UART_SetConfig+0x4e4>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4422      	add	r2, r4
 800390c:	609a      	str	r2, [r3, #8]
}
 800390e:	bf00      	nop
 8003910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	51eb851f 	.word	0x51eb851f

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	2000000c 	.word	0x2000000c

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f000 ffae 	bl	80048a0 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	08004978 	.word	0x08004978
 8003968:	08004978 	.word	0x08004978
 800396c:	08004978 	.word	0x08004978
 8003970:	0800497c 	.word	0x0800497c

08003974 <memset>:
 8003974:	4402      	add	r2, r0
 8003976:	4603      	mov	r3, r0
 8003978:	4293      	cmp	r3, r2
 800397a:	d100      	bne.n	800397e <memset+0xa>
 800397c:	4770      	bx	lr
 800397e:	f803 1b01 	strb.w	r1, [r3], #1
 8003982:	e7f9      	b.n	8003978 <memset+0x4>

08003984 <iprintf>:
 8003984:	b40f      	push	{r0, r1, r2, r3}
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <iprintf+0x2c>)
 8003988:	b513      	push	{r0, r1, r4, lr}
 800398a:	681c      	ldr	r4, [r3, #0]
 800398c:	b124      	cbz	r4, 8003998 <iprintf+0x14>
 800398e:	69a3      	ldr	r3, [r4, #24]
 8003990:	b913      	cbnz	r3, 8003998 <iprintf+0x14>
 8003992:	4620      	mov	r0, r4
 8003994:	f000 f866 	bl	8003a64 <__sinit>
 8003998:	ab05      	add	r3, sp, #20
 800399a:	9a04      	ldr	r2, [sp, #16]
 800399c:	68a1      	ldr	r1, [r4, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 f9bd 	bl	8003d20 <_vfiprintf_r>
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ac:	b004      	add	sp, #16
 80039ae:	4770      	bx	lr
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <std>:
 80039b4:	2300      	movs	r3, #0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	e9c0 3300 	strd	r3, r3, [r0]
 80039be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039c2:	6083      	str	r3, [r0, #8]
 80039c4:	8181      	strh	r1, [r0, #12]
 80039c6:	6643      	str	r3, [r0, #100]	; 0x64
 80039c8:	81c2      	strh	r2, [r0, #14]
 80039ca:	6183      	str	r3, [r0, #24]
 80039cc:	4619      	mov	r1, r3
 80039ce:	2208      	movs	r2, #8
 80039d0:	305c      	adds	r0, #92	; 0x5c
 80039d2:	f7ff ffcf 	bl	8003974 <memset>
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x38>)
 80039d8:	6263      	str	r3, [r4, #36]	; 0x24
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <std+0x3c>)
 80039dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <std+0x40>)
 80039e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <std+0x44>)
 80039e4:	6224      	str	r4, [r4, #32]
 80039e6:	6323      	str	r3, [r4, #48]	; 0x30
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	bf00      	nop
 80039ec:	080042c9 	.word	0x080042c9
 80039f0:	080042eb 	.word	0x080042eb
 80039f4:	08004323 	.word	0x08004323
 80039f8:	08004347 	.word	0x08004347

080039fc <_cleanup_r>:
 80039fc:	4901      	ldr	r1, [pc, #4]	; (8003a04 <_cleanup_r+0x8>)
 80039fe:	f000 b8af 	b.w	8003b60 <_fwalk_reent>
 8003a02:	bf00      	nop
 8003a04:	08004621 	.word	0x08004621

08003a08 <__sfmoreglue>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	2268      	movs	r2, #104	; 0x68
 8003a0c:	1e4d      	subs	r5, r1, #1
 8003a0e:	4355      	muls	r5, r2
 8003a10:	460e      	mov	r6, r1
 8003a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a16:	f000 f8e5 	bl	8003be4 <_malloc_r>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	b140      	cbz	r0, 8003a30 <__sfmoreglue+0x28>
 8003a1e:	2100      	movs	r1, #0
 8003a20:	e9c0 1600 	strd	r1, r6, [r0]
 8003a24:	300c      	adds	r0, #12
 8003a26:	60a0      	str	r0, [r4, #8]
 8003a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a2c:	f7ff ffa2 	bl	8003974 <memset>
 8003a30:	4620      	mov	r0, r4
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <__sfp_lock_acquire>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__sfp_lock_acquire+0x8>)
 8003a36:	f000 b8b3 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000145 	.word	0x20000145

08003a40 <__sfp_lock_release>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__sfp_lock_release+0x8>)
 8003a42:	f000 b8ae 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000145 	.word	0x20000145

08003a4c <__sinit_lock_acquire>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__sinit_lock_acquire+0x8>)
 8003a4e:	f000 b8a7 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000146 	.word	0x20000146

08003a58 <__sinit_lock_release>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__sinit_lock_release+0x8>)
 8003a5a:	f000 b8a2 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000146 	.word	0x20000146

08003a64 <__sinit>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	f7ff fff0 	bl	8003a4c <__sinit_lock_acquire>
 8003a6c:	69a3      	ldr	r3, [r4, #24]
 8003a6e:	b11b      	cbz	r3, 8003a78 <__sinit+0x14>
 8003a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a74:	f7ff bff0 	b.w	8003a58 <__sinit_lock_release>
 8003a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <__sinit+0x68>)
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <__sinit+0x6c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	bf04      	itt	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	61a3      	streq	r3, [r4, #24]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 f820 	bl	8003ad4 <__sfp>
 8003a94:	6060      	str	r0, [r4, #4]
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 f81c 	bl	8003ad4 <__sfp>
 8003a9c:	60a0      	str	r0, [r4, #8]
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f000 f818 	bl	8003ad4 <__sfp>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60e0      	str	r0, [r4, #12]
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	6860      	ldr	r0, [r4, #4]
 8003aac:	f7ff ff82 	bl	80039b4 <std>
 8003ab0:	68a0      	ldr	r0, [r4, #8]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2109      	movs	r1, #9
 8003ab6:	f7ff ff7d 	bl	80039b4 <std>
 8003aba:	68e0      	ldr	r0, [r4, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	2112      	movs	r1, #18
 8003ac0:	f7ff ff78 	bl	80039b4 <std>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	61a3      	str	r3, [r4, #24]
 8003ac8:	e7d2      	b.n	8003a70 <__sinit+0xc>
 8003aca:	bf00      	nop
 8003acc:	080048d8 	.word	0x080048d8
 8003ad0:	080039fd 	.word	0x080039fd

08003ad4 <__sfp>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	4607      	mov	r7, r0
 8003ad8:	f7ff ffac 	bl	8003a34 <__sfp_lock_acquire>
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <__sfp+0x84>)
 8003ade:	681e      	ldr	r6, [r3, #0]
 8003ae0:	69b3      	ldr	r3, [r6, #24]
 8003ae2:	b913      	cbnz	r3, 8003aea <__sfp+0x16>
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ffbd 	bl	8003a64 <__sinit>
 8003aea:	3648      	adds	r6, #72	; 0x48
 8003aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	d503      	bpl.n	8003afc <__sfp+0x28>
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	b30b      	cbz	r3, 8003b3c <__sfp+0x68>
 8003af8:	6836      	ldr	r6, [r6, #0]
 8003afa:	e7f7      	b.n	8003aec <__sfp+0x18>
 8003afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b00:	b9d5      	cbnz	r5, 8003b38 <__sfp+0x64>
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <__sfp+0x88>)
 8003b04:	60e3      	str	r3, [r4, #12]
 8003b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b0c:	f000 f847 	bl	8003b9e <__retarget_lock_init_recursive>
 8003b10:	f7ff ff96 	bl	8003a40 <__sfp_lock_release>
 8003b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	61a5      	str	r5, [r4, #24]
 8003b20:	2208      	movs	r2, #8
 8003b22:	4629      	mov	r1, r5
 8003b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b28:	f7ff ff24 	bl	8003974 <memset>
 8003b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b34:	4620      	mov	r0, r4
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	3468      	adds	r4, #104	; 0x68
 8003b3a:	e7d9      	b.n	8003af0 <__sfp+0x1c>
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f7ff ff62 	bl	8003a08 <__sfmoreglue>
 8003b44:	4604      	mov	r4, r0
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1d5      	bne.n	8003af8 <__sfp+0x24>
 8003b4c:	f7ff ff78 	bl	8003a40 <__sfp_lock_release>
 8003b50:	230c      	movs	r3, #12
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	e7ee      	b.n	8003b34 <__sfp+0x60>
 8003b56:	bf00      	nop
 8003b58:	080048d8 	.word	0x080048d8
 8003b5c:	ffff0001 	.word	0xffff0001

08003b60 <_fwalk_reent>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4606      	mov	r6, r0
 8003b66:	4688      	mov	r8, r1
 8003b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b6c:	2700      	movs	r7, #0
 8003b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b72:	f1b9 0901 	subs.w	r9, r9, #1
 8003b76:	d505      	bpl.n	8003b84 <_fwalk_reent+0x24>
 8003b78:	6824      	ldr	r4, [r4, #0]
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d1f7      	bne.n	8003b6e <_fwalk_reent+0xe>
 8003b7e:	4638      	mov	r0, r7
 8003b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d907      	bls.n	8003b9a <_fwalk_reent+0x3a>
 8003b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	d003      	beq.n	8003b9a <_fwalk_reent+0x3a>
 8003b92:	4629      	mov	r1, r5
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	4307      	orrs	r7, r0
 8003b9a:	3568      	adds	r5, #104	; 0x68
 8003b9c:	e7e9      	b.n	8003b72 <_fwalk_reent+0x12>

08003b9e <__retarget_lock_init_recursive>:
 8003b9e:	4770      	bx	lr

08003ba0 <__retarget_lock_acquire_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_release_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <sbrk_aligned>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4e0e      	ldr	r6, [pc, #56]	; (8003be0 <sbrk_aligned+0x3c>)
 8003ba8:	460c      	mov	r4, r1
 8003baa:	6831      	ldr	r1, [r6, #0]
 8003bac:	4605      	mov	r5, r0
 8003bae:	b911      	cbnz	r1, 8003bb6 <sbrk_aligned+0x12>
 8003bb0:	f000 fb7a 	bl	80042a8 <_sbrk_r>
 8003bb4:	6030      	str	r0, [r6, #0]
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 fb75 	bl	80042a8 <_sbrk_r>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d00a      	beq.n	8003bd8 <sbrk_aligned+0x34>
 8003bc2:	1cc4      	adds	r4, r0, #3
 8003bc4:	f024 0403 	bic.w	r4, r4, #3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d007      	beq.n	8003bdc <sbrk_aligned+0x38>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fb6a 	bl	80042a8 <_sbrk_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d101      	bne.n	8003bdc <sbrk_aligned+0x38>
 8003bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	2000014c 	.word	0x2000014c

08003be4 <_malloc_r>:
 8003be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be8:	1ccd      	adds	r5, r1, #3
 8003bea:	f025 0503 	bic.w	r5, r5, #3
 8003bee:	3508      	adds	r5, #8
 8003bf0:	2d0c      	cmp	r5, #12
 8003bf2:	bf38      	it	cc
 8003bf4:	250c      	movcc	r5, #12
 8003bf6:	2d00      	cmp	r5, #0
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	db01      	blt.n	8003c00 <_malloc_r+0x1c>
 8003bfc:	42a9      	cmp	r1, r5
 8003bfe:	d905      	bls.n	8003c0c <_malloc_r+0x28>
 8003c00:	230c      	movs	r3, #12
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	2600      	movs	r6, #0
 8003c06:	4630      	mov	r0, r6
 8003c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c0c:	4e2e      	ldr	r6, [pc, #184]	; (8003cc8 <_malloc_r+0xe4>)
 8003c0e:	f000 fdbb 	bl	8004788 <__malloc_lock>
 8003c12:	6833      	ldr	r3, [r6, #0]
 8003c14:	461c      	mov	r4, r3
 8003c16:	bb34      	cbnz	r4, 8003c66 <_malloc_r+0x82>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f7ff ffc2 	bl	8003ba4 <sbrk_aligned>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	4604      	mov	r4, r0
 8003c24:	d14d      	bne.n	8003cc2 <_malloc_r+0xde>
 8003c26:	6834      	ldr	r4, [r6, #0]
 8003c28:	4626      	mov	r6, r4
 8003c2a:	2e00      	cmp	r6, #0
 8003c2c:	d140      	bne.n	8003cb0 <_malloc_r+0xcc>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	4631      	mov	r1, r6
 8003c32:	4638      	mov	r0, r7
 8003c34:	eb04 0803 	add.w	r8, r4, r3
 8003c38:	f000 fb36 	bl	80042a8 <_sbrk_r>
 8003c3c:	4580      	cmp	r8, r0
 8003c3e:	d13a      	bne.n	8003cb6 <_malloc_r+0xd2>
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	3503      	adds	r5, #3
 8003c44:	1a6d      	subs	r5, r5, r1
 8003c46:	f025 0503 	bic.w	r5, r5, #3
 8003c4a:	3508      	adds	r5, #8
 8003c4c:	2d0c      	cmp	r5, #12
 8003c4e:	bf38      	it	cc
 8003c50:	250c      	movcc	r5, #12
 8003c52:	4629      	mov	r1, r5
 8003c54:	4638      	mov	r0, r7
 8003c56:	f7ff ffa5 	bl	8003ba4 <sbrk_aligned>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d02b      	beq.n	8003cb6 <_malloc_r+0xd2>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	442b      	add	r3, r5
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	e00e      	b.n	8003c84 <_malloc_r+0xa0>
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	1b52      	subs	r2, r2, r5
 8003c6a:	d41e      	bmi.n	8003caa <_malloc_r+0xc6>
 8003c6c:	2a0b      	cmp	r2, #11
 8003c6e:	d916      	bls.n	8003c9e <_malloc_r+0xba>
 8003c70:	1961      	adds	r1, r4, r5
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	6025      	str	r5, [r4, #0]
 8003c76:	bf18      	it	ne
 8003c78:	6059      	strne	r1, [r3, #4]
 8003c7a:	6863      	ldr	r3, [r4, #4]
 8003c7c:	bf08      	it	eq
 8003c7e:	6031      	streq	r1, [r6, #0]
 8003c80:	5162      	str	r2, [r4, r5]
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	4638      	mov	r0, r7
 8003c86:	f104 060b 	add.w	r6, r4, #11
 8003c8a:	f000 fd83 	bl	8004794 <__malloc_unlock>
 8003c8e:	f026 0607 	bic.w	r6, r6, #7
 8003c92:	1d23      	adds	r3, r4, #4
 8003c94:	1af2      	subs	r2, r6, r3
 8003c96:	d0b6      	beq.n	8003c06 <_malloc_r+0x22>
 8003c98:	1b9b      	subs	r3, r3, r6
 8003c9a:	50a3      	str	r3, [r4, r2]
 8003c9c:	e7b3      	b.n	8003c06 <_malloc_r+0x22>
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	bf0c      	ite	eq
 8003ca4:	6032      	streq	r2, [r6, #0]
 8003ca6:	605a      	strne	r2, [r3, #4]
 8003ca8:	e7ec      	b.n	8003c84 <_malloc_r+0xa0>
 8003caa:	4623      	mov	r3, r4
 8003cac:	6864      	ldr	r4, [r4, #4]
 8003cae:	e7b2      	b.n	8003c16 <_malloc_r+0x32>
 8003cb0:	4634      	mov	r4, r6
 8003cb2:	6876      	ldr	r6, [r6, #4]
 8003cb4:	e7b9      	b.n	8003c2a <_malloc_r+0x46>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f000 fd6a 	bl	8004794 <__malloc_unlock>
 8003cc0:	e7a1      	b.n	8003c06 <_malloc_r+0x22>
 8003cc2:	6025      	str	r5, [r4, #0]
 8003cc4:	e7de      	b.n	8003c84 <_malloc_r+0xa0>
 8003cc6:	bf00      	nop
 8003cc8:	20000148 	.word	0x20000148

08003ccc <__sfputc_r>:
 8003ccc:	6893      	ldr	r3, [r2, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	b410      	push	{r4}
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	da08      	bge.n	8003cea <__sfputc_r+0x1e>
 8003cd8:	6994      	ldr	r4, [r2, #24]
 8003cda:	42a3      	cmp	r3, r4
 8003cdc:	db01      	blt.n	8003ce2 <__sfputc_r+0x16>
 8003cde:	290a      	cmp	r1, #10
 8003ce0:	d103      	bne.n	8003cea <__sfputc_r+0x1e>
 8003ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ce6:	f000 bb33 	b.w	8004350 <__swbuf_r>
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	1c58      	adds	r0, r3, #1
 8003cee:	6010      	str	r0, [r2, #0]
 8003cf0:	7019      	strb	r1, [r3, #0]
 8003cf2:	4608      	mov	r0, r1
 8003cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <__sfputs_r>:
 8003cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	460f      	mov	r7, r1
 8003d00:	4614      	mov	r4, r2
 8003d02:	18d5      	adds	r5, r2, r3
 8003d04:	42ac      	cmp	r4, r5
 8003d06:	d101      	bne.n	8003d0c <__sfputs_r+0x12>
 8003d08:	2000      	movs	r0, #0
 8003d0a:	e007      	b.n	8003d1c <__sfputs_r+0x22>
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	463a      	mov	r2, r7
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7ff ffda 	bl	8003ccc <__sfputc_r>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d1f3      	bne.n	8003d04 <__sfputs_r+0xa>
 8003d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d20 <_vfiprintf_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	460d      	mov	r5, r1
 8003d26:	b09d      	sub	sp, #116	; 0x74
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4698      	mov	r8, r3
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	b118      	cbz	r0, 8003d38 <_vfiprintf_r+0x18>
 8003d30:	6983      	ldr	r3, [r0, #24]
 8003d32:	b90b      	cbnz	r3, 8003d38 <_vfiprintf_r+0x18>
 8003d34:	f7ff fe96 	bl	8003a64 <__sinit>
 8003d38:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <_vfiprintf_r+0x240>)
 8003d3a:	429d      	cmp	r5, r3
 8003d3c:	d11b      	bne.n	8003d76 <_vfiprintf_r+0x56>
 8003d3e:	6875      	ldr	r5, [r6, #4]
 8003d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d42:	07d9      	lsls	r1, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_vfiprintf_r+0x32>
 8003d46:	89ab      	ldrh	r3, [r5, #12]
 8003d48:	059a      	lsls	r2, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_vfiprintf_r+0x32>
 8003d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d4e:	f7ff ff27 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 8003d52:	89ab      	ldrh	r3, [r5, #12]
 8003d54:	071b      	lsls	r3, r3, #28
 8003d56:	d501      	bpl.n	8003d5c <_vfiprintf_r+0x3c>
 8003d58:	692b      	ldr	r3, [r5, #16]
 8003d5a:	b9eb      	cbnz	r3, 8003d98 <_vfiprintf_r+0x78>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f000 fb5a 	bl	8004418 <__swsetup_r>
 8003d64:	b1c0      	cbz	r0, 8003d98 <_vfiprintf_r+0x78>
 8003d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d68:	07dc      	lsls	r4, r3, #31
 8003d6a:	d50e      	bpl.n	8003d8a <_vfiprintf_r+0x6a>
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	b01d      	add	sp, #116	; 0x74
 8003d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <_vfiprintf_r+0x244>)
 8003d78:	429d      	cmp	r5, r3
 8003d7a:	d101      	bne.n	8003d80 <_vfiprintf_r+0x60>
 8003d7c:	68b5      	ldr	r5, [r6, #8]
 8003d7e:	e7df      	b.n	8003d40 <_vfiprintf_r+0x20>
 8003d80:	4b79      	ldr	r3, [pc, #484]	; (8003f68 <_vfiprintf_r+0x248>)
 8003d82:	429d      	cmp	r5, r3
 8003d84:	bf08      	it	eq
 8003d86:	68f5      	ldreq	r5, [r6, #12]
 8003d88:	e7da      	b.n	8003d40 <_vfiprintf_r+0x20>
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	0598      	lsls	r0, r3, #22
 8003d8e:	d4ed      	bmi.n	8003d6c <_vfiprintf_r+0x4c>
 8003d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d92:	f7ff ff06 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003d96:	e7e9      	b.n	8003d6c <_vfiprintf_r+0x4c>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da6:	2330      	movs	r3, #48	; 0x30
 8003da8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f6c <_vfiprintf_r+0x24c>
 8003dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db0:	f04f 0901 	mov.w	r9, #1
 8003db4:	4623      	mov	r3, r4
 8003db6:	469a      	mov	sl, r3
 8003db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dbc:	b10a      	cbz	r2, 8003dc2 <_vfiprintf_r+0xa2>
 8003dbe:	2a25      	cmp	r2, #37	; 0x25
 8003dc0:	d1f9      	bne.n	8003db6 <_vfiprintf_r+0x96>
 8003dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc6:	d00b      	beq.n	8003de0 <_vfiprintf_r+0xc0>
 8003dc8:	465b      	mov	r3, fp
 8003dca:	4622      	mov	r2, r4
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f7ff ff93 	bl	8003cfa <__sfputs_r>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	f000 80aa 	beq.w	8003f2e <_vfiprintf_r+0x20e>
 8003dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ddc:	445a      	add	r2, fp
 8003dde:	9209      	str	r2, [sp, #36]	; 0x24
 8003de0:	f89a 3000 	ldrb.w	r3, [sl]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a2 	beq.w	8003f2e <_vfiprintf_r+0x20e>
 8003dea:	2300      	movs	r3, #0
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df4:	f10a 0a01 	add.w	sl, sl, #1
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	9307      	str	r3, [sp, #28]
 8003dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e00:	931a      	str	r3, [sp, #104]	; 0x68
 8003e02:	4654      	mov	r4, sl
 8003e04:	2205      	movs	r2, #5
 8003e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0a:	4858      	ldr	r0, [pc, #352]	; (8003f6c <_vfiprintf_r+0x24c>)
 8003e0c:	f7fc f9f0 	bl	80001f0 <memchr>
 8003e10:	9a04      	ldr	r2, [sp, #16]
 8003e12:	b9d8      	cbnz	r0, 8003e4c <_vfiprintf_r+0x12c>
 8003e14:	06d1      	lsls	r1, r2, #27
 8003e16:	bf44      	itt	mi
 8003e18:	2320      	movmi	r3, #32
 8003e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e1e:	0713      	lsls	r3, r2, #28
 8003e20:	bf44      	itt	mi
 8003e22:	232b      	movmi	r3, #43	; 0x2b
 8003e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e28:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2e:	d015      	beq.n	8003e5c <_vfiprintf_r+0x13c>
 8003e30:	9a07      	ldr	r2, [sp, #28]
 8003e32:	4654      	mov	r4, sl
 8003e34:	2000      	movs	r0, #0
 8003e36:	f04f 0c0a 	mov.w	ip, #10
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e40:	3b30      	subs	r3, #48	; 0x30
 8003e42:	2b09      	cmp	r3, #9
 8003e44:	d94e      	bls.n	8003ee4 <_vfiprintf_r+0x1c4>
 8003e46:	b1b0      	cbz	r0, 8003e76 <_vfiprintf_r+0x156>
 8003e48:	9207      	str	r2, [sp, #28]
 8003e4a:	e014      	b.n	8003e76 <_vfiprintf_r+0x156>
 8003e4c:	eba0 0308 	sub.w	r3, r0, r8
 8003e50:	fa09 f303 	lsl.w	r3, r9, r3
 8003e54:	4313      	orrs	r3, r2
 8003e56:	9304      	str	r3, [sp, #16]
 8003e58:	46a2      	mov	sl, r4
 8003e5a:	e7d2      	b.n	8003e02 <_vfiprintf_r+0xe2>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	1d19      	adds	r1, r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	9103      	str	r1, [sp, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bfbb      	ittet	lt
 8003e68:	425b      	neglt	r3, r3
 8003e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e6e:	9307      	strge	r3, [sp, #28]
 8003e70:	9307      	strlt	r3, [sp, #28]
 8003e72:	bfb8      	it	lt
 8003e74:	9204      	strlt	r2, [sp, #16]
 8003e76:	7823      	ldrb	r3, [r4, #0]
 8003e78:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7a:	d10c      	bne.n	8003e96 <_vfiprintf_r+0x176>
 8003e7c:	7863      	ldrb	r3, [r4, #1]
 8003e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e80:	d135      	bne.n	8003eee <_vfiprintf_r+0x1ce>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	1d1a      	adds	r2, r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9203      	str	r2, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfb8      	it	lt
 8003e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e92:	3402      	adds	r4, #2
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f7c <_vfiprintf_r+0x25c>
 8003e9a:	7821      	ldrb	r1, [r4, #0]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	f7fc f9a6 	bl	80001f0 <memchr>
 8003ea4:	b140      	cbz	r0, 8003eb8 <_vfiprintf_r+0x198>
 8003ea6:	2340      	movs	r3, #64	; 0x40
 8003ea8:	eba0 000a 	sub.w	r0, r0, sl
 8003eac:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb0:	9b04      	ldr	r3, [sp, #16]
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	3401      	adds	r4, #1
 8003eb6:	9304      	str	r3, [sp, #16]
 8003eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebc:	482c      	ldr	r0, [pc, #176]	; (8003f70 <_vfiprintf_r+0x250>)
 8003ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	f7fc f994 	bl	80001f0 <memchr>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d03f      	beq.n	8003f4c <_vfiprintf_r+0x22c>
 8003ecc:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <_vfiprintf_r+0x254>)
 8003ece:	bb1b      	cbnz	r3, 8003f18 <_vfiprintf_r+0x1f8>
 8003ed0:	9b03      	ldr	r3, [sp, #12]
 8003ed2:	3307      	adds	r3, #7
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	3308      	adds	r3, #8
 8003eda:	9303      	str	r3, [sp, #12]
 8003edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ede:	443b      	add	r3, r7
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee2:	e767      	b.n	8003db4 <_vfiprintf_r+0x94>
 8003ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ee8:	460c      	mov	r4, r1
 8003eea:	2001      	movs	r0, #1
 8003eec:	e7a5      	b.n	8003e3a <_vfiprintf_r+0x11a>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	3401      	adds	r4, #1
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f04f 0c0a 	mov.w	ip, #10
 8003efa:	4620      	mov	r0, r4
 8003efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f00:	3a30      	subs	r2, #48	; 0x30
 8003f02:	2a09      	cmp	r2, #9
 8003f04:	d903      	bls.n	8003f0e <_vfiprintf_r+0x1ee>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0c5      	beq.n	8003e96 <_vfiprintf_r+0x176>
 8003f0a:	9105      	str	r1, [sp, #20]
 8003f0c:	e7c3      	b.n	8003e96 <_vfiprintf_r+0x176>
 8003f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f12:	4604      	mov	r4, r0
 8003f14:	2301      	movs	r3, #1
 8003f16:	e7f0      	b.n	8003efa <_vfiprintf_r+0x1da>
 8003f18:	ab03      	add	r3, sp, #12
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <_vfiprintf_r+0x258>)
 8003f20:	a904      	add	r1, sp, #16
 8003f22:	4630      	mov	r0, r6
 8003f24:	f3af 8000 	nop.w
 8003f28:	4607      	mov	r7, r0
 8003f2a:	1c78      	adds	r0, r7, #1
 8003f2c:	d1d6      	bne.n	8003edc <_vfiprintf_r+0x1bc>
 8003f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f30:	07d9      	lsls	r1, r3, #31
 8003f32:	d405      	bmi.n	8003f40 <_vfiprintf_r+0x220>
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	059a      	lsls	r2, r3, #22
 8003f38:	d402      	bmi.n	8003f40 <_vfiprintf_r+0x220>
 8003f3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f3c:	f7ff fe31 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003f40:	89ab      	ldrh	r3, [r5, #12]
 8003f42:	065b      	lsls	r3, r3, #25
 8003f44:	f53f af12 	bmi.w	8003d6c <_vfiprintf_r+0x4c>
 8003f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f4a:	e711      	b.n	8003d70 <_vfiprintf_r+0x50>
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	462a      	mov	r2, r5
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <_vfiprintf_r+0x258>)
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f880 	bl	800405c <_printf_i>
 8003f5c:	e7e4      	b.n	8003f28 <_vfiprintf_r+0x208>
 8003f5e:	bf00      	nop
 8003f60:	080048fc 	.word	0x080048fc
 8003f64:	0800491c 	.word	0x0800491c
 8003f68:	080048dc 	.word	0x080048dc
 8003f6c:	0800493c 	.word	0x0800493c
 8003f70:	08004946 	.word	0x08004946
 8003f74:	00000000 	.word	0x00000000
 8003f78:	08003cfb 	.word	0x08003cfb
 8003f7c:	08004942 	.word	0x08004942

08003f80 <_printf_common>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	4699      	mov	r9, r3
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfb8      	it	lt
 8003f94:	4613      	movlt	r3, r2
 8003f96:	6033      	str	r3, [r6, #0]
 8003f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_printf_common+0x26>
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0699      	lsls	r1, r3, #26
 8003faa:	bf42      	ittt	mi
 8003fac:	6833      	ldrmi	r3, [r6, #0]
 8003fae:	3302      	addmi	r3, #2
 8003fb0:	6033      	strmi	r3, [r6, #0]
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	f015 0506 	ands.w	r5, r5, #6
 8003fb8:	d106      	bne.n	8003fc8 <_printf_common+0x48>
 8003fba:	f104 0a19 	add.w	sl, r4, #25
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	6832      	ldr	r2, [r6, #0]
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc26      	bgt.n	8004016 <_printf_common+0x96>
 8003fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fcc:	1e13      	subs	r3, r2, #0
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	0692      	lsls	r2, r2, #26
 8003fd6:	d42b      	bmi.n	8004030 <_printf_common+0xb0>
 8003fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d01e      	beq.n	8004024 <_printf_common+0xa4>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	68e5      	ldr	r5, [r4, #12]
 8003fea:	6832      	ldr	r2, [r6, #0]
 8003fec:	f003 0306 	and.w	r3, r3, #6
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	bf08      	it	eq
 8003ff4:	1aad      	subeq	r5, r5, r2
 8003ff6:	68a3      	ldr	r3, [r4, #8]
 8003ff8:	6922      	ldr	r2, [r4, #16]
 8003ffa:	bf0c      	ite	eq
 8003ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004000:	2500      	movne	r5, #0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfc4      	itt	gt
 8004006:	1a9b      	subgt	r3, r3, r2
 8004008:	18ed      	addgt	r5, r5, r3
 800400a:	2600      	movs	r6, #0
 800400c:	341a      	adds	r4, #26
 800400e:	42b5      	cmp	r5, r6
 8004010:	d11a      	bne.n	8004048 <_printf_common+0xc8>
 8004012:	2000      	movs	r0, #0
 8004014:	e008      	b.n	8004028 <_printf_common+0xa8>
 8004016:	2301      	movs	r3, #1
 8004018:	4652      	mov	r2, sl
 800401a:	4649      	mov	r1, r9
 800401c:	4638      	mov	r0, r7
 800401e:	47c0      	blx	r8
 8004020:	3001      	adds	r0, #1
 8004022:	d103      	bne.n	800402c <_printf_common+0xac>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	3501      	adds	r5, #1
 800402e:	e7c6      	b.n	8003fbe <_printf_common+0x3e>
 8004030:	18e1      	adds	r1, r4, r3
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	2030      	movs	r0, #48	; 0x30
 8004036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800403a:	4422      	add	r2, r4
 800403c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004044:	3302      	adds	r3, #2
 8004046:	e7c7      	b.n	8003fd8 <_printf_common+0x58>
 8004048:	2301      	movs	r3, #1
 800404a:	4622      	mov	r2, r4
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d0e6      	beq.n	8004024 <_printf_common+0xa4>
 8004056:	3601      	adds	r6, #1
 8004058:	e7d9      	b.n	800400e <_printf_common+0x8e>
	...

0800405c <_printf_i>:
 800405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	7e0f      	ldrb	r7, [r1, #24]
 8004062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004064:	2f78      	cmp	r7, #120	; 0x78
 8004066:	4691      	mov	r9, r2
 8004068:	4680      	mov	r8, r0
 800406a:	460c      	mov	r4, r1
 800406c:	469a      	mov	sl, r3
 800406e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004072:	d807      	bhi.n	8004084 <_printf_i+0x28>
 8004074:	2f62      	cmp	r7, #98	; 0x62
 8004076:	d80a      	bhi.n	800408e <_printf_i+0x32>
 8004078:	2f00      	cmp	r7, #0
 800407a:	f000 80d8 	beq.w	800422e <_printf_i+0x1d2>
 800407e:	2f58      	cmp	r7, #88	; 0x58
 8004080:	f000 80a3 	beq.w	80041ca <_printf_i+0x16e>
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800408c:	e03a      	b.n	8004104 <_printf_i+0xa8>
 800408e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004092:	2b15      	cmp	r3, #21
 8004094:	d8f6      	bhi.n	8004084 <_printf_i+0x28>
 8004096:	a101      	add	r1, pc, #4	; (adr r1, 800409c <_printf_i+0x40>)
 8004098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004085 	.word	0x08004085
 80040a8:	08004085 	.word	0x08004085
 80040ac:	08004085 	.word	0x08004085
 80040b0:	08004085 	.word	0x08004085
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004085 	.word	0x08004085
 80040bc:	08004085 	.word	0x08004085
 80040c0:	08004085 	.word	0x08004085
 80040c4:	08004085 	.word	0x08004085
 80040c8:	08004215 	.word	0x08004215
 80040cc:	08004139 	.word	0x08004139
 80040d0:	080041f7 	.word	0x080041f7
 80040d4:	08004085 	.word	0x08004085
 80040d8:	08004085 	.word	0x08004085
 80040dc:	08004237 	.word	0x08004237
 80040e0:	08004085 	.word	0x08004085
 80040e4:	08004139 	.word	0x08004139
 80040e8:	08004085 	.word	0x08004085
 80040ec:	08004085 	.word	0x08004085
 80040f0:	080041ff 	.word	0x080041ff
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	602a      	str	r2, [r5, #0]
 80040fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004104:	2301      	movs	r3, #1
 8004106:	e0a3      	b.n	8004250 <_printf_i+0x1f4>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	6829      	ldr	r1, [r5, #0]
 800410c:	0606      	lsls	r6, r0, #24
 800410e:	f101 0304 	add.w	r3, r1, #4
 8004112:	d50a      	bpl.n	800412a <_printf_i+0xce>
 8004114:	680e      	ldr	r6, [r1, #0]
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	2e00      	cmp	r6, #0
 800411a:	da03      	bge.n	8004124 <_printf_i+0xc8>
 800411c:	232d      	movs	r3, #45	; 0x2d
 800411e:	4276      	negs	r6, r6
 8004120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004124:	485e      	ldr	r0, [pc, #376]	; (80042a0 <_printf_i+0x244>)
 8004126:	230a      	movs	r3, #10
 8004128:	e019      	b.n	800415e <_printf_i+0x102>
 800412a:	680e      	ldr	r6, [r1, #0]
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004132:	bf18      	it	ne
 8004134:	b236      	sxthne	r6, r6
 8004136:	e7ef      	b.n	8004118 <_printf_i+0xbc>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	1d19      	adds	r1, r3, #4
 800413e:	6029      	str	r1, [r5, #0]
 8004140:	0601      	lsls	r1, r0, #24
 8004142:	d501      	bpl.n	8004148 <_printf_i+0xec>
 8004144:	681e      	ldr	r6, [r3, #0]
 8004146:	e002      	b.n	800414e <_printf_i+0xf2>
 8004148:	0646      	lsls	r6, r0, #25
 800414a:	d5fb      	bpl.n	8004144 <_printf_i+0xe8>
 800414c:	881e      	ldrh	r6, [r3, #0]
 800414e:	4854      	ldr	r0, [pc, #336]	; (80042a0 <_printf_i+0x244>)
 8004150:	2f6f      	cmp	r7, #111	; 0x6f
 8004152:	bf0c      	ite	eq
 8004154:	2308      	moveq	r3, #8
 8004156:	230a      	movne	r3, #10
 8004158:	2100      	movs	r1, #0
 800415a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800415e:	6865      	ldr	r5, [r4, #4]
 8004160:	60a5      	str	r5, [r4, #8]
 8004162:	2d00      	cmp	r5, #0
 8004164:	bfa2      	ittt	ge
 8004166:	6821      	ldrge	r1, [r4, #0]
 8004168:	f021 0104 	bicge.w	r1, r1, #4
 800416c:	6021      	strge	r1, [r4, #0]
 800416e:	b90e      	cbnz	r6, 8004174 <_printf_i+0x118>
 8004170:	2d00      	cmp	r5, #0
 8004172:	d04d      	beq.n	8004210 <_printf_i+0x1b4>
 8004174:	4615      	mov	r5, r2
 8004176:	fbb6 f1f3 	udiv	r1, r6, r3
 800417a:	fb03 6711 	mls	r7, r3, r1, r6
 800417e:	5dc7      	ldrb	r7, [r0, r7]
 8004180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004184:	4637      	mov	r7, r6
 8004186:	42bb      	cmp	r3, r7
 8004188:	460e      	mov	r6, r1
 800418a:	d9f4      	bls.n	8004176 <_printf_i+0x11a>
 800418c:	2b08      	cmp	r3, #8
 800418e:	d10b      	bne.n	80041a8 <_printf_i+0x14c>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	07de      	lsls	r6, r3, #31
 8004194:	d508      	bpl.n	80041a8 <_printf_i+0x14c>
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	6861      	ldr	r1, [r4, #4]
 800419a:	4299      	cmp	r1, r3
 800419c:	bfde      	ittt	le
 800419e:	2330      	movle	r3, #48	; 0x30
 80041a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041a8:	1b52      	subs	r2, r2, r5
 80041aa:	6122      	str	r2, [r4, #16]
 80041ac:	f8cd a000 	str.w	sl, [sp]
 80041b0:	464b      	mov	r3, r9
 80041b2:	aa03      	add	r2, sp, #12
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f7ff fee2 	bl	8003f80 <_printf_common>
 80041bc:	3001      	adds	r0, #1
 80041be:	d14c      	bne.n	800425a <_printf_i+0x1fe>
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	b004      	add	sp, #16
 80041c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ca:	4835      	ldr	r0, [pc, #212]	; (80042a0 <_printf_i+0x244>)
 80041cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041d0:	6829      	ldr	r1, [r5, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80041d8:	6029      	str	r1, [r5, #0]
 80041da:	061d      	lsls	r5, r3, #24
 80041dc:	d514      	bpl.n	8004208 <_printf_i+0x1ac>
 80041de:	07df      	lsls	r7, r3, #31
 80041e0:	bf44      	itt	mi
 80041e2:	f043 0320 	orrmi.w	r3, r3, #32
 80041e6:	6023      	strmi	r3, [r4, #0]
 80041e8:	b91e      	cbnz	r6, 80041f2 <_printf_i+0x196>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f023 0320 	bic.w	r3, r3, #32
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	2310      	movs	r3, #16
 80041f4:	e7b0      	b.n	8004158 <_printf_i+0xfc>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	f043 0320 	orr.w	r3, r3, #32
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	2378      	movs	r3, #120	; 0x78
 8004200:	4828      	ldr	r0, [pc, #160]	; (80042a4 <_printf_i+0x248>)
 8004202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004206:	e7e3      	b.n	80041d0 <_printf_i+0x174>
 8004208:	0659      	lsls	r1, r3, #25
 800420a:	bf48      	it	mi
 800420c:	b2b6      	uxthmi	r6, r6
 800420e:	e7e6      	b.n	80041de <_printf_i+0x182>
 8004210:	4615      	mov	r5, r2
 8004212:	e7bb      	b.n	800418c <_printf_i+0x130>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	6826      	ldr	r6, [r4, #0]
 8004218:	6961      	ldr	r1, [r4, #20]
 800421a:	1d18      	adds	r0, r3, #4
 800421c:	6028      	str	r0, [r5, #0]
 800421e:	0635      	lsls	r5, r6, #24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	d501      	bpl.n	8004228 <_printf_i+0x1cc>
 8004224:	6019      	str	r1, [r3, #0]
 8004226:	e002      	b.n	800422e <_printf_i+0x1d2>
 8004228:	0670      	lsls	r0, r6, #25
 800422a:	d5fb      	bpl.n	8004224 <_printf_i+0x1c8>
 800422c:	8019      	strh	r1, [r3, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	6123      	str	r3, [r4, #16]
 8004232:	4615      	mov	r5, r2
 8004234:	e7ba      	b.n	80041ac <_printf_i+0x150>
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	1d1a      	adds	r2, r3, #4
 800423a:	602a      	str	r2, [r5, #0]
 800423c:	681d      	ldr	r5, [r3, #0]
 800423e:	6862      	ldr	r2, [r4, #4]
 8004240:	2100      	movs	r1, #0
 8004242:	4628      	mov	r0, r5
 8004244:	f7fb ffd4 	bl	80001f0 <memchr>
 8004248:	b108      	cbz	r0, 800424e <_printf_i+0x1f2>
 800424a:	1b40      	subs	r0, r0, r5
 800424c:	6060      	str	r0, [r4, #4]
 800424e:	6863      	ldr	r3, [r4, #4]
 8004250:	6123      	str	r3, [r4, #16]
 8004252:	2300      	movs	r3, #0
 8004254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004258:	e7a8      	b.n	80041ac <_printf_i+0x150>
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	462a      	mov	r2, r5
 800425e:	4649      	mov	r1, r9
 8004260:	4640      	mov	r0, r8
 8004262:	47d0      	blx	sl
 8004264:	3001      	adds	r0, #1
 8004266:	d0ab      	beq.n	80041c0 <_printf_i+0x164>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	079b      	lsls	r3, r3, #30
 800426c:	d413      	bmi.n	8004296 <_printf_i+0x23a>
 800426e:	68e0      	ldr	r0, [r4, #12]
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	4298      	cmp	r0, r3
 8004274:	bfb8      	it	lt
 8004276:	4618      	movlt	r0, r3
 8004278:	e7a4      	b.n	80041c4 <_printf_i+0x168>
 800427a:	2301      	movs	r3, #1
 800427c:	4632      	mov	r2, r6
 800427e:	4649      	mov	r1, r9
 8004280:	4640      	mov	r0, r8
 8004282:	47d0      	blx	sl
 8004284:	3001      	adds	r0, #1
 8004286:	d09b      	beq.n	80041c0 <_printf_i+0x164>
 8004288:	3501      	adds	r5, #1
 800428a:	68e3      	ldr	r3, [r4, #12]
 800428c:	9903      	ldr	r1, [sp, #12]
 800428e:	1a5b      	subs	r3, r3, r1
 8004290:	42ab      	cmp	r3, r5
 8004292:	dcf2      	bgt.n	800427a <_printf_i+0x21e>
 8004294:	e7eb      	b.n	800426e <_printf_i+0x212>
 8004296:	2500      	movs	r5, #0
 8004298:	f104 0619 	add.w	r6, r4, #25
 800429c:	e7f5      	b.n	800428a <_printf_i+0x22e>
 800429e:	bf00      	nop
 80042a0:	0800494d 	.word	0x0800494d
 80042a4:	0800495e 	.word	0x0800495e

080042a8 <_sbrk_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4d06      	ldr	r5, [pc, #24]	; (80042c4 <_sbrk_r+0x1c>)
 80042ac:	2300      	movs	r3, #0
 80042ae:	4604      	mov	r4, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	f7fc fba0 	bl	80009f8 <_sbrk>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d102      	bne.n	80042c2 <_sbrk_r+0x1a>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	b103      	cbz	r3, 80042c2 <_sbrk_r+0x1a>
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	bd38      	pop	{r3, r4, r5, pc}
 80042c4:	20000150 	.word	0x20000150

080042c8 <__sread>:
 80042c8:	b510      	push	{r4, lr}
 80042ca:	460c      	mov	r4, r1
 80042cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d0:	f000 fab2 	bl	8004838 <_read_r>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	bfab      	itete	ge
 80042d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042da:	89a3      	ldrhlt	r3, [r4, #12]
 80042dc:	181b      	addge	r3, r3, r0
 80042de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042e2:	bfac      	ite	ge
 80042e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80042e6:	81a3      	strhlt	r3, [r4, #12]
 80042e8:	bd10      	pop	{r4, pc}

080042ea <__swrite>:
 80042ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ee:	461f      	mov	r7, r3
 80042f0:	898b      	ldrh	r3, [r1, #12]
 80042f2:	05db      	lsls	r3, r3, #23
 80042f4:	4605      	mov	r5, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4616      	mov	r6, r2
 80042fa:	d505      	bpl.n	8004308 <__swrite+0x1e>
 80042fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004300:	2302      	movs	r3, #2
 8004302:	2200      	movs	r2, #0
 8004304:	f000 f9c8 	bl	8004698 <_lseek_r>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800430e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	4632      	mov	r2, r6
 8004316:	463b      	mov	r3, r7
 8004318:	4628      	mov	r0, r5
 800431a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	f000 b869 	b.w	80043f4 <_write_r>

08004322 <__sseek>:
 8004322:	b510      	push	{r4, lr}
 8004324:	460c      	mov	r4, r1
 8004326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432a:	f000 f9b5 	bl	8004698 <_lseek_r>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	bf15      	itete	ne
 8004334:	6560      	strne	r0, [r4, #84]	; 0x54
 8004336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800433a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800433e:	81a3      	strheq	r3, [r4, #12]
 8004340:	bf18      	it	ne
 8004342:	81a3      	strhne	r3, [r4, #12]
 8004344:	bd10      	pop	{r4, pc}

08004346 <__sclose>:
 8004346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434a:	f000 b8d3 	b.w	80044f4 <_close_r>
	...

08004350 <__swbuf_r>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	460e      	mov	r6, r1
 8004354:	4614      	mov	r4, r2
 8004356:	4605      	mov	r5, r0
 8004358:	b118      	cbz	r0, 8004362 <__swbuf_r+0x12>
 800435a:	6983      	ldr	r3, [r0, #24]
 800435c:	b90b      	cbnz	r3, 8004362 <__swbuf_r+0x12>
 800435e:	f7ff fb81 	bl	8003a64 <__sinit>
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <__swbuf_r+0x98>)
 8004364:	429c      	cmp	r4, r3
 8004366:	d12b      	bne.n	80043c0 <__swbuf_r+0x70>
 8004368:	686c      	ldr	r4, [r5, #4]
 800436a:	69a3      	ldr	r3, [r4, #24]
 800436c:	60a3      	str	r3, [r4, #8]
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	071a      	lsls	r2, r3, #28
 8004372:	d52f      	bpl.n	80043d4 <__swbuf_r+0x84>
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	b36b      	cbz	r3, 80043d4 <__swbuf_r+0x84>
 8004378:	6923      	ldr	r3, [r4, #16]
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	1ac0      	subs	r0, r0, r3
 800437e:	6963      	ldr	r3, [r4, #20]
 8004380:	b2f6      	uxtb	r6, r6
 8004382:	4283      	cmp	r3, r0
 8004384:	4637      	mov	r7, r6
 8004386:	dc04      	bgt.n	8004392 <__swbuf_r+0x42>
 8004388:	4621      	mov	r1, r4
 800438a:	4628      	mov	r0, r5
 800438c:	f000 f948 	bl	8004620 <_fflush_r>
 8004390:	bb30      	cbnz	r0, 80043e0 <__swbuf_r+0x90>
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	3b01      	subs	r3, #1
 8004396:	60a3      	str	r3, [r4, #8]
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	6022      	str	r2, [r4, #0]
 800439e:	701e      	strb	r6, [r3, #0]
 80043a0:	6963      	ldr	r3, [r4, #20]
 80043a2:	3001      	adds	r0, #1
 80043a4:	4283      	cmp	r3, r0
 80043a6:	d004      	beq.n	80043b2 <__swbuf_r+0x62>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	07db      	lsls	r3, r3, #31
 80043ac:	d506      	bpl.n	80043bc <__swbuf_r+0x6c>
 80043ae:	2e0a      	cmp	r6, #10
 80043b0:	d104      	bne.n	80043bc <__swbuf_r+0x6c>
 80043b2:	4621      	mov	r1, r4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 f933 	bl	8004620 <_fflush_r>
 80043ba:	b988      	cbnz	r0, 80043e0 <__swbuf_r+0x90>
 80043bc:	4638      	mov	r0, r7
 80043be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <__swbuf_r+0x9c>)
 80043c2:	429c      	cmp	r4, r3
 80043c4:	d101      	bne.n	80043ca <__swbuf_r+0x7a>
 80043c6:	68ac      	ldr	r4, [r5, #8]
 80043c8:	e7cf      	b.n	800436a <__swbuf_r+0x1a>
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <__swbuf_r+0xa0>)
 80043cc:	429c      	cmp	r4, r3
 80043ce:	bf08      	it	eq
 80043d0:	68ec      	ldreq	r4, [r5, #12]
 80043d2:	e7ca      	b.n	800436a <__swbuf_r+0x1a>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f81e 	bl	8004418 <__swsetup_r>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0cb      	beq.n	8004378 <__swbuf_r+0x28>
 80043e0:	f04f 37ff 	mov.w	r7, #4294967295
 80043e4:	e7ea      	b.n	80043bc <__swbuf_r+0x6c>
 80043e6:	bf00      	nop
 80043e8:	080048fc 	.word	0x080048fc
 80043ec:	0800491c 	.word	0x0800491c
 80043f0:	080048dc 	.word	0x080048dc

080043f4 <_write_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d07      	ldr	r5, [pc, #28]	; (8004414 <_write_r+0x20>)
 80043f8:	4604      	mov	r4, r0
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f7fc faa7 	bl	8000956 <_write>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_write_r+0x1e>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_write_r+0x1e>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000150 	.word	0x20000150

08004418 <__swsetup_r>:
 8004418:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <__swsetup_r+0xcc>)
 800441a:	b570      	push	{r4, r5, r6, lr}
 800441c:	681d      	ldr	r5, [r3, #0]
 800441e:	4606      	mov	r6, r0
 8004420:	460c      	mov	r4, r1
 8004422:	b125      	cbz	r5, 800442e <__swsetup_r+0x16>
 8004424:	69ab      	ldr	r3, [r5, #24]
 8004426:	b913      	cbnz	r3, 800442e <__swsetup_r+0x16>
 8004428:	4628      	mov	r0, r5
 800442a:	f7ff fb1b 	bl	8003a64 <__sinit>
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <__swsetup_r+0xd0>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d10f      	bne.n	8004454 <__swsetup_r+0x3c>
 8004434:	686c      	ldr	r4, [r5, #4]
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800443c:	0719      	lsls	r1, r3, #28
 800443e:	d42c      	bmi.n	800449a <__swsetup_r+0x82>
 8004440:	06dd      	lsls	r5, r3, #27
 8004442:	d411      	bmi.n	8004468 <__swsetup_r+0x50>
 8004444:	2309      	movs	r3, #9
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	f04f 30ff 	mov.w	r0, #4294967295
 8004452:	e03e      	b.n	80044d2 <__swsetup_r+0xba>
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <__swsetup_r+0xd4>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d101      	bne.n	800445e <__swsetup_r+0x46>
 800445a:	68ac      	ldr	r4, [r5, #8]
 800445c:	e7eb      	b.n	8004436 <__swsetup_r+0x1e>
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <__swsetup_r+0xd8>)
 8004460:	429c      	cmp	r4, r3
 8004462:	bf08      	it	eq
 8004464:	68ec      	ldreq	r4, [r5, #12]
 8004466:	e7e6      	b.n	8004436 <__swsetup_r+0x1e>
 8004468:	0758      	lsls	r0, r3, #29
 800446a:	d512      	bpl.n	8004492 <__swsetup_r+0x7a>
 800446c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800446e:	b141      	cbz	r1, 8004482 <__swsetup_r+0x6a>
 8004470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004474:	4299      	cmp	r1, r3
 8004476:	d002      	beq.n	800447e <__swsetup_r+0x66>
 8004478:	4630      	mov	r0, r6
 800447a:	f000 f991 	bl	80047a0 <_free_r>
 800447e:	2300      	movs	r3, #0
 8004480:	6363      	str	r3, [r4, #52]	; 0x34
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	b94b      	cbnz	r3, 80044b2 <__swsetup_r+0x9a>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a8:	d003      	beq.n	80044b2 <__swsetup_r+0x9a>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f92b 	bl	8004708 <__smakebuf_r>
 80044b2:	89a0      	ldrh	r0, [r4, #12]
 80044b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044b8:	f010 0301 	ands.w	r3, r0, #1
 80044bc:	d00a      	beq.n	80044d4 <__swsetup_r+0xbc>
 80044be:	2300      	movs	r3, #0
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	6963      	ldr	r3, [r4, #20]
 80044c4:	425b      	negs	r3, r3
 80044c6:	61a3      	str	r3, [r4, #24]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	b943      	cbnz	r3, 80044de <__swsetup_r+0xc6>
 80044cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044d0:	d1ba      	bne.n	8004448 <__swsetup_r+0x30>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	0781      	lsls	r1, r0, #30
 80044d6:	bf58      	it	pl
 80044d8:	6963      	ldrpl	r3, [r4, #20]
 80044da:	60a3      	str	r3, [r4, #8]
 80044dc:	e7f4      	b.n	80044c8 <__swsetup_r+0xb0>
 80044de:	2000      	movs	r0, #0
 80044e0:	e7f7      	b.n	80044d2 <__swsetup_r+0xba>
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c
 80044e8:	080048fc 	.word	0x080048fc
 80044ec:	0800491c 	.word	0x0800491c
 80044f0:	080048dc 	.word	0x080048dc

080044f4 <_close_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d06      	ldr	r5, [pc, #24]	; (8004510 <_close_r+0x1c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	f7fc fa45 	bl	800098e <_close>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_close_r+0x1a>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_close_r+0x1a>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000150 	.word	0x20000150

08004514 <__sflush_r>:
 8004514:	898a      	ldrh	r2, [r1, #12]
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	4605      	mov	r5, r0
 800451c:	0710      	lsls	r0, r2, #28
 800451e:	460c      	mov	r4, r1
 8004520:	d458      	bmi.n	80045d4 <__sflush_r+0xc0>
 8004522:	684b      	ldr	r3, [r1, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dc05      	bgt.n	8004534 <__sflush_r+0x20>
 8004528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	dc02      	bgt.n	8004534 <__sflush_r+0x20>
 800452e:	2000      	movs	r0, #0
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004536:	2e00      	cmp	r6, #0
 8004538:	d0f9      	beq.n	800452e <__sflush_r+0x1a>
 800453a:	2300      	movs	r3, #0
 800453c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004540:	682f      	ldr	r7, [r5, #0]
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	d032      	beq.n	80045ac <__sflush_r+0x98>
 8004546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	075a      	lsls	r2, r3, #29
 800454c:	d505      	bpl.n	800455a <__sflush_r+0x46>
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	1ac0      	subs	r0, r0, r3
 8004552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004554:	b10b      	cbz	r3, 800455a <__sflush_r+0x46>
 8004556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004558:	1ac0      	subs	r0, r0, r3
 800455a:	2300      	movs	r3, #0
 800455c:	4602      	mov	r2, r0
 800455e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004560:	6a21      	ldr	r1, [r4, #32]
 8004562:	4628      	mov	r0, r5
 8004564:	47b0      	blx	r6
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	d106      	bne.n	800457a <__sflush_r+0x66>
 800456c:	6829      	ldr	r1, [r5, #0]
 800456e:	291d      	cmp	r1, #29
 8004570:	d82c      	bhi.n	80045cc <__sflush_r+0xb8>
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <__sflush_r+0x108>)
 8004574:	40ca      	lsrs	r2, r1
 8004576:	07d6      	lsls	r6, r2, #31
 8004578:	d528      	bpl.n	80045cc <__sflush_r+0xb8>
 800457a:	2200      	movs	r2, #0
 800457c:	6062      	str	r2, [r4, #4]
 800457e:	04d9      	lsls	r1, r3, #19
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	d504      	bpl.n	8004590 <__sflush_r+0x7c>
 8004586:	1c42      	adds	r2, r0, #1
 8004588:	d101      	bne.n	800458e <__sflush_r+0x7a>
 800458a:	682b      	ldr	r3, [r5, #0]
 800458c:	b903      	cbnz	r3, 8004590 <__sflush_r+0x7c>
 800458e:	6560      	str	r0, [r4, #84]	; 0x54
 8004590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004592:	602f      	str	r7, [r5, #0]
 8004594:	2900      	cmp	r1, #0
 8004596:	d0ca      	beq.n	800452e <__sflush_r+0x1a>
 8004598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800459c:	4299      	cmp	r1, r3
 800459e:	d002      	beq.n	80045a6 <__sflush_r+0x92>
 80045a0:	4628      	mov	r0, r5
 80045a2:	f000 f8fd 	bl	80047a0 <_free_r>
 80045a6:	2000      	movs	r0, #0
 80045a8:	6360      	str	r0, [r4, #52]	; 0x34
 80045aa:	e7c1      	b.n	8004530 <__sflush_r+0x1c>
 80045ac:	6a21      	ldr	r1, [r4, #32]
 80045ae:	2301      	movs	r3, #1
 80045b0:	4628      	mov	r0, r5
 80045b2:	47b0      	blx	r6
 80045b4:	1c41      	adds	r1, r0, #1
 80045b6:	d1c7      	bne.n	8004548 <__sflush_r+0x34>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0c4      	beq.n	8004548 <__sflush_r+0x34>
 80045be:	2b1d      	cmp	r3, #29
 80045c0:	d001      	beq.n	80045c6 <__sflush_r+0xb2>
 80045c2:	2b16      	cmp	r3, #22
 80045c4:	d101      	bne.n	80045ca <__sflush_r+0xb6>
 80045c6:	602f      	str	r7, [r5, #0]
 80045c8:	e7b1      	b.n	800452e <__sflush_r+0x1a>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	e7ad      	b.n	8004530 <__sflush_r+0x1c>
 80045d4:	690f      	ldr	r7, [r1, #16]
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	d0a9      	beq.n	800452e <__sflush_r+0x1a>
 80045da:	0793      	lsls	r3, r2, #30
 80045dc:	680e      	ldr	r6, [r1, #0]
 80045de:	bf08      	it	eq
 80045e0:	694b      	ldreq	r3, [r1, #20]
 80045e2:	600f      	str	r7, [r1, #0]
 80045e4:	bf18      	it	ne
 80045e6:	2300      	movne	r3, #0
 80045e8:	eba6 0807 	sub.w	r8, r6, r7
 80045ec:	608b      	str	r3, [r1, #8]
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	dd9c      	ble.n	800452e <__sflush_r+0x1a>
 80045f4:	6a21      	ldr	r1, [r4, #32]
 80045f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045f8:	4643      	mov	r3, r8
 80045fa:	463a      	mov	r2, r7
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b0      	blx	r6
 8004600:	2800      	cmp	r0, #0
 8004602:	dc06      	bgt.n	8004612 <__sflush_r+0xfe>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	e78e      	b.n	8004530 <__sflush_r+0x1c>
 8004612:	4407      	add	r7, r0
 8004614:	eba8 0800 	sub.w	r8, r8, r0
 8004618:	e7e9      	b.n	80045ee <__sflush_r+0xda>
 800461a:	bf00      	nop
 800461c:	20400001 	.word	0x20400001

08004620 <_fflush_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	4605      	mov	r5, r0
 8004626:	460c      	mov	r4, r1
 8004628:	b913      	cbnz	r3, 8004630 <_fflush_r+0x10>
 800462a:	2500      	movs	r5, #0
 800462c:	4628      	mov	r0, r5
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	b118      	cbz	r0, 800463a <_fflush_r+0x1a>
 8004632:	6983      	ldr	r3, [r0, #24]
 8004634:	b90b      	cbnz	r3, 800463a <_fflush_r+0x1a>
 8004636:	f7ff fa15 	bl	8003a64 <__sinit>
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <_fflush_r+0x6c>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d11b      	bne.n	8004678 <_fflush_r+0x58>
 8004640:	686c      	ldr	r4, [r5, #4]
 8004642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ef      	beq.n	800462a <_fflush_r+0xa>
 800464a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800464c:	07d0      	lsls	r0, r2, #31
 800464e:	d404      	bmi.n	800465a <_fflush_r+0x3a>
 8004650:	0599      	lsls	r1, r3, #22
 8004652:	d402      	bmi.n	800465a <_fflush_r+0x3a>
 8004654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004656:	f7ff faa3 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 800465a:	4628      	mov	r0, r5
 800465c:	4621      	mov	r1, r4
 800465e:	f7ff ff59 	bl	8004514 <__sflush_r>
 8004662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004664:	07da      	lsls	r2, r3, #31
 8004666:	4605      	mov	r5, r0
 8004668:	d4e0      	bmi.n	800462c <_fflush_r+0xc>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	059b      	lsls	r3, r3, #22
 800466e:	d4dd      	bmi.n	800462c <_fflush_r+0xc>
 8004670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004672:	f7ff fa96 	bl	8003ba2 <__retarget_lock_release_recursive>
 8004676:	e7d9      	b.n	800462c <_fflush_r+0xc>
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <_fflush_r+0x70>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <_fflush_r+0x62>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7df      	b.n	8004642 <_fflush_r+0x22>
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <_fflush_r+0x74>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7da      	b.n	8004642 <_fflush_r+0x22>
 800468c:	080048fc 	.word	0x080048fc
 8004690:	0800491c 	.word	0x0800491c
 8004694:	080048dc 	.word	0x080048dc

08004698 <_lseek_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d07      	ldr	r5, [pc, #28]	; (80046b8 <_lseek_r+0x20>)
 800469c:	4604      	mov	r4, r0
 800469e:	4608      	mov	r0, r1
 80046a0:	4611      	mov	r1, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	602a      	str	r2, [r5, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7fc f998 	bl	80009dc <_lseek>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_lseek_r+0x1e>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_lseek_r+0x1e>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000150 	.word	0x20000150

080046bc <__swhatbuf_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	b096      	sub	sp, #88	; 0x58
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	da08      	bge.n	80046e0 <__swhatbuf_r+0x24>
 80046ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	061a      	lsls	r2, r3, #24
 80046d8:	d410      	bmi.n	80046fc <__swhatbuf_r+0x40>
 80046da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046de:	e00e      	b.n	80046fe <__swhatbuf_r+0x42>
 80046e0:	466a      	mov	r2, sp
 80046e2:	f000 f8bb 	bl	800485c <_fstat_r>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	dbf1      	blt.n	80046ce <__swhatbuf_r+0x12>
 80046ea:	9a01      	ldr	r2, [sp, #4]
 80046ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046f4:	425a      	negs	r2, r3
 80046f6:	415a      	adcs	r2, r3
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	e7ee      	b.n	80046da <__swhatbuf_r+0x1e>
 80046fc:	2340      	movs	r3, #64	; 0x40
 80046fe:	2000      	movs	r0, #0
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	b016      	add	sp, #88	; 0x58
 8004704:	bd70      	pop	{r4, r5, r6, pc}
	...

08004708 <__smakebuf_r>:
 8004708:	898b      	ldrh	r3, [r1, #12]
 800470a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800470c:	079d      	lsls	r5, r3, #30
 800470e:	4606      	mov	r6, r0
 8004710:	460c      	mov	r4, r1
 8004712:	d507      	bpl.n	8004724 <__smakebuf_r+0x1c>
 8004714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	2301      	movs	r3, #1
 800471e:	6163      	str	r3, [r4, #20]
 8004720:	b002      	add	sp, #8
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	ab01      	add	r3, sp, #4
 8004726:	466a      	mov	r2, sp
 8004728:	f7ff ffc8 	bl	80046bc <__swhatbuf_r>
 800472c:	9900      	ldr	r1, [sp, #0]
 800472e:	4605      	mov	r5, r0
 8004730:	4630      	mov	r0, r6
 8004732:	f7ff fa57 	bl	8003be4 <_malloc_r>
 8004736:	b948      	cbnz	r0, 800474c <__smakebuf_r+0x44>
 8004738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473c:	059a      	lsls	r2, r3, #22
 800473e:	d4ef      	bmi.n	8004720 <__smakebuf_r+0x18>
 8004740:	f023 0303 	bic.w	r3, r3, #3
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e7e3      	b.n	8004714 <__smakebuf_r+0xc>
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <__smakebuf_r+0x7c>)
 800474e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	6020      	str	r0, [r4, #0]
 8004754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	9b00      	ldr	r3, [sp, #0]
 800475c:	6163      	str	r3, [r4, #20]
 800475e:	9b01      	ldr	r3, [sp, #4]
 8004760:	6120      	str	r0, [r4, #16]
 8004762:	b15b      	cbz	r3, 800477c <__smakebuf_r+0x74>
 8004764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f889 	bl	8004880 <_isatty_r>
 800476e:	b128      	cbz	r0, 800477c <__smakebuf_r+0x74>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f023 0303 	bic.w	r3, r3, #3
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	81a3      	strh	r3, [r4, #12]
 800477c:	89a0      	ldrh	r0, [r4, #12]
 800477e:	4305      	orrs	r5, r0
 8004780:	81a5      	strh	r5, [r4, #12]
 8004782:	e7cd      	b.n	8004720 <__smakebuf_r+0x18>
 8004784:	080039fd 	.word	0x080039fd

08004788 <__malloc_lock>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__malloc_lock+0x8>)
 800478a:	f7ff ba09 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	20000144 	.word	0x20000144

08004794 <__malloc_unlock>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__malloc_unlock+0x8>)
 8004796:	f7ff ba04 	b.w	8003ba2 <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	20000144 	.word	0x20000144

080047a0 <_free_r>:
 80047a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047a2:	2900      	cmp	r1, #0
 80047a4:	d044      	beq.n	8004830 <_free_r+0x90>
 80047a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047aa:	9001      	str	r0, [sp, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f1a1 0404 	sub.w	r4, r1, #4
 80047b2:	bfb8      	it	lt
 80047b4:	18e4      	addlt	r4, r4, r3
 80047b6:	f7ff ffe7 	bl	8004788 <__malloc_lock>
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <_free_r+0x94>)
 80047bc:	9801      	ldr	r0, [sp, #4]
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	b933      	cbnz	r3, 80047d0 <_free_r+0x30>
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	6014      	str	r4, [r2, #0]
 80047c6:	b003      	add	sp, #12
 80047c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047cc:	f7ff bfe2 	b.w	8004794 <__malloc_unlock>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d908      	bls.n	80047e6 <_free_r+0x46>
 80047d4:	6825      	ldr	r5, [r4, #0]
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf01      	itttt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	1949      	addeq	r1, r1, r5
 80047e2:	6021      	streq	r1, [r4, #0]
 80047e4:	e7ed      	b.n	80047c2 <_free_r+0x22>
 80047e6:	461a      	mov	r2, r3
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b10b      	cbz	r3, 80047f0 <_free_r+0x50>
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d9fa      	bls.n	80047e6 <_free_r+0x46>
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	1855      	adds	r5, r2, r1
 80047f4:	42a5      	cmp	r5, r4
 80047f6:	d10b      	bne.n	8004810 <_free_r+0x70>
 80047f8:	6824      	ldr	r4, [r4, #0]
 80047fa:	4421      	add	r1, r4
 80047fc:	1854      	adds	r4, r2, r1
 80047fe:	42a3      	cmp	r3, r4
 8004800:	6011      	str	r1, [r2, #0]
 8004802:	d1e0      	bne.n	80047c6 <_free_r+0x26>
 8004804:	681c      	ldr	r4, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	6053      	str	r3, [r2, #4]
 800480a:	4421      	add	r1, r4
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	e7da      	b.n	80047c6 <_free_r+0x26>
 8004810:	d902      	bls.n	8004818 <_free_r+0x78>
 8004812:	230c      	movs	r3, #12
 8004814:	6003      	str	r3, [r0, #0]
 8004816:	e7d6      	b.n	80047c6 <_free_r+0x26>
 8004818:	6825      	ldr	r5, [r4, #0]
 800481a:	1961      	adds	r1, r4, r5
 800481c:	428b      	cmp	r3, r1
 800481e:	bf04      	itt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	6063      	str	r3, [r4, #4]
 8004826:	bf04      	itt	eq
 8004828:	1949      	addeq	r1, r1, r5
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	6054      	str	r4, [r2, #4]
 800482e:	e7ca      	b.n	80047c6 <_free_r+0x26>
 8004830:	b003      	add	sp, #12
 8004832:	bd30      	pop	{r4, r5, pc}
 8004834:	20000148 	.word	0x20000148

08004838 <_read_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d07      	ldr	r5, [pc, #28]	; (8004858 <_read_r+0x20>)
 800483c:	4604      	mov	r4, r0
 800483e:	4608      	mov	r0, r1
 8004840:	4611      	mov	r1, r2
 8004842:	2200      	movs	r2, #0
 8004844:	602a      	str	r2, [r5, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f7fc f868 	bl	800091c <_read>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_read_r+0x1e>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_read_r+0x1e>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20000150 	.word	0x20000150

0800485c <_fstat_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4d07      	ldr	r5, [pc, #28]	; (800487c <_fstat_r+0x20>)
 8004860:	2300      	movs	r3, #0
 8004862:	4604      	mov	r4, r0
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	f7fc f89c 	bl	80009a6 <_fstat>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d102      	bne.n	8004878 <_fstat_r+0x1c>
 8004872:	682b      	ldr	r3, [r5, #0]
 8004874:	b103      	cbz	r3, 8004878 <_fstat_r+0x1c>
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	bd38      	pop	{r3, r4, r5, pc}
 800487a:	bf00      	nop
 800487c:	20000150 	.word	0x20000150

08004880 <_isatty_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	; (800489c <_isatty_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc f89b 	bl	80009c6 <_isatty>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_isatty_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_isatty_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000150 	.word	0x20000150

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
