
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800819c  0800819c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a4  080081a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080081ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000264  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001726a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003367  00000000  00000000  00037312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d88  00000000  00000000  0003cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d1e  00000000  00000000  00064978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f08d0  00000000  00000000  0007e696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ef66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a50  00000000  00000000  0016efb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f4c 	.word	0x08007f4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007f4c 	.word	0x08007f4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x9c>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x9c>)
 800060a:	f001 ff99 	bl	8002540 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000614:	f001 fc42 	bl	8001e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000618:	2303      	movs	r3, #3
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x9c>)
 800062a:	f002 f8df 	bl	80027ec <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000634:	f001 fc32 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012000 	.word	0x40012000

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 fc6b 	bl	8002f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_GPIO_Init+0xac>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xac>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0xac>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_GPIO_Init+0xac>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_GPIO_Init+0xac>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xb0>)
 800076e:	f002 fc0f 	bl	8002f90 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f002 fdc1 	bl	8003348 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f001 fb66 	bl	8001e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f003 fb31 	bl	8003e3a <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f001 fb5d 	bl	8001e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f003 fb64 	bl	8003eb2 <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f001 fb54 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 8000860:	f002 fb96 	bl	8002f90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <__io_putchar+0x20>)
 80008a4:	f005 f979 	bl	8005b9a <HAL_UART_Transmit>
	return ch;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000284 	.word	0x20000284

080008b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008be:	f001 fda9 	bl	8002414 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c2:	f000 ffbb 	bl	800183c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008c6:	f7ff ff03 	bl	80006d0 <MX_GPIO_Init>
	MX_RTC_Init();
 80008ca:	f001 faed 	bl	8001ea8 <MX_RTC_Init>
	MX_I2C1_Init();
 80008ce:	f7ff ff59 	bl	8000784 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 80008d2:	f001 fd03 	bl	80022dc <MX_USART3_UART_Init>
	MX_ADC1_Init();
 80008d6:	f7ff fe65 	bl	80005a4 <MX_ADC1_Init>
	MX_TIM3_Init();
 80008da:	f001 fc8f 	bl	80021fc <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80008de:	f001 f81f 	bl	8001920 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80008e2:	4885      	ldr	r0, [pc, #532]	; (8000af8 <main+0x240>)
 80008e4:	f004 fcda 	bl	800529c <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	init();
 80008e8:	f001 f9d2 	bl	8001c90 <init>
	LCD_Init(LCD_ADDR);
 80008ec:	204e      	movs	r0, #78	; 0x4e
 80008ee:	f001 f997 	bl	8001c20 <LCD_Init>
	up = 0;
 80008f2:	4b82      	ldr	r3, [pc, #520]	; (8000afc <main+0x244>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
	down = 0;
 80008f8:	4b81      	ldr	r3, [pc, #516]	; (8000b00 <main+0x248>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	left = 0;
 80008fe:	4b81      	ldr	r3, [pc, #516]	; (8000b04 <main+0x24c>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000904:	4b80      	ldr	r3, [pc, #512]	; (8000b08 <main+0x250>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 800090a:	4b80      	ldr	r3, [pc, #512]	; (8000b0c <main+0x254>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000910:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <main+0x254>)
 8000912:	2200      	movs	r2, #0
 8000914:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000916:	4b7d      	ldr	r3, [pc, #500]	; (8000b0c <main+0x254>)
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 800091c:	4b7b      	ldr	r3, [pc, #492]	; (8000b0c <main+0x254>)
 800091e:	2200      	movs	r2, #0
 8000920:	70da      	strb	r2, [r3, #3]

		//Main loop
		while (mode == 0) {
 8000922:	e0e2      	b.n	8000aea <main+0x232>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000924:	2200      	movs	r2, #0
 8000926:	497a      	ldr	r1, [pc, #488]	; (8000b10 <main+0x258>)
 8000928:	487a      	ldr	r0, [pc, #488]	; (8000b14 <main+0x25c>)
 800092a:	f004 fa79 	bl	8004e20 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800092e:	2200      	movs	r2, #0
 8000930:	4979      	ldr	r1, [pc, #484]	; (8000b18 <main+0x260>)
 8000932:	4878      	ldr	r0, [pc, #480]	; (8000b14 <main+0x25c>)
 8000934:	f004 fb56 	bl	8004fe4 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000938:	4878      	ldr	r0, [pc, #480]	; (8000b1c <main+0x264>)
 800093a:	f001 fe45 	bl	80025c8 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 800093e:	4b74      	ldr	r3, [pc, #464]	; (8000b10 <main+0x258>)
 8000940:	78db      	ldrb	r3, [r3, #3]
 8000942:	461a      	mov	r2, r3
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	4a75      	ldr	r2, [pc, #468]	; (8000b20 <main+0x268>)
 800094c:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800094e:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <main+0x258>)
 8000950:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000952:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000954:	4b6e      	ldr	r3, [pc, #440]	; (8000b10 <main+0x258>)
 8000956:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000958:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800095a:	4b6d      	ldr	r3, [pc, #436]	; (8000b10 <main+0x258>)
 800095c:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	9100      	str	r1, [sp, #0]
 8000962:	4603      	mov	r3, r0
 8000964:	496f      	ldr	r1, [pc, #444]	; (8000b24 <main+0x26c>)
 8000966:	4870      	ldr	r0, [pc, #448]	; (8000b28 <main+0x270>)
 8000968:	f006 f99e 	bl	8006ca8 <siprintf>

			// LCD up
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	204e      	movs	r0, #78	; 0x4e
 8000970:	f001 f932 	bl	8001bd8 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, "Park Jung Hwan");
 8000974:	496d      	ldr	r1, [pc, #436]	; (8000b2c <main+0x274>)
 8000976:	204e      	movs	r0, #78	; 0x4e
 8000978:	f001 f96f 	bl	8001c5a <LCD_SendString>

			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 800097c:	21c0      	movs	r1, #192	; 0xc0
 800097e:	204e      	movs	r0, #78	; 0x4e
 8000980:	f001 f92a 	bl	8001bd8 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 8000984:	4968      	ldr	r1, [pc, #416]	; (8000b28 <main+0x270>)
 8000986:	204e      	movs	r0, #78	; 0x4e
 8000988:	f001 f967 	bl	8001c5a <LCD_SendString>

			//==========================================================================================================
			//mode choose while loop
			while (rising_edge >= 1) {
 800098c:	e0a8      	b.n	8000ae0 <main+0x228>
				cur_tick = HAL_GetTick();
 800098e:	f001 fda7 	bl	80024e0 <HAL_GetTick>
 8000992:	4603      	mov	r3, r0
 8000994:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <main+0x278>)
 8000996:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8000998:	4b65      	ldr	r3, [pc, #404]	; (8000b30 <main+0x278>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <main+0x27c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a65      	ldr	r2, [pc, #404]	; (8000b38 <main+0x280>)
 80009a4:	6013      	str	r3, [r2, #0]

				if (tick_gap >= 300) {
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <main+0x280>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009ae:	f0c0 8097 	bcc.w	8000ae0 <main+0x228>

					if (rising_edge == 1 && falling_edge >= 1) {
 80009b2:	4b62      	ldr	r3, [pc, #392]	; (8000b3c <main+0x284>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d13c      	bne.n	8000a34 <main+0x17c>
 80009ba:	4b61      	ldr	r3, [pc, #388]	; (8000b40 <main+0x288>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d038      	beq.n	8000a34 <main+0x17c>

						// init the temp
						sTime_temp.Hours = 0;
 80009c2:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <main+0x254>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 80009c8:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <main+0x254>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <main+0x254>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <main+0x254>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 80009da:	4b5a      	ldr	r3, [pc, #360]	; (8000b44 <main+0x28c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 80009e0:	204e      	movs	r0, #78	; 0x4e
 80009e2:	f001 f91d 	bl	8001c20 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	204e      	movs	r0, #78	; 0x4e
 80009ea:	f001 f8f5 	bl	8001bd8 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Set Time Mode");
 80009ee:	4956      	ldr	r1, [pc, #344]	; (8000b48 <main+0x290>)
 80009f0:	204e      	movs	r0, #78	; 0x4e
 80009f2:	f001 f932 	bl	8001c5a <LCD_SendString>
						// LCD down
						screen(cursor, sTime_temp);
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <main+0x28c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461d      	mov	r5, r3
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <main+0x254>)
 80009fe:	466c      	mov	r4, sp
 8000a00:	f103 020c 	add.w	r2, r3, #12
 8000a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a08:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 ffdc 	bl	80019cc <screen>

						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000a14:	210f      	movs	r1, #15
 8000a16:	204e      	movs	r0, #78	; 0x4e
 8000a18:	f001 f8de 	bl	8001bd8 <LCD_SendCommand>

						//init the user button
						rising_edge = 0;
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <main+0x284>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a22:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <main+0x288>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
						mode = 1;
 8000a28:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <main+0x294>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
						printf("one click==========================\r\n");
 8000a2e:	4848      	ldr	r0, [pc, #288]	; (8000b50 <main+0x298>)
 8000a30:	f006 f932 	bl	8006c98 <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <main+0x284>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d93c      	bls.n	8000ab6 <main+0x1fe>
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <main+0x288>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d038      	beq.n	8000ab6 <main+0x1fe>
						// init the temp
						sTime_AL.Hours = 0;
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <main+0x29c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
						sTime_AL.Minutes = 0;
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <main+0x29c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
						sTime_AL.Seconds = 0;
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <main+0x29c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	709a      	strb	r2, [r3, #2]
						sTime_AL.TimeFormat = 0;
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <main+0x29c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 8000a5c:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <main+0x28c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8000a62:	204e      	movs	r0, #78	; 0x4e
 8000a64:	f001 f8dc 	bl	8001c20 <LCD_Init>
						//blink on
						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000a68:	210f      	movs	r1, #15
 8000a6a:	204e      	movs	r0, #78	; 0x4e
 8000a6c:	f001 f8b4 	bl	8001bd8 <LCD_SendCommand>

						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	204e      	movs	r0, #78	; 0x4e
 8000a74:	f001 f8b0 	bl	8001bd8 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Alarm Mode");
 8000a78:	4937      	ldr	r1, [pc, #220]	; (8000b58 <main+0x2a0>)
 8000a7a:	204e      	movs	r0, #78	; 0x4e
 8000a7c:	f001 f8ed 	bl	8001c5a <LCD_SendString>
						// LCD down
						screen(cursor, sTime_AL);
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <main+0x28c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461d      	mov	r5, r3
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <main+0x29c>)
 8000a88:	466c      	mov	r4, sp
 8000a8a:	f103 020c 	add.w	r2, r3, #12
 8000a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a92:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 ff97 	bl	80019cc <screen>

						//init the user button
						rising_edge = 0;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <main+0x284>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <main+0x288>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
						mode = 2;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0x294>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	701a      	strb	r2, [r3, #0]

						printf("two click++++++++++++++++++++++++++\r\n");
 8000ab0:	482a      	ldr	r0, [pc, #168]	; (8000b5c <main+0x2a4>)
 8000ab2:	f006 f8f1 	bl	8006c98 <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <main+0x280>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000abe:	d30f      	bcc.n	8000ae0 <main+0x228>
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <main+0x288>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10b      	bne.n	8000ae0 <main+0x228>
						rising_edge = 0;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <main+0x284>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <main+0x288>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <main+0x294>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8000ada:	4821      	ldr	r0, [pc, #132]	; (8000b60 <main+0x2a8>)
 8000adc:	f006 f8dc 	bl	8006c98 <puts>
			while (rising_edge >= 1) {
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <main+0x284>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f47f af52 	bne.w	800098e <main+0xd6>
		while (mode == 0) {
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <main+0x294>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f43f af18 	beq.w	8000924 <main+0x6c>
				}
			}
		}
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8000af4:	e33d      	b.n	8001172 <main+0x8ba>
 8000af6:	bf00      	nop
 8000af8:	2000023c 	.word	0x2000023c
 8000afc:	2000015c 	.word	0x2000015c
 8000b00:	2000015d 	.word	0x2000015d
 8000b04:	2000015e 	.word	0x2000015e
 8000b08:	2000015f 	.word	0x2000015f
 8000b0c:	200001a0 	.word	0x200001a0
 8000b10:	20000174 	.word	0x20000174
 8000b14:	20000218 	.word	0x20000218
 8000b18:	20000188 	.word	0x20000188
 8000b1c:	20000094 	.word	0x20000094
 8000b20:	20000000 	.word	0x20000000
 8000b24:	08007f64 	.word	0x08007f64
 8000b28:	20000160 	.word	0x20000160
 8000b2c:	08007f78 	.word	0x08007f78
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	20000148 	.word	0x20000148
 8000b38:	20000150 	.word	0x20000150
 8000b3c:	20000145 	.word	0x20000145
 8000b40:	20000146 	.word	0x20000146
 8000b44:	20000154 	.word	0x20000154
 8000b48:	08007f88 	.word	0x08007f88
 8000b4c:	20000147 	.word	0x20000147
 8000b50:	08007f98 	.word	0x08007f98
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	08007fc0 	.word	0x08007fc0
 8000b5c:	08007fcc 	.word	0x08007fcc
 8000b60:	08007ff4 	.word	0x08007ff4

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8000b64:	4896      	ldr	r0, [pc, #600]	; (8000dc0 <main+0x508>)
 8000b66:	f001 fd2f 	bl	80025c8 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8000b6a:	4b96      	ldr	r3, [pc, #600]	; (8000dc4 <main+0x50c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d04c      	beq.n	8000c0c <main+0x354>

				// this flag is check the exit or apply
				apply_flag = 1;
 8000b72:	4b95      	ldr	r3, [pc, #596]	; (8000dc8 <main+0x510>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8000b78:	4b94      	ldr	r3, [pc, #592]	; (8000dcc <main+0x514>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d012      	beq.n	8000ba6 <main+0x2ee>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 8000b80:	4b91      	ldr	r3, [pc, #580]	; (8000dc8 <main+0x510>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000b86:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <main+0x50c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000b8c:	4b8f      	ldr	r3, [pc, #572]	; (8000dcc <main+0x514>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000b92:	210e      	movs	r1, #14
 8000b94:	204e      	movs	r0, #78	; 0x4e
 8000b96:	f001 f81f 	bl	8001bd8 <LCD_SendCommand>
					mode = 0;
 8000b9a:	4b8d      	ldr	r3, [pc, #564]	; (8000dd0 <main+0x518>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 8000ba0:	488c      	ldr	r0, [pc, #560]	; (8000dd4 <main+0x51c>)
 8000ba2:	f006 f879 	bl	8006c98 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <main+0x514>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d12e      	bne.n	8000c0c <main+0x354>
 8000bae:	4b8a      	ldr	r3, [pc, #552]	; (8000dd8 <main+0x520>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d92a      	bls.n	8000c0c <main+0x354>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8000bb6:	4b89      	ldr	r3, [pc, #548]	; (8000ddc <main+0x524>)
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	4b89      	ldr	r3, [pc, #548]	; (8000de0 <main+0x528>)
 8000bbc:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8000bbe:	4b87      	ldr	r3, [pc, #540]	; (8000ddc <main+0x524>)
 8000bc0:	785a      	ldrb	r2, [r3, #1]
 8000bc2:	4b87      	ldr	r3, [pc, #540]	; (8000de0 <main+0x528>)
 8000bc4:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8000bc6:	4b85      	ldr	r3, [pc, #532]	; (8000ddc <main+0x524>)
 8000bc8:	789a      	ldrb	r2, [r3, #2]
 8000bca:	4b85      	ldr	r3, [pc, #532]	; (8000de0 <main+0x528>)
 8000bcc:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8000bce:	4b83      	ldr	r3, [pc, #524]	; (8000ddc <main+0x524>)
 8000bd0:	78da      	ldrb	r2, [r3, #3]
 8000bd2:	4b83      	ldr	r3, [pc, #524]	; (8000de0 <main+0x528>)
 8000bd4:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4981      	ldr	r1, [pc, #516]	; (8000de0 <main+0x528>)
 8000bda:	4882      	ldr	r0, [pc, #520]	; (8000de4 <main+0x52c>)
 8000bdc:	f004 f886 	bl	8004cec <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000be0:	210e      	movs	r1, #14
 8000be2:	204e      	movs	r0, #78	; 0x4e
 8000be4:	f000 fff8 	bl	8001bd8 <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 8000be8:	4b77      	ldr	r3, [pc, #476]	; (8000dc8 <main+0x510>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8000bee:	4b7a      	ldr	r3, [pc, #488]	; (8000dd8 <main+0x520>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000bf4:	4b73      	ldr	r3, [pc, #460]	; (8000dc4 <main+0x50c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000bfa:	4b74      	ldr	r3, [pc, #464]	; (8000dcc <main+0x514>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

					mode = 0;
 8000c00:	4b73      	ldr	r3, [pc, #460]	; (8000dd0 <main+0x518>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 8000c06:	4878      	ldr	r0, [pc, #480]	; (8000de8 <main+0x530>)
 8000c08:	f006 f846 	bl	8006c98 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 8000c0c:	4b77      	ldr	r3, [pc, #476]	; (8000dec <main+0x534>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 82ae 	beq.w	8001172 <main+0x8ba>

				if (up > 0) {
 8000c16:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <main+0x538>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 812a 	beq.w	8000e74 <main+0x5bc>
					//AM or PM switching
					if (cursor == 0) {
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <main+0x53c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d13c      	bne.n	8000ca2 <main+0x3ea>
						if (sTime_temp.TimeFormat == 0) {
 8000c28:	4b6c      	ldr	r3, [pc, #432]	; (8000ddc <main+0x524>)
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d119      	bne.n	8000c64 <main+0x3ac>
							sTime_temp.TimeFormat = 1;
 8000c30:	4b6a      	ldr	r3, [pc, #424]	; (8000ddc <main+0x524>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8000c36:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <main+0x524>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <main+0x38c>
								sTime_temp.Hours = 12;
 8000c3e:	4b67      	ldr	r3, [pc, #412]	; (8000ddc <main+0x524>)
 8000c40:	220c      	movs	r2, #12
 8000c42:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <main+0x53c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461d      	mov	r5, r3
 8000c4a:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <main+0x524>)
 8000c4c:	466c      	mov	r4, sp
 8000c4e:	f103 020c 	add.w	r2, r3, #12
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f000 feb5 	bl	80019cc <screen>
 8000c62:	e104      	b.n	8000e6e <main+0x5b6>

						} else if (sTime_temp.TimeFormat == 1) {
 8000c64:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <main+0x524>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	f040 8100 	bne.w	8000e6e <main+0x5b6>
							sTime_temp.TimeFormat = 0;
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <main+0x524>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8000c74:	4b59      	ldr	r3, [pc, #356]	; (8000ddc <main+0x524>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0c      	cmp	r3, #12
 8000c7a:	d102      	bne.n	8000c82 <main+0x3ca>
								sTime_temp.Hours = 0;
 8000c7c:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <main+0x524>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8000c82:	4b5c      	ldr	r3, [pc, #368]	; (8000df4 <main+0x53c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461d      	mov	r5, r3
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <main+0x524>)
 8000c8a:	466c      	mov	r4, sp
 8000c8c:	f103 020c 	add.w	r2, r3, #12
 8000c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c94:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 fe96 	bl	80019cc <screen>
 8000ca0:	e0e5      	b.n	8000e6e <main+0x5b6>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <main+0x53c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d119      	bne.n	8000cde <main+0x426>

						if (sTime_temp.Hours < 3) {
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <main+0x524>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d805      	bhi.n	8000cbe <main+0x406>
							sTime_temp.Hours += 10;
 8000cb2:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <main+0x524>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	330a      	adds	r3, #10
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <main+0x524>)
 8000cbc:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 8000cbe:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <main+0x53c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <main+0x524>)
 8000cc6:	466c      	mov	r4, sp
 8000cc8:	f103 020c 	add.w	r2, r3, #12
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	e884 0003 	stmia.w	r4, {r0, r1}
 8000cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	f000 fe78 	bl	80019cc <screen>
 8000cdc:	e0c7      	b.n	8000e6e <main+0x5b6>
					}

					// 1H switching
					else if (cursor == 4) {
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <main+0x53c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d130      	bne.n	8000d48 <main+0x490>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <main+0x524>)
 8000ce8:	78db      	ldrb	r3, [r3, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10a      	bne.n	8000d04 <main+0x44c>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours
									&& sTime_temp.Hours < 11) {
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <main+0x524>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
							if (0 <= sTime_temp.Hours
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	d818      	bhi.n	8000d28 <main+0x470>
								sTime_temp.Hours++;
 8000cf6:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <main+0x524>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <main+0x524>)
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e011      	b.n	8000d28 <main+0x470>
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <main+0x524>)
 8000d06:	78db      	ldrb	r3, [r3, #3]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10d      	bne.n	8000d28 <main+0x470>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <main+0x524>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <main+0x470>
									&& sTime_temp.Hours < 12) {
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <main+0x524>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b0b      	cmp	r3, #11
 8000d1a:	d805      	bhi.n	8000d28 <main+0x470>
								sTime_temp.Hours++;
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <main+0x524>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <main+0x524>)
 8000d26:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_temp);
 8000d28:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <main+0x53c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461d      	mov	r5, r3
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <main+0x524>)
 8000d30:	466c      	mov	r4, sp
 8000d32:	f103 020c 	add.w	r2, r3, #12
 8000d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d40:	4628      	mov	r0, r5
 8000d42:	f000 fe43 	bl	80019cc <screen>
 8000d46:	e092      	b.n	8000e6e <main+0x5b6>
					}

					// 10M switching
					else if (cursor == 6) {
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <main+0x53c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d119      	bne.n	8000d84 <main+0x4cc>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 50) {
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <main+0x524>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8000d54:	2b31      	cmp	r3, #49	; 0x31
 8000d56:	d805      	bhi.n	8000d64 <main+0x4ac>
							sTime_temp.Minutes += 10;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <main+0x524>)
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	330a      	adds	r3, #10
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <main+0x524>)
 8000d62:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <main+0x53c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461d      	mov	r5, r3
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <main+0x524>)
 8000d6c:	466c      	mov	r4, sp
 8000d6e:	f103 020c 	add.w	r2, r3, #12
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f000 fe25 	bl	80019cc <screen>
 8000d82:	e074      	b.n	8000e6e <main+0x5b6>
					}
					// 1M switching
					else if (cursor == 7) {
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <main+0x53c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d135      	bne.n	8000df8 <main+0x540>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 59) {
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <main+0x524>)
 8000d8e:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8000d90:	2b3a      	cmp	r3, #58	; 0x3a
 8000d92:	d805      	bhi.n	8000da0 <main+0x4e8>
							sTime_temp.Minutes += 1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <main+0x524>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <main+0x524>)
 8000d9e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <main+0x53c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461d      	mov	r5, r3
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <main+0x524>)
 8000da8:	466c      	mov	r4, sp
 8000daa:	f103 020c 	add.w	r2, r3, #12
 8000dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db8:	4628      	mov	r0, r5
 8000dba:	f000 fe07 	bl	80019cc <screen>
 8000dbe:	e056      	b.n	8000e6e <main+0x5b6>
 8000dc0:	20000094 	.word	0x20000094
 8000dc4:	20000145 	.word	0x20000145
 8000dc8:	20000134 	.word	0x20000134
 8000dcc:	20000146 	.word	0x20000146
 8000dd0:	20000147 	.word	0x20000147
 8000dd4:	0800801c 	.word	0x0800801c
 8000dd8:	20000138 	.word	0x20000138
 8000ddc:	200001a0 	.word	0x200001a0
 8000de0:	20000174 	.word	0x20000174
 8000de4:	20000218 	.word	0x20000218
 8000de8:	08008028 	.word	0x08008028
 8000dec:	20000130 	.word	0x20000130
 8000df0:	2000015c 	.word	0x2000015c
 8000df4:	20000154 	.word	0x20000154
					}

					// 10S switching
					else if (cursor == 9) {
 8000df8:	4b83      	ldr	r3, [pc, #524]	; (8001008 <main+0x750>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b09      	cmp	r3, #9
 8000dfe:	d119      	bne.n	8000e34 <main+0x57c>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 50) {
 8000e00:	4b82      	ldr	r3, [pc, #520]	; (800100c <main+0x754>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 8000e04:	2b31      	cmp	r3, #49	; 0x31
 8000e06:	d805      	bhi.n	8000e14 <main+0x55c>
							sTime_temp.Seconds += 10;
 8000e08:	4b80      	ldr	r3, [pc, #512]	; (800100c <main+0x754>)
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b7e      	ldr	r3, [pc, #504]	; (800100c <main+0x754>)
 8000e12:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8000e14:	4b7c      	ldr	r3, [pc, #496]	; (8001008 <main+0x750>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461d      	mov	r5, r3
 8000e1a:	4b7c      	ldr	r3, [pc, #496]	; (800100c <main+0x754>)
 8000e1c:	466c      	mov	r4, sp
 8000e1e:	f103 020c 	add.w	r2, r3, #12
 8000e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e26:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f000 fdcd 	bl	80019cc <screen>
 8000e32:	e01c      	b.n	8000e6e <main+0x5b6>
					}
					// 1S switching
					else if (cursor == 10) {
 8000e34:	4b74      	ldr	r3, [pc, #464]	; (8001008 <main+0x750>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d118      	bne.n	8000e6e <main+0x5b6>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 59) {
 8000e3c:	4b73      	ldr	r3, [pc, #460]	; (800100c <main+0x754>)
 8000e3e:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 8000e40:	2b3a      	cmp	r3, #58	; 0x3a
 8000e42:	d805      	bhi.n	8000e50 <main+0x598>
							sTime_temp.Seconds += 1;
 8000e44:	4b71      	ldr	r3, [pc, #452]	; (800100c <main+0x754>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	; (800100c <main+0x754>)
 8000e4e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8000e50:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <main+0x750>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461d      	mov	r5, r3
 8000e56:	4b6d      	ldr	r3, [pc, #436]	; (800100c <main+0x754>)
 8000e58:	466c      	mov	r4, sp
 8000e5a:	f103 020c 	add.w	r2, r3, #12
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f000 fdaf 	bl	80019cc <screen>
					}

					// clear the up flag
					up = 0;
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <main+0x758>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <main+0x75c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80f1 	beq.w	8001060 <main+0x7a8>

					//AM or PM switching
					if (cursor == 0) {
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <main+0x750>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d13c      	bne.n	8000f00 <main+0x648>
						if (sTime_temp.TimeFormat == 0) {
 8000e86:	4b61      	ldr	r3, [pc, #388]	; (800100c <main+0x754>)
 8000e88:	78db      	ldrb	r3, [r3, #3]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d119      	bne.n	8000ec2 <main+0x60a>
							sTime_temp.TimeFormat = 1;
 8000e8e:	4b5f      	ldr	r3, [pc, #380]	; (800100c <main+0x754>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8000e94:	4b5d      	ldr	r3, [pc, #372]	; (800100c <main+0x754>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <main+0x5ea>
								sTime_temp.Hours = 12;
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <main+0x754>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <main+0x750>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461d      	mov	r5, r3
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <main+0x754>)
 8000eaa:	466c      	mov	r4, sp
 8000eac:	f103 020c 	add.w	r2, r3, #12
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e884 0003 	stmia.w	r4, {r0, r1}
 8000eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f000 fd86 	bl	80019cc <screen>
 8000ec0:	e0cb      	b.n	800105a <main+0x7a2>
						} else if (sTime_temp.TimeFormat == 1) {
 8000ec2:	4b52      	ldr	r3, [pc, #328]	; (800100c <main+0x754>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	f040 80c7 	bne.w	800105a <main+0x7a2>
							sTime_temp.TimeFormat = 0;
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <main+0x754>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <main+0x754>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b0c      	cmp	r3, #12
 8000ed8:	d102      	bne.n	8000ee0 <main+0x628>
								sTime_temp.Hours = 0;
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <main+0x754>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8000ee0:	4b49      	ldr	r3, [pc, #292]	; (8001008 <main+0x750>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <main+0x754>)
 8000ee8:	466c      	mov	r4, sp
 8000eea:	f103 020c 	add.w	r2, r3, #12
 8000eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f000 fd67 	bl	80019cc <screen>
 8000efe:	e0ac      	b.n	800105a <main+0x7a2>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <main+0x750>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d119      	bne.n	8000f3c <main+0x684>
						if (sTime_temp.Hours > 0) {
 8000f08:	4b40      	ldr	r3, [pc, #256]	; (800100c <main+0x754>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <main+0x664>
							sTime_temp.Hours--;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	; (800100c <main+0x754>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <main+0x754>)
 8000f1a:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <main+0x750>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461d      	mov	r5, r3
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <main+0x754>)
 8000f24:	466c      	mov	r4, sp
 8000f26:	f103 020c 	add.w	r2, r3, #12
 8000f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4628      	mov	r0, r5
 8000f36:	f000 fd49 	bl	80019cc <screen>
 8000f3a:	e08e      	b.n	800105a <main+0x7a2>
					}

					// 10M switching
					else if (cursor == 6) {
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <main+0x750>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d11d      	bne.n	8000f80 <main+0x6c8>
						if (0 < sTime_temp.Minutes
 8000f44:	4b31      	ldr	r3, [pc, #196]	; (800100c <main+0x754>)
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <main+0x6a8>
								&& sTime_temp.Minutes <= 50) {
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <main+0x754>)
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	2b32      	cmp	r3, #50	; 0x32
 8000f52:	d805      	bhi.n	8000f60 <main+0x6a8>
							sTime_temp.Minutes -= 10;
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <main+0x754>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	3b0a      	subs	r3, #10
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <main+0x754>)
 8000f5e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <main+0x750>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461d      	mov	r5, r3
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <main+0x754>)
 8000f68:	466c      	mov	r4, sp
 8000f6a:	f103 020c 	add.w	r2, r3, #12
 8000f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f72:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f78:	4628      	mov	r0, r5
 8000f7a:	f000 fd27 	bl	80019cc <screen>
 8000f7e:	e06c      	b.n	800105a <main+0x7a2>
					}
					// 1M switching
					else if (cursor == 7) {
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <main+0x750>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d11d      	bne.n	8000fc4 <main+0x70c>
						if (0 < sTime_temp.Minutes
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <main+0x754>)
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <main+0x6ec>
								&& sTime_temp.Minutes <= 59) {
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <main+0x754>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	2b3b      	cmp	r3, #59	; 0x3b
 8000f96:	d805      	bhi.n	8000fa4 <main+0x6ec>
							sTime_temp.Minutes -= 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <main+0x754>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <main+0x754>)
 8000fa2:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <main+0x750>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461d      	mov	r5, r3
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <main+0x754>)
 8000fac:	466c      	mov	r4, sp
 8000fae:	f103 020c 	add.w	r2, r3, #12
 8000fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f000 fd05 	bl	80019cc <screen>
 8000fc2:	e04a      	b.n	800105a <main+0x7a2>
					}

					// 10S switching
					else if (cursor == 9) {
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <main+0x750>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d125      	bne.n	8001018 <main+0x760>
						if (0 < sTime_temp.Seconds
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <main+0x754>)
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <main+0x730>
								&& sTime_temp.Seconds <= 50) {
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <main+0x754>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	2b32      	cmp	r3, #50	; 0x32
 8000fda:	d805      	bhi.n	8000fe8 <main+0x730>
							sTime_temp.Seconds -= 10;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <main+0x754>)
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	3b0a      	subs	r3, #10
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <main+0x754>)
 8000fe6:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <main+0x750>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461d      	mov	r5, r3
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <main+0x754>)
 8000ff0:	466c      	mov	r4, sp
 8000ff2:	f103 020c 	add.w	r2, r3, #12
 8000ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffa:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	4628      	mov	r0, r5
 8001002:	f000 fce3 	bl	80019cc <screen>
 8001006:	e028      	b.n	800105a <main+0x7a2>
 8001008:	20000154 	.word	0x20000154
 800100c:	200001a0 	.word	0x200001a0
 8001010:	2000015c 	.word	0x2000015c
 8001014:	2000015d 	.word	0x2000015d
					}
					// 1S switching
					else if (cursor == 10) {
 8001018:	4b99      	ldr	r3, [pc, #612]	; (8001280 <main+0x9c8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b0a      	cmp	r3, #10
 800101e:	d11c      	bne.n	800105a <main+0x7a2>
						if (0 < sTime_temp.Seconds
 8001020:	4b98      	ldr	r3, [pc, #608]	; (8001284 <main+0x9cc>)
 8001022:	789b      	ldrb	r3, [r3, #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <main+0x784>
								&& sTime_temp.Seconds <= 59) {
 8001028:	4b96      	ldr	r3, [pc, #600]	; (8001284 <main+0x9cc>)
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	2b3b      	cmp	r3, #59	; 0x3b
 800102e:	d805      	bhi.n	800103c <main+0x784>
							sTime_temp.Seconds -= 1;
 8001030:	4b94      	ldr	r3, [pc, #592]	; (8001284 <main+0x9cc>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	3b01      	subs	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b92      	ldr	r3, [pc, #584]	; (8001284 <main+0x9cc>)
 800103a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 800103c:	4b90      	ldr	r3, [pc, #576]	; (8001280 <main+0x9c8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461d      	mov	r5, r3
 8001042:	4b90      	ldr	r3, [pc, #576]	; (8001284 <main+0x9cc>)
 8001044:	466c      	mov	r4, sp
 8001046:	f103 020c 	add.w	r2, r3, #12
 800104a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001054:	4628      	mov	r0, r5
 8001056:	f000 fcb9 	bl	80019cc <screen>
					}

					// clear the down flag
					down = 0;
 800105a:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <main+0x9d0>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001060:	4b8a      	ldr	r3, [pc, #552]	; (800128c <main+0x9d4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d03e      	beq.n	80010e6 <main+0x82e>
					if (cursor > 0) {
 8001068:	4b85      	ldr	r3, [pc, #532]	; (8001280 <main+0x9c8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d037      	beq.n	80010e0 <main+0x828>
						cursor--;
 8001070:	4b83      	ldr	r3, [pc, #524]	; (8001280 <main+0x9c8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b81      	ldr	r3, [pc, #516]	; (8001280 <main+0x9c8>)
 800107a:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 800107c:	2110      	movs	r1, #16
 800107e:	204e      	movs	r0, #78	; 0x4e
 8001080:	f000 fdaa 	bl	8001bd8 <LCD_SendCommand>

						if (cursor == 8) {
 8001084:	4b7e      	ldr	r3, [pc, #504]	; (8001280 <main+0x9c8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d109      	bne.n	80010a0 <main+0x7e8>
							cursor--;
 800108c:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <main+0x9c8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <main+0x9c8>)
 8001096:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001098:	2110      	movs	r1, #16
 800109a:	204e      	movs	r0, #78	; 0x4e
 800109c:	f000 fd9c 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 5) {
 80010a0:	4b77      	ldr	r3, [pc, #476]	; (8001280 <main+0x9c8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d109      	bne.n	80010bc <main+0x804>
							cursor--;
 80010a8:	4b75      	ldr	r3, [pc, #468]	; (8001280 <main+0x9c8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b73      	ldr	r3, [pc, #460]	; (8001280 <main+0x9c8>)
 80010b2:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80010b4:	2110      	movs	r1, #16
 80010b6:	204e      	movs	r0, #78	; 0x4e
 80010b8:	f000 fd8e 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 2) {
 80010bc:	4b70      	ldr	r3, [pc, #448]	; (8001280 <main+0x9c8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d10d      	bne.n	80010e0 <main+0x828>
							cursor -= 2;
 80010c4:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <main+0x9c8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3b02      	subs	r3, #2
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <main+0x9c8>)
 80010ce:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80010d0:	2110      	movs	r1, #16
 80010d2:	204e      	movs	r0, #78	; 0x4e
 80010d4:	f000 fd80 	bl	8001bd8 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80010d8:	2110      	movs	r1, #16
 80010da:	204e      	movs	r0, #78	; 0x4e
 80010dc:	f000 fd7c 	bl	8001bd8 <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <main+0x9d4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 80010e6:	4b6a      	ldr	r3, [pc, #424]	; (8001290 <main+0x9d8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03e      	beq.n	800116c <main+0x8b4>

					if (cursor < 10) {
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <main+0x9c8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d837      	bhi.n	8001166 <main+0x8ae>
						cursor++;
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <main+0x9c8>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b60      	ldr	r3, [pc, #384]	; (8001280 <main+0x9c8>)
 8001100:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001102:	2114      	movs	r1, #20
 8001104:	204e      	movs	r0, #78	; 0x4e
 8001106:	f000 fd67 	bl	8001bd8 <LCD_SendCommand>

						if (cursor == 8) {
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <main+0x9c8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d109      	bne.n	8001126 <main+0x86e>
							cursor++;
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <main+0x9c8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <main+0x9c8>)
 800111c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800111e:	2114      	movs	r1, #20
 8001120:	204e      	movs	r0, #78	; 0x4e
 8001122:	f000 fd59 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001126:	4b56      	ldr	r3, [pc, #344]	; (8001280 <main+0x9c8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d109      	bne.n	8001142 <main+0x88a>
							cursor++;
 800112e:	4b54      	ldr	r3, [pc, #336]	; (8001280 <main+0x9c8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b52      	ldr	r3, [pc, #328]	; (8001280 <main+0x9c8>)
 8001138:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800113a:	2114      	movs	r1, #20
 800113c:	204e      	movs	r0, #78	; 0x4e
 800113e:	f000 fd4b 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001142:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <main+0x9c8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10d      	bne.n	8001166 <main+0x8ae>
							cursor += 2;
 800114a:	4b4d      	ldr	r3, [pc, #308]	; (8001280 <main+0x9c8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <main+0x9c8>)
 8001154:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001156:	2114      	movs	r1, #20
 8001158:	204e      	movs	r0, #78	; 0x4e
 800115a:	f000 fd3d 	bl	8001bd8 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800115e:	2114      	movs	r1, #20
 8001160:	204e      	movs	r0, #78	; 0x4e
 8001162:	f000 fd39 	bl	8001bd8 <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <main+0x9d8>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 800116c:	4b49      	ldr	r3, [pc, #292]	; (8001294 <main+0x9dc>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <main+0x9e0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	f43f acf4 	beq.w	8000b64 <main+0x2ac>
			}
		}

		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 800117c:	e30f      	b.n	800179e <main+0xee6>
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 800117e:	4847      	ldr	r0, [pc, #284]	; (800129c <main+0x9e4>)
 8001180:	f001 fa22 	bl	80025c8 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <main+0x9e8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d04c      	beq.n	8001226 <main+0x96e>

				// this flag is check the exit or apply
				apply_flag = 1;
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <main+0x9ec>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <main+0x9f0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <main+0x908>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <main+0x9ec>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <main+0x9e8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <main+0x9f0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 80011ac:	210e      	movs	r1, #14
 80011ae:	204e      	movs	r0, #78	; 0x4e
 80011b0:	f000 fd12 	bl	8001bd8 <LCD_SendCommand>
					mode = 0;
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <main+0x9e0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 80011ba:	483c      	ldr	r0, [pc, #240]	; (80012ac <main+0x9f4>)
 80011bc:	f005 fd6c 	bl	8006c98 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <main+0x9f0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12e      	bne.n	8001226 <main+0x96e>
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <main+0x9f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d92a      	bls.n	8001226 <main+0x96e>

					// sTime is now applied by user
					sTime.Hours = sTime_AL.Hours;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <main+0x9fc>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <main+0xa00>)
 80011d6:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_AL.Minutes;
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <main+0x9fc>)
 80011da:	785a      	ldrb	r2, [r3, #1]
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <main+0xa00>)
 80011de:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_AL.Seconds;
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <main+0x9fc>)
 80011e2:	789a      	ldrb	r2, [r3, #2]
 80011e4:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <main+0xa00>)
 80011e6:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_AL.TimeFormat;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <main+0x9fc>)
 80011ea:	78da      	ldrb	r2, [r3, #3]
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <main+0xa00>)
 80011ee:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011f0:	2200      	movs	r2, #0
 80011f2:	4931      	ldr	r1, [pc, #196]	; (80012b8 <main+0xa00>)
 80011f4:	4831      	ldr	r0, [pc, #196]	; (80012bc <main+0xa04>)
 80011f6:	f003 fd79 	bl	8004cec <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 80011fa:	210e      	movs	r1, #14
 80011fc:	204e      	movs	r0, #78	; 0x4e
 80011fe:	f000 fceb 	bl	8001bd8 <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <main+0x9ec>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <main+0x9f8>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <main+0x9e8>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <main+0x9f0>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]

					mode = 0;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <main+0x9e0>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <main+0xa08>)
 8001222:	f005 fd39 	bl	8006c98 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <main+0x9dc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 82b7 	beq.w	800179e <main+0xee6>

				if (up > 0) {
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <main+0xa0c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8133 	beq.w	80014a0 <main+0xbe8>
					//AM or PM switching
					if (cursor == 0) {
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <main+0x9c8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d161      	bne.n	8001306 <main+0xa4e>
						if (sTime_AL.TimeFormat == 0) {
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <main+0x9fc>)
 8001244:	78db      	ldrb	r3, [r3, #3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d13e      	bne.n	80012c8 <main+0xa10>
							sTime_AL.TimeFormat = 1;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <main+0x9fc>)
 800124c:	2201      	movs	r2, #1
 800124e:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <main+0x9fc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <main+0x9a6>
								sTime_AL.Hours = 12;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <main+0x9fc>)
 800125a:	220c      	movs	r2, #12
 800125c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <main+0x9c8>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461d      	mov	r5, r3
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <main+0x9fc>)
 8001266:	466c      	mov	r4, sp
 8001268:	f103 020c 	add.w	r2, r3, #12
 800126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001270:	e884 0003 	stmia.w	r4, {r0, r1}
 8001274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001276:	4628      	mov	r0, r5
 8001278:	f000 fba8 	bl	80019cc <screen>
 800127c:	e10d      	b.n	800149a <main+0xbe2>
 800127e:	bf00      	nop
 8001280:	20000154 	.word	0x20000154
 8001284:	200001a0 	.word	0x200001a0
 8001288:	2000015d 	.word	0x2000015d
 800128c:	2000015e 	.word	0x2000015e
 8001290:	2000015f 	.word	0x2000015f
 8001294:	20000130 	.word	0x20000130
 8001298:	20000147 	.word	0x20000147
 800129c:	20000094 	.word	0x20000094
 80012a0:	20000145 	.word	0x20000145
 80012a4:	20000134 	.word	0x20000134
 80012a8:	20000146 	.word	0x20000146
 80012ac:	0800801c 	.word	0x0800801c
 80012b0:	20000138 	.word	0x20000138
 80012b4:	200001b4 	.word	0x200001b4
 80012b8:	20000174 	.word	0x20000174
 80012bc:	20000218 	.word	0x20000218
 80012c0:	08008028 	.word	0x08008028
 80012c4:	2000015c 	.word	0x2000015c

						} else if (sTime_AL.TimeFormat == 1) {
 80012c8:	4b98      	ldr	r3, [pc, #608]	; (800152c <main+0xc74>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 80e4 	bne.w	800149a <main+0xbe2>
							sTime_AL.TimeFormat = 0;
 80012d2:	4b96      	ldr	r3, [pc, #600]	; (800152c <main+0xc74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 80012d8:	4b94      	ldr	r3, [pc, #592]	; (800152c <main+0xc74>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d102      	bne.n	80012e6 <main+0xa2e>
								sTime_AL.Hours = 0;
 80012e0:	4b92      	ldr	r3, [pc, #584]	; (800152c <main+0xc74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80012e6:	4b92      	ldr	r3, [pc, #584]	; (8001530 <main+0xc78>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461d      	mov	r5, r3
 80012ec:	4b8f      	ldr	r3, [pc, #572]	; (800152c <main+0xc74>)
 80012ee:	466c      	mov	r4, sp
 80012f0:	f103 020c 	add.w	r2, r3, #12
 80012f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80012fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fe:	4628      	mov	r0, r5
 8001300:	f000 fb64 	bl	80019cc <screen>
 8001304:	e0c9      	b.n	800149a <main+0xbe2>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 8001306:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <main+0xc78>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d119      	bne.n	8001342 <main+0xa8a>

						if (sTime_AL.Hours < 3) {
 800130e:	4b87      	ldr	r3, [pc, #540]	; (800152c <main+0xc74>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d805      	bhi.n	8001322 <main+0xa6a>
							sTime_AL.Hours += 10;
 8001316:	4b85      	ldr	r3, [pc, #532]	; (800152c <main+0xc74>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	330a      	adds	r3, #10
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <main+0xc74>)
 8001320:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001322:	4b83      	ldr	r3, [pc, #524]	; (8001530 <main+0xc78>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461d      	mov	r5, r3
 8001328:	4b80      	ldr	r3, [pc, #512]	; (800152c <main+0xc74>)
 800132a:	466c      	mov	r4, sp
 800132c:	f103 020c 	add.w	r2, r3, #12
 8001330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001334:	e884 0003 	stmia.w	r4, {r0, r1}
 8001338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133a:	4628      	mov	r0, r5
 800133c:	f000 fb46 	bl	80019cc <screen>
 8001340:	e0ab      	b.n	800149a <main+0xbe2>
					}

					// 1H switching
					else if (cursor == 4) {
 8001342:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <main+0xc78>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d130      	bne.n	80013ac <main+0xaf4>

						//AM
						if (sTime_AL.TimeFormat == 0) {
 800134a:	4b78      	ldr	r3, [pc, #480]	; (800152c <main+0xc74>)
 800134c:	78db      	ldrb	r3, [r3, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <main+0xab0>
							// 0 ~ 11
							if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 8001352:	4b76      	ldr	r3, [pc, #472]	; (800152c <main+0xc74>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d818      	bhi.n	800138c <main+0xad4>
								sTime_AL.Hours++;
 800135a:	4b74      	ldr	r3, [pc, #464]	; (800152c <main+0xc74>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b72      	ldr	r3, [pc, #456]	; (800152c <main+0xc74>)
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e011      	b.n	800138c <main+0xad4>
							}
						}
						//PM
						else if (sTime_AL.TimeFormat == 1) {
 8001368:	4b70      	ldr	r3, [pc, #448]	; (800152c <main+0xc74>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10d      	bne.n	800138c <main+0xad4>

							// 1 ~ 12
							if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 8001370:	4b6e      	ldr	r3, [pc, #440]	; (800152c <main+0xc74>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <main+0xad4>
 8001378:	4b6c      	ldr	r3, [pc, #432]	; (800152c <main+0xc74>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0b      	cmp	r3, #11
 800137e:	d805      	bhi.n	800138c <main+0xad4>
								sTime_AL.Hours++;
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0xc74>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b68      	ldr	r3, [pc, #416]	; (800152c <main+0xc74>)
 800138a:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_AL);
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <main+0xc78>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461d      	mov	r5, r3
 8001392:	4b66      	ldr	r3, [pc, #408]	; (800152c <main+0xc74>)
 8001394:	466c      	mov	r4, sp
 8001396:	f103 020c 	add.w	r2, r3, #12
 800139a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139e:	e884 0003 	stmia.w	r4, {r0, r1}
 80013a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a4:	4628      	mov	r0, r5
 80013a6:	f000 fb11 	bl	80019cc <screen>
 80013aa:	e076      	b.n	800149a <main+0xbe2>
					}

					// 10M switching
					else if (cursor == 6) {
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <main+0xc78>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d119      	bne.n	80013e8 <main+0xb30>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <main+0xc74>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b31      	cmp	r3, #49	; 0x31
 80013ba:	d805      	bhi.n	80013c8 <main+0xb10>
							sTime_AL.Minutes += 10;
 80013bc:	4b5b      	ldr	r3, [pc, #364]	; (800152c <main+0xc74>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	330a      	adds	r3, #10
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <main+0xc74>)
 80013c6:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 80013c8:	4b59      	ldr	r3, [pc, #356]	; (8001530 <main+0xc78>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461d      	mov	r5, r3
 80013ce:	4b57      	ldr	r3, [pc, #348]	; (800152c <main+0xc74>)
 80013d0:	466c      	mov	r4, sp
 80013d2:	f103 020c 	add.w	r2, r3, #12
 80013d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013da:	e884 0003 	stmia.w	r4, {r0, r1}
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 faf3 	bl	80019cc <screen>
 80013e6:	e058      	b.n	800149a <main+0xbe2>
					}
					// 1M switching
					else if (cursor == 7) {
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <main+0xc78>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d119      	bne.n	8001424 <main+0xb6c>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 80013f0:	4b4e      	ldr	r3, [pc, #312]	; (800152c <main+0xc74>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	2b3a      	cmp	r3, #58	; 0x3a
 80013f6:	d805      	bhi.n	8001404 <main+0xb4c>
							sTime_AL.Minutes += 1;
 80013f8:	4b4c      	ldr	r3, [pc, #304]	; (800152c <main+0xc74>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <main+0xc74>)
 8001402:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <main+0xc78>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461d      	mov	r5, r3
 800140a:	4b48      	ldr	r3, [pc, #288]	; (800152c <main+0xc74>)
 800140c:	466c      	mov	r4, sp
 800140e:	f103 020c 	add.w	r2, r3, #12
 8001412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001416:	e884 0003 	stmia.w	r4, {r0, r1}
 800141a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141c:	4628      	mov	r0, r5
 800141e:	f000 fad5 	bl	80019cc <screen>
 8001422:	e03a      	b.n	800149a <main+0xbe2>
					}

					// 10S switching
					else if (cursor == 9) {
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <main+0xc78>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d119      	bne.n	8001460 <main+0xba8>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <main+0xc74>)
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	2b31      	cmp	r3, #49	; 0x31
 8001432:	d805      	bhi.n	8001440 <main+0xb88>
							sTime_AL.Seconds += 10;
 8001434:	4b3d      	ldr	r3, [pc, #244]	; (800152c <main+0xc74>)
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	330a      	adds	r3, #10
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <main+0xc74>)
 800143e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <main+0xc78>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461d      	mov	r5, r3
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <main+0xc74>)
 8001448:	466c      	mov	r4, sp
 800144a:	f103 020c 	add.w	r2, r3, #12
 800144e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001452:	e884 0003 	stmia.w	r4, {r0, r1}
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	4628      	mov	r0, r5
 800145a:	f000 fab7 	bl	80019cc <screen>
 800145e:	e01c      	b.n	800149a <main+0xbe2>
					}
					// 1S switching
					else if (cursor == 10) {
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <main+0xc78>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b0a      	cmp	r3, #10
 8001466:	d118      	bne.n	800149a <main+0xbe2>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <main+0xc74>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	2b3a      	cmp	r3, #58	; 0x3a
 800146e:	d805      	bhi.n	800147c <main+0xbc4>
							sTime_AL.Seconds += 1;
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <main+0xc74>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <main+0xc74>)
 800147a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <main+0xc78>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461d      	mov	r5, r3
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <main+0xc74>)
 8001484:	466c      	mov	r4, sp
 8001486:	f103 020c 	add.w	r2, r3, #12
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	4628      	mov	r0, r5
 8001496:	f000 fa99 	bl	80019cc <screen>
					}

					// clear the up flag
					up = 0;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <main+0xc7c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <main+0xc80>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80f1 	beq.w	800168c <main+0xdd4>

					//AM or PM switching
					if (cursor == 0) {
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <main+0xc78>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d144      	bne.n	800153c <main+0xc84>
						if (sTime_AL.TimeFormat == 0) {
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <main+0xc74>)
 80014b4:	78db      	ldrb	r3, [r3, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d119      	bne.n	80014ee <main+0xc36>
							sTime_AL.TimeFormat = 1;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <main+0xc74>)
 80014bc:	2201      	movs	r2, #1
 80014be:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <main+0xc74>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <main+0xc16>
								sTime_AL.Hours = 12;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <main+0xc74>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <main+0xc78>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461d      	mov	r5, r3
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <main+0xc74>)
 80014d6:	466c      	mov	r4, sp
 80014d8:	f103 020c 	add.w	r2, r3, #12
 80014dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80014e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e6:	4628      	mov	r0, r5
 80014e8:	f000 fa70 	bl	80019cc <screen>
 80014ec:	e0cb      	b.n	8001686 <main+0xdce>
						} else if (sTime_AL.TimeFormat == 1) {
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <main+0xc74>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	f040 80c7 	bne.w	8001686 <main+0xdce>
							sTime_AL.TimeFormat = 0;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <main+0xc74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <main+0xc74>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d102      	bne.n	800150c <main+0xc54>
								sTime_AL.Hours = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <main+0xc74>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <main+0xc78>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461d      	mov	r5, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <main+0xc74>)
 8001514:	466c      	mov	r4, sp
 8001516:	f103 020c 	add.w	r2, r3, #12
 800151a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	4628      	mov	r0, r5
 8001526:	f000 fa51 	bl	80019cc <screen>
 800152a:	e0ac      	b.n	8001686 <main+0xdce>
 800152c:	200001b4 	.word	0x200001b4
 8001530:	20000154 	.word	0x20000154
 8001534:	2000015c 	.word	0x2000015c
 8001538:	2000015d 	.word	0x2000015d
						}
					}

					// 1H switching
					else if (cursor == 4) {
 800153c:	4b9b      	ldr	r3, [pc, #620]	; (80017ac <main+0xef4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d119      	bne.n	8001578 <main+0xcc0>
						if (sTime_AL.Hours > 0) {
 8001544:	4b9a      	ldr	r3, [pc, #616]	; (80017b0 <main+0xef8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <main+0xca0>
							sTime_AL.Hours--;
 800154c:	4b98      	ldr	r3, [pc, #608]	; (80017b0 <main+0xef8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b96      	ldr	r3, [pc, #600]	; (80017b0 <main+0xef8>)
 8001556:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001558:	4b94      	ldr	r3, [pc, #592]	; (80017ac <main+0xef4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461d      	mov	r5, r3
 800155e:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <main+0xef8>)
 8001560:	466c      	mov	r4, sp
 8001562:	f103 020c 	add.w	r2, r3, #12
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	e884 0003 	stmia.w	r4, {r0, r1}
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	4628      	mov	r0, r5
 8001572:	f000 fa2b 	bl	80019cc <screen>
 8001576:	e086      	b.n	8001686 <main+0xdce>
					}

					// 10M switching
					else if (cursor == 6) {
 8001578:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <main+0xef4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b06      	cmp	r3, #6
 800157e:	d11d      	bne.n	80015bc <main+0xd04>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 8001580:	4b8b      	ldr	r3, [pc, #556]	; (80017b0 <main+0xef8>)
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <main+0xce4>
 8001588:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <main+0xef8>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	2b32      	cmp	r3, #50	; 0x32
 800158e:	d805      	bhi.n	800159c <main+0xce4>
							sTime_AL.Minutes -= 10;
 8001590:	4b87      	ldr	r3, [pc, #540]	; (80017b0 <main+0xef8>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	3b0a      	subs	r3, #10
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <main+0xef8>)
 800159a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 800159c:	4b83      	ldr	r3, [pc, #524]	; (80017ac <main+0xef4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461d      	mov	r5, r3
 80015a2:	4b83      	ldr	r3, [pc, #524]	; (80017b0 <main+0xef8>)
 80015a4:	466c      	mov	r4, sp
 80015a6:	f103 020c 	add.w	r2, r3, #12
 80015aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80015b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b4:	4628      	mov	r0, r5
 80015b6:	f000 fa09 	bl	80019cc <screen>
 80015ba:	e064      	b.n	8001686 <main+0xdce>
					}
					// 1M switching
					else if (cursor == 7) {
 80015bc:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <main+0xef4>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d11d      	bne.n	8001600 <main+0xd48>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 80015c4:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <main+0xef8>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <main+0xd28>
 80015cc:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <main+0xef8>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b3b      	cmp	r3, #59	; 0x3b
 80015d2:	d805      	bhi.n	80015e0 <main+0xd28>
							sTime_AL.Minutes -= 1;
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <main+0xef8>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	3b01      	subs	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <main+0xef8>)
 80015de:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 80015e0:	4b72      	ldr	r3, [pc, #456]	; (80017ac <main+0xef4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461d      	mov	r5, r3
 80015e6:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <main+0xef8>)
 80015e8:	466c      	mov	r4, sp
 80015ea:	f103 020c 	add.w	r2, r3, #12
 80015ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	4628      	mov	r0, r5
 80015fa:	f000 f9e7 	bl	80019cc <screen>
 80015fe:	e042      	b.n	8001686 <main+0xdce>
					}

					// 10S switching
					else if (cursor == 9) {
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <main+0xef4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b09      	cmp	r3, #9
 8001606:	d11d      	bne.n	8001644 <main+0xd8c>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 8001608:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <main+0xef8>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <main+0xd6c>
 8001610:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <main+0xef8>)
 8001612:	789b      	ldrb	r3, [r3, #2]
 8001614:	2b32      	cmp	r3, #50	; 0x32
 8001616:	d805      	bhi.n	8001624 <main+0xd6c>
							sTime_AL.Seconds -= 10;
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <main+0xef8>)
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	3b0a      	subs	r3, #10
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <main+0xef8>)
 8001622:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <main+0xef4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461d      	mov	r5, r3
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <main+0xef8>)
 800162c:	466c      	mov	r4, sp
 800162e:	f103 020c 	add.w	r2, r3, #12
 8001632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001636:	e884 0003 	stmia.w	r4, {r0, r1}
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	4628      	mov	r0, r5
 800163e:	f000 f9c5 	bl	80019cc <screen>
 8001642:	e020      	b.n	8001686 <main+0xdce>
					}
					// 1S switching
					else if (cursor == 10) {
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <main+0xef4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b0a      	cmp	r3, #10
 800164a:	d11c      	bne.n	8001686 <main+0xdce>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 800164c:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <main+0xef8>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <main+0xdb0>
 8001654:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <main+0xef8>)
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	2b3b      	cmp	r3, #59	; 0x3b
 800165a:	d805      	bhi.n	8001668 <main+0xdb0>
							sTime_AL.Seconds -= 1;
 800165c:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <main+0xef8>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	3b01      	subs	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <main+0xef8>)
 8001666:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <main+0xef4>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461d      	mov	r5, r3
 800166e:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <main+0xef8>)
 8001670:	466c      	mov	r4, sp
 8001672:	f103 020c 	add.w	r2, r3, #12
 8001676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167a:	e884 0003 	stmia.w	r4, {r0, r1}
 800167e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001680:	4628      	mov	r0, r5
 8001682:	f000 f9a3 	bl	80019cc <screen>
					}

					// clear the down flag
					down = 0;
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <main+0xefc>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 800168c:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <main+0xf00>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03e      	beq.n	8001712 <main+0xe5a>
					if (cursor > 0) {
 8001694:	4b45      	ldr	r3, [pc, #276]	; (80017ac <main+0xef4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d037      	beq.n	800170c <main+0xe54>
						cursor--;
 800169c:	4b43      	ldr	r3, [pc, #268]	; (80017ac <main+0xef4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <main+0xef4>)
 80016a6:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 80016a8:	2110      	movs	r1, #16
 80016aa:	204e      	movs	r0, #78	; 0x4e
 80016ac:	f000 fa94 	bl	8001bd8 <LCD_SendCommand>

						if (cursor == 8) {
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <main+0xef4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d109      	bne.n	80016cc <main+0xe14>
							cursor--;
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <main+0xef4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <main+0xef4>)
 80016c2:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80016c4:	2110      	movs	r1, #16
 80016c6:	204e      	movs	r0, #78	; 0x4e
 80016c8:	f000 fa86 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 5) {
 80016cc:	4b37      	ldr	r3, [pc, #220]	; (80017ac <main+0xef4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d109      	bne.n	80016e8 <main+0xe30>
							cursor--;
 80016d4:	4b35      	ldr	r3, [pc, #212]	; (80017ac <main+0xef4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <main+0xef4>)
 80016de:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80016e0:	2110      	movs	r1, #16
 80016e2:	204e      	movs	r0, #78	; 0x4e
 80016e4:	f000 fa78 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 2) {
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <main+0xef4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d10d      	bne.n	800170c <main+0xe54>
							cursor -= 2;
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <main+0xef4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b02      	subs	r3, #2
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <main+0xef4>)
 80016fa:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80016fc:	2110      	movs	r1, #16
 80016fe:	204e      	movs	r0, #78	; 0x4e
 8001700:	f000 fa6a 	bl	8001bd8 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001704:	2110      	movs	r1, #16
 8001706:	204e      	movs	r0, #78	; 0x4e
 8001708:	f000 fa66 	bl	8001bd8 <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <main+0xf00>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <main+0xf04>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d03e      	beq.n	8001798 <main+0xee0>

					if (cursor < 10) {
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <main+0xef4>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d837      	bhi.n	8001792 <main+0xeda>
						cursor++;
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <main+0xef4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <main+0xef4>)
 800172c:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 800172e:	2114      	movs	r1, #20
 8001730:	204e      	movs	r0, #78	; 0x4e
 8001732:	f000 fa51 	bl	8001bd8 <LCD_SendCommand>

						if (cursor == 8) {
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <main+0xef4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d109      	bne.n	8001752 <main+0xe9a>
							cursor++;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <main+0xef4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <main+0xef4>)
 8001748:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800174a:	2114      	movs	r1, #20
 800174c:	204e      	movs	r0, #78	; 0x4e
 800174e:	f000 fa43 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <main+0xef4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d109      	bne.n	800176e <main+0xeb6>
							cursor++;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <main+0xef4>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <main+0xef4>)
 8001764:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001766:	2114      	movs	r1, #20
 8001768:	204e      	movs	r0, #78	; 0x4e
 800176a:	f000 fa35 	bl	8001bd8 <LCD_SendCommand>
						}

						if (cursor == 1) {
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <main+0xef4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10d      	bne.n	8001792 <main+0xeda>
							cursor += 2;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <main+0xef4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3302      	adds	r3, #2
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <main+0xef4>)
 8001780:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001782:	2114      	movs	r1, #20
 8001784:	204e      	movs	r0, #78	; 0x4e
 8001786:	f000 fa27 	bl	8001bd8 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800178a:	2114      	movs	r1, #20
 800178c:	204e      	movs	r0, #78	; 0x4e
 800178e:	f000 fa23 	bl	8001bd8 <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <main+0xf04>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <main+0xf08>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <main+0xf0c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f43f aceb 	beq.w	800117e <main+0x8c6>

			}
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 80017a8:	e025      	b.n	80017f6 <main+0xf3e>
 80017aa:	bf00      	nop
 80017ac:	20000154 	.word	0x20000154
 80017b0:	200001b4 	.word	0x200001b4
 80017b4:	2000015d 	.word	0x2000015d
 80017b8:	2000015e 	.word	0x2000015e
 80017bc:	2000015f 	.word	0x2000015f
 80017c0:	20000130 	.word	0x20000130
 80017c4:	20000147 	.word	0x20000147

			if (rising_edge >= 1 && falling_edge >= 1) {
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <main+0xf64>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00f      	beq.n	80017f0 <main+0xf38>
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <main+0xf68>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00b      	beq.n	80017f0 <main+0xf38>
				rising_edge = 0;
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <main+0xf64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <main+0xf68>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
				mode = 0;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <main+0xf6c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <main+0xf70>)
 80017ec:	f005 fa54 	bl	8006c98 <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <main+0xf74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <main+0xf6c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d0e4      	beq.n	80017c8 <main+0xf10>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 80017fe:	2250      	movs	r2, #80	; 0x50
 8001800:	2100      	movs	r1, #0
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <main+0xf78>)
 8001804:	f005 f9ba 	bl	8006b7c <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <main+0xf7c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <main+0xf80>)
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <main+0xf78>)
 8001812:	f005 fa49 	bl	8006ca8 <siprintf>
	while (1) {
 8001816:	f7ff b878 	b.w	800090a <main+0x52>
 800181a:	bf00      	nop
 800181c:	20000145 	.word	0x20000145
 8001820:	20000146 	.word	0x20000146
 8001824:	20000147 	.word	0x20000147
 8001828:	08008034 	.word	0x08008034
 800182c:	20000130 	.word	0x20000130
 8001830:	200001c8 	.word	0x200001c8
 8001834:	20000158 	.word	0x20000158
 8001838:	08008040 	.word	0x08008040

0800183c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	; 0x50
 8001840:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	; 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f005 f996 	bl	8006b7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <SystemClock_Config+0xdc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <SystemClock_Config+0xdc>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <SystemClock_Config+0xdc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <SystemClock_Config+0xe0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <SystemClock_Config+0xe0>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <SystemClock_Config+0xe0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001898:	2306      	movs	r3, #6
 800189a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80018b0:	2308      	movs	r3, #8
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 80018b4:	23b4      	movs	r3, #180	; 0xb4
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fb83 	bl	8003fd0 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x98>
		Error_Handler();
 80018d0:	f000 fae4 	bl	8001e9c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80018d4:	f002 fb2c 	bl	8003f30 <HAL_PWREx_EnableOverDrive>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xa6>
		Error_Handler();
 80018de:	f000 fadd 	bl	8001e9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018e2:	230f      	movs	r3, #15
 80018e4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e6:	2302      	movs	r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2105      	movs	r1, #5
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fddd 	bl	80044c0 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xd4>
		Error_Handler();
 800190c:	f000 fac6 	bl	8001e9c <Error_Handler>
	}
}
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2027      	movs	r0, #39	; 0x27
 800192a:	f001 fa68 	bl	8002dfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800192e:	2027      	movs	r0, #39	; 0x27
 8001930:	f001 fa81 	bl	8002e36 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2028      	movs	r0, #40	; 0x28
 800193a:	f001 fa60 	bl	8002dfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800193e:	2028      	movs	r0, #40	; 0x28
 8001940:	f001 fa79 	bl	8002e36 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	201d      	movs	r0, #29
 800194a:	f001 fa58 	bl	8002dfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194e:	201d      	movs	r0, #29
 8001950:	f001 fa71 	bl	8002e36 <HAL_NVIC_EnableIRQ>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b63      	cmp	r3, #99	; 0x63
 8001964:	d801      	bhi.n	800196a <button_status+0x12>
		return UP;
 8001966:	2302      	movs	r3, #2
 8001968:	e02a      	b.n	80019c0 <button_status+0x68>
	if (800 < value && value < 900)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001970:	d905      	bls.n	800197e <button_status+0x26>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001978:	d201      	bcs.n	800197e <button_status+0x26>
		return DOWN;
 800197a:	2303      	movs	r3, #3
 800197c:	e020      	b.n	80019c0 <button_status+0x68>
	if (1800 < value && value < 2000)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001984:	d905      	bls.n	8001992 <button_status+0x3a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800198c:	d201      	bcs.n	8001992 <button_status+0x3a>
		return LEFT;
 800198e:	2304      	movs	r3, #4
 8001990:	e016      	b.n	80019c0 <button_status+0x68>
	if (2800 < value && value < 3000)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001998:	d906      	bls.n	80019a8 <button_status+0x50>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d801      	bhi.n	80019a8 <button_status+0x50>
		return RIGHT;
 80019a4:	2305      	movs	r3, #5
 80019a6:	e00b      	b.n	80019c0 <button_status+0x68>
	if (4000 < value && value < 5000)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80019ae:	d906      	bls.n	80019be <button_status+0x66>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d801      	bhi.n	80019be <button_status+0x66>
		return SELECT;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <button_status+0x68>

	return NONE;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <screen>:

void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 80019cc:	b084      	sub	sp, #16
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	f107 001c 	add.w	r0, r7, #28
 80019da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <screen+0x78>)
 80019ea:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 80019ec:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80019ee:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 80019f0:	7f7b      	ldrb	r3, [r7, #29]
 80019f2:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80019f4:	9101      	str	r1, [sp, #4]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	4913      	ldr	r1, [pc, #76]	; (8001a48 <screen+0x7c>)
 80019fc:	4813      	ldr	r0, [pc, #76]	; (8001a4c <screen+0x80>)
 80019fe:	f005 f953 	bl	8006ca8 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001a02:	21c0      	movs	r1, #192	; 0xc0
 8001a04:	204e      	movs	r0, #78	; 0x4e
 8001a06:	f000 f8e7 	bl	8001bd8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 8001a0a:	4910      	ldr	r1, [pc, #64]	; (8001a4c <screen+0x80>)
 8001a0c:	204e      	movs	r0, #78	; 0x4e
 8001a0e:	f000 f924 	bl	8001c5a <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e006      	b.n	8001a26 <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001a18:	2110      	movs	r1, #16
 8001a1a:	204e      	movs	r0, #78	; 0x4e
 8001a1c:	f000 f8dc 	bl	8001bd8 <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f1c3 030b 	rsb	r3, r3, #11
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbf2      	blt.n	8001a18 <screen+0x4c>
	}
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a3e:	b004      	add	sp, #16
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000
 8001a48:	08007f64 	.word	0x08007f64
 8001a4c:	2000018c 	.word	0x2000018c

08001a50 <I2C_Scan>:

void I2C_Scan() {
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b096      	sub	sp, #88	; 0x58
 8001a54:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <I2C_Scan+0xc0>)
 8001a58:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a66:	6020      	str	r0, [r4, #0]
 8001a68:	3404      	adds	r4, #4
 8001a6a:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8001a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fbbd 	bl	80001f0 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	4824      	ldr	r0, [pc, #144]	; (8001b14 <I2C_Scan+0xc4>)
 8001a84:	f004 f889 	bl	8005b9a <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001a8e:	e030      	b.n	8001af2 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001a90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	b299      	uxth	r1, r3
 8001a98:	230a      	movs	r3, #10
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <I2C_Scan+0xc8>)
 8001a9e:	f001 fe95 	bl	80037cc <HAL_I2C_IsDeviceReady>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <I2C_Scan+0xcc>)
 8001aa8:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <I2C_Scan+0xcc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d113      	bne.n	8001ada <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8001ab2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <I2C_Scan+0xd0>)
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	f005 f8f4 	bl	8006ca8 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fb94 	bl	80001f0 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4639      	mov	r1, r7
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <I2C_Scan+0xc4>)
 8001ad4:	f004 f861 	bl	8005b9a <HAL_UART_Transmit>
 8001ad8:	e006      	b.n	8001ae8 <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4910      	ldr	r1, [pc, #64]	; (8001b24 <I2C_Scan+0xd4>)
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <I2C_Scan+0xc4>)
 8001ae4:	f004 f859 	bl	8005b9a <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8001ae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001af2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	d9ca      	bls.n	8001a90 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	2202      	movs	r2, #2
 8001b00:	4909      	ldr	r1, [pc, #36]	; (8001b28 <I2C_Scan+0xd8>)
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <I2C_Scan+0xc4>)
 8001b04:	f004 f849 	bl	8005b9a <HAL_UART_Transmit>
}
 8001b08:	bf00      	nop
 8001b0a:	3758      	adds	r7, #88	; 0x58
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b10:	08008058 	.word	0x08008058
 8001b14:	20000284 	.word	0x20000284
 8001b18:	200000dc 	.word	0x200000dc
 8001b1c:	20000144 	.word	0x20000144
 8001b20:	08008048 	.word	0x08008048
 8001b24:	08008050 	.word	0x08008050
 8001b28:	08008054 	.word	0x08008054

08001b2c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	460b      	mov	r3, r1
 8001b38:	71bb      	strb	r3, [r7, #6]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	b299      	uxth	r1, r3
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	2201      	movs	r2, #1
 8001b48:	4822      	ldr	r0, [pc, #136]	; (8001bd4 <LCD_SendInternal+0xa8>)
 8001b4a:	f001 fe3f 	bl	80037cc <HAL_I2C_IsDeviceReady>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d000      	beq.n	8001b5a <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001b58:	e7f1      	b.n	8001b3e <LCD_SendInternal+0x12>
			break;
 8001b5a:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	f023 030f 	bic.w	r3, r3, #15
 8001b62:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8001b6a:	7bba      	ldrb	r2, [r7, #14]
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 030c 	orr.w	r3, r3, #12
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8001b7a:	7bba      	ldrb	r2, [r7, #14]
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8001b8a:	7b7a      	ldrb	r2, [r7, #13]
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 030c 	orr.w	r3, r3, #12
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8001b9a:	7b7a      	ldrb	r2, [r7, #13]
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0308 	orr.w	r3, r3, #8
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	b299      	uxth	r1, r3
 8001bae:	f107 0208 	add.w	r2, r7, #8
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2304      	movs	r3, #4
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <LCD_SendInternal+0xa8>)
 8001bbc:	f001 fd08 	bl	80035d0 <HAL_I2C_Master_Transmit>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001bc4:	2005      	movs	r0, #5
 8001bc6:	f000 fc97 	bl	80024f8 <HAL_Delay>
	return res;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000dc 	.word	0x200000dc

08001bd8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	460a      	mov	r2, r1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001be8:	79b9      	ldrb	r1, [r7, #6]
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2200      	movs	r2, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff9c 	bl	8001b2c <LCD_SendInternal>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8001c0c:	79b9      	ldrb	r1, [r7, #6]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff8a 	bl	8001b2c <LCD_SendInternal>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2130      	movs	r1, #48	; 0x30
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ffd2 	bl	8001bd8 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ffcd 	bl	8001bd8 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	210c      	movs	r1, #12
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffc8 	bl	8001bd8 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffc3 	bl	8001bd8 <LCD_SendCommand>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	6039      	str	r1, [r7, #0]
 8001c64:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8001c66:	e009      	b.n	8001c7c <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffc3 	bl	8001bfc <LCD_SendData>
		str++;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f1      	bne.n	8001c68 <LCD_SendString+0xe>
	}
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <init>:

void init() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	I2C_Scan();
 8001c94:	f7ff fedc 	bl	8001a50 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8001c98:	204e      	movs	r0, #78	; 0x4e
 8001c9a:	f7ff ffc1 	bl	8001c20 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	204e      	movs	r0, #78	; 0x4e
 8001ca2:	f7ff ff99 	bl	8001bd8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8001ca6:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <init+0x34>)
 8001ca8:	204e      	movs	r0, #78	; 0x4e
 8001caa:	f7ff ffd6 	bl	8001c5a <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001cae:	21c0      	movs	r1, #192	; 0xc0
 8001cb0:	204e      	movs	r0, #78	; 0x4e
 8001cb2:	f7ff ff91 	bl	8001bd8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8001cb6:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <init+0x38>)
 8001cb8:	204e      	movs	r0, #78	; 0x4e
 8001cba:	f7ff ffce 	bl	8001c5a <LCD_SendString>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08008070 	.word	0x08008070
 8001cc8:	08008080 	.word	0x08008080

08001ccc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cda:	481b      	ldr	r0, [pc, #108]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001cdc:	f001 fb04 	bl	80032e8 <HAL_GPIO_ReadPin>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d110      	bne.n	8001d08 <HAL_GPIO_EXTI_Callback+0x3c>
		rising_edge++;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x80>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x80>)
 8001cf0:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x80>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x84>)
 8001cfa:	f004 ff47 	bl	8006b8c <iprintf>
		start_tick = HAL_GetTick();
 8001cfe:	f000 fbef 	bl	80024e0 <HAL_GetTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d06:	6013      	str	r3, [r2, #0]
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0c:	480e      	ldr	r0, [pc, #56]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001d0e:	f001 faeb 	bl	80032e8 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d113      	bne.n	8001d40 <HAL_GPIO_EXTI_Callback+0x74>
		if (rising_edge == 0) {
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x80>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <HAL_GPIO_EXTI_Callback+0x5c>
			falling_edge = 0;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e005      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x68>
		} else {
			falling_edge++;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d32:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x90>)
 8001d3c:	f004 ff26 	bl	8006b8c <iprintf>
	}

}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	20000145 	.word	0x20000145
 8001d50:	08008090 	.word	0x08008090
 8001d54:	20000148 	.word	0x20000148
 8001d58:	20000146 	.word	0x20000146
 8001d5c:	080080a4 	.word	0x080080a4

08001d60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d16f      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0xf2>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001d72:	483b      	ldr	r0, [pc, #236]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001d74:	f000 fd2d 	bl	80027d2 <HAL_ADC_GetValue>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001d7c:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8001d7e:	4838      	ldr	r0, [pc, #224]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001d80:	f000 fcf4 	bl	800276c <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fde5 	bl	8001958 <button_status>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d10b      	bne.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001d9e:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4831      	ldr	r0, [pc, #196]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001da8:	f004 fef0 	bl	8006b8c <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdd1 	bl	8001958 <button_status>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d10b      	bne.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001dc6:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4829      	ldr	r0, [pc, #164]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001dd0:	f004 fedc 	bl	8006b8c <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fdbd 	bl	8001958 <button_status>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d10b      	bne.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001dee:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4821      	ldr	r0, [pc, #132]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001df8:	f004 fec8 	bl	8006b8c <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fda9 	bl	8001958 <button_status>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10b      	bne.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001e16:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4819      	ldr	r0, [pc, #100]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001e20:	f004 feb4 	bl	8006b8c <iprintf>
		}

		if (apply_flag > 0) {
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0xd6>
			get_time_apply++;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001e34:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0xe8>
			get_time_exit++;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001e46:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e50:	6013      	str	r3, [r2, #0]
	}
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	20000094 	.word	0x20000094
 8001e64:	20000158 	.word	0x20000158
 8001e68:	2000015c 	.word	0x2000015c
 8001e6c:	080080b8 	.word	0x080080b8
 8001e70:	2000015d 	.word	0x2000015d
 8001e74:	080080c4 	.word	0x080080c4
 8001e78:	2000015e 	.word	0x2000015e
 8001e7c:	080080d0 	.word	0x080080d0
 8001e80:	2000015f 	.word	0x2000015f
 8001e84:	080080dc 	.word	0x080080dc
 8001e88:	20000134 	.word	0x20000134
 8001e8c:	20000138 	.word	0x20000138
 8001e90:	2000013c 	.word	0x2000013c
 8001e94:	20000140 	.word	0x20000140
 8001e98:	20000130 	.word	0x20000130

08001e9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>
	...

08001ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ec2:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <MX_RTC_Init+0xb4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ece:	227f      	movs	r2, #127	; 0x7f
 8001ed0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eea:	481b      	ldr	r0, [pc, #108]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001eec:	f002 fe88 	bl	8004c00 <HAL_RTC_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff ffd1 	bl	8001e9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001f06:	2301      	movs	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001f1a:	f002 fee7 	bl	8004cec <HAL_RTC_SetTime>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001f24:	f7ff ffba 	bl	8001e9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	; (8001f58 <MX_RTC_Init+0xb0>)
 8001f40:	f002 ffcc 	bl	8004edc <HAL_RTC_SetDate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001f4a:	f7ff ffa7 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000218 	.word	0x20000218
 8001f5c:	40002800 	.word	0x40002800

08001f60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	2230      	movs	r2, #48	; 0x30
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 fe03 	bl	8006b7c <memset>
  if(rtcHandle->Instance==RTC)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_RTC_MspInit+0x4c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f80:	2320      	movs	r3, #32
 8001f82:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fc76 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f9a:	f7ff ff7f 	bl	8001e9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_RTC_MspInit+0x50>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3738      	adds	r7, #56	; 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40002800 	.word	0x40002800
 8001fb0:	42470e3c 	.word	0x42470e3c

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 fa32 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM3_IRQHandler+0x10>)
 800205e:	f003 f98d 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000023c 	.word	0x2000023c

0800206c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <USART3_IRQHandler+0x10>)
 8002072:	f003 fe25 	bl	8005cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000284 	.word	0x20000284

08002080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002088:	f001 f946 	bl	8003318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e00a      	b.n	80020b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a2:	f3af 8000 	nop.w
 80020a6:	4601      	mov	r1, r0
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf0      	blt.n	80020a2 <_read+0x12>
	}

return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e009      	b.n	80020f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fbd5 	bl	8000894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf1      	blt.n	80020dc <_write+0x12>
	}
	return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_close>:

int _close(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212a:	605a      	str	r2, [r3, #4]
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_isatty>:

int _isatty(int file)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	return 1;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f004 fcc4 	bl	8006b28 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20030000 	.word	0x20030000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	20000238 	.word	0x20000238
 80021d4:	200002e0 	.word	0x200002e0

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_TIM3_Init+0x94>)
 800221a:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <MX_TIM3_Init+0x98>)
 800221c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_TIM3_Init+0x94>)
 8002220:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_TIM3_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_TIM3_Init+0x94>)
 800222e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_TIM3_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_TIM3_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_TIM3_Init+0x94>)
 8002242:	f002 ffdb 	bl	80051fc <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800224c:	f7ff fe26 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_TIM3_Init+0x94>)
 800225e:	f003 f995 	bl	800558c <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002268:	f7ff fe18 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800226c:	2320      	movs	r3, #32
 800226e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002274:	463b      	mov	r3, r7
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM3_Init+0x94>)
 800227a:	f003 fbb1 	bl	80059e0 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002284:	f7ff fe0a 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000023c 	.word	0x2000023c
 8002294:	40000400 	.word	0x40000400

08002298 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_TIM_Base_MspInit+0x3c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10d      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_TIM_Base_MspInit+0x40>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_TIM_Base_MspInit+0x40>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_TIM_Base_MspInit+0x40>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40023800 	.word	0x40023800

080022dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <MX_USART3_UART_Init+0x50>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_USART3_UART_Init+0x4c>)
 8002314:	f003 fbf4 	bl	8005b00 <HAL_UART_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800231e:	f7ff fdbd 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000284 	.word	0x20000284
 800232c:	40004800 	.word	0x40004800

08002330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_UART_MspInit+0x84>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12c      	bne.n	80023ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_UART_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_UART_MspInit+0x88>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_UART_MspInit+0x88>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_UART_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_UART_MspInit+0x88>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_UART_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800238a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800239c:	2307      	movs	r3, #7
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_UART_MspInit+0x8c>)
 80023a8:	f000 fdf2 	bl	8002f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40004800 	.word	0x40004800
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020c00 	.word	0x40020c00

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ea:	f7ff fef5 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f004 fba1 	bl	8006b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7fe fa61 	bl	80008b8 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002404:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 8002408:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800240c:	200002dc 	.word	0x200002dc

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 fcd3 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	200f      	movs	r0, #15
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fdb4 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fceb 	bl	8002e52 <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 fcb3 	bl	8002dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000010 	.word	0x20000010
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	200002c8 	.word	0x200002c8

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200002c8 	.word	0x200002c8

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000010 	.word	0x20000010

08002540 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e033      	b.n	80025be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe f872 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002586:	f023 0302 	bic.w	r3, r3, #2
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa5c 	bl	8002a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
 80025ae:	e001      	b.n	80025b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Start+0x1a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0b2      	b.n	8002748 <HAL_ADC_Start+0x180>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d018      	beq.n	800262a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_ADC_Start+0x18c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_ADC_Start+0x190>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9a      	lsrs	r2, r3, #18
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d17a      	bne.n	800272e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d106      	bne.n	8002686 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f023 0206 	bic.w	r2, r3, #6
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
 8002684:	e002      	b.n	800268c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_ADC_Start+0x194>)
 8002696:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12a      	bne.n	8002704 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_ADC_Start+0x198>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d015      	beq.n	80026e4 <HAL_ADC_Start+0x11c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_ADC_Start+0x19c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_Start+0x106>
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_ADC_Start+0x194>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_ADC_Start+0x1a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d136      	bne.n	8002746 <HAL_ADC_Start+0x17e>
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_ADC_Start+0x194>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d130      	bne.n	8002746 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d129      	bne.n	8002746 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	e020      	b.n	8002746 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_ADC_Start+0x198>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d11b      	bne.n	8002746 <HAL_ADC_Start+0x17e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d114      	bne.n	8002746 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e00b      	b.n	8002746 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	20000008 	.word	0x20000008
 8002758:	431bde83 	.word	0x431bde83
 800275c:	40012300 	.word	0x40012300
 8002760:	40012000 	.word	0x40012000
 8002764:	40012100 	.word	0x40012100
 8002768:	40012200 	.word	0x40012200

0800276c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Stop+0x16>
 800277e:	2302      	movs	r3, #2
 8002780:	e021      	b.n	80027c6 <HAL_ADC_Stop+0x5a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e113      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x244>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d925      	bls.n	8002864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1e      	subs	r3, #30
 800282e:	2207      	movs	r2, #7
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43da      	mvns	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	400a      	ands	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68d9      	ldr	r1, [r3, #12]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	4603      	mov	r3, r0
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4403      	add	r3, r0
 8002856:	3b1e      	subs	r3, #30
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	e022      	b.n	80028aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	2207      	movs	r2, #7
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	400a      	ands	r2, r1
 8002886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	4603      	mov	r3, r0
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4403      	add	r3, r0
 80028a0:	409a      	lsls	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d824      	bhi.n	80028fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b05      	subs	r3, #5
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b05      	subs	r3, #5
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34
 80028fa:	e04c      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d824      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b23      	subs	r3, #35	; 0x23
 8002916:	221f      	movs	r2, #31
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43da      	mvns	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	400a      	ands	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b23      	subs	r3, #35	; 0x23
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
 800294c:	e023      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b41      	subs	r3, #65	; 0x41
 8002960:	221f      	movs	r2, #31
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b41      	subs	r3, #65	; 0x41
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_ADC_ConfigChannel+0x250>)
 8002998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_ADC_ConfigChannel+0x254>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10f      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d8>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_ADC_ConfigChannel+0x254>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12b      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x23a>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_ADC_ConfigChannel+0x258>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x1f4>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b11      	cmp	r3, #17
 80029de:	d122      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_ADC_ConfigChannel+0x258>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_ADC_ConfigChannel+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_ADC_ConfigChannel+0x260>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9a      	lsrs	r2, r3, #18
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40012300 	.word	0x40012300
 8002a40:	40012000 	.word	0x40012000
 8002a44:	10000012 	.word	0x10000012
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <ADC_Init+0x1f0>)
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <ADC_Init+0x1f4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6899      	ldr	r1, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e00f      	b.n	8002b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0202 	bic.w	r2, r2, #2
 8002b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	035a      	lsls	r2, r3, #13
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e007      	b.n	8002bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	051a      	lsls	r2, r3, #20
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c06:	025a      	lsls	r2, r3, #9
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6899      	ldr	r1, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	029a      	lsls	r2, r3, #10
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012300 	.word	0x40012300
 8002c44:	0f000001 	.word	0x0f000001

08002c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7a:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	60d3      	str	r3, [r2, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 0307 	and.w	r3, r3, #7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db0b      	blt.n	8002cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	4907      	ldr	r1, [pc, #28]	; (8002ce4 <__NVIC_EnableIRQ+0x38>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2001      	movs	r0, #1
 8002cce:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e100 	.word	0xe000e100

08002ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	db0a      	blt.n	8002d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	490c      	ldr	r1, [pc, #48]	; (8002d34 <__NVIC_SetPriority+0x4c>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d10:	e00a      	b.n	8002d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <__NVIC_SetPriority+0x50>)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	440b      	add	r3, r1
 8002d26:	761a      	strb	r2, [r3, #24]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f1c3 0307 	rsb	r3, r3, #7
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf28      	it	cs
 8002d5a:	2304      	movcs	r3, #4
 8002d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d902      	bls.n	8002d6c <NVIC_EncodePriority+0x30>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3b03      	subs	r3, #3
 8002d6a:	e000      	b.n	8002d6e <NVIC_EncodePriority+0x32>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	401a      	ands	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d84:	f04f 31ff 	mov.w	r1, #4294967295
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43d9      	mvns	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	4313      	orrs	r3, r2
         );
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db4:	d301      	bcc.n	8002dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <SysTick_Config+0x40>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f7ff ff8e 	bl	8002ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <SysTick_Config+0x40>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <SysTick_Config+0x40>)
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010

08002de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff29 	bl	8002c48 <__NVIC_SetPriorityGrouping>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e10:	f7ff ff3e 	bl	8002c90 <__NVIC_GetPriorityGrouping>
 8002e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff8e 	bl	8002d3c <NVIC_EncodePriority>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff5d 	bl	8002ce8 <__NVIC_SetPriority>
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff31 	bl	8002cac <__NVIC_EnableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffa2 	bl	8002da4 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fb32 	bl	80024e0 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d008      	beq.n	8002e9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e052      	b.n	8002f42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0216 	bic.w	r2, r2, #22
 8002eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <HAL_DMA_Abort+0x62>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0208 	bic.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eec:	e013      	b.n	8002f16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eee:	f7ff faf7 	bl	80024e0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d90c      	bls.n	8002f16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2203      	movs	r2, #3
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e015      	b.n	8002f42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e4      	bne.n	8002eee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	223f      	movs	r2, #63	; 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00c      	b.n	8002f82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2205      	movs	r2, #5
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e177      	b.n	800329c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f040 8166 	bne.w	8003296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d005      	beq.n	8002fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d130      	bne.n	8003044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 0201 	and.w	r2, r3, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b03      	cmp	r3, #3
 800304e:	d017      	beq.n	8003080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d123      	bne.n	80030d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80c0 	beq.w	8003296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_GPIO_Init+0x324>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <HAL_GPIO_Init+0x324>)
 8003120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_GPIO_Init+0x324>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003132:	4a61      	ldr	r2, [pc, #388]	; (80032b8 <HAL_GPIO_Init+0x328>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a58      	ldr	r2, [pc, #352]	; (80032bc <HAL_GPIO_Init+0x32c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d037      	beq.n	80031ce <HAL_GPIO_Init+0x23e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_GPIO_Init+0x330>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d031      	beq.n	80031ca <HAL_GPIO_Init+0x23a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_GPIO_Init+0x334>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02b      	beq.n	80031c6 <HAL_GPIO_Init+0x236>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a55      	ldr	r2, [pc, #340]	; (80032c8 <HAL_GPIO_Init+0x338>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d025      	beq.n	80031c2 <HAL_GPIO_Init+0x232>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a54      	ldr	r2, [pc, #336]	; (80032cc <HAL_GPIO_Init+0x33c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <HAL_GPIO_Init+0x22e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a53      	ldr	r2, [pc, #332]	; (80032d0 <HAL_GPIO_Init+0x340>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d019      	beq.n	80031ba <HAL_GPIO_Init+0x22a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_GPIO_Init+0x344>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_GPIO_Init+0x226>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a51      	ldr	r2, [pc, #324]	; (80032d8 <HAL_GPIO_Init+0x348>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00d      	beq.n	80031b2 <HAL_GPIO_Init+0x222>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_GPIO_Init+0x34c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x21e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_GPIO_Init+0x350>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_GPIO_Init+0x21a>
 80031a6:	2309      	movs	r3, #9
 80031a8:	e012      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031aa:	230a      	movs	r3, #10
 80031ac:	e010      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ae:	2308      	movs	r3, #8
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4935      	ldr	r1, [pc, #212]	; (80032b8 <HAL_GPIO_Init+0x328>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_GPIO_Init+0x354>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003212:	4a34      	ldr	r2, [pc, #208]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae84 	bls.w	8002fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40021400 	.word	0x40021400
 80032d4:	40021800 	.word	0x40021800
 80032d8:	40021c00 	.word	0x40021c00
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40022400 	.word	0x40022400
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e001      	b.n	800330a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fcc8 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e12b      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fa48 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ac:	f001 fa40 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a81      	ldr	r2, [pc, #516]	; (80035bc <HAL_I2C_Init+0x274>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d807      	bhi.n	80033cc <HAL_I2C_Init+0x84>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_I2C_Init+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e006      	b.n	80033da <HAL_I2C_Init+0x92>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <HAL_I2C_Init+0x27c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0e7      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a78      	ldr	r2, [pc, #480]	; (80035c8 <HAL_I2C_Init+0x280>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_I2C_Init+0x274>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d802      	bhi.n	800341c <HAL_I2C_Init+0xd4>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	e009      	b.n	8003430 <HAL_I2C_Init+0xe8>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_I2C_Init+0x284>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	495c      	ldr	r1, [pc, #368]	; (80035bc <HAL_I2C_Init+0x274>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d819      	bhi.n	8003484 <HAL_I2C_Init+0x13c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e59      	subs	r1, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003464:	400b      	ands	r3, r1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_I2C_Init+0x138>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e59      	subs	r1, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fbb1 f3f3 	udiv	r3, r1, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347e:	e051      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003480:	2304      	movs	r3, #4
 8003482:	e04f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d111      	bne.n	80034b0 <HAL_I2C_Init+0x168>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e012      	b.n	80034d6 <HAL_I2C_Init+0x18e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e58      	subs	r0, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Init+0x196>
 80034da:	2301      	movs	r3, #1
 80034dc:	e022      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <HAL_I2C_Init+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1e58      	subs	r0, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	440b      	add	r3, r1
 80034f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003502:	e00f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	0099      	lsls	r1, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	6809      	ldr	r1, [r1, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6911      	ldr	r1, [r2, #16]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	000186a0 	.word	0x000186a0
 80035c0:	001e847f 	.word	0x001e847f
 80035c4:	003d08ff 	.word	0x003d08ff
 80035c8:	431bde83 	.word	0x431bde83
 80035cc:	10624dd3 	.word	0x10624dd3

080035d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	461a      	mov	r2, r3
 80035dc:	460b      	mov	r3, r1
 80035de:	817b      	strh	r3, [r7, #10]
 80035e0:	4613      	mov	r3, r2
 80035e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7fe ff7c 	bl	80024e0 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f040 80e0 	bne.w	80037b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2319      	movs	r3, #25
 80035fe:	2201      	movs	r2, #1
 8003600:	4970      	ldr	r1, [pc, #448]	; (80037c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa92 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
 8003610:	e0d3      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_I2C_Master_Transmit+0x50>
 800361c:	2302      	movs	r3, #2
 800361e:	e0cc      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d007      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2221      	movs	r2, #33	; 0x21
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2210      	movs	r2, #16
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a50      	ldr	r2, [pc, #320]	; (80037c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f9ca 	bl	8003a28 <I2C_MasterRequestWrite>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e08d      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036b4:	e066      	b.n	8003784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fb0c 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_I2C_Master_Transmit+0x188>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6a39      	ldr	r1, [r7, #32]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fafc 	bl	8003d5a <I2C_WaitOnBTFFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b04      	cmp	r3, #4
 800376e:	d107      	bne.n	8003780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e01a      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d194      	bne.n	80036b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00100002 	.word	0x00100002
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7fe fe80 	bl	80024e0 <HAL_GetTick>
 80037e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	f040 8111 	bne.w	8003a16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2319      	movs	r3, #25
 80037fa:	2201      	movs	r2, #1
 80037fc:	4988      	ldr	r1, [pc, #544]	; (8003a20 <HAL_I2C_IsDeviceReady+0x254>)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f994 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	e104      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2C_IsDeviceReady+0x50>
 8003818:	2302      	movs	r3, #2
 800381a:	e0fd      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d007      	beq.n	8003842 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2224      	movs	r2, #36	; 0x24
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a70      	ldr	r2, [pc, #448]	; (8003a24 <HAL_I2C_IsDeviceReady+0x258>)
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003874:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f952 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389c:	d103      	bne.n	80038a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0b6      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe fe11 	bl	80024e0 <HAL_GetTick>
 80038be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ee:	e025      	b.n	800393c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038f0:	f7fe fdf6 	bl	80024e0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d302      	bcc.n	8003906 <HAL_I2C_IsDeviceReady+0x13a>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	22a0      	movs	r2, #160	; 0xa0
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2ba0      	cmp	r3, #160	; 0xa0
 8003946:	d005      	beq.n	8003954 <HAL_I2C_IsDeviceReady+0x188>
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_I2C_IsDeviceReady+0x188>
 800394e:	7dbb      	ldrb	r3, [r7, #22]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0cd      	beq.n	80038f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d129      	bne.n	80039be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003978:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2319      	movs	r3, #25
 8003996:	2201      	movs	r2, #1
 8003998:	4921      	ldr	r1, [pc, #132]	; (8003a20 <HAL_I2C_IsDeviceReady+0x254>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8c6 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e036      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e02c      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2319      	movs	r3, #25
 80039de:	2201      	movs	r2, #1
 80039e0:	490f      	ldr	r1, [pc, #60]	; (8003a20 <HAL_I2C_IsDeviceReady+0x254>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f8a2 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e012      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f4ff af32 	bcc.w	8003866 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	00100002 	.word	0x00100002
 8003a24:	ffff0000 	.word	0xffff0000

08003a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	460b      	mov	r3, r1
 8003a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d006      	beq.n	8003a52 <I2C_MasterRequestWrite+0x2a>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d003      	beq.n	8003a52 <I2C_MasterRequestWrite+0x2a>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a50:	d108      	bne.n	8003a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e00b      	b.n	8003a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b12      	cmp	r3, #18
 8003a6a:	d107      	bne.n	8003a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f84f 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e035      	b.n	8003b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	e01b      	b.n	8003b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	11db      	asrs	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 030f 	orn	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <I2C_MasterRequestWrite+0xfc>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f875 	bl	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e010      	b.n	8003b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4907      	ldr	r1, [pc, #28]	; (8003b28 <I2C_MasterRequestWrite+0x100>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f865 	bl	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	00010008 	.word	0x00010008
 8003b28:	00010002 	.word	0x00010002

08003b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b3c:	e025      	b.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d021      	beq.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fe fccb 	bl	80024e0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e023      	b.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10d      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	e00c      	b.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0b6      	beq.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be8:	e051      	b.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d123      	bne.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e046      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d021      	beq.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe fc49 	bl	80024e0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e020      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10c      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	e00b      	b.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d18d      	bne.n	8003bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce4:	e02d      	b.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f878 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e02d      	b.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d021      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fe fbef 	bl	80024e0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e007      	b.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d1ca      	bne.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d66:	e02d      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f837 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e02d      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d021      	beq.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe fbae 	bl	80024e0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e007      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d1ca      	bne.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d11b      	bne.n	8003e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d129      	bne.n	8003ea4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0210 	bic.w	r2, r2, #16
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d12a      	bne.n	8003f22 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	f023 030f 	bic.w	r3, r3, #15
 8003ef2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	89fa      	ldrh	r2, [r7, #14]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5c:	f7fe fac0 	bl	80024e0 <HAL_GetTick>
 8003f60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f62:	e009      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f64:	f7fe fabc 	bl	80024e0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f72:	d901      	bls.n	8003f78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e01f      	b.n	8003fb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d1ee      	bne.n	8003f64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8c:	f7fe faa8 	bl	80024e0 <HAL_GetTick>
 8003f90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f92:	e009      	b.n	8003fa8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f94:	f7fe faa4 	bl	80024e0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa2:	d901      	bls.n	8003fa8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e007      	b.n	8003fb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb4:	d1ee      	bne.n	8003f94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	420e0040 	.word	0x420e0040
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	420e0044 	.word	0x420e0044

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e267      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d075      	beq.n	80040da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fee:	4b88      	ldr	r3, [pc, #544]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00c      	beq.n	8004014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b85      	ldr	r3, [pc, #532]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004002:	2b08      	cmp	r3, #8
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b82      	ldr	r3, [pc, #520]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05b      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d157      	bne.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e242      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x74>
 8004036:	4b76      	ldr	r3, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a75      	ldr	r2, [pc, #468]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x98>
 800404e:	4b70      	ldr	r3, [pc, #448]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6f      	ldr	r2, [pc, #444]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6c      	ldr	r2, [pc, #432]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004068:	4b69      	ldr	r3, [pc, #420]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a68      	ldr	r2, [pc, #416]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b66      	ldr	r3, [pc, #408]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a65      	ldr	r2, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe fa2a 	bl	80024e0 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe fa26 	bl	80024e0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e207      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xc0>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fa16 	bl	80024e0 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fa12 	bl	80024e0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1f3      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b51      	ldr	r3, [pc, #324]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e6:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11c      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d116      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1c7      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4937      	ldr	r1, [pc, #220]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	e03a      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_OscConfig+0x244>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe f9cb 	bl	80024e0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414e:	f7fe f9c7 	bl	80024e0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1a8      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416c:	4b28      	ldr	r3, [pc, #160]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4925      	ldr	r1, [pc, #148]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_OscConfig+0x244>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe f9aa 	bl	80024e0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004190:	f7fe f9a6 	bl	80024e0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e187      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d036      	beq.n	8004228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <HAL_RCC_OscConfig+0x248>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f98a 	bl	80024e0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe f986 	bl	80024e0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e167      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x240>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x200>
 80041ee:	e01b      	b.n	8004228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_OscConfig+0x248>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f6:	f7fe f973 	bl	80024e0 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	e00e      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fe f96f 	bl	80024e0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d907      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e150      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
 8004210:	40023800 	.word	0x40023800
 8004214:	42470000 	.word	0x42470000
 8004218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ea      	bne.n	80041fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8097 	beq.w	8004364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	4b7d      	ldr	r3, [pc, #500]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	4a7c      	ldr	r2, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	; 0x40
 8004256:	4b7a      	ldr	r3, [pc, #488]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b77      	ldr	r3, [pc, #476]	; (8004444 <HAL_RCC_OscConfig+0x474>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d118      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004272:	4b74      	ldr	r3, [pc, #464]	; (8004444 <HAL_RCC_OscConfig+0x474>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	; (8004444 <HAL_RCC_OscConfig+0x474>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427e:	f7fe f92f 	bl	80024e0 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe f92b 	bl	80024e0 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e10c      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <HAL_RCC_OscConfig+0x474>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x2ea>
 80042ac:	4b64      	ldr	r3, [pc, #400]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	e01c      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x30c>
 80042c2:	4b5f      	ldr	r3, [pc, #380]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a5e      	ldr	r2, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
 80042ce:	4b5c      	ldr	r3, [pc, #368]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a5b      	ldr	r2, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042dc:	4b58      	ldr	r3, [pc, #352]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	4b55      	ldr	r3, [pc, #340]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a54      	ldr	r2, [pc, #336]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ee:	f023 0304 	bic.w	r3, r3, #4
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fe f8f0 	bl	80024e0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fe f8ec 	bl	80024e0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0cb      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	4b49      	ldr	r3, [pc, #292]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ee      	beq.n	8004304 <HAL_RCC_OscConfig+0x334>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004328:	f7fe f8da 	bl	80024e0 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fe f8d6 	bl	80024e0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0b5      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ee      	bne.n	8004330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	4a38      	ldr	r2, [pc, #224]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a1 	beq.w	80044b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436e:	4b34      	ldr	r3, [pc, #208]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b08      	cmp	r3, #8
 8004378:	d05c      	beq.n	8004434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d141      	bne.n	8004406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe f8aa 	bl	80024e0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe f8a6 	bl	80024e0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e087      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	491b      	ldr	r1, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x478>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe f87f 	bl	80024e0 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe f87b 	bl	80024e0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e05c      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x416>
 8004404:	e054      	b.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x478>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe f868 	bl	80024e0 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe f864 	bl	80024e0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e045      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x470>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x444>
 8004432:	e03d      	b.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e038      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
 8004440:	40023800 	.word	0x40023800
 8004444:	40007000 	.word	0x40007000
 8004448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x4ec>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d028      	beq.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d121      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d11a      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	4293      	cmp	r3, r2
 8004486:	d111      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800

080044c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0cc      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b68      	ldr	r3, [pc, #416]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d90c      	bls.n	80044fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0b8      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a58      	ldr	r2, [pc, #352]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800452c:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a52      	ldr	r2, [pc, #328]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004538:	4b50      	ldr	r3, [pc, #320]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	494d      	ldr	r1, [pc, #308]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d044      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d119      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d003      	beq.n	800457e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457a:	2b03      	cmp	r3, #3
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e067      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 0203 	bic.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4934      	ldr	r1, [pc, #208]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b0:	f7fd ff96 	bl	80024e0 <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b8:	f7fd ff92 	bl	80024e0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e04f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	4b2b      	ldr	r3, [pc, #172]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 020c 	and.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1eb      	bne.n	80045b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d20c      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e032      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4916      	ldr	r1, [pc, #88]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	490e      	ldr	r1, [pc, #56]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004646:	f000 f821 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800464a:	4602      	mov	r2, r0
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	490a      	ldr	r1, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fef6 	bl	8002458 <HAL_InitTick>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023c00 	.word	0x40023c00
 800467c:	40023800 	.word	0x40023800
 8004680:	080080ec 	.word	0x080080ec
 8004684:	20000008 	.word	0x20000008
 8004688:	2000000c 	.word	0x2000000c

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004690:	b090      	sub	sp, #64	; 0x40
 8004692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469c:	2300      	movs	r3, #0
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a4:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d00d      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x40>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	f200 80a1 	bhi.w	80047f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046be:	e09b      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_GetSysClockFreq+0x184>)
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046c4:	e09b      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c6:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ca:	e098      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046cc:	4b4f      	ldr	r3, [pc, #316]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d6:	4b4d      	ldr	r3, [pc, #308]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d028      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e2:	4b4a      	ldr	r3, [pc, #296]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	2200      	movs	r2, #0
 80046ea:	623b      	str	r3, [r7, #32]
 80046ec:	627a      	str	r2, [r7, #36]	; 0x24
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046f4:	2100      	movs	r1, #0
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f8:	fb03 f201 	mul.w	r2, r3, r1
 80046fc:	2300      	movs	r3, #0
 80046fe:	fb00 f303 	mul.w	r3, r0, r3
 8004702:	4413      	add	r3, r2
 8004704:	4a43      	ldr	r2, [pc, #268]	; (8004814 <HAL_RCC_GetSysClockFreq+0x188>)
 8004706:	fba0 1202 	umull	r1, r2, r0, r2
 800470a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470c:	460a      	mov	r2, r1
 800470e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004712:	4413      	add	r3, r2
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	2200      	movs	r2, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004722:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004726:	f7fb fdbb 	bl	80002a0 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4613      	mov	r3, r2
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004732:	e053      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004734:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	2200      	movs	r2, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	617a      	str	r2, [r7, #20]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004746:	f04f 0b00 	mov.w	fp, #0
 800474a:	4652      	mov	r2, sl
 800474c:	465b      	mov	r3, fp
 800474e:	f04f 0000 	mov.w	r0, #0
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	0159      	lsls	r1, r3, #5
 8004758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800475c:	0150      	lsls	r0, r2, #5
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	ebb2 080a 	subs.w	r8, r2, sl
 8004766:	eb63 090b 	sbc.w	r9, r3, fp
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004776:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800477a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800477e:	ebb2 0408 	subs.w	r4, r2, r8
 8004782:	eb63 0509 	sbc.w	r5, r3, r9
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	00eb      	lsls	r3, r5, #3
 8004790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004794:	00e2      	lsls	r2, r4, #3
 8004796:	4614      	mov	r4, r2
 8004798:	461d      	mov	r5, r3
 800479a:	eb14 030a 	adds.w	r3, r4, sl
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	eb45 030b 	adc.w	r3, r5, fp
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047b2:	4629      	mov	r1, r5
 80047b4:	028b      	lsls	r3, r1, #10
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047bc:	4621      	mov	r1, r4
 80047be:	028a      	lsls	r2, r1, #10
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	2200      	movs	r2, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	60fa      	str	r2, [r7, #12]
 80047cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d0:	f7fb fd66 	bl	80002a0 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4613      	mov	r3, r2
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_GetSysClockFreq+0x180>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047f6:	e002      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetSysClockFreq+0x184>)
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004800:	4618      	mov	r0, r3
 8004802:	3740      	adds	r7, #64	; 0x40
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400
 8004814:	017d7840 	.word	0x017d7840

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	080080fc 	.word	0x080080fc

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800485c:	f7ff ffdc 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0b5b      	lsrs	r3, r3, #13
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	080080fc 	.word	0x080080fc

08004880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d075      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048b4:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ba:	f7fd fe11 	bl	80024e0 <HAL_GetTick>
 80048be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048c2:	f7fd fe0d 	bl	80024e0 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e189      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d4:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f0      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	071b      	lsls	r3, r3, #28
 80048f8:	4981      	ldr	r1, [pc, #516]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800490c:	4b7c      	ldr	r3, [pc, #496]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	0f1b      	lsrs	r3, r3, #28
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	019a      	lsls	r2, r3, #6
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	071b      	lsls	r3, r3, #28
 800492c:	4974      	ldr	r1, [pc, #464]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004934:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493a:	f023 021f 	bic.w	r2, r3, #31
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	3b01      	subs	r3, #1
 8004944:	496e      	ldr	r1, [pc, #440]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	019a      	lsls	r2, r3, #6
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	071b      	lsls	r3, r3, #28
 800496c:	4964      	ldr	r1, [pc, #400]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004974:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800497a:	f7fd fdb1 	bl	80024e0 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004982:	f7fd fdad 	bl	80024e0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e129      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004994:	4b5a      	ldr	r3, [pc, #360]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d079      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049b8:	4b52      	ldr	r3, [pc, #328]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049be:	f7fd fd8f 	bl	80024e0 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049c6:	f7fd fd8b 	bl	80024e0 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e107      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049d8:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e4:	d0ef      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	019a      	lsls	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	493b      	ldr	r1, [pc, #236]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	4934      	ldr	r1, [pc, #208]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a40:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	019a      	lsls	r2, r3, #6
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	4927      	ldr	r1, [pc, #156]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	4922      	ldr	r1, [pc, #136]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a7e:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fd fd2c 	bl	80024e0 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a8c:	f7fd fd28 	bl	80024e0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0a4      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d1ef      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 808b 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	4a0f      	ldr	r2, [pc, #60]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ae2:	f7fd fcfd 	bl	80024e0 <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ae8:	e010      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aea:	f7fd fcf9 	bl	80024e0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d909      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e075      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004afc:	42470068 	.word	0x42470068
 8004b00:	40023800 	.word	0x40023800
 8004b04:	42470070 	.word	0x42470070
 8004b08:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b0c:	4b38      	ldr	r3, [pc, #224]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0e8      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b52:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fcbf 	bl	80024e0 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fd fcbb 	bl	80024e0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e035      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b96:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	4912      	ldr	r1, [pc, #72]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a0f      	ldr	r2, [pc, #60]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004be4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	42470e40 	.word	0x42470e40
 8004bfc:	424711e0 	.word	0x424711e0

08004c00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e066      	b.n	8004ce4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7f5b      	ldrb	r3, [r3, #29]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd f99a 	bl	8001f60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	22ca      	movs	r2, #202	; 0xca
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2253      	movs	r2, #83	; 0x53
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa45 	bl	80050d2 <RTC_EnterInitMode>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12c      	bne.n	8004cac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6919      	ldr	r1, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	041a      	lsls	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa4c 	bl	8005140 <RTC_ExitInitMode>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	7f1b      	ldrb	r3, [r3, #28]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_RTC_SetTime+0x1c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e087      	b.n	8004e18 <HAL_RTC_SetTime+0x12c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2202      	movs	r2, #2
 8004d12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d126      	bne.n	8004d68 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa29 	bl	800518a <RTC_ByteToBcd2>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fa22 	bl	800518a <RTC_ByteToBcd2>
 8004d46:	4603      	mov	r3, r0
 8004d48:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d4a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	789b      	ldrb	r3, [r3, #2]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa1a 	bl	800518a <RTC_ByteToBcd2>
 8004d56:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d58:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	78db      	ldrb	r3, [r3, #3]
 8004d60:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e018      	b.n	8004d9a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d88:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d8e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	22ca      	movs	r2, #202	; 0xca
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2253      	movs	r2, #83	; 0x53
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f991 	bl	80050d2 <RTC_EnterInitMode>
 8004db0:	4603      	mov	r3, r0
 8004db2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d120      	bne.n	8004dfc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004dc4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f9a4 	bl	8005140 <RTC_ExitInitMode>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	771a      	strb	r2, [r3, #28]

  return status;
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}

08004e20 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	0d9b      	lsrs	r3, r3, #22
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11a      	bne.n	8004ed2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f98f 	bl	80051c4 <RTC_Bcd2ToByte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f986 	bl	80051c4 <RTC_Bcd2ToByte>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f97d 	bl	80051c4 <RTC_Bcd2ToByte>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	7f1b      	ldrb	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RTC_SetDate+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e071      	b.n	8004fdc <HAL_RTC_SetDate+0x100>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10e      	bne.n	8004f28 <HAL_RTC_SetDate+0x4c>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	f023 0310 	bic.w	r3, r3, #16
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	330a      	adds	r3, #10
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11c      	bne.n	8004f68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	78db      	ldrb	r3, [r3, #3]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f929 	bl	800518a <RTC_ByteToBcd2>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f922 	bl	800518a <RTC_ByteToBcd2>
 8004f46:	4603      	mov	r3, r0
 8004f48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	789b      	ldrb	r3, [r3, #2]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f91a 	bl	800518a <RTC_ByteToBcd2>
 8004f56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e00e      	b.n	8004f86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ca      	movs	r2, #202	; 0xca
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2253      	movs	r2, #83	; 0x53
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f89b 	bl	80050d2 <RTC_EnterInitMode>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8c2 	bl	8005140 <RTC_ExitInitMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	22ff      	movs	r2, #255	; 0xff
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	771a      	strb	r2, [r3, #28]

  return status;
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd90      	pop	{r4, r7, pc}

08004fe4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005002:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11a      	bne.n	8005078 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	78db      	ldrb	r3, [r3, #3]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f8bc 	bl	80051c4 <RTC_Bcd2ToByte>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f8b3 	bl	80051c4 <RTC_Bcd2ToByte>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	789b      	ldrb	r3, [r3, #2]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f8aa 	bl	80051c4 <RTC_Bcd2ToByte>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800509c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800509e:	f7fd fa1f 	bl	80024e0 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050a4:	e009      	b.n	80050ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050a6:	f7fd fa1b 	bl	80024e0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b4:	d901      	bls.n	80050ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e007      	b.n	80050ca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d122      	bne.n	8005136 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005100:	f7fd f9ee 	bl	80024e0 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005106:	e00c      	b.n	8005122 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005108:	f7fd f9ea 	bl	80024e0 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005116:	d904      	bls.n	8005122 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2204      	movs	r2, #4
 800511c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <RTC_EnterInitMode+0x64>
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d1e8      	bne.n	8005108 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ff89 	bl	8005082 <HAL_RTC_WaitForSynchro>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005198:	e005      	b.n	80051a6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	3301      	adds	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	3b0a      	subs	r3, #10
 80051a4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d8f6      	bhi.n	800519a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	b2db      	uxtb	r3, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	4413      	add	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4413      	add	r3, r2
 80051ee:	b2db      	uxtb	r3, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e041      	b.n	8005292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fd f838 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f000 fa96 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04e      	b.n	8005352 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <HAL_TIM_Base_Start_IT+0xc4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052de:	d01d      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_TIM_Base_Start_IT+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_TIM_Base_Start_IT+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_Base_Start_IT+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_TIM_Base_Start_IT+0xd4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_TIM_Base_Start_IT+0xd8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x80>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_TIM_Base_Start_IT+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d111      	bne.n	8005340 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d010      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	e007      	b.n	8005350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40001800 	.word	0x40001800

0800537c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0202 	mvn.w	r2, #2
 80053a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9b5 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f9a7 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9b8 	bl	8005742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0204 	mvn.w	r2, #4
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f98b 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f97d 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f98e 	bl	8005742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0208 	mvn.w	r2, #8
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2204      	movs	r2, #4
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f961 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f953 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f964 	bl	8005742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b10      	cmp	r3, #16
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2208      	movs	r2, #8
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f937 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f929 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f93a 	bl	8005742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0201 	mvn.w	r2, #1
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc fc30 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fae0 	bl	8005aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8ff 	bl	8005756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b20      	cmp	r3, #32
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0220 	mvn.w	r2, #32
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 faaa 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0b4      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x186>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	d03e      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0xd4>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e6:	f200 8087 	bhi.w	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ee:	f000 8086 	beq.w	80056fe <HAL_TIM_ConfigClockSource+0x172>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d87f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b70      	cmp	r3, #112	; 0x70
 80055fa:	d01a      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xa6>
 80055fc:	2b70      	cmp	r3, #112	; 0x70
 80055fe:	d87b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d050      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005604:	2b60      	cmp	r3, #96	; 0x60
 8005606:	d877      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d03c      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xfa>
 800560c:	2b50      	cmp	r3, #80	; 0x50
 800560e:	d873      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d058      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d86f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d064      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b30      	cmp	r3, #48	; 0x30
 800561e:	d86b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d060      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d867      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05c      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b10      	cmp	r3, #16
 800562e:	d05a      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005630:	e062      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6899      	ldr	r1, [r3, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f000 f9ad 	bl	80059a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	609a      	str	r2, [r3, #8]
      break;
 800565e:	e04f      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f000 f996 	bl	80059a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005682:	609a      	str	r2, [r3, #8]
      break;
 8005684:	e03c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 f90a 	bl	80058ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2150      	movs	r1, #80	; 0x50
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f963 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80056a4:	e02c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 f929 	bl	800590a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2160      	movs	r1, #96	; 0x60
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f953 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80056c4:	e01c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 f8ea 	bl	80058ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f943 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80056e4:	e00c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 f93a 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 80056f6:	e003      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e000      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a40      	ldr	r2, [pc, #256]	; (8005880 <TIM_Base_SetConfig+0x114>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d013      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d00f      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3d      	ldr	r2, [pc, #244]	; (8005884 <TIM_Base_SetConfig+0x118>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <TIM_Base_SetConfig+0x11c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3b      	ldr	r2, [pc, #236]	; (800588c <TIM_Base_SetConfig+0x120>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a3a      	ldr	r2, [pc, #232]	; (8005890 <TIM_Base_SetConfig+0x124>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <TIM_Base_SetConfig+0x114>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d027      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <TIM_Base_SetConfig+0x118>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d023      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2b      	ldr	r2, [pc, #172]	; (8005888 <TIM_Base_SetConfig+0x11c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01f      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2a      	ldr	r2, [pc, #168]	; (800588c <TIM_Base_SetConfig+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a29      	ldr	r2, [pc, #164]	; (8005890 <TIM_Base_SetConfig+0x124>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d017      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <TIM_Base_SetConfig+0x128>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <TIM_Base_SetConfig+0x12c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <TIM_Base_SetConfig+0x130>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_Base_SetConfig+0x134>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a24      	ldr	r2, [pc, #144]	; (80058a4 <TIM_Base_SetConfig+0x138>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a23      	ldr	r2, [pc, #140]	; (80058a8 <TIM_Base_SetConfig+0x13c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <TIM_Base_SetConfig+0x114>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_Base_SetConfig+0xf8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a0c      	ldr	r2, [pc, #48]	; (8005890 <TIM_Base_SetConfig+0x124>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d103      	bne.n	800586c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	615a      	str	r2, [r3, #20]
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40010400 	.word	0x40010400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800
 80058a0:	40001800 	.word	0x40001800
 80058a4:	40001c00 	.word	0x40001c00
 80058a8:	40002000 	.word	0x40002000

080058ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 030a 	bic.w	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f023 0210 	bic.w	r2, r3, #16
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	f043 0307 	orr.w	r3, r3, #7
 800598c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e05a      	b.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a21      	ldr	r2, [pc, #132]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d01d      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10c      	bne.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40010400 	.word	0x40010400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40001800 	.word	0x40001800

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e03f      	b.n	8005b92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fc02 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fd7b 	bl	8006640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08a      	sub	sp, #40	; 0x28
 8005b9e:	af02      	add	r7, sp, #8
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	603b      	str	r3, [r7, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d17c      	bne.n	8005cb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_UART_Transmit+0x2c>
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e075      	b.n	8005cb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Transmit+0x3e>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e06e      	b.n	8005cb6 <HAL_UART_Transmit+0x11c>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2221      	movs	r2, #33	; 0x21
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bee:	f7fc fc77 	bl	80024e0 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d108      	bne.n	8005c1c <HAL_UART_Transmit+0x82>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e003      	b.n	8005c24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c2c:	e02a      	b.n	8005c84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	; 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 faf9 	bl	8006230 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e036      	b.n	8005cb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3302      	adds	r3, #2
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e007      	b.n	8005c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1cf      	bne.n	8005c2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2140      	movs	r1, #64	; 0x40
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fac9 	bl	8006230 <UART_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b0ba      	sub	sp, #232	; 0xe8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10f      	bne.n	8005d26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_UART_IRQHandler+0x66>
 8005d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fbd3 	bl	80064ca <UART_Receive_IT>
      return;
 8005d24:	e256      	b.n	80061d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80de 	beq.w	8005eec <HAL_UART_IRQHandler+0x22c>
 8005d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80d1 	beq.w	8005eec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_UART_IRQHandler+0xae>
 8005d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_UART_IRQHandler+0xd2>
 8005d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f043 0202 	orr.w	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_UART_IRQHandler+0xf6>
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0204 	orr.w	r2, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d011      	beq.n	8005de6 <HAL_UART_IRQHandler+0x126>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0208 	orr.w	r2, r3, #8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 81ed 	beq.w	80061ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <HAL_UART_IRQHandler+0x14e>
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fb5e 	bl	80064ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2301      	moveq	r3, #1
 8005e1e:	2300      	movne	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_UART_IRQHandler+0x17a>
 8005e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04f      	beq.n	8005eda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa66 	bl	800630c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d141      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3314      	adds	r3, #20
 8005e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1d9      	bne.n	8005e4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	4a7d      	ldr	r2, [pc, #500]	; (800609c <HAL_UART_IRQHandler+0x3dc>)
 8005ea8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fd f84b 	bl	8002f4a <HAL_DMA_Abort_IT>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	e00e      	b.n	8005ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f99a 	bl	8006204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	e00a      	b.n	8005ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f996 	bl	8006204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	e006      	b.n	8005ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f992 	bl	8006204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ee6:	e170      	b.n	80061ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	bf00      	nop
    return;
 8005eea:	e16e      	b.n	80061ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	f040 814a 	bne.w	800618a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8143 	beq.w	800618a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 813c 	beq.w	800618a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	f040 80b4 	bne.w	80060a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8140 	beq.w	80061ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f56:	429a      	cmp	r2, r3
 8005f58:	f080 8139 	bcs.w	80061ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6e:	f000 8088 	beq.w	8006082 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1d9      	bne.n	8005f72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e1      	bne.n	8005fbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800600a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800601e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800602c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e3      	bne.n	8005ffa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006064:	65ba      	str	r2, [r7, #88]	; 0x58
 8006066:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800606a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e3      	bne.n	8006040 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	4618      	mov	r0, r3
 800607e:	f7fc fef4 	bl	8002e6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800608a:	b29b      	uxth	r3, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	b29b      	uxth	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8c0 	bl	8006218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006098:	e099      	b.n	80061ce <HAL_UART_IRQHandler+0x50e>
 800609a:	bf00      	nop
 800609c:	080063d3 	.word	0x080063d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 808b 	beq.w	80061d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8086 	beq.w	80061d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060ea:	647a      	str	r2, [r7, #68]	; 0x44
 80060ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e3      	bne.n	80060c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	623b      	str	r3, [r7, #32]
   return(result);
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006122:	633a      	str	r2, [r7, #48]	; 0x30
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	60fb      	str	r3, [r7, #12]
   return(result);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006168:	61fa      	str	r2, [r7, #28]
 800616a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	69b9      	ldr	r1, [r7, #24]
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	617b      	str	r3, [r7, #20]
   return(result);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800617c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f848 	bl	8006218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006188:	e023      	b.n	80061d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <HAL_UART_IRQHandler+0x4ea>
 8006196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f929 	bl	80063fa <UART_Transmit_IT>
    return;
 80061a8:	e014      	b.n	80061d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00e      	beq.n	80061d4 <HAL_UART_IRQHandler+0x514>
 80061b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d008      	beq.n	80061d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f969 	bl	800649a <UART_EndTransmit_IT>
    return;
 80061c8:	e004      	b.n	80061d4 <HAL_UART_IRQHandler+0x514>
    return;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <HAL_UART_IRQHandler+0x514>
      return;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_UART_IRQHandler+0x514>
      return;
 80061d2:	bf00      	nop
  }
}
 80061d4:	37e8      	adds	r7, #232	; 0xe8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b090      	sub	sp, #64	; 0x40
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006240:	e050      	b.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d04c      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800624a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0x30>
 8006250:	f7fc f946 	bl	80024e0 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800625c:	429a      	cmp	r2, r3
 800625e:	d241      	bcs.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006280:	637a      	str	r2, [r7, #52]	; 0x34
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3314      	adds	r3, #20
 800629a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	613b      	str	r3, [r7, #16]
   return(result);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3314      	adds	r3, #20
 80062b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b4:	623a      	str	r2, [r7, #32]
 80062b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e00f      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d09f      	beq.n	8006242 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3740      	adds	r7, #64	; 0x40
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b095      	sub	sp, #84	; 0x54
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006334:	643a      	str	r2, [r7, #64]	; 0x40
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800633a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	61fb      	str	r3, [r7, #28]
   return(result);
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	d119      	bne.n	80063b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	60bb      	str	r3, [r7, #8]
   return(result);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 0310 	bic.w	r3, r3, #16
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a4:	61ba      	str	r2, [r7, #24]
 80063a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6979      	ldr	r1, [r7, #20]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	613b      	str	r3, [r7, #16]
   return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063c6:	bf00      	nop
 80063c8:	3754      	adds	r7, #84	; 0x54
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff09 	bl	8006204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b21      	cmp	r3, #33	; 0x21
 800640c:	d13e      	bne.n	800648c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d114      	bne.n	8006442 <UART_Transmit_IT+0x48>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d110      	bne.n	8006442 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006434:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	1c9a      	adds	r2, r3, #2
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]
 8006440:	e008      	b.n	8006454 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6211      	str	r1, [r2, #32]
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	4619      	mov	r1, r3
 8006462:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10f      	bne.n	8006488 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006476:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006486:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800648c:	2302      	movs	r3, #2
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe8e 	bl	80061dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b08c      	sub	sp, #48	; 0x30
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b22      	cmp	r3, #34	; 0x22
 80064dc:	f040 80ab 	bne.w	8006636 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e8:	d117      	bne.n	800651a <UART_Receive_IT+0x50>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d113      	bne.n	800651a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006508:	b29a      	uxth	r2, r3
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
 8006518:	e026      	b.n	8006568 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d007      	beq.n	800653e <UART_Receive_IT+0x74>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <UART_Receive_IT+0x82>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	e008      	b.n	800655e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29b      	uxth	r3, r3
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4619      	mov	r1, r3
 8006576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006578:	2b00      	cmp	r3, #0
 800657a:	d15a      	bne.n	8006632 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0220 	bic.w	r2, r2, #32
 800658a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d135      	bne.n	8006628 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	613b      	str	r3, [r7, #16]
   return(result);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f023 0310 	bic.w	r3, r3, #16
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e2:	623a      	str	r2, [r7, #32]
 80065e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	69f9      	ldr	r1, [r7, #28]
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b10      	cmp	r3, #16
 8006602:	d10a      	bne.n	800661a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fdf9 	bl	8006218 <HAL_UARTEx_RxEventCallback>
 8006626:	e002      	b.n	800662e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fde1 	bl	80061f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e002      	b.n	8006638 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e000      	b.n	8006638 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	3730      	adds	r7, #48	; 0x30
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006644:	b0c0      	sub	sp, #256	; 0x100
 8006646:	af00      	add	r7, sp, #0
 8006648:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	68d9      	ldr	r1, [r3, #12]
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	ea40 0301 	orr.w	r3, r0, r1
 8006668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	431a      	orrs	r2, r3
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006698:	f021 010c 	bic.w	r1, r1, #12
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	6999      	ldr	r1, [r3, #24]
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	ea40 0301 	orr.w	r3, r0, r1
 80066c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b8f      	ldr	r3, [pc, #572]	; (800690c <UART_SetConfig+0x2cc>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d005      	beq.n	80066e0 <UART_SetConfig+0xa0>
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b8d      	ldr	r3, [pc, #564]	; (8006910 <UART_SetConfig+0x2d0>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	d104      	bne.n	80066ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fe f8ba 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 80066e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066e8:	e003      	b.n	80066f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ea:	f7fe f8a1 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80066ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fc:	f040 810c 	bne.w	8006918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800670a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800670e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006712:	4622      	mov	r2, r4
 8006714:	462b      	mov	r3, r5
 8006716:	1891      	adds	r1, r2, r2
 8006718:	65b9      	str	r1, [r7, #88]	; 0x58
 800671a:	415b      	adcs	r3, r3
 800671c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006722:	4621      	mov	r1, r4
 8006724:	eb12 0801 	adds.w	r8, r2, r1
 8006728:	4629      	mov	r1, r5
 800672a:	eb43 0901 	adc.w	r9, r3, r1
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800673a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800673e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006742:	4690      	mov	r8, r2
 8006744:	4699      	mov	r9, r3
 8006746:	4623      	mov	r3, r4
 8006748:	eb18 0303 	adds.w	r3, r8, r3
 800674c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006750:	462b      	mov	r3, r5
 8006752:	eb49 0303 	adc.w	r3, r9, r3
 8006756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006766:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800676a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800676e:	460b      	mov	r3, r1
 8006770:	18db      	adds	r3, r3, r3
 8006772:	653b      	str	r3, [r7, #80]	; 0x50
 8006774:	4613      	mov	r3, r2
 8006776:	eb42 0303 	adc.w	r3, r2, r3
 800677a:	657b      	str	r3, [r7, #84]	; 0x54
 800677c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006784:	f7f9 fd8c 	bl	80002a0 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b61      	ldr	r3, [pc, #388]	; (8006914 <UART_SetConfig+0x2d4>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011c      	lsls	r4, r3, #4
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067a8:	4642      	mov	r2, r8
 80067aa:	464b      	mov	r3, r9
 80067ac:	1891      	adds	r1, r2, r2
 80067ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80067b0:	415b      	adcs	r3, r3
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067b8:	4641      	mov	r1, r8
 80067ba:	eb12 0a01 	adds.w	sl, r2, r1
 80067be:	4649      	mov	r1, r9
 80067c0:	eb43 0b01 	adc.w	fp, r3, r1
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d8:	4692      	mov	sl, r2
 80067da:	469b      	mov	fp, r3
 80067dc:	4643      	mov	r3, r8
 80067de:	eb1a 0303 	adds.w	r3, sl, r3
 80067e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e6:	464b      	mov	r3, r9
 80067e8:	eb4b 0303 	adc.w	r3, fp, r3
 80067ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006804:	460b      	mov	r3, r1
 8006806:	18db      	adds	r3, r3, r3
 8006808:	643b      	str	r3, [r7, #64]	; 0x40
 800680a:	4613      	mov	r3, r2
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800681a:	f7f9 fd41 	bl	80002a0 <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4611      	mov	r1, r2
 8006824:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <UART_SetConfig+0x2d4>)
 8006826:	fba3 2301 	umull	r2, r3, r3, r1
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2264      	movs	r2, #100	; 0x64
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	1acb      	subs	r3, r1, r3
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <UART_SetConfig+0x2d4>)
 800683c:	fba3 2302 	umull	r2, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006848:	441c      	add	r4, r3
 800684a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684e:	2200      	movs	r2, #0
 8006850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006854:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800685c:	4642      	mov	r2, r8
 800685e:	464b      	mov	r3, r9
 8006860:	1891      	adds	r1, r2, r2
 8006862:	63b9      	str	r1, [r7, #56]	; 0x38
 8006864:	415b      	adcs	r3, r3
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800686c:	4641      	mov	r1, r8
 800686e:	1851      	adds	r1, r2, r1
 8006870:	6339      	str	r1, [r7, #48]	; 0x30
 8006872:	4649      	mov	r1, r9
 8006874:	414b      	adcs	r3, r1
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006884:	4659      	mov	r1, fp
 8006886:	00cb      	lsls	r3, r1, #3
 8006888:	4651      	mov	r1, sl
 800688a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688e:	4651      	mov	r1, sl
 8006890:	00ca      	lsls	r2, r1, #3
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	4603      	mov	r3, r0
 8006898:	4642      	mov	r2, r8
 800689a:	189b      	adds	r3, r3, r2
 800689c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a0:	464b      	mov	r3, r9
 80068a2:	460a      	mov	r2, r1
 80068a4:	eb42 0303 	adc.w	r3, r2, r3
 80068a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068c0:	460b      	mov	r3, r1
 80068c2:	18db      	adds	r3, r3, r3
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c6:	4613      	mov	r3, r2
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068d6:	f7f9 fce3 	bl	80002a0 <__aeabi_uldivmod>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <UART_SetConfig+0x2d4>)
 80068e0:	fba3 1302 	umull	r1, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2164      	movs	r1, #100	; 0x64
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	3332      	adds	r3, #50	; 0x32
 80068f2:	4a08      	ldr	r2, [pc, #32]	; (8006914 <UART_SetConfig+0x2d4>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 0207 	and.w	r2, r3, #7
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4422      	add	r2, r4
 8006906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006908:	e105      	b.n	8006b16 <UART_SetConfig+0x4d6>
 800690a:	bf00      	nop
 800690c:	40011000 	.word	0x40011000
 8006910:	40011400 	.word	0x40011400
 8006914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691c:	2200      	movs	r2, #0
 800691e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006922:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800692a:	4642      	mov	r2, r8
 800692c:	464b      	mov	r3, r9
 800692e:	1891      	adds	r1, r2, r2
 8006930:	6239      	str	r1, [r7, #32]
 8006932:	415b      	adcs	r3, r3
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800693a:	4641      	mov	r1, r8
 800693c:	1854      	adds	r4, r2, r1
 800693e:	4649      	mov	r1, r9
 8006940:	eb43 0501 	adc.w	r5, r3, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	00eb      	lsls	r3, r5, #3
 800694e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006952:	00e2      	lsls	r2, r4, #3
 8006954:	4614      	mov	r4, r2
 8006956:	461d      	mov	r5, r3
 8006958:	4643      	mov	r3, r8
 800695a:	18e3      	adds	r3, r4, r3
 800695c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006960:	464b      	mov	r3, r9
 8006962:	eb45 0303 	adc.w	r3, r5, r3
 8006966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006986:	4629      	mov	r1, r5
 8006988:	008b      	lsls	r3, r1, #2
 800698a:	4621      	mov	r1, r4
 800698c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006990:	4621      	mov	r1, r4
 8006992:	008a      	lsls	r2, r1, #2
 8006994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006998:	f7f9 fc82 	bl	80002a0 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4b60      	ldr	r3, [pc, #384]	; (8006b24 <UART_SetConfig+0x4e4>)
 80069a2:	fba3 2302 	umull	r2, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	011c      	lsls	r4, r3, #4
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	61b9      	str	r1, [r7, #24]
 80069c4:	415b      	adcs	r3, r3
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069cc:	4641      	mov	r1, r8
 80069ce:	1851      	adds	r1, r2, r1
 80069d0:	6139      	str	r1, [r7, #16]
 80069d2:	4649      	mov	r1, r9
 80069d4:	414b      	adcs	r3, r1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e4:	4659      	mov	r1, fp
 80069e6:	00cb      	lsls	r3, r1, #3
 80069e8:	4651      	mov	r1, sl
 80069ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ee:	4651      	mov	r1, sl
 80069f0:	00ca      	lsls	r2, r1, #3
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	4642      	mov	r2, r8
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a00:	464b      	mov	r3, r9
 8006a02:	460a      	mov	r2, r1
 8006a04:	eb42 0303 	adc.w	r3, r2, r3
 8006a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a24:	4649      	mov	r1, r9
 8006a26:	008b      	lsls	r3, r1, #2
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2e:	4641      	mov	r1, r8
 8006a30:	008a      	lsls	r2, r1, #2
 8006a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a36:	f7f9 fc33 	bl	80002a0 <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <UART_SetConfig+0x4e4>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	; 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	3332      	adds	r3, #50	; 0x32
 8006a52:	4a34      	ldr	r2, [pc, #208]	; (8006b24 <UART_SetConfig+0x4e4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a5e:	441c      	add	r4, r3
 8006a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a64:	2200      	movs	r2, #0
 8006a66:	673b      	str	r3, [r7, #112]	; 0x70
 8006a68:	677a      	str	r2, [r7, #116]	; 0x74
 8006a6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a6e:	4642      	mov	r2, r8
 8006a70:	464b      	mov	r3, r9
 8006a72:	1891      	adds	r1, r2, r2
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	415b      	adcs	r3, r3
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a7e:	4641      	mov	r1, r8
 8006a80:	1851      	adds	r1, r2, r1
 8006a82:	6039      	str	r1, [r7, #0]
 8006a84:	4649      	mov	r1, r9
 8006a86:	414b      	adcs	r3, r1
 8006a88:	607b      	str	r3, [r7, #4]
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a96:	4659      	mov	r1, fp
 8006a98:	00cb      	lsls	r3, r1, #3
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa0:	4651      	mov	r1, sl
 8006aa2:	00ca      	lsls	r2, r1, #3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4642      	mov	r2, r8
 8006aac:	189b      	adds	r3, r3, r2
 8006aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	008b      	lsls	r3, r1, #2
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006adc:	4641      	mov	r1, r8
 8006ade:	008a      	lsls	r2, r1, #2
 8006ae0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ae4:	f7f9 fbdc 	bl	80002a0 <__aeabi_uldivmod>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <UART_SetConfig+0x4e4>)
 8006aee:	fba3 1302 	umull	r1, r3, r3, r2
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	2164      	movs	r1, #100	; 0x64
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	3332      	adds	r3, #50	; 0x32
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <UART_SetConfig+0x4e4>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	f003 020f 	and.w	r2, r3, #15
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4422      	add	r2, r4
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	bf00      	nop
 8006b18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	51eb851f 	.word	0x51eb851f

08006b28 <__errno>:
 8006b28:	4b01      	ldr	r3, [pc, #4]	; (8006b30 <__errno+0x8>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000014 	.word	0x20000014

08006b34 <__libc_init_array>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4d0d      	ldr	r5, [pc, #52]	; (8006b6c <__libc_init_array+0x38>)
 8006b38:	4c0d      	ldr	r4, [pc, #52]	; (8006b70 <__libc_init_array+0x3c>)
 8006b3a:	1b64      	subs	r4, r4, r5
 8006b3c:	10a4      	asrs	r4, r4, #2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	d109      	bne.n	8006b58 <__libc_init_array+0x24>
 8006b44:	4d0b      	ldr	r5, [pc, #44]	; (8006b74 <__libc_init_array+0x40>)
 8006b46:	4c0c      	ldr	r4, [pc, #48]	; (8006b78 <__libc_init_array+0x44>)
 8006b48:	f001 fa00 	bl	8007f4c <_init>
 8006b4c:	1b64      	subs	r4, r4, r5
 8006b4e:	10a4      	asrs	r4, r4, #2
 8006b50:	2600      	movs	r6, #0
 8006b52:	42a6      	cmp	r6, r4
 8006b54:	d105      	bne.n	8006b62 <__libc_init_array+0x2e>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5c:	4798      	blx	r3
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7ee      	b.n	8006b40 <__libc_init_array+0xc>
 8006b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b66:	4798      	blx	r3
 8006b68:	3601      	adds	r6, #1
 8006b6a:	e7f2      	b.n	8006b52 <__libc_init_array+0x1e>
 8006b6c:	080081a4 	.word	0x080081a4
 8006b70:	080081a4 	.word	0x080081a4
 8006b74:	080081a4 	.word	0x080081a4
 8006b78:	080081a8 	.word	0x080081a8

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <iprintf>:
 8006b8c:	b40f      	push	{r0, r1, r2, r3}
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <iprintf+0x2c>)
 8006b90:	b513      	push	{r0, r1, r4, lr}
 8006b92:	681c      	ldr	r4, [r3, #0]
 8006b94:	b124      	cbz	r4, 8006ba0 <iprintf+0x14>
 8006b96:	69a3      	ldr	r3, [r4, #24]
 8006b98:	b913      	cbnz	r3, 8006ba0 <iprintf+0x14>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fa7e 	bl	800709c <__sinit>
 8006ba0:	ab05      	add	r3, sp, #20
 8006ba2:	9a04      	ldr	r2, [sp, #16]
 8006ba4:	68a1      	ldr	r1, [r4, #8]
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fde3 	bl	8007774 <_vfiprintf_r>
 8006bae:	b002      	add	sp, #8
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	b004      	add	sp, #16
 8006bb6:	4770      	bx	lr
 8006bb8:	20000014 	.word	0x20000014

08006bbc <_puts_r>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	460e      	mov	r6, r1
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	b118      	cbz	r0, 8006bcc <_puts_r+0x10>
 8006bc4:	6983      	ldr	r3, [r0, #24]
 8006bc6:	b90b      	cbnz	r3, 8006bcc <_puts_r+0x10>
 8006bc8:	f000 fa68 	bl	800709c <__sinit>
 8006bcc:	69ab      	ldr	r3, [r5, #24]
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	b913      	cbnz	r3, 8006bd8 <_puts_r+0x1c>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fa62 	bl	800709c <__sinit>
 8006bd8:	4b2c      	ldr	r3, [pc, #176]	; (8006c8c <_puts_r+0xd0>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d120      	bne.n	8006c20 <_puts_r+0x64>
 8006bde:	686c      	ldr	r4, [r5, #4]
 8006be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be2:	07db      	lsls	r3, r3, #31
 8006be4:	d405      	bmi.n	8006bf2 <_puts_r+0x36>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	0598      	lsls	r0, r3, #22
 8006bea:	d402      	bmi.n	8006bf2 <_puts_r+0x36>
 8006bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bee:	f000 faf3 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	0719      	lsls	r1, r3, #28
 8006bf6:	d51d      	bpl.n	8006c34 <_puts_r+0x78>
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	b1db      	cbz	r3, 8006c34 <_puts_r+0x78>
 8006bfc:	3e01      	subs	r6, #1
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c04:	3b01      	subs	r3, #1
 8006c06:	60a3      	str	r3, [r4, #8]
 8006c08:	bb39      	cbnz	r1, 8006c5a <_puts_r+0x9e>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da38      	bge.n	8006c80 <_puts_r+0xc4>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	210a      	movs	r1, #10
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f868 	bl	8006ce8 <__swbuf_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d011      	beq.n	8006c40 <_puts_r+0x84>
 8006c1c:	250a      	movs	r5, #10
 8006c1e:	e011      	b.n	8006c44 <_puts_r+0x88>
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <_puts_r+0xd4>)
 8006c22:	429c      	cmp	r4, r3
 8006c24:	d101      	bne.n	8006c2a <_puts_r+0x6e>
 8006c26:	68ac      	ldr	r4, [r5, #8]
 8006c28:	e7da      	b.n	8006be0 <_puts_r+0x24>
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <_puts_r+0xd8>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	bf08      	it	eq
 8006c30:	68ec      	ldreq	r4, [r5, #12]
 8006c32:	e7d5      	b.n	8006be0 <_puts_r+0x24>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f8a8 	bl	8006d8c <__swsetup_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d0dd      	beq.n	8006bfc <_puts_r+0x40>
 8006c40:	f04f 35ff 	mov.w	r5, #4294967295
 8006c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c46:	07da      	lsls	r2, r3, #31
 8006c48:	d405      	bmi.n	8006c56 <_puts_r+0x9a>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	059b      	lsls	r3, r3, #22
 8006c4e:	d402      	bmi.n	8006c56 <_puts_r+0x9a>
 8006c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c52:	f000 fac2 	bl	80071da <__retarget_lock_release_recursive>
 8006c56:	4628      	mov	r0, r5
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da04      	bge.n	8006c68 <_puts_r+0xac>
 8006c5e:	69a2      	ldr	r2, [r4, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	dc06      	bgt.n	8006c72 <_puts_r+0xb6>
 8006c64:	290a      	cmp	r1, #10
 8006c66:	d004      	beq.n	8006c72 <_puts_r+0xb6>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	6022      	str	r2, [r4, #0]
 8006c6e:	7019      	strb	r1, [r3, #0]
 8006c70:	e7c5      	b.n	8006bfe <_puts_r+0x42>
 8006c72:	4622      	mov	r2, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 f837 	bl	8006ce8 <__swbuf_r>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d1bf      	bne.n	8006bfe <_puts_r+0x42>
 8006c7e:	e7df      	b.n	8006c40 <_puts_r+0x84>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	250a      	movs	r5, #10
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	6022      	str	r2, [r4, #0]
 8006c88:	701d      	strb	r5, [r3, #0]
 8006c8a:	e7db      	b.n	8006c44 <_puts_r+0x88>
 8006c8c:	08008128 	.word	0x08008128
 8006c90:	08008148 	.word	0x08008148
 8006c94:	08008108 	.word	0x08008108

08006c98 <puts>:
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <puts+0xc>)
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f7ff bf8d 	b.w	8006bbc <_puts_r>
 8006ca2:	bf00      	nop
 8006ca4:	20000014 	.word	0x20000014

08006ca8 <siprintf>:
 8006ca8:	b40e      	push	{r1, r2, r3}
 8006caa:	b500      	push	{lr}
 8006cac:	b09c      	sub	sp, #112	; 0x70
 8006cae:	ab1d      	add	r3, sp, #116	; 0x74
 8006cb0:	9002      	str	r0, [sp, #8]
 8006cb2:	9006      	str	r0, [sp, #24]
 8006cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cb8:	4809      	ldr	r0, [pc, #36]	; (8006ce0 <siprintf+0x38>)
 8006cba:	9107      	str	r1, [sp, #28]
 8006cbc:	9104      	str	r1, [sp, #16]
 8006cbe:	4909      	ldr	r1, [pc, #36]	; (8006ce4 <siprintf+0x3c>)
 8006cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc4:	9105      	str	r1, [sp, #20]
 8006cc6:	6800      	ldr	r0, [r0, #0]
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	a902      	add	r1, sp, #8
 8006ccc:	f000 fc28 	bl	8007520 <_svfiprintf_r>
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	b01c      	add	sp, #112	; 0x70
 8006cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cdc:	b003      	add	sp, #12
 8006cde:	4770      	bx	lr
 8006ce0:	20000014 	.word	0x20000014
 8006ce4:	ffff0208 	.word	0xffff0208

08006ce8 <__swbuf_r>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	460e      	mov	r6, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	4605      	mov	r5, r0
 8006cf0:	b118      	cbz	r0, 8006cfa <__swbuf_r+0x12>
 8006cf2:	6983      	ldr	r3, [r0, #24]
 8006cf4:	b90b      	cbnz	r3, 8006cfa <__swbuf_r+0x12>
 8006cf6:	f000 f9d1 	bl	800709c <__sinit>
 8006cfa:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <__swbuf_r+0x98>)
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	d12b      	bne.n	8006d58 <__swbuf_r+0x70>
 8006d00:	686c      	ldr	r4, [r5, #4]
 8006d02:	69a3      	ldr	r3, [r4, #24]
 8006d04:	60a3      	str	r3, [r4, #8]
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	071a      	lsls	r2, r3, #28
 8006d0a:	d52f      	bpl.n	8006d6c <__swbuf_r+0x84>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	b36b      	cbz	r3, 8006d6c <__swbuf_r+0x84>
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	6820      	ldr	r0, [r4, #0]
 8006d14:	1ac0      	subs	r0, r0, r3
 8006d16:	6963      	ldr	r3, [r4, #20]
 8006d18:	b2f6      	uxtb	r6, r6
 8006d1a:	4283      	cmp	r3, r0
 8006d1c:	4637      	mov	r7, r6
 8006d1e:	dc04      	bgt.n	8006d2a <__swbuf_r+0x42>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f926 	bl	8006f74 <_fflush_r>
 8006d28:	bb30      	cbnz	r0, 8006d78 <__swbuf_r+0x90>
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	60a3      	str	r3, [r4, #8]
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	6022      	str	r2, [r4, #0]
 8006d36:	701e      	strb	r6, [r3, #0]
 8006d38:	6963      	ldr	r3, [r4, #20]
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	4283      	cmp	r3, r0
 8006d3e:	d004      	beq.n	8006d4a <__swbuf_r+0x62>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	07db      	lsls	r3, r3, #31
 8006d44:	d506      	bpl.n	8006d54 <__swbuf_r+0x6c>
 8006d46:	2e0a      	cmp	r6, #10
 8006d48:	d104      	bne.n	8006d54 <__swbuf_r+0x6c>
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 f911 	bl	8006f74 <_fflush_r>
 8006d52:	b988      	cbnz	r0, 8006d78 <__swbuf_r+0x90>
 8006d54:	4638      	mov	r0, r7
 8006d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <__swbuf_r+0x9c>)
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	d101      	bne.n	8006d62 <__swbuf_r+0x7a>
 8006d5e:	68ac      	ldr	r4, [r5, #8]
 8006d60:	e7cf      	b.n	8006d02 <__swbuf_r+0x1a>
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <__swbuf_r+0xa0>)
 8006d64:	429c      	cmp	r4, r3
 8006d66:	bf08      	it	eq
 8006d68:	68ec      	ldreq	r4, [r5, #12]
 8006d6a:	e7ca      	b.n	8006d02 <__swbuf_r+0x1a>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 f80c 	bl	8006d8c <__swsetup_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0cb      	beq.n	8006d10 <__swbuf_r+0x28>
 8006d78:	f04f 37ff 	mov.w	r7, #4294967295
 8006d7c:	e7ea      	b.n	8006d54 <__swbuf_r+0x6c>
 8006d7e:	bf00      	nop
 8006d80:	08008128 	.word	0x08008128
 8006d84:	08008148 	.word	0x08008148
 8006d88:	08008108 	.word	0x08008108

08006d8c <__swsetup_r>:
 8006d8c:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <__swsetup_r+0xcc>)
 8006d8e:	b570      	push	{r4, r5, r6, lr}
 8006d90:	681d      	ldr	r5, [r3, #0]
 8006d92:	4606      	mov	r6, r0
 8006d94:	460c      	mov	r4, r1
 8006d96:	b125      	cbz	r5, 8006da2 <__swsetup_r+0x16>
 8006d98:	69ab      	ldr	r3, [r5, #24]
 8006d9a:	b913      	cbnz	r3, 8006da2 <__swsetup_r+0x16>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 f97d 	bl	800709c <__sinit>
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <__swsetup_r+0xd0>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d10f      	bne.n	8006dc8 <__swsetup_r+0x3c>
 8006da8:	686c      	ldr	r4, [r5, #4]
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db0:	0719      	lsls	r1, r3, #28
 8006db2:	d42c      	bmi.n	8006e0e <__swsetup_r+0x82>
 8006db4:	06dd      	lsls	r5, r3, #27
 8006db6:	d411      	bmi.n	8006ddc <__swsetup_r+0x50>
 8006db8:	2309      	movs	r3, #9
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc6:	e03e      	b.n	8006e46 <__swsetup_r+0xba>
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <__swsetup_r+0xd4>)
 8006dca:	429c      	cmp	r4, r3
 8006dcc:	d101      	bne.n	8006dd2 <__swsetup_r+0x46>
 8006dce:	68ac      	ldr	r4, [r5, #8]
 8006dd0:	e7eb      	b.n	8006daa <__swsetup_r+0x1e>
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <__swsetup_r+0xd8>)
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	bf08      	it	eq
 8006dd8:	68ec      	ldreq	r4, [r5, #12]
 8006dda:	e7e6      	b.n	8006daa <__swsetup_r+0x1e>
 8006ddc:	0758      	lsls	r0, r3, #29
 8006dde:	d512      	bpl.n	8006e06 <__swsetup_r+0x7a>
 8006de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de2:	b141      	cbz	r1, 8006df6 <__swsetup_r+0x6a>
 8006de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d002      	beq.n	8006df2 <__swsetup_r+0x66>
 8006dec:	4630      	mov	r0, r6
 8006dee:	f000 fa5b 	bl	80072a8 <_free_r>
 8006df2:	2300      	movs	r3, #0
 8006df4:	6363      	str	r3, [r4, #52]	; 0x34
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f043 0308 	orr.w	r3, r3, #8
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	b94b      	cbnz	r3, 8006e26 <__swsetup_r+0x9a>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1c:	d003      	beq.n	8006e26 <__swsetup_r+0x9a>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 fa01 	bl	8007228 <__smakebuf_r>
 8006e26:	89a0      	ldrh	r0, [r4, #12]
 8006e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e2c:	f010 0301 	ands.w	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <__swsetup_r+0xbc>
 8006e32:	2300      	movs	r3, #0
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	425b      	negs	r3, r3
 8006e3a:	61a3      	str	r3, [r4, #24]
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	b943      	cbnz	r3, 8006e52 <__swsetup_r+0xc6>
 8006e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e44:	d1ba      	bne.n	8006dbc <__swsetup_r+0x30>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	0781      	lsls	r1, r0, #30
 8006e4a:	bf58      	it	pl
 8006e4c:	6963      	ldrpl	r3, [r4, #20]
 8006e4e:	60a3      	str	r3, [r4, #8]
 8006e50:	e7f4      	b.n	8006e3c <__swsetup_r+0xb0>
 8006e52:	2000      	movs	r0, #0
 8006e54:	e7f7      	b.n	8006e46 <__swsetup_r+0xba>
 8006e56:	bf00      	nop
 8006e58:	20000014 	.word	0x20000014
 8006e5c:	08008128 	.word	0x08008128
 8006e60:	08008148 	.word	0x08008148
 8006e64:	08008108 	.word	0x08008108

08006e68 <__sflush_r>:
 8006e68:	898a      	ldrh	r2, [r1, #12]
 8006e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	0710      	lsls	r0, r2, #28
 8006e72:	460c      	mov	r4, r1
 8006e74:	d458      	bmi.n	8006f28 <__sflush_r+0xc0>
 8006e76:	684b      	ldr	r3, [r1, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dc05      	bgt.n	8006e88 <__sflush_r+0x20>
 8006e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc02      	bgt.n	8006e88 <__sflush_r+0x20>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d0f9      	beq.n	8006e82 <__sflush_r+0x1a>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e94:	682f      	ldr	r7, [r5, #0]
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	d032      	beq.n	8006f00 <__sflush_r+0x98>
 8006e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	075a      	lsls	r2, r3, #29
 8006ea0:	d505      	bpl.n	8006eae <__sflush_r+0x46>
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	1ac0      	subs	r0, r0, r3
 8006ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea8:	b10b      	cbz	r3, 8006eae <__sflush_r+0x46>
 8006eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eac:	1ac0      	subs	r0, r0, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb4:	6a21      	ldr	r1, [r4, #32]
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b0      	blx	r6
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	d106      	bne.n	8006ece <__sflush_r+0x66>
 8006ec0:	6829      	ldr	r1, [r5, #0]
 8006ec2:	291d      	cmp	r1, #29
 8006ec4:	d82c      	bhi.n	8006f20 <__sflush_r+0xb8>
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <__sflush_r+0x108>)
 8006ec8:	40ca      	lsrs	r2, r1
 8006eca:	07d6      	lsls	r6, r2, #31
 8006ecc:	d528      	bpl.n	8006f20 <__sflush_r+0xb8>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6062      	str	r2, [r4, #4]
 8006ed2:	04d9      	lsls	r1, r3, #19
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	6022      	str	r2, [r4, #0]
 8006ed8:	d504      	bpl.n	8006ee4 <__sflush_r+0x7c>
 8006eda:	1c42      	adds	r2, r0, #1
 8006edc:	d101      	bne.n	8006ee2 <__sflush_r+0x7a>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	b903      	cbnz	r3, 8006ee4 <__sflush_r+0x7c>
 8006ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee6:	602f      	str	r7, [r5, #0]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d0ca      	beq.n	8006e82 <__sflush_r+0x1a>
 8006eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	d002      	beq.n	8006efa <__sflush_r+0x92>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 f9d7 	bl	80072a8 <_free_r>
 8006efa:	2000      	movs	r0, #0
 8006efc:	6360      	str	r0, [r4, #52]	; 0x34
 8006efe:	e7c1      	b.n	8006e84 <__sflush_r+0x1c>
 8006f00:	6a21      	ldr	r1, [r4, #32]
 8006f02:	2301      	movs	r3, #1
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b0      	blx	r6
 8006f08:	1c41      	adds	r1, r0, #1
 8006f0a:	d1c7      	bne.n	8006e9c <__sflush_r+0x34>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0c4      	beq.n	8006e9c <__sflush_r+0x34>
 8006f12:	2b1d      	cmp	r3, #29
 8006f14:	d001      	beq.n	8006f1a <__sflush_r+0xb2>
 8006f16:	2b16      	cmp	r3, #22
 8006f18:	d101      	bne.n	8006f1e <__sflush_r+0xb6>
 8006f1a:	602f      	str	r7, [r5, #0]
 8006f1c:	e7b1      	b.n	8006e82 <__sflush_r+0x1a>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	e7ad      	b.n	8006e84 <__sflush_r+0x1c>
 8006f28:	690f      	ldr	r7, [r1, #16]
 8006f2a:	2f00      	cmp	r7, #0
 8006f2c:	d0a9      	beq.n	8006e82 <__sflush_r+0x1a>
 8006f2e:	0793      	lsls	r3, r2, #30
 8006f30:	680e      	ldr	r6, [r1, #0]
 8006f32:	bf08      	it	eq
 8006f34:	694b      	ldreq	r3, [r1, #20]
 8006f36:	600f      	str	r7, [r1, #0]
 8006f38:	bf18      	it	ne
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	eba6 0807 	sub.w	r8, r6, r7
 8006f40:	608b      	str	r3, [r1, #8]
 8006f42:	f1b8 0f00 	cmp.w	r8, #0
 8006f46:	dd9c      	ble.n	8006e82 <__sflush_r+0x1a>
 8006f48:	6a21      	ldr	r1, [r4, #32]
 8006f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	463a      	mov	r2, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b0      	blx	r6
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dc06      	bgt.n	8006f66 <__sflush_r+0xfe>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	e78e      	b.n	8006e84 <__sflush_r+0x1c>
 8006f66:	4407      	add	r7, r0
 8006f68:	eba8 0800 	sub.w	r8, r8, r0
 8006f6c:	e7e9      	b.n	8006f42 <__sflush_r+0xda>
 8006f6e:	bf00      	nop
 8006f70:	20400001 	.word	0x20400001

08006f74 <_fflush_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b913      	cbnz	r3, 8006f84 <_fflush_r+0x10>
 8006f7e:	2500      	movs	r5, #0
 8006f80:	4628      	mov	r0, r5
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	b118      	cbz	r0, 8006f8e <_fflush_r+0x1a>
 8006f86:	6983      	ldr	r3, [r0, #24]
 8006f88:	b90b      	cbnz	r3, 8006f8e <_fflush_r+0x1a>
 8006f8a:	f000 f887 	bl	800709c <__sinit>
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <_fflush_r+0x6c>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d11b      	bne.n	8006fcc <_fflush_r+0x58>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ef      	beq.n	8006f7e <_fflush_r+0xa>
 8006f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fa0:	07d0      	lsls	r0, r2, #31
 8006fa2:	d404      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa4:	0599      	lsls	r1, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f000 f915 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f7ff ff59 	bl	8006e68 <__sflush_r>
 8006fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb8:	07da      	lsls	r2, r3, #31
 8006fba:	4605      	mov	r5, r0
 8006fbc:	d4e0      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	059b      	lsls	r3, r3, #22
 8006fc2:	d4dd      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc6:	f000 f908 	bl	80071da <__retarget_lock_release_recursive>
 8006fca:	e7d9      	b.n	8006f80 <_fflush_r+0xc>
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <_fflush_r+0x70>)
 8006fce:	429c      	cmp	r4, r3
 8006fd0:	d101      	bne.n	8006fd6 <_fflush_r+0x62>
 8006fd2:	68ac      	ldr	r4, [r5, #8]
 8006fd4:	e7df      	b.n	8006f96 <_fflush_r+0x22>
 8006fd6:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <_fflush_r+0x74>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	bf08      	it	eq
 8006fdc:	68ec      	ldreq	r4, [r5, #12]
 8006fde:	e7da      	b.n	8006f96 <_fflush_r+0x22>
 8006fe0:	08008128 	.word	0x08008128
 8006fe4:	08008148 	.word	0x08008148
 8006fe8:	08008108 	.word	0x08008108

08006fec <std>:
 8006fec:	2300      	movs	r3, #0
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ffa:	6083      	str	r3, [r0, #8]
 8006ffc:	8181      	strh	r1, [r0, #12]
 8006ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8007000:	81c2      	strh	r2, [r0, #14]
 8007002:	6183      	str	r3, [r0, #24]
 8007004:	4619      	mov	r1, r3
 8007006:	2208      	movs	r2, #8
 8007008:	305c      	adds	r0, #92	; 0x5c
 800700a:	f7ff fdb7 	bl	8006b7c <memset>
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x38>)
 8007010:	6263      	str	r3, [r4, #36]	; 0x24
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <std+0x3c>)
 8007014:	62a3      	str	r3, [r4, #40]	; 0x28
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <std+0x40>)
 8007018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <std+0x44>)
 800701c:	6224      	str	r4, [r4, #32]
 800701e:	6323      	str	r3, [r4, #48]	; 0x30
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	08007d1d 	.word	0x08007d1d
 8007028:	08007d3f 	.word	0x08007d3f
 800702c:	08007d77 	.word	0x08007d77
 8007030:	08007d9b 	.word	0x08007d9b

08007034 <_cleanup_r>:
 8007034:	4901      	ldr	r1, [pc, #4]	; (800703c <_cleanup_r+0x8>)
 8007036:	f000 b8af 	b.w	8007198 <_fwalk_reent>
 800703a:	bf00      	nop
 800703c:	08006f75 	.word	0x08006f75

08007040 <__sfmoreglue>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	2268      	movs	r2, #104	; 0x68
 8007044:	1e4d      	subs	r5, r1, #1
 8007046:	4355      	muls	r5, r2
 8007048:	460e      	mov	r6, r1
 800704a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800704e:	f000 f997 	bl	8007380 <_malloc_r>
 8007052:	4604      	mov	r4, r0
 8007054:	b140      	cbz	r0, 8007068 <__sfmoreglue+0x28>
 8007056:	2100      	movs	r1, #0
 8007058:	e9c0 1600 	strd	r1, r6, [r0]
 800705c:	300c      	adds	r0, #12
 800705e:	60a0      	str	r0, [r4, #8]
 8007060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007064:	f7ff fd8a 	bl	8006b7c <memset>
 8007068:	4620      	mov	r0, r4
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__sfp_lock_acquire>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__sfp_lock_acquire+0x8>)
 800706e:	f000 b8b3 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	200002cd 	.word	0x200002cd

08007078 <__sfp_lock_release>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__sfp_lock_release+0x8>)
 800707a:	f000 b8ae 	b.w	80071da <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	200002cd 	.word	0x200002cd

08007084 <__sinit_lock_acquire>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__sinit_lock_acquire+0x8>)
 8007086:	f000 b8a7 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	200002ce 	.word	0x200002ce

08007090 <__sinit_lock_release>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sinit_lock_release+0x8>)
 8007092:	f000 b8a2 	b.w	80071da <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	200002ce 	.word	0x200002ce

0800709c <__sinit>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	f7ff fff0 	bl	8007084 <__sinit_lock_acquire>
 80070a4:	69a3      	ldr	r3, [r4, #24]
 80070a6:	b11b      	cbz	r3, 80070b0 <__sinit+0x14>
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f7ff bff0 	b.w	8007090 <__sinit_lock_release>
 80070b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070b4:	6523      	str	r3, [r4, #80]	; 0x50
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <__sinit+0x68>)
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <__sinit+0x6c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80070be:	42a3      	cmp	r3, r4
 80070c0:	bf04      	itt	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	61a3      	streq	r3, [r4, #24]
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 f820 	bl	800710c <__sfp>
 80070cc:	6060      	str	r0, [r4, #4]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 f81c 	bl	800710c <__sfp>
 80070d4:	60a0      	str	r0, [r4, #8]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f818 	bl	800710c <__sfp>
 80070dc:	2200      	movs	r2, #0
 80070de:	60e0      	str	r0, [r4, #12]
 80070e0:	2104      	movs	r1, #4
 80070e2:	6860      	ldr	r0, [r4, #4]
 80070e4:	f7ff ff82 	bl	8006fec <std>
 80070e8:	68a0      	ldr	r0, [r4, #8]
 80070ea:	2201      	movs	r2, #1
 80070ec:	2109      	movs	r1, #9
 80070ee:	f7ff ff7d 	bl	8006fec <std>
 80070f2:	68e0      	ldr	r0, [r4, #12]
 80070f4:	2202      	movs	r2, #2
 80070f6:	2112      	movs	r1, #18
 80070f8:	f7ff ff78 	bl	8006fec <std>
 80070fc:	2301      	movs	r3, #1
 80070fe:	61a3      	str	r3, [r4, #24]
 8007100:	e7d2      	b.n	80070a8 <__sinit+0xc>
 8007102:	bf00      	nop
 8007104:	08008104 	.word	0x08008104
 8007108:	08007035 	.word	0x08007035

0800710c <__sfp>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	4607      	mov	r7, r0
 8007110:	f7ff ffac 	bl	800706c <__sfp_lock_acquire>
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <__sfp+0x84>)
 8007116:	681e      	ldr	r6, [r3, #0]
 8007118:	69b3      	ldr	r3, [r6, #24]
 800711a:	b913      	cbnz	r3, 8007122 <__sfp+0x16>
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbd 	bl	800709c <__sinit>
 8007122:	3648      	adds	r6, #72	; 0x48
 8007124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007128:	3b01      	subs	r3, #1
 800712a:	d503      	bpl.n	8007134 <__sfp+0x28>
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	b30b      	cbz	r3, 8007174 <__sfp+0x68>
 8007130:	6836      	ldr	r6, [r6, #0]
 8007132:	e7f7      	b.n	8007124 <__sfp+0x18>
 8007134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007138:	b9d5      	cbnz	r5, 8007170 <__sfp+0x64>
 800713a:	4b16      	ldr	r3, [pc, #88]	; (8007194 <__sfp+0x88>)
 800713c:	60e3      	str	r3, [r4, #12]
 800713e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007142:	6665      	str	r5, [r4, #100]	; 0x64
 8007144:	f000 f847 	bl	80071d6 <__retarget_lock_init_recursive>
 8007148:	f7ff ff96 	bl	8007078 <__sfp_lock_release>
 800714c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007154:	6025      	str	r5, [r4, #0]
 8007156:	61a5      	str	r5, [r4, #24]
 8007158:	2208      	movs	r2, #8
 800715a:	4629      	mov	r1, r5
 800715c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007160:	f7ff fd0c 	bl	8006b7c <memset>
 8007164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800716c:	4620      	mov	r0, r4
 800716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007170:	3468      	adds	r4, #104	; 0x68
 8007172:	e7d9      	b.n	8007128 <__sfp+0x1c>
 8007174:	2104      	movs	r1, #4
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ff62 	bl	8007040 <__sfmoreglue>
 800717c:	4604      	mov	r4, r0
 800717e:	6030      	str	r0, [r6, #0]
 8007180:	2800      	cmp	r0, #0
 8007182:	d1d5      	bne.n	8007130 <__sfp+0x24>
 8007184:	f7ff ff78 	bl	8007078 <__sfp_lock_release>
 8007188:	230c      	movs	r3, #12
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	e7ee      	b.n	800716c <__sfp+0x60>
 800718e:	bf00      	nop
 8007190:	08008104 	.word	0x08008104
 8007194:	ffff0001 	.word	0xffff0001

08007198 <_fwalk_reent>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	4688      	mov	r8, r1
 80071a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071a4:	2700      	movs	r7, #0
 80071a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071aa:	f1b9 0901 	subs.w	r9, r9, #1
 80071ae:	d505      	bpl.n	80071bc <_fwalk_reent+0x24>
 80071b0:	6824      	ldr	r4, [r4, #0]
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d1f7      	bne.n	80071a6 <_fwalk_reent+0xe>
 80071b6:	4638      	mov	r0, r7
 80071b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071bc:	89ab      	ldrh	r3, [r5, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d907      	bls.n	80071d2 <_fwalk_reent+0x3a>
 80071c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c6:	3301      	adds	r3, #1
 80071c8:	d003      	beq.n	80071d2 <_fwalk_reent+0x3a>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	47c0      	blx	r8
 80071d0:	4307      	orrs	r7, r0
 80071d2:	3568      	adds	r5, #104	; 0x68
 80071d4:	e7e9      	b.n	80071aa <_fwalk_reent+0x12>

080071d6 <__retarget_lock_init_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_acquire_recursive>:
 80071d8:	4770      	bx	lr

080071da <__retarget_lock_release_recursive>:
 80071da:	4770      	bx	lr

080071dc <__swhatbuf_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	460e      	mov	r6, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	2900      	cmp	r1, #0
 80071e6:	b096      	sub	sp, #88	; 0x58
 80071e8:	4614      	mov	r4, r2
 80071ea:	461d      	mov	r5, r3
 80071ec:	da08      	bge.n	8007200 <__swhatbuf_r+0x24>
 80071ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	061a      	lsls	r2, r3, #24
 80071f8:	d410      	bmi.n	800721c <__swhatbuf_r+0x40>
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	e00e      	b.n	800721e <__swhatbuf_r+0x42>
 8007200:	466a      	mov	r2, sp
 8007202:	f000 fdf1 	bl	8007de8 <_fstat_r>
 8007206:	2800      	cmp	r0, #0
 8007208:	dbf1      	blt.n	80071ee <__swhatbuf_r+0x12>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007214:	425a      	negs	r2, r3
 8007216:	415a      	adcs	r2, r3
 8007218:	602a      	str	r2, [r5, #0]
 800721a:	e7ee      	b.n	80071fa <__swhatbuf_r+0x1e>
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	2000      	movs	r0, #0
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	b016      	add	sp, #88	; 0x58
 8007224:	bd70      	pop	{r4, r5, r6, pc}
	...

08007228 <__smakebuf_r>:
 8007228:	898b      	ldrh	r3, [r1, #12]
 800722a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800722c:	079d      	lsls	r5, r3, #30
 800722e:	4606      	mov	r6, r0
 8007230:	460c      	mov	r4, r1
 8007232:	d507      	bpl.n	8007244 <__smakebuf_r+0x1c>
 8007234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	2301      	movs	r3, #1
 800723e:	6163      	str	r3, [r4, #20]
 8007240:	b002      	add	sp, #8
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	ab01      	add	r3, sp, #4
 8007246:	466a      	mov	r2, sp
 8007248:	f7ff ffc8 	bl	80071dc <__swhatbuf_r>
 800724c:	9900      	ldr	r1, [sp, #0]
 800724e:	4605      	mov	r5, r0
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f895 	bl	8007380 <_malloc_r>
 8007256:	b948      	cbnz	r0, 800726c <__smakebuf_r+0x44>
 8007258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d4ef      	bmi.n	8007240 <__smakebuf_r+0x18>
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e7e3      	b.n	8007234 <__smakebuf_r+0xc>
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <__smakebuf_r+0x7c>)
 800726e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	6020      	str	r0, [r4, #0]
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	6163      	str	r3, [r4, #20]
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	6120      	str	r0, [r4, #16]
 8007282:	b15b      	cbz	r3, 800729c <__smakebuf_r+0x74>
 8007284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007288:	4630      	mov	r0, r6
 800728a:	f000 fdbf 	bl	8007e0c <_isatty_r>
 800728e:	b128      	cbz	r0, 800729c <__smakebuf_r+0x74>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	89a0      	ldrh	r0, [r4, #12]
 800729e:	4305      	orrs	r5, r0
 80072a0:	81a5      	strh	r5, [r4, #12]
 80072a2:	e7cd      	b.n	8007240 <__smakebuf_r+0x18>
 80072a4:	08007035 	.word	0x08007035

080072a8 <_free_r>:
 80072a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072aa:	2900      	cmp	r1, #0
 80072ac:	d044      	beq.n	8007338 <_free_r+0x90>
 80072ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b2:	9001      	str	r0, [sp, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f1a1 0404 	sub.w	r4, r1, #4
 80072ba:	bfb8      	it	lt
 80072bc:	18e4      	addlt	r4, r4, r3
 80072be:	f000 fdef 	bl	8007ea0 <__malloc_lock>
 80072c2:	4a1e      	ldr	r2, [pc, #120]	; (800733c <_free_r+0x94>)
 80072c4:	9801      	ldr	r0, [sp, #4]
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	b933      	cbnz	r3, 80072d8 <_free_r+0x30>
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	6014      	str	r4, [r2, #0]
 80072ce:	b003      	add	sp, #12
 80072d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072d4:	f000 bdea 	b.w	8007eac <__malloc_unlock>
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d908      	bls.n	80072ee <_free_r+0x46>
 80072dc:	6825      	ldr	r5, [r4, #0]
 80072de:	1961      	adds	r1, r4, r5
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf01      	itttt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	1949      	addeq	r1, r1, r5
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	e7ed      	b.n	80072ca <_free_r+0x22>
 80072ee:	461a      	mov	r2, r3
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	b10b      	cbz	r3, 80072f8 <_free_r+0x50>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d9fa      	bls.n	80072ee <_free_r+0x46>
 80072f8:	6811      	ldr	r1, [r2, #0]
 80072fa:	1855      	adds	r5, r2, r1
 80072fc:	42a5      	cmp	r5, r4
 80072fe:	d10b      	bne.n	8007318 <_free_r+0x70>
 8007300:	6824      	ldr	r4, [r4, #0]
 8007302:	4421      	add	r1, r4
 8007304:	1854      	adds	r4, r2, r1
 8007306:	42a3      	cmp	r3, r4
 8007308:	6011      	str	r1, [r2, #0]
 800730a:	d1e0      	bne.n	80072ce <_free_r+0x26>
 800730c:	681c      	ldr	r4, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6053      	str	r3, [r2, #4]
 8007312:	4421      	add	r1, r4
 8007314:	6011      	str	r1, [r2, #0]
 8007316:	e7da      	b.n	80072ce <_free_r+0x26>
 8007318:	d902      	bls.n	8007320 <_free_r+0x78>
 800731a:	230c      	movs	r3, #12
 800731c:	6003      	str	r3, [r0, #0]
 800731e:	e7d6      	b.n	80072ce <_free_r+0x26>
 8007320:	6825      	ldr	r5, [r4, #0]
 8007322:	1961      	adds	r1, r4, r5
 8007324:	428b      	cmp	r3, r1
 8007326:	bf04      	itt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	bf04      	itt	eq
 8007330:	1949      	addeq	r1, r1, r5
 8007332:	6021      	streq	r1, [r4, #0]
 8007334:	6054      	str	r4, [r2, #4]
 8007336:	e7ca      	b.n	80072ce <_free_r+0x26>
 8007338:	b003      	add	sp, #12
 800733a:	bd30      	pop	{r4, r5, pc}
 800733c:	200002d0 	.word	0x200002d0

08007340 <sbrk_aligned>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4e0e      	ldr	r6, [pc, #56]	; (800737c <sbrk_aligned+0x3c>)
 8007344:	460c      	mov	r4, r1
 8007346:	6831      	ldr	r1, [r6, #0]
 8007348:	4605      	mov	r5, r0
 800734a:	b911      	cbnz	r1, 8007352 <sbrk_aligned+0x12>
 800734c:	f000 fcd6 	bl	8007cfc <_sbrk_r>
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fcd1 	bl	8007cfc <_sbrk_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d00a      	beq.n	8007374 <sbrk_aligned+0x34>
 800735e:	1cc4      	adds	r4, r0, #3
 8007360:	f024 0403 	bic.w	r4, r4, #3
 8007364:	42a0      	cmp	r0, r4
 8007366:	d007      	beq.n	8007378 <sbrk_aligned+0x38>
 8007368:	1a21      	subs	r1, r4, r0
 800736a:	4628      	mov	r0, r5
 800736c:	f000 fcc6 	bl	8007cfc <_sbrk_r>
 8007370:	3001      	adds	r0, #1
 8007372:	d101      	bne.n	8007378 <sbrk_aligned+0x38>
 8007374:	f04f 34ff 	mov.w	r4, #4294967295
 8007378:	4620      	mov	r0, r4
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	200002d4 	.word	0x200002d4

08007380 <_malloc_r>:
 8007380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	1ccd      	adds	r5, r1, #3
 8007386:	f025 0503 	bic.w	r5, r5, #3
 800738a:	3508      	adds	r5, #8
 800738c:	2d0c      	cmp	r5, #12
 800738e:	bf38      	it	cc
 8007390:	250c      	movcc	r5, #12
 8007392:	2d00      	cmp	r5, #0
 8007394:	4607      	mov	r7, r0
 8007396:	db01      	blt.n	800739c <_malloc_r+0x1c>
 8007398:	42a9      	cmp	r1, r5
 800739a:	d905      	bls.n	80073a8 <_malloc_r+0x28>
 800739c:	230c      	movs	r3, #12
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	2600      	movs	r6, #0
 80073a2:	4630      	mov	r0, r6
 80073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a8:	4e2e      	ldr	r6, [pc, #184]	; (8007464 <_malloc_r+0xe4>)
 80073aa:	f000 fd79 	bl	8007ea0 <__malloc_lock>
 80073ae:	6833      	ldr	r3, [r6, #0]
 80073b0:	461c      	mov	r4, r3
 80073b2:	bb34      	cbnz	r4, 8007402 <_malloc_r+0x82>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4638      	mov	r0, r7
 80073b8:	f7ff ffc2 	bl	8007340 <sbrk_aligned>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	4604      	mov	r4, r0
 80073c0:	d14d      	bne.n	800745e <_malloc_r+0xde>
 80073c2:	6834      	ldr	r4, [r6, #0]
 80073c4:	4626      	mov	r6, r4
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	d140      	bne.n	800744c <_malloc_r+0xcc>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	4631      	mov	r1, r6
 80073ce:	4638      	mov	r0, r7
 80073d0:	eb04 0803 	add.w	r8, r4, r3
 80073d4:	f000 fc92 	bl	8007cfc <_sbrk_r>
 80073d8:	4580      	cmp	r8, r0
 80073da:	d13a      	bne.n	8007452 <_malloc_r+0xd2>
 80073dc:	6821      	ldr	r1, [r4, #0]
 80073de:	3503      	adds	r5, #3
 80073e0:	1a6d      	subs	r5, r5, r1
 80073e2:	f025 0503 	bic.w	r5, r5, #3
 80073e6:	3508      	adds	r5, #8
 80073e8:	2d0c      	cmp	r5, #12
 80073ea:	bf38      	it	cc
 80073ec:	250c      	movcc	r5, #12
 80073ee:	4629      	mov	r1, r5
 80073f0:	4638      	mov	r0, r7
 80073f2:	f7ff ffa5 	bl	8007340 <sbrk_aligned>
 80073f6:	3001      	adds	r0, #1
 80073f8:	d02b      	beq.n	8007452 <_malloc_r+0xd2>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	442b      	add	r3, r5
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	e00e      	b.n	8007420 <_malloc_r+0xa0>
 8007402:	6822      	ldr	r2, [r4, #0]
 8007404:	1b52      	subs	r2, r2, r5
 8007406:	d41e      	bmi.n	8007446 <_malloc_r+0xc6>
 8007408:	2a0b      	cmp	r2, #11
 800740a:	d916      	bls.n	800743a <_malloc_r+0xba>
 800740c:	1961      	adds	r1, r4, r5
 800740e:	42a3      	cmp	r3, r4
 8007410:	6025      	str	r5, [r4, #0]
 8007412:	bf18      	it	ne
 8007414:	6059      	strne	r1, [r3, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	bf08      	it	eq
 800741a:	6031      	streq	r1, [r6, #0]
 800741c:	5162      	str	r2, [r4, r5]
 800741e:	604b      	str	r3, [r1, #4]
 8007420:	4638      	mov	r0, r7
 8007422:	f104 060b 	add.w	r6, r4, #11
 8007426:	f000 fd41 	bl	8007eac <__malloc_unlock>
 800742a:	f026 0607 	bic.w	r6, r6, #7
 800742e:	1d23      	adds	r3, r4, #4
 8007430:	1af2      	subs	r2, r6, r3
 8007432:	d0b6      	beq.n	80073a2 <_malloc_r+0x22>
 8007434:	1b9b      	subs	r3, r3, r6
 8007436:	50a3      	str	r3, [r4, r2]
 8007438:	e7b3      	b.n	80073a2 <_malloc_r+0x22>
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	42a3      	cmp	r3, r4
 800743e:	bf0c      	ite	eq
 8007440:	6032      	streq	r2, [r6, #0]
 8007442:	605a      	strne	r2, [r3, #4]
 8007444:	e7ec      	b.n	8007420 <_malloc_r+0xa0>
 8007446:	4623      	mov	r3, r4
 8007448:	6864      	ldr	r4, [r4, #4]
 800744a:	e7b2      	b.n	80073b2 <_malloc_r+0x32>
 800744c:	4634      	mov	r4, r6
 800744e:	6876      	ldr	r6, [r6, #4]
 8007450:	e7b9      	b.n	80073c6 <_malloc_r+0x46>
 8007452:	230c      	movs	r3, #12
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4638      	mov	r0, r7
 8007458:	f000 fd28 	bl	8007eac <__malloc_unlock>
 800745c:	e7a1      	b.n	80073a2 <_malloc_r+0x22>
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	e7de      	b.n	8007420 <_malloc_r+0xa0>
 8007462:	bf00      	nop
 8007464:	200002d0 	.word	0x200002d0

08007468 <__ssputs_r>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	688e      	ldr	r6, [r1, #8]
 800746e:	429e      	cmp	r6, r3
 8007470:	4682      	mov	sl, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4690      	mov	r8, r2
 8007476:	461f      	mov	r7, r3
 8007478:	d838      	bhi.n	80074ec <__ssputs_r+0x84>
 800747a:	898a      	ldrh	r2, [r1, #12]
 800747c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007480:	d032      	beq.n	80074e8 <__ssputs_r+0x80>
 8007482:	6825      	ldr	r5, [r4, #0]
 8007484:	6909      	ldr	r1, [r1, #16]
 8007486:	eba5 0901 	sub.w	r9, r5, r1
 800748a:	6965      	ldr	r5, [r4, #20]
 800748c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007494:	3301      	adds	r3, #1
 8007496:	444b      	add	r3, r9
 8007498:	106d      	asrs	r5, r5, #1
 800749a:	429d      	cmp	r5, r3
 800749c:	bf38      	it	cc
 800749e:	461d      	movcc	r5, r3
 80074a0:	0553      	lsls	r3, r2, #21
 80074a2:	d531      	bpl.n	8007508 <__ssputs_r+0xa0>
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7ff ff6b 	bl	8007380 <_malloc_r>
 80074aa:	4606      	mov	r6, r0
 80074ac:	b950      	cbnz	r0, 80074c4 <__ssputs_r+0x5c>
 80074ae:	230c      	movs	r3, #12
 80074b0:	f8ca 3000 	str.w	r3, [sl]
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	6921      	ldr	r1, [r4, #16]
 80074c6:	464a      	mov	r2, r9
 80074c8:	f000 fcc2 	bl	8007e50 <memcpy>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	6126      	str	r6, [r4, #16]
 80074da:	6165      	str	r5, [r4, #20]
 80074dc:	444e      	add	r6, r9
 80074de:	eba5 0509 	sub.w	r5, r5, r9
 80074e2:	6026      	str	r6, [r4, #0]
 80074e4:	60a5      	str	r5, [r4, #8]
 80074e6:	463e      	mov	r6, r7
 80074e8:	42be      	cmp	r6, r7
 80074ea:	d900      	bls.n	80074ee <__ssputs_r+0x86>
 80074ec:	463e      	mov	r6, r7
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	4632      	mov	r2, r6
 80074f2:	4641      	mov	r1, r8
 80074f4:	f000 fcba 	bl	8007e6c <memmove>
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	1b9b      	subs	r3, r3, r6
 80074fc:	60a3      	str	r3, [r4, #8]
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	4433      	add	r3, r6
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	2000      	movs	r0, #0
 8007506:	e7db      	b.n	80074c0 <__ssputs_r+0x58>
 8007508:	462a      	mov	r2, r5
 800750a:	f000 fcd5 	bl	8007eb8 <_realloc_r>
 800750e:	4606      	mov	r6, r0
 8007510:	2800      	cmp	r0, #0
 8007512:	d1e1      	bne.n	80074d8 <__ssputs_r+0x70>
 8007514:	6921      	ldr	r1, [r4, #16]
 8007516:	4650      	mov	r0, sl
 8007518:	f7ff fec6 	bl	80072a8 <_free_r>
 800751c:	e7c7      	b.n	80074ae <__ssputs_r+0x46>
	...

08007520 <_svfiprintf_r>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	4698      	mov	r8, r3
 8007526:	898b      	ldrh	r3, [r1, #12]
 8007528:	061b      	lsls	r3, r3, #24
 800752a:	b09d      	sub	sp, #116	; 0x74
 800752c:	4607      	mov	r7, r0
 800752e:	460d      	mov	r5, r1
 8007530:	4614      	mov	r4, r2
 8007532:	d50e      	bpl.n	8007552 <_svfiprintf_r+0x32>
 8007534:	690b      	ldr	r3, [r1, #16]
 8007536:	b963      	cbnz	r3, 8007552 <_svfiprintf_r+0x32>
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	f7ff ff21 	bl	8007380 <_malloc_r>
 800753e:	6028      	str	r0, [r5, #0]
 8007540:	6128      	str	r0, [r5, #16]
 8007542:	b920      	cbnz	r0, 800754e <_svfiprintf_r+0x2e>
 8007544:	230c      	movs	r3, #12
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e0d1      	b.n	80076f2 <_svfiprintf_r+0x1d2>
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	616b      	str	r3, [r5, #20]
 8007552:	2300      	movs	r3, #0
 8007554:	9309      	str	r3, [sp, #36]	; 0x24
 8007556:	2320      	movs	r3, #32
 8007558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800755c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007560:	2330      	movs	r3, #48	; 0x30
 8007562:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800770c <_svfiprintf_r+0x1ec>
 8007566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800756a:	f04f 0901 	mov.w	r9, #1
 800756e:	4623      	mov	r3, r4
 8007570:	469a      	mov	sl, r3
 8007572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007576:	b10a      	cbz	r2, 800757c <_svfiprintf_r+0x5c>
 8007578:	2a25      	cmp	r2, #37	; 0x25
 800757a:	d1f9      	bne.n	8007570 <_svfiprintf_r+0x50>
 800757c:	ebba 0b04 	subs.w	fp, sl, r4
 8007580:	d00b      	beq.n	800759a <_svfiprintf_r+0x7a>
 8007582:	465b      	mov	r3, fp
 8007584:	4622      	mov	r2, r4
 8007586:	4629      	mov	r1, r5
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff ff6d 	bl	8007468 <__ssputs_r>
 800758e:	3001      	adds	r0, #1
 8007590:	f000 80aa 	beq.w	80076e8 <_svfiprintf_r+0x1c8>
 8007594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007596:	445a      	add	r2, fp
 8007598:	9209      	str	r2, [sp, #36]	; 0x24
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80a2 	beq.w	80076e8 <_svfiprintf_r+0x1c8>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ae:	f10a 0a01 	add.w	sl, sl, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9307      	str	r3, [sp, #28]
 80075b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ba:	931a      	str	r3, [sp, #104]	; 0x68
 80075bc:	4654      	mov	r4, sl
 80075be:	2205      	movs	r2, #5
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	4851      	ldr	r0, [pc, #324]	; (800770c <_svfiprintf_r+0x1ec>)
 80075c6:	f7f8 fe1b 	bl	8000200 <memchr>
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	b9d8      	cbnz	r0, 8007606 <_svfiprintf_r+0xe6>
 80075ce:	06d0      	lsls	r0, r2, #27
 80075d0:	bf44      	itt	mi
 80075d2:	2320      	movmi	r3, #32
 80075d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d8:	0711      	lsls	r1, r2, #28
 80075da:	bf44      	itt	mi
 80075dc:	232b      	movmi	r3, #43	; 0x2b
 80075de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e2:	f89a 3000 	ldrb.w	r3, [sl]
 80075e6:	2b2a      	cmp	r3, #42	; 0x2a
 80075e8:	d015      	beq.n	8007616 <_svfiprintf_r+0xf6>
 80075ea:	9a07      	ldr	r2, [sp, #28]
 80075ec:	4654      	mov	r4, sl
 80075ee:	2000      	movs	r0, #0
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4621      	mov	r1, r4
 80075f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fa:	3b30      	subs	r3, #48	; 0x30
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d94e      	bls.n	800769e <_svfiprintf_r+0x17e>
 8007600:	b1b0      	cbz	r0, 8007630 <_svfiprintf_r+0x110>
 8007602:	9207      	str	r2, [sp, #28]
 8007604:	e014      	b.n	8007630 <_svfiprintf_r+0x110>
 8007606:	eba0 0308 	sub.w	r3, r0, r8
 800760a:	fa09 f303 	lsl.w	r3, r9, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	46a2      	mov	sl, r4
 8007614:	e7d2      	b.n	80075bc <_svfiprintf_r+0x9c>
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	1d19      	adds	r1, r3, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	9103      	str	r1, [sp, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfbb      	ittet	lt
 8007622:	425b      	neglt	r3, r3
 8007624:	f042 0202 	orrlt.w	r2, r2, #2
 8007628:	9307      	strge	r3, [sp, #28]
 800762a:	9307      	strlt	r3, [sp, #28]
 800762c:	bfb8      	it	lt
 800762e:	9204      	strlt	r2, [sp, #16]
 8007630:	7823      	ldrb	r3, [r4, #0]
 8007632:	2b2e      	cmp	r3, #46	; 0x2e
 8007634:	d10c      	bne.n	8007650 <_svfiprintf_r+0x130>
 8007636:	7863      	ldrb	r3, [r4, #1]
 8007638:	2b2a      	cmp	r3, #42	; 0x2a
 800763a:	d135      	bne.n	80076a8 <_svfiprintf_r+0x188>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfb8      	it	lt
 8007648:	f04f 33ff 	movlt.w	r3, #4294967295
 800764c:	3402      	adds	r4, #2
 800764e:	9305      	str	r3, [sp, #20]
 8007650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800771c <_svfiprintf_r+0x1fc>
 8007654:	7821      	ldrb	r1, [r4, #0]
 8007656:	2203      	movs	r2, #3
 8007658:	4650      	mov	r0, sl
 800765a:	f7f8 fdd1 	bl	8000200 <memchr>
 800765e:	b140      	cbz	r0, 8007672 <_svfiprintf_r+0x152>
 8007660:	2340      	movs	r3, #64	; 0x40
 8007662:	eba0 000a 	sub.w	r0, r0, sl
 8007666:	fa03 f000 	lsl.w	r0, r3, r0
 800766a:	9b04      	ldr	r3, [sp, #16]
 800766c:	4303      	orrs	r3, r0
 800766e:	3401      	adds	r4, #1
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007676:	4826      	ldr	r0, [pc, #152]	; (8007710 <_svfiprintf_r+0x1f0>)
 8007678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800767c:	2206      	movs	r2, #6
 800767e:	f7f8 fdbf 	bl	8000200 <memchr>
 8007682:	2800      	cmp	r0, #0
 8007684:	d038      	beq.n	80076f8 <_svfiprintf_r+0x1d8>
 8007686:	4b23      	ldr	r3, [pc, #140]	; (8007714 <_svfiprintf_r+0x1f4>)
 8007688:	bb1b      	cbnz	r3, 80076d2 <_svfiprintf_r+0x1b2>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	3307      	adds	r3, #7
 800768e:	f023 0307 	bic.w	r3, r3, #7
 8007692:	3308      	adds	r3, #8
 8007694:	9303      	str	r3, [sp, #12]
 8007696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007698:	4433      	add	r3, r6
 800769a:	9309      	str	r3, [sp, #36]	; 0x24
 800769c:	e767      	b.n	800756e <_svfiprintf_r+0x4e>
 800769e:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a2:	460c      	mov	r4, r1
 80076a4:	2001      	movs	r0, #1
 80076a6:	e7a5      	b.n	80075f4 <_svfiprintf_r+0xd4>
 80076a8:	2300      	movs	r3, #0
 80076aa:	3401      	adds	r4, #1
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	4619      	mov	r1, r3
 80076b0:	f04f 0c0a 	mov.w	ip, #10
 80076b4:	4620      	mov	r0, r4
 80076b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ba:	3a30      	subs	r2, #48	; 0x30
 80076bc:	2a09      	cmp	r2, #9
 80076be:	d903      	bls.n	80076c8 <_svfiprintf_r+0x1a8>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0c5      	beq.n	8007650 <_svfiprintf_r+0x130>
 80076c4:	9105      	str	r1, [sp, #20]
 80076c6:	e7c3      	b.n	8007650 <_svfiprintf_r+0x130>
 80076c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076cc:	4604      	mov	r4, r0
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7f0      	b.n	80076b4 <_svfiprintf_r+0x194>
 80076d2:	ab03      	add	r3, sp, #12
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	462a      	mov	r2, r5
 80076d8:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <_svfiprintf_r+0x1f8>)
 80076da:	a904      	add	r1, sp, #16
 80076dc:	4638      	mov	r0, r7
 80076de:	f3af 8000 	nop.w
 80076e2:	1c42      	adds	r2, r0, #1
 80076e4:	4606      	mov	r6, r0
 80076e6:	d1d6      	bne.n	8007696 <_svfiprintf_r+0x176>
 80076e8:	89ab      	ldrh	r3, [r5, #12]
 80076ea:	065b      	lsls	r3, r3, #25
 80076ec:	f53f af2c 	bmi.w	8007548 <_svfiprintf_r+0x28>
 80076f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f2:	b01d      	add	sp, #116	; 0x74
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	462a      	mov	r2, r5
 80076fe:	4b06      	ldr	r3, [pc, #24]	; (8007718 <_svfiprintf_r+0x1f8>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	4638      	mov	r0, r7
 8007704:	f000 f9d4 	bl	8007ab0 <_printf_i>
 8007708:	e7eb      	b.n	80076e2 <_svfiprintf_r+0x1c2>
 800770a:	bf00      	nop
 800770c:	08008168 	.word	0x08008168
 8007710:	08008172 	.word	0x08008172
 8007714:	00000000 	.word	0x00000000
 8007718:	08007469 	.word	0x08007469
 800771c:	0800816e 	.word	0x0800816e

08007720 <__sfputc_r>:
 8007720:	6893      	ldr	r3, [r2, #8]
 8007722:	3b01      	subs	r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	b410      	push	{r4}
 8007728:	6093      	str	r3, [r2, #8]
 800772a:	da08      	bge.n	800773e <__sfputc_r+0x1e>
 800772c:	6994      	ldr	r4, [r2, #24]
 800772e:	42a3      	cmp	r3, r4
 8007730:	db01      	blt.n	8007736 <__sfputc_r+0x16>
 8007732:	290a      	cmp	r1, #10
 8007734:	d103      	bne.n	800773e <__sfputc_r+0x1e>
 8007736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773a:	f7ff bad5 	b.w	8006ce8 <__swbuf_r>
 800773e:	6813      	ldr	r3, [r2, #0]
 8007740:	1c58      	adds	r0, r3, #1
 8007742:	6010      	str	r0, [r2, #0]
 8007744:	7019      	strb	r1, [r3, #0]
 8007746:	4608      	mov	r0, r1
 8007748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800774c:	4770      	bx	lr

0800774e <__sfputs_r>:
 800774e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007750:	4606      	mov	r6, r0
 8007752:	460f      	mov	r7, r1
 8007754:	4614      	mov	r4, r2
 8007756:	18d5      	adds	r5, r2, r3
 8007758:	42ac      	cmp	r4, r5
 800775a:	d101      	bne.n	8007760 <__sfputs_r+0x12>
 800775c:	2000      	movs	r0, #0
 800775e:	e007      	b.n	8007770 <__sfputs_r+0x22>
 8007760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007764:	463a      	mov	r2, r7
 8007766:	4630      	mov	r0, r6
 8007768:	f7ff ffda 	bl	8007720 <__sfputc_r>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d1f3      	bne.n	8007758 <__sfputs_r+0xa>
 8007770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007774 <_vfiprintf_r>:
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	460d      	mov	r5, r1
 800777a:	b09d      	sub	sp, #116	; 0x74
 800777c:	4614      	mov	r4, r2
 800777e:	4698      	mov	r8, r3
 8007780:	4606      	mov	r6, r0
 8007782:	b118      	cbz	r0, 800778c <_vfiprintf_r+0x18>
 8007784:	6983      	ldr	r3, [r0, #24]
 8007786:	b90b      	cbnz	r3, 800778c <_vfiprintf_r+0x18>
 8007788:	f7ff fc88 	bl	800709c <__sinit>
 800778c:	4b89      	ldr	r3, [pc, #548]	; (80079b4 <_vfiprintf_r+0x240>)
 800778e:	429d      	cmp	r5, r3
 8007790:	d11b      	bne.n	80077ca <_vfiprintf_r+0x56>
 8007792:	6875      	ldr	r5, [r6, #4]
 8007794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	d405      	bmi.n	80077a6 <_vfiprintf_r+0x32>
 800779a:	89ab      	ldrh	r3, [r5, #12]
 800779c:	059a      	lsls	r2, r3, #22
 800779e:	d402      	bmi.n	80077a6 <_vfiprintf_r+0x32>
 80077a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077a2:	f7ff fd19 	bl	80071d8 <__retarget_lock_acquire_recursive>
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	071b      	lsls	r3, r3, #28
 80077aa:	d501      	bpl.n	80077b0 <_vfiprintf_r+0x3c>
 80077ac:	692b      	ldr	r3, [r5, #16]
 80077ae:	b9eb      	cbnz	r3, 80077ec <_vfiprintf_r+0x78>
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff faea 	bl	8006d8c <__swsetup_r>
 80077b8:	b1c0      	cbz	r0, 80077ec <_vfiprintf_r+0x78>
 80077ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077bc:	07dc      	lsls	r4, r3, #31
 80077be:	d50e      	bpl.n	80077de <_vfiprintf_r+0x6a>
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	b01d      	add	sp, #116	; 0x74
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	4b7b      	ldr	r3, [pc, #492]	; (80079b8 <_vfiprintf_r+0x244>)
 80077cc:	429d      	cmp	r5, r3
 80077ce:	d101      	bne.n	80077d4 <_vfiprintf_r+0x60>
 80077d0:	68b5      	ldr	r5, [r6, #8]
 80077d2:	e7df      	b.n	8007794 <_vfiprintf_r+0x20>
 80077d4:	4b79      	ldr	r3, [pc, #484]	; (80079bc <_vfiprintf_r+0x248>)
 80077d6:	429d      	cmp	r5, r3
 80077d8:	bf08      	it	eq
 80077da:	68f5      	ldreq	r5, [r6, #12]
 80077dc:	e7da      	b.n	8007794 <_vfiprintf_r+0x20>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	0598      	lsls	r0, r3, #22
 80077e2:	d4ed      	bmi.n	80077c0 <_vfiprintf_r+0x4c>
 80077e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e6:	f7ff fcf8 	bl	80071da <__retarget_lock_release_recursive>
 80077ea:	e7e9      	b.n	80077c0 <_vfiprintf_r+0x4c>
 80077ec:	2300      	movs	r3, #0
 80077ee:	9309      	str	r3, [sp, #36]	; 0x24
 80077f0:	2320      	movs	r3, #32
 80077f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077fa:	2330      	movs	r3, #48	; 0x30
 80077fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079c0 <_vfiprintf_r+0x24c>
 8007800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007804:	f04f 0901 	mov.w	r9, #1
 8007808:	4623      	mov	r3, r4
 800780a:	469a      	mov	sl, r3
 800780c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007810:	b10a      	cbz	r2, 8007816 <_vfiprintf_r+0xa2>
 8007812:	2a25      	cmp	r2, #37	; 0x25
 8007814:	d1f9      	bne.n	800780a <_vfiprintf_r+0x96>
 8007816:	ebba 0b04 	subs.w	fp, sl, r4
 800781a:	d00b      	beq.n	8007834 <_vfiprintf_r+0xc0>
 800781c:	465b      	mov	r3, fp
 800781e:	4622      	mov	r2, r4
 8007820:	4629      	mov	r1, r5
 8007822:	4630      	mov	r0, r6
 8007824:	f7ff ff93 	bl	800774e <__sfputs_r>
 8007828:	3001      	adds	r0, #1
 800782a:	f000 80aa 	beq.w	8007982 <_vfiprintf_r+0x20e>
 800782e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007830:	445a      	add	r2, fp
 8007832:	9209      	str	r2, [sp, #36]	; 0x24
 8007834:	f89a 3000 	ldrb.w	r3, [sl]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a2 	beq.w	8007982 <_vfiprintf_r+0x20e>
 800783e:	2300      	movs	r3, #0
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007848:	f10a 0a01 	add.w	sl, sl, #1
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007854:	931a      	str	r3, [sp, #104]	; 0x68
 8007856:	4654      	mov	r4, sl
 8007858:	2205      	movs	r2, #5
 800785a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785e:	4858      	ldr	r0, [pc, #352]	; (80079c0 <_vfiprintf_r+0x24c>)
 8007860:	f7f8 fcce 	bl	8000200 <memchr>
 8007864:	9a04      	ldr	r2, [sp, #16]
 8007866:	b9d8      	cbnz	r0, 80078a0 <_vfiprintf_r+0x12c>
 8007868:	06d1      	lsls	r1, r2, #27
 800786a:	bf44      	itt	mi
 800786c:	2320      	movmi	r3, #32
 800786e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007872:	0713      	lsls	r3, r2, #28
 8007874:	bf44      	itt	mi
 8007876:	232b      	movmi	r3, #43	; 0x2b
 8007878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800787c:	f89a 3000 	ldrb.w	r3, [sl]
 8007880:	2b2a      	cmp	r3, #42	; 0x2a
 8007882:	d015      	beq.n	80078b0 <_vfiprintf_r+0x13c>
 8007884:	9a07      	ldr	r2, [sp, #28]
 8007886:	4654      	mov	r4, sl
 8007888:	2000      	movs	r0, #0
 800788a:	f04f 0c0a 	mov.w	ip, #10
 800788e:	4621      	mov	r1, r4
 8007890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007894:	3b30      	subs	r3, #48	; 0x30
 8007896:	2b09      	cmp	r3, #9
 8007898:	d94e      	bls.n	8007938 <_vfiprintf_r+0x1c4>
 800789a:	b1b0      	cbz	r0, 80078ca <_vfiprintf_r+0x156>
 800789c:	9207      	str	r2, [sp, #28]
 800789e:	e014      	b.n	80078ca <_vfiprintf_r+0x156>
 80078a0:	eba0 0308 	sub.w	r3, r0, r8
 80078a4:	fa09 f303 	lsl.w	r3, r9, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	46a2      	mov	sl, r4
 80078ae:	e7d2      	b.n	8007856 <_vfiprintf_r+0xe2>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	1d19      	adds	r1, r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	9103      	str	r1, [sp, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfbb      	ittet	lt
 80078bc:	425b      	neglt	r3, r3
 80078be:	f042 0202 	orrlt.w	r2, r2, #2
 80078c2:	9307      	strge	r3, [sp, #28]
 80078c4:	9307      	strlt	r3, [sp, #28]
 80078c6:	bfb8      	it	lt
 80078c8:	9204      	strlt	r2, [sp, #16]
 80078ca:	7823      	ldrb	r3, [r4, #0]
 80078cc:	2b2e      	cmp	r3, #46	; 0x2e
 80078ce:	d10c      	bne.n	80078ea <_vfiprintf_r+0x176>
 80078d0:	7863      	ldrb	r3, [r4, #1]
 80078d2:	2b2a      	cmp	r3, #42	; 0x2a
 80078d4:	d135      	bne.n	8007942 <_vfiprintf_r+0x1ce>
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	1d1a      	adds	r2, r3, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	9203      	str	r2, [sp, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfb8      	it	lt
 80078e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078e6:	3402      	adds	r4, #2
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079d0 <_vfiprintf_r+0x25c>
 80078ee:	7821      	ldrb	r1, [r4, #0]
 80078f0:	2203      	movs	r2, #3
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7f8 fc84 	bl	8000200 <memchr>
 80078f8:	b140      	cbz	r0, 800790c <_vfiprintf_r+0x198>
 80078fa:	2340      	movs	r3, #64	; 0x40
 80078fc:	eba0 000a 	sub.w	r0, r0, sl
 8007900:	fa03 f000 	lsl.w	r0, r3, r0
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	4303      	orrs	r3, r0
 8007908:	3401      	adds	r4, #1
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007910:	482c      	ldr	r0, [pc, #176]	; (80079c4 <_vfiprintf_r+0x250>)
 8007912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007916:	2206      	movs	r2, #6
 8007918:	f7f8 fc72 	bl	8000200 <memchr>
 800791c:	2800      	cmp	r0, #0
 800791e:	d03f      	beq.n	80079a0 <_vfiprintf_r+0x22c>
 8007920:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <_vfiprintf_r+0x254>)
 8007922:	bb1b      	cbnz	r3, 800796c <_vfiprintf_r+0x1f8>
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	3307      	adds	r3, #7
 8007928:	f023 0307 	bic.w	r3, r3, #7
 800792c:	3308      	adds	r3, #8
 800792e:	9303      	str	r3, [sp, #12]
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	443b      	add	r3, r7
 8007934:	9309      	str	r3, [sp, #36]	; 0x24
 8007936:	e767      	b.n	8007808 <_vfiprintf_r+0x94>
 8007938:	fb0c 3202 	mla	r2, ip, r2, r3
 800793c:	460c      	mov	r4, r1
 800793e:	2001      	movs	r0, #1
 8007940:	e7a5      	b.n	800788e <_vfiprintf_r+0x11a>
 8007942:	2300      	movs	r3, #0
 8007944:	3401      	adds	r4, #1
 8007946:	9305      	str	r3, [sp, #20]
 8007948:	4619      	mov	r1, r3
 800794a:	f04f 0c0a 	mov.w	ip, #10
 800794e:	4620      	mov	r0, r4
 8007950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007954:	3a30      	subs	r2, #48	; 0x30
 8007956:	2a09      	cmp	r2, #9
 8007958:	d903      	bls.n	8007962 <_vfiprintf_r+0x1ee>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0c5      	beq.n	80078ea <_vfiprintf_r+0x176>
 800795e:	9105      	str	r1, [sp, #20]
 8007960:	e7c3      	b.n	80078ea <_vfiprintf_r+0x176>
 8007962:	fb0c 2101 	mla	r1, ip, r1, r2
 8007966:	4604      	mov	r4, r0
 8007968:	2301      	movs	r3, #1
 800796a:	e7f0      	b.n	800794e <_vfiprintf_r+0x1da>
 800796c:	ab03      	add	r3, sp, #12
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462a      	mov	r2, r5
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <_vfiprintf_r+0x258>)
 8007974:	a904      	add	r1, sp, #16
 8007976:	4630      	mov	r0, r6
 8007978:	f3af 8000 	nop.w
 800797c:	4607      	mov	r7, r0
 800797e:	1c78      	adds	r0, r7, #1
 8007980:	d1d6      	bne.n	8007930 <_vfiprintf_r+0x1bc>
 8007982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007984:	07d9      	lsls	r1, r3, #31
 8007986:	d405      	bmi.n	8007994 <_vfiprintf_r+0x220>
 8007988:	89ab      	ldrh	r3, [r5, #12]
 800798a:	059a      	lsls	r2, r3, #22
 800798c:	d402      	bmi.n	8007994 <_vfiprintf_r+0x220>
 800798e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007990:	f7ff fc23 	bl	80071da <__retarget_lock_release_recursive>
 8007994:	89ab      	ldrh	r3, [r5, #12]
 8007996:	065b      	lsls	r3, r3, #25
 8007998:	f53f af12 	bmi.w	80077c0 <_vfiprintf_r+0x4c>
 800799c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799e:	e711      	b.n	80077c4 <_vfiprintf_r+0x50>
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	462a      	mov	r2, r5
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <_vfiprintf_r+0x258>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4630      	mov	r0, r6
 80079ac:	f000 f880 	bl	8007ab0 <_printf_i>
 80079b0:	e7e4      	b.n	800797c <_vfiprintf_r+0x208>
 80079b2:	bf00      	nop
 80079b4:	08008128 	.word	0x08008128
 80079b8:	08008148 	.word	0x08008148
 80079bc:	08008108 	.word	0x08008108
 80079c0:	08008168 	.word	0x08008168
 80079c4:	08008172 	.word	0x08008172
 80079c8:	00000000 	.word	0x00000000
 80079cc:	0800774f 	.word	0x0800774f
 80079d0:	0800816e 	.word	0x0800816e

080079d4 <_printf_common>:
 80079d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	4616      	mov	r6, r2
 80079da:	4699      	mov	r9, r3
 80079dc:	688a      	ldr	r2, [r1, #8]
 80079de:	690b      	ldr	r3, [r1, #16]
 80079e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	bfb8      	it	lt
 80079e8:	4613      	movlt	r3, r2
 80079ea:	6033      	str	r3, [r6, #0]
 80079ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f0:	4607      	mov	r7, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	b10a      	cbz	r2, 80079fa <_printf_common+0x26>
 80079f6:	3301      	adds	r3, #1
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	0699      	lsls	r1, r3, #26
 80079fe:	bf42      	ittt	mi
 8007a00:	6833      	ldrmi	r3, [r6, #0]
 8007a02:	3302      	addmi	r3, #2
 8007a04:	6033      	strmi	r3, [r6, #0]
 8007a06:	6825      	ldr	r5, [r4, #0]
 8007a08:	f015 0506 	ands.w	r5, r5, #6
 8007a0c:	d106      	bne.n	8007a1c <_printf_common+0x48>
 8007a0e:	f104 0a19 	add.w	sl, r4, #25
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	6832      	ldr	r2, [r6, #0]
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	42ab      	cmp	r3, r5
 8007a1a:	dc26      	bgt.n	8007a6a <_printf_common+0x96>
 8007a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a20:	1e13      	subs	r3, r2, #0
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	bf18      	it	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	0692      	lsls	r2, r2, #26
 8007a2a:	d42b      	bmi.n	8007a84 <_printf_common+0xb0>
 8007a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a30:	4649      	mov	r1, r9
 8007a32:	4638      	mov	r0, r7
 8007a34:	47c0      	blx	r8
 8007a36:	3001      	adds	r0, #1
 8007a38:	d01e      	beq.n	8007a78 <_printf_common+0xa4>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	68e5      	ldr	r5, [r4, #12]
 8007a3e:	6832      	ldr	r2, [r6, #0]
 8007a40:	f003 0306 	and.w	r3, r3, #6
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	bf08      	it	eq
 8007a48:	1aad      	subeq	r5, r5, r2
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	bf0c      	ite	eq
 8007a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a54:	2500      	movne	r5, #0
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bfc4      	itt	gt
 8007a5a:	1a9b      	subgt	r3, r3, r2
 8007a5c:	18ed      	addgt	r5, r5, r3
 8007a5e:	2600      	movs	r6, #0
 8007a60:	341a      	adds	r4, #26
 8007a62:	42b5      	cmp	r5, r6
 8007a64:	d11a      	bne.n	8007a9c <_printf_common+0xc8>
 8007a66:	2000      	movs	r0, #0
 8007a68:	e008      	b.n	8007a7c <_printf_common+0xa8>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4652      	mov	r2, sl
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4638      	mov	r0, r7
 8007a72:	47c0      	blx	r8
 8007a74:	3001      	adds	r0, #1
 8007a76:	d103      	bne.n	8007a80 <_printf_common+0xac>
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a80:	3501      	adds	r5, #1
 8007a82:	e7c6      	b.n	8007a12 <_printf_common+0x3e>
 8007a84:	18e1      	adds	r1, r4, r3
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	2030      	movs	r0, #48	; 0x30
 8007a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a8e:	4422      	add	r2, r4
 8007a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a98:	3302      	adds	r3, #2
 8007a9a:	e7c7      	b.n	8007a2c <_printf_common+0x58>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c0      	blx	r8
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d0e6      	beq.n	8007a78 <_printf_common+0xa4>
 8007aaa:	3601      	adds	r6, #1
 8007aac:	e7d9      	b.n	8007a62 <_printf_common+0x8e>
	...

08007ab0 <_printf_i>:
 8007ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab4:	7e0f      	ldrb	r7, [r1, #24]
 8007ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ab8:	2f78      	cmp	r7, #120	; 0x78
 8007aba:	4691      	mov	r9, r2
 8007abc:	4680      	mov	r8, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	469a      	mov	sl, r3
 8007ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ac6:	d807      	bhi.n	8007ad8 <_printf_i+0x28>
 8007ac8:	2f62      	cmp	r7, #98	; 0x62
 8007aca:	d80a      	bhi.n	8007ae2 <_printf_i+0x32>
 8007acc:	2f00      	cmp	r7, #0
 8007ace:	f000 80d8 	beq.w	8007c82 <_printf_i+0x1d2>
 8007ad2:	2f58      	cmp	r7, #88	; 0x58
 8007ad4:	f000 80a3 	beq.w	8007c1e <_printf_i+0x16e>
 8007ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ae0:	e03a      	b.n	8007b58 <_printf_i+0xa8>
 8007ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ae6:	2b15      	cmp	r3, #21
 8007ae8:	d8f6      	bhi.n	8007ad8 <_printf_i+0x28>
 8007aea:	a101      	add	r1, pc, #4	; (adr r1, 8007af0 <_printf_i+0x40>)
 8007aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007af0:	08007b49 	.word	0x08007b49
 8007af4:	08007b5d 	.word	0x08007b5d
 8007af8:	08007ad9 	.word	0x08007ad9
 8007afc:	08007ad9 	.word	0x08007ad9
 8007b00:	08007ad9 	.word	0x08007ad9
 8007b04:	08007ad9 	.word	0x08007ad9
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007ad9 	.word	0x08007ad9
 8007b10:	08007ad9 	.word	0x08007ad9
 8007b14:	08007ad9 	.word	0x08007ad9
 8007b18:	08007ad9 	.word	0x08007ad9
 8007b1c:	08007c69 	.word	0x08007c69
 8007b20:	08007b8d 	.word	0x08007b8d
 8007b24:	08007c4b 	.word	0x08007c4b
 8007b28:	08007ad9 	.word	0x08007ad9
 8007b2c:	08007ad9 	.word	0x08007ad9
 8007b30:	08007c8b 	.word	0x08007c8b
 8007b34:	08007ad9 	.word	0x08007ad9
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007ad9 	.word	0x08007ad9
 8007b40:	08007ad9 	.word	0x08007ad9
 8007b44:	08007c53 	.word	0x08007c53
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	1d1a      	adds	r2, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	602a      	str	r2, [r5, #0]
 8007b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0a3      	b.n	8007ca4 <_printf_i+0x1f4>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	6829      	ldr	r1, [r5, #0]
 8007b60:	0606      	lsls	r6, r0, #24
 8007b62:	f101 0304 	add.w	r3, r1, #4
 8007b66:	d50a      	bpl.n	8007b7e <_printf_i+0xce>
 8007b68:	680e      	ldr	r6, [r1, #0]
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	da03      	bge.n	8007b78 <_printf_i+0xc8>
 8007b70:	232d      	movs	r3, #45	; 0x2d
 8007b72:	4276      	negs	r6, r6
 8007b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b78:	485e      	ldr	r0, [pc, #376]	; (8007cf4 <_printf_i+0x244>)
 8007b7a:	230a      	movs	r3, #10
 8007b7c:	e019      	b.n	8007bb2 <_printf_i+0x102>
 8007b7e:	680e      	ldr	r6, [r1, #0]
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b86:	bf18      	it	ne
 8007b88:	b236      	sxthne	r6, r6
 8007b8a:	e7ef      	b.n	8007b6c <_printf_i+0xbc>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	6820      	ldr	r0, [r4, #0]
 8007b90:	1d19      	adds	r1, r3, #4
 8007b92:	6029      	str	r1, [r5, #0]
 8007b94:	0601      	lsls	r1, r0, #24
 8007b96:	d501      	bpl.n	8007b9c <_printf_i+0xec>
 8007b98:	681e      	ldr	r6, [r3, #0]
 8007b9a:	e002      	b.n	8007ba2 <_printf_i+0xf2>
 8007b9c:	0646      	lsls	r6, r0, #25
 8007b9e:	d5fb      	bpl.n	8007b98 <_printf_i+0xe8>
 8007ba0:	881e      	ldrh	r6, [r3, #0]
 8007ba2:	4854      	ldr	r0, [pc, #336]	; (8007cf4 <_printf_i+0x244>)
 8007ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2308      	moveq	r3, #8
 8007baa:	230a      	movne	r3, #10
 8007bac:	2100      	movs	r1, #0
 8007bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb2:	6865      	ldr	r5, [r4, #4]
 8007bb4:	60a5      	str	r5, [r4, #8]
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	bfa2      	ittt	ge
 8007bba:	6821      	ldrge	r1, [r4, #0]
 8007bbc:	f021 0104 	bicge.w	r1, r1, #4
 8007bc0:	6021      	strge	r1, [r4, #0]
 8007bc2:	b90e      	cbnz	r6, 8007bc8 <_printf_i+0x118>
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	d04d      	beq.n	8007c64 <_printf_i+0x1b4>
 8007bc8:	4615      	mov	r5, r2
 8007bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bce:	fb03 6711 	mls	r7, r3, r1, r6
 8007bd2:	5dc7      	ldrb	r7, [r0, r7]
 8007bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bd8:	4637      	mov	r7, r6
 8007bda:	42bb      	cmp	r3, r7
 8007bdc:	460e      	mov	r6, r1
 8007bde:	d9f4      	bls.n	8007bca <_printf_i+0x11a>
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d10b      	bne.n	8007bfc <_printf_i+0x14c>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	07de      	lsls	r6, r3, #31
 8007be8:	d508      	bpl.n	8007bfc <_printf_i+0x14c>
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6861      	ldr	r1, [r4, #4]
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	bfde      	ittt	le
 8007bf2:	2330      	movle	r3, #48	; 0x30
 8007bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bfc:	1b52      	subs	r2, r2, r5
 8007bfe:	6122      	str	r2, [r4, #16]
 8007c00:	f8cd a000 	str.w	sl, [sp]
 8007c04:	464b      	mov	r3, r9
 8007c06:	aa03      	add	r2, sp, #12
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7ff fee2 	bl	80079d4 <_printf_common>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d14c      	bne.n	8007cae <_printf_i+0x1fe>
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	b004      	add	sp, #16
 8007c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1e:	4835      	ldr	r0, [pc, #212]	; (8007cf4 <_printf_i+0x244>)
 8007c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c24:	6829      	ldr	r1, [r5, #0]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c2c:	6029      	str	r1, [r5, #0]
 8007c2e:	061d      	lsls	r5, r3, #24
 8007c30:	d514      	bpl.n	8007c5c <_printf_i+0x1ac>
 8007c32:	07df      	lsls	r7, r3, #31
 8007c34:	bf44      	itt	mi
 8007c36:	f043 0320 	orrmi.w	r3, r3, #32
 8007c3a:	6023      	strmi	r3, [r4, #0]
 8007c3c:	b91e      	cbnz	r6, 8007c46 <_printf_i+0x196>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	f023 0320 	bic.w	r3, r3, #32
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	2310      	movs	r3, #16
 8007c48:	e7b0      	b.n	8007bac <_printf_i+0xfc>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	2378      	movs	r3, #120	; 0x78
 8007c54:	4828      	ldr	r0, [pc, #160]	; (8007cf8 <_printf_i+0x248>)
 8007c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c5a:	e7e3      	b.n	8007c24 <_printf_i+0x174>
 8007c5c:	0659      	lsls	r1, r3, #25
 8007c5e:	bf48      	it	mi
 8007c60:	b2b6      	uxthmi	r6, r6
 8007c62:	e7e6      	b.n	8007c32 <_printf_i+0x182>
 8007c64:	4615      	mov	r5, r2
 8007c66:	e7bb      	b.n	8007be0 <_printf_i+0x130>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	6826      	ldr	r6, [r4, #0]
 8007c6c:	6961      	ldr	r1, [r4, #20]
 8007c6e:	1d18      	adds	r0, r3, #4
 8007c70:	6028      	str	r0, [r5, #0]
 8007c72:	0635      	lsls	r5, r6, #24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	d501      	bpl.n	8007c7c <_printf_i+0x1cc>
 8007c78:	6019      	str	r1, [r3, #0]
 8007c7a:	e002      	b.n	8007c82 <_printf_i+0x1d2>
 8007c7c:	0670      	lsls	r0, r6, #25
 8007c7e:	d5fb      	bpl.n	8007c78 <_printf_i+0x1c8>
 8007c80:	8019      	strh	r1, [r3, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	4615      	mov	r5, r2
 8007c88:	e7ba      	b.n	8007c00 <_printf_i+0x150>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	1d1a      	adds	r2, r3, #4
 8007c8e:	602a      	str	r2, [r5, #0]
 8007c90:	681d      	ldr	r5, [r3, #0]
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	2100      	movs	r1, #0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f7f8 fab2 	bl	8000200 <memchr>
 8007c9c:	b108      	cbz	r0, 8007ca2 <_printf_i+0x1f2>
 8007c9e:	1b40      	subs	r0, r0, r5
 8007ca0:	6060      	str	r0, [r4, #4]
 8007ca2:	6863      	ldr	r3, [r4, #4]
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cac:	e7a8      	b.n	8007c00 <_printf_i+0x150>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d0ab      	beq.n	8007c14 <_printf_i+0x164>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	079b      	lsls	r3, r3, #30
 8007cc0:	d413      	bmi.n	8007cea <_printf_i+0x23a>
 8007cc2:	68e0      	ldr	r0, [r4, #12]
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	4298      	cmp	r0, r3
 8007cc8:	bfb8      	it	lt
 8007cca:	4618      	movlt	r0, r3
 8007ccc:	e7a4      	b.n	8007c18 <_printf_i+0x168>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	47d0      	blx	sl
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d09b      	beq.n	8007c14 <_printf_i+0x164>
 8007cdc:	3501      	adds	r5, #1
 8007cde:	68e3      	ldr	r3, [r4, #12]
 8007ce0:	9903      	ldr	r1, [sp, #12]
 8007ce2:	1a5b      	subs	r3, r3, r1
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dcf2      	bgt.n	8007cce <_printf_i+0x21e>
 8007ce8:	e7eb      	b.n	8007cc2 <_printf_i+0x212>
 8007cea:	2500      	movs	r5, #0
 8007cec:	f104 0619 	add.w	r6, r4, #25
 8007cf0:	e7f5      	b.n	8007cde <_printf_i+0x22e>
 8007cf2:	bf00      	nop
 8007cf4:	08008179 	.word	0x08008179
 8007cf8:	0800818a 	.word	0x0800818a

08007cfc <_sbrk_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d06      	ldr	r5, [pc, #24]	; (8007d18 <_sbrk_r+0x1c>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7fa fa30 	bl	800216c <_sbrk>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_sbrk_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_sbrk_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	200002d8 	.word	0x200002d8

08007d1c <__sread>:
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	460c      	mov	r4, r1
 8007d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d24:	f000 f8f8 	bl	8007f18 <_read_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	bfab      	itete	ge
 8007d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d30:	181b      	addge	r3, r3, r0
 8007d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d36:	bfac      	ite	ge
 8007d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d3a:	81a3      	strhlt	r3, [r4, #12]
 8007d3c:	bd10      	pop	{r4, pc}

08007d3e <__swrite>:
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	461f      	mov	r7, r3
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	05db      	lsls	r3, r3, #23
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	d505      	bpl.n	8007d5c <__swrite+0x1e>
 8007d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d54:	2302      	movs	r3, #2
 8007d56:	2200      	movs	r2, #0
 8007d58:	f000 f868 	bl	8007e2c <_lseek_r>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	f000 b817 	b.w	8007da4 <_write_r>

08007d76 <__sseek>:
 8007d76:	b510      	push	{r4, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7e:	f000 f855 	bl	8007e2c <_lseek_r>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	bf15      	itete	ne
 8007d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d92:	81a3      	strheq	r3, [r4, #12]
 8007d94:	bf18      	it	ne
 8007d96:	81a3      	strhne	r3, [r4, #12]
 8007d98:	bd10      	pop	{r4, pc}

08007d9a <__sclose>:
 8007d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9e:	f000 b813 	b.w	8007dc8 <_close_r>
	...

08007da4 <_write_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	; (8007dc4 <_write_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7fa f989 	bl	80020ca <_write>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_write_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_write_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	200002d8 	.word	0x200002d8

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7fa f995 	bl	8002102 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200002d8 	.word	0x200002d8

08007de8 <_fstat_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_fstat_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7fa f990 	bl	800211a <_fstat>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_fstat_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_fstat_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	200002d8 	.word	0x200002d8

08007e0c <_isatty_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_isatty_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7fa f98f 	bl	800213a <_isatty>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_isatty_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_isatty_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	200002d8 	.word	0x200002d8

08007e2c <_lseek_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_lseek_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7fa f988 	bl	8002150 <_lseek>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_lseek_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_lseek_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	200002d8 	.word	0x200002d8

08007e50 <memcpy>:
 8007e50:	440a      	add	r2, r1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e58:	d100      	bne.n	8007e5c <memcpy+0xc>
 8007e5a:	4770      	bx	lr
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e66:	4291      	cmp	r1, r2
 8007e68:	d1f9      	bne.n	8007e5e <memcpy+0xe>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <memmove>:
 8007e6c:	4288      	cmp	r0, r1
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	eb01 0402 	add.w	r4, r1, r2
 8007e74:	d902      	bls.n	8007e7c <memmove+0x10>
 8007e76:	4284      	cmp	r4, r0
 8007e78:	4623      	mov	r3, r4
 8007e7a:	d807      	bhi.n	8007e8c <memmove+0x20>
 8007e7c:	1e43      	subs	r3, r0, #1
 8007e7e:	42a1      	cmp	r1, r4
 8007e80:	d008      	beq.n	8007e94 <memmove+0x28>
 8007e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e8a:	e7f8      	b.n	8007e7e <memmove+0x12>
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4601      	mov	r1, r0
 8007e90:	428a      	cmp	r2, r1
 8007e92:	d100      	bne.n	8007e96 <memmove+0x2a>
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e9e:	e7f7      	b.n	8007e90 <memmove+0x24>

08007ea0 <__malloc_lock>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__malloc_lock+0x8>)
 8007ea2:	f7ff b999 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	200002cc 	.word	0x200002cc

08007eac <__malloc_unlock>:
 8007eac:	4801      	ldr	r0, [pc, #4]	; (8007eb4 <__malloc_unlock+0x8>)
 8007eae:	f7ff b994 	b.w	80071da <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200002cc 	.word	0x200002cc

08007eb8 <_realloc_r>:
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	460e      	mov	r6, r1
 8007ec2:	b921      	cbnz	r1, 8007ece <_realloc_r+0x16>
 8007ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f7ff ba59 	b.w	8007380 <_malloc_r>
 8007ece:	b92a      	cbnz	r2, 8007edc <_realloc_r+0x24>
 8007ed0:	f7ff f9ea 	bl	80072a8 <_free_r>
 8007ed4:	4625      	mov	r5, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	f000 f82e 	bl	8007f3c <_malloc_usable_size_r>
 8007ee0:	4284      	cmp	r4, r0
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	d802      	bhi.n	8007eec <_realloc_r+0x34>
 8007ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eea:	d812      	bhi.n	8007f12 <_realloc_r+0x5a>
 8007eec:	4621      	mov	r1, r4
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7ff fa46 	bl	8007380 <_malloc_r>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0ed      	beq.n	8007ed6 <_realloc_r+0x1e>
 8007efa:	42bc      	cmp	r4, r7
 8007efc:	4622      	mov	r2, r4
 8007efe:	4631      	mov	r1, r6
 8007f00:	bf28      	it	cs
 8007f02:	463a      	movcs	r2, r7
 8007f04:	f7ff ffa4 	bl	8007e50 <memcpy>
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff f9cc 	bl	80072a8 <_free_r>
 8007f10:	e7e1      	b.n	8007ed6 <_realloc_r+0x1e>
 8007f12:	4635      	mov	r5, r6
 8007f14:	e7df      	b.n	8007ed6 <_realloc_r+0x1e>
	...

08007f18 <_read_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d07      	ldr	r5, [pc, #28]	; (8007f38 <_read_r+0x20>)
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4608      	mov	r0, r1
 8007f20:	4611      	mov	r1, r2
 8007f22:	2200      	movs	r2, #0
 8007f24:	602a      	str	r2, [r5, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f7fa f8b2 	bl	8002090 <_read>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_read_r+0x1e>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_read_r+0x1e>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	200002d8 	.word	0x200002d8

08007f3c <_malloc_usable_size_r>:
 8007f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f40:	1f18      	subs	r0, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfbc      	itt	lt
 8007f46:	580b      	ldrlt	r3, [r1, r0]
 8007f48:	18c0      	addlt	r0, r0, r3
 8007f4a:	4770      	bx	lr

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
