
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008180  08008180  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008188  08008188  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000028c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b3c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e9  00000000  00000000  00037be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ff3  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a74d  00000000  00000000  000657d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f09ed  00000000  00000000  0007ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017090d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b84  00000000  00000000  00170960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007948 	.word	0x08007948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007948 	.word	0x08007948

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x9c>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x9c>)
 800060a:	f001 fa79 	bl	8001b00 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000614:	f000 fdf0 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000618:	2303      	movs	r3, #3
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x9c>)
 800062a:	f001 faed 	bl	8001c08 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000634:	f000 fde0 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012000 	.word	0x40012000

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 fe79 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_GPIO_Init+0xac>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xac>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0xac>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_GPIO_Init+0xac>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_GPIO_Init+0xac>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xb0>)
 800076e:	f001 fe1d 	bl	80023ac <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f001 ffcf 	bl	8002764 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fd14 	bl	80011f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f002 fd3f 	bl	8003256 <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f000 fd0b 	bl	80011f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f002 fd72 	bl	80032ce <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 fd02 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 8000860:	f001 fda4 	bl	80023ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <I2C_Scan>:
#include "lcd.h"

HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <I2C_Scan+0xc0>)
 800089c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008a0:	461d      	mov	r5, r3
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008aa:	6020      	str	r0, [r4, #0]
 80008ac:	3404      	adds	r4, #4
 80008ae:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80008b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fc9b 	bl	80001f0 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	4824      	ldr	r0, [pc, #144]	; (8000958 <I2C_Scan+0xc4>)
 80008c8:	f004 fe65 	bl	8005596 <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80008d2:	e030      	b.n	8000936 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80008d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b299      	uxth	r1, r3
 80008dc:	230a      	movs	r3, #10
 80008de:	2201      	movs	r2, #1
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <I2C_Scan+0xc8>)
 80008e2:	f002 f981 	bl	8002be8 <HAL_I2C_IsDeviceReady>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <I2C_Scan+0xcc>)
 80008ec:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <I2C_Scan+0xcc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d113      	bne.n	800091e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 80008f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80008fa:	4638      	mov	r0, r7
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <I2C_Scan+0xd0>)
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	f005 fede 	bl	80066c0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000904:	463b      	mov	r3, r7
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc72 	bl	80001f0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	4639      	mov	r1, r7
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <I2C_Scan+0xc4>)
 8000918:	f004 fe3d 	bl	8005596 <HAL_UART_Transmit>
 800091c:	e006      	b.n	800092c <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	2201      	movs	r2, #1
 8000924:	4910      	ldr	r1, [pc, #64]	; (8000968 <I2C_Scan+0xd4>)
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <I2C_Scan+0xc4>)
 8000928:	f004 fe35 	bl	8005596 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800092c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000930:	3301      	adds	r3, #1
 8000932:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000936:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800093a:	2b7f      	cmp	r3, #127	; 0x7f
 800093c:	d9ca      	bls.n	80008d4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2202      	movs	r2, #2
 8000944:	4909      	ldr	r1, [pc, #36]	; (800096c <I2C_Scan+0xd8>)
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <I2C_Scan+0xc4>)
 8000948:	f004 fe25 	bl	8005596 <HAL_UART_Transmit>
}
 800094c:	bf00      	nop
 800094e:	3758      	adds	r7, #88	; 0x58
 8000950:	46bd      	mov	sp, r7
 8000952:	bdb0      	pop	{r4, r5, r7, pc}
 8000954:	08007970 	.word	0x08007970
 8000958:	200002ac 	.word	0x200002ac
 800095c:	200000dc 	.word	0x200000dc
 8000960:	20000130 	.word	0x20000130
 8000964:	08007960 	.word	0x08007960
 8000968:	08007968 	.word	0x08007968
 800096c:	0800796c 	.word	0x0800796c

08000970 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	460b      	mov	r3, r1
 800097c:	71bb      	strb	r3, [r7, #6]
 800097e:	4613      	mov	r3, r2
 8000980:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	b299      	uxth	r1, r3
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	2201      	movs	r2, #1
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <LCD_SendInternal+0xa8>)
 800098e:	f002 f92b 	bl	8002be8 <HAL_I2C_IsDeviceReady>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d000      	beq.n	800099e <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800099c:	e7f1      	b.n	8000982 <LCD_SendInternal+0x12>
			break;
 800099e:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	f023 030f 	bic.w	r3, r3, #15
 80009a6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80009ae:	7bba      	ldrb	r2, [r7, #14]
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f043 030c 	orr.w	r3, r3, #12
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80009be:	7bba      	ldrb	r2, [r7, #14]
 80009c0:	797b      	ldrb	r3, [r7, #5]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80009ce:	7b7a      	ldrb	r2, [r7, #13]
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f043 030c 	orr.w	r3, r3, #12
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80009de:	7b7a      	ldrb	r2, [r7, #13]
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	b299      	uxth	r1, r3
 80009f2:	f107 0208 	add.w	r2, r7, #8
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2304      	movs	r3, #4
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <LCD_SendInternal+0xa8>)
 8000a00:	f001 fff4 	bl	80029ec <HAL_I2C_Master_Transmit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f001 f855 	bl	8001ab8 <HAL_Delay>
	return res;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000dc 	.word	0x200000dc

08000a1c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000a2c:	79b9      	ldrb	r1, [r7, #6]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2200      	movs	r2, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff9c 	bl	8000970 <LCD_SendInternal>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000a50:	79b9      	ldrb	r1, [r7, #6]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff8a 	bl	8000970 <LCD_SendInternal>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2130      	movs	r1, #48	; 0x30
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffd2 	bl	8000a1c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffcd 	bl	8000a1c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	210c      	movs	r1, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffc8 	bl	8000a1c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffc3 	bl	8000a1c <LCD_SendCommand>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	6039      	str	r1, [r7, #0]
 8000aa8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000aaa:	e009      	b.n	8000ac0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffc3 	bl	8000a40 <LCD_SendData>
		str++;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f1      	bne.n	8000aac <LCD_SendString+0xe>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <init>:

void init() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000ad8:	f7ff fedc 	bl	8000894 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000adc:	204e      	movs	r0, #78	; 0x4e
 8000ade:	f7ff ffc1 	bl	8000a64 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	204e      	movs	r0, #78	; 0x4e
 8000ae6:	f7ff ff99 	bl	8000a1c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000aea:	4907      	ldr	r1, [pc, #28]	; (8000b08 <init+0x34>)
 8000aec:	204e      	movs	r0, #78	; 0x4e
 8000aee:	f7ff ffd6 	bl	8000a9e <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000af2:	21c0      	movs	r1, #192	; 0xc0
 8000af4:	204e      	movs	r0, #78	; 0x4e
 8000af6:	f7ff ff91 	bl	8000a1c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000afa:	4904      	ldr	r1, [pc, #16]	; (8000b0c <init+0x38>)
 8000afc:	204e      	movs	r0, #78	; 0x4e
 8000afe:	f7ff ffce 	bl	8000a9e <LCD_SendString>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08007988 	.word	0x08007988
 8000b0c:	08007998 	.word	0x08007998

08000b10 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000b18:	1d39      	adds	r1, r7, #4
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <__io_putchar+0x20>)
 8000b20:	f004 fd39 	bl	8005596 <HAL_UART_Transmit>
	return ch;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002ac 	.word	0x200002ac

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b5b0      	push	{r4, r5, r7, lr}
 8000b36:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
 8000b3a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 ff4a 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f94a 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff fdc4 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b48:	f000 fb5c 	bl	8001204 <MX_RTC_Init>
  MX_I2C1_Init();
 8000b4c:	f7ff fe1a 	bl	8000784 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000b50:	f000 fea4 	bl	800189c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b54:	f7ff fd26 	bl	80005a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b58:	f000 fd56 	bl	8001608 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fd06 	bl	800156c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b60:	f000 fdc8 	bl	80016f4 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b64:	f000 f9aa 	bl	8000ebc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b68:	4883      	ldr	r0, [pc, #524]	; (8000d78 <main+0x244>)
 8000b6a:	f003 fcdb 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <main+0x248>)
 8000b72:	f003 fda1 	bl	80046b8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000b76:	4882      	ldr	r0, [pc, #520]	; (8000d80 <main+0x24c>)
 8000b78:	f003 fcd4 	bl	8004524 <HAL_TIM_Base_Start_IT>
	char *verse1[] = {
 8000b7c:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8000b80:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000b84:	4a7f      	ldr	r2, [pc, #508]	; (8000d84 <main+0x250>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	4611      	mov	r1, r2
 8000b8a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f005 fcf2 	bl	8006578 <memcpy>

			"0",
	///////////////////////////////////////////////////////////
			};

	int verse1_time[] = {
 8000b94:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8000b98:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8000b9c:	4a7a      	ldr	r2, [pc, #488]	; (8000d88 <main+0x254>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f005 fce6 	bl	8006578 <memcpy>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000bac:	f7ff ff92 	bl	8000ad4 <init>
	LCD_Init(LCD_ADDR);
 8000bb0:	204e      	movs	r0, #78	; 0x4e
 8000bb2:	f7ff ff57 	bl	8000a64 <LCD_Init>
	up = 0;
 8000bb6:	4b75      	ldr	r3, [pc, #468]	; (8000d8c <main+0x258>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000bbc:	4b74      	ldr	r3, [pc, #464]	; (8000d90 <main+0x25c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000bc2:	4b74      	ldr	r3, [pc, #464]	; (8000d94 <main+0x260>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000bc8:	4b73      	ldr	r3, [pc, #460]	; (8000d98 <main+0x264>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]

	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000bce:	4b73      	ldr	r3, [pc, #460]	; (8000d9c <main+0x268>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000bd4:	4b71      	ldr	r3, [pc, #452]	; (8000d9c <main+0x268>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000bda:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <main+0x268>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000be0:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <main+0x268>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	70da      	strb	r2, [r3, #3]

		//==========================================================================================================
		//mode choose while loop
		while (rising_edge >= 1) {
 8000be6:	e0c1      	b.n	8000d6c <main+0x238>
			cur_tick = HAL_GetTick();
 8000be8:	f000 ff5a 	bl	8001aa0 <HAL_GetTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a6c      	ldr	r2, [pc, #432]	; (8000da0 <main+0x26c>)
 8000bf0:	6013      	str	r3, [r2, #0]
			tick_gap = cur_tick - start_tick;
 8000bf2:	4b6b      	ldr	r3, [pc, #428]	; (8000da0 <main+0x26c>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <main+0x270>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	4a6a      	ldr	r2, [pc, #424]	; (8000da8 <main+0x274>)
 8000bfe:	6013      	str	r3, [r2, #0]

			//remove bounce effect
			if (tick_gap < 100 && rising_edge > 1) {
 8000c00:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <main+0x274>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b63      	cmp	r3, #99	; 0x63
 8000c06:	d806      	bhi.n	8000c16 <main+0xe2>
 8000c08:	4b68      	ldr	r3, [pc, #416]	; (8000dac <main+0x278>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d902      	bls.n	8000c16 <main+0xe2>
				rising_edge = 1;
 8000c10:	4b66      	ldr	r3, [pc, #408]	; (8000dac <main+0x278>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
			}

			if (tick_gap >= 300) {
 8000c16:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <main+0x274>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c1e:	f0c0 80a5 	bcc.w	8000d6c <main+0x238>

				if (rising_edge == 1 && falling_edge >= 1) {
 8000c22:	4b62      	ldr	r3, [pc, #392]	; (8000dac <main+0x278>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d142      	bne.n	8000cb0 <main+0x17c>
 8000c2a:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <main+0x27c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d03e      	beq.n	8000cb0 <main+0x17c>

					// init the temp
					sTime_temp.Hours = 0;
 8000c32:	4b5a      	ldr	r3, [pc, #360]	; (8000d9c <main+0x268>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
					sTime_temp.Minutes = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <main+0x268>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	705a      	strb	r2, [r3, #1]
					sTime_temp.Seconds = 0;
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <main+0x268>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	709a      	strb	r2, [r3, #2]
					sTime_temp.TimeFormat = 0;
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <main+0x268>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	70da      	strb	r2, [r3, #3]
					cursor = 0;
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <main+0x280>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

					// LCD up
					LCD_Init(LCD_ADDR);
 8000c50:	204e      	movs	r0, #78	; 0x4e
 8000c52:	f7ff ff07 	bl	8000a64 <LCD_Init>
					LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	204e      	movs	r0, #78	; 0x4e
 8000c5a:	f7ff fedf 	bl	8000a1c <LCD_SendCommand>
					strcpy(lcdup, "Set Time Mode");
 8000c5e:	4a56      	ldr	r2, [pc, #344]	; (8000db8 <main+0x284>)
 8000c60:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <main+0x288>)
 8000c62:	4614      	mov	r4, r2
 8000c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c66:	c407      	stmia	r4!, {r0, r1, r2}
 8000c68:	8023      	strh	r3, [r4, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8000c6a:	4953      	ldr	r1, [pc, #332]	; (8000db8 <main+0x284>)
 8000c6c:	204e      	movs	r0, #78	; 0x4e
 8000c6e:	f7ff ff16 	bl	8000a9e <LCD_SendString>
					// LCD down
					screen(cursor, sTime_temp);
 8000c72:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <main+0x280>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461d      	mov	r5, r3
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <main+0x268>)
 8000c7a:	466c      	mov	r4, sp
 8000c7c:	f103 020c 	add.w	r2, r3, #12
 8000c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c84:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f000 fa24 	bl	80010d8 <screen>

					LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000c90:	210f      	movs	r1, #15
 8000c92:	204e      	movs	r0, #78	; 0x4e
 8000c94:	f7ff fec2 	bl	8000a1c <LCD_SendCommand>

					//init the user button
					rising_edge = 0;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <main+0x278>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <main+0x27c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
					mode = 1;
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <main+0x28c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
					printf("one click==========================\r\n");
 8000caa:	4846      	ldr	r0, [pc, #280]	; (8000dc4 <main+0x290>)
 8000cac:	f005 fd00 	bl	80066b0 <puts>
				}

				if (rising_edge >= 2 && falling_edge >= 1) {
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <main+0x278>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d944      	bls.n	8000d42 <main+0x20e>
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <main+0x27c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d040      	beq.n	8000d42 <main+0x20e>
					// init the temp
					sTime_AL.Hours = 0;
 8000cc0:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <main+0x294>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
					sTime_AL.Minutes = 0;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <main+0x294>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
					sTime_AL.Seconds = 0;
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <main+0x294>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	709a      	strb	r2, [r3, #2]
					sTime_AL.TimeFormat = 0;
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <main+0x294>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	70da      	strb	r2, [r3, #3]
					cursor = 0;
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <main+0x280>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]

					// LCD up
					LCD_Init(LCD_ADDR);
 8000cde:	204e      	movs	r0, #78	; 0x4e
 8000ce0:	f7ff fec0 	bl	8000a64 <LCD_Init>
					//blink on
					LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	204e      	movs	r0, #78	; 0x4e
 8000ce8:	f7ff fe98 	bl	8000a1c <LCD_SendCommand>

					LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	204e      	movs	r0, #78	; 0x4e
 8000cf0:	f7ff fe94 	bl	8000a1c <LCD_SendCommand>
					strcpy(lcdup, "Alarm Mode");
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x284>)
 8000cf6:	4a35      	ldr	r2, [pc, #212]	; (8000dcc <main+0x298>)
 8000cf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cfa:	c303      	stmia	r3!, {r0, r1}
 8000cfc:	801a      	strh	r2, [r3, #0]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	0c12      	lsrs	r2, r2, #16
 8000d02:	701a      	strb	r2, [r3, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8000d04:	492c      	ldr	r1, [pc, #176]	; (8000db8 <main+0x284>)
 8000d06:	204e      	movs	r0, #78	; 0x4e
 8000d08:	f7ff fec9 	bl	8000a9e <LCD_SendString>
					// LCD down
					screen(cursor, sTime_AL);
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <main+0x280>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461d      	mov	r5, r3
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <main+0x294>)
 8000d14:	466c      	mov	r4, sp
 8000d16:	f103 020c 	add.w	r2, r3, #12
 8000d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d24:	4628      	mov	r0, r5
 8000d26:	f000 f9d7 	bl	80010d8 <screen>

					//init the user button
					rising_edge = 0;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <main+0x278>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <main+0x27c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
					mode = 2;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <main+0x28c>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	701a      	strb	r2, [r3, #0]

					printf("two click++++++++++++++++++++++++++\r\n");
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <main+0x29c>)
 8000d3e:	f005 fcb7 	bl	80066b0 <puts>
				}

				if (tick_gap >= 2000 && falling_edge == 0) {
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <main+0x274>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d4a:	d30f      	bcc.n	8000d6c <main+0x238>
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <main+0x27c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10b      	bne.n	8000d6c <main+0x238>
					rising_edge = 0;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <main+0x278>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <main+0x27c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
					mode = 3;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <main+0x28c>)
 8000d62:	2203      	movs	r2, #3
 8000d64:	701a      	strb	r2, [r3, #0]
					printf("long click//////////////////////////\r\n");
 8000d66:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <main+0x2a0>)
 8000d68:	f005 fca2 	bl	80066b0 <puts>
		while (rising_edge >= 1) {
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <main+0x278>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f47f af39 	bne.w	8000be8 <main+0xb4>
		sTime_temp.Hours = 0;
 8000d76:	e72a      	b.n	8000bce <main+0x9a>
 8000d78:	200001d4 	.word	0x200001d4
 8000d7c:	2000021c 	.word	0x2000021c
 8000d80:	20000264 	.word	0x20000264
 8000d84:	08007a74 	.word	0x08007a74
 8000d88:	08007d68 	.word	0x08007d68
 8000d8c:	20000170 	.word	0x20000170
 8000d90:	20000171 	.word	0x20000171
 8000d94:	20000172 	.word	0x20000172
 8000d98:	20000173 	.word	0x20000173
 8000d9c:	20000188 	.word	0x20000188
 8000da0:	20000160 	.word	0x20000160
 8000da4:	2000015c 	.word	0x2000015c
 8000da8:	20000164 	.word	0x20000164
 8000dac:	20000159 	.word	0x20000159
 8000db0:	2000015a 	.word	0x2000015a
 8000db4:	20000168 	.word	0x20000168
 8000db8:	20000148 	.word	0x20000148
 8000dbc:	080079e0 	.word	0x080079e0
 8000dc0:	2000015b 	.word	0x2000015b
 8000dc4:	080079f0 	.word	0x080079f0
 8000dc8:	2000019c 	.word	0x2000019c
 8000dcc:	08007a18 	.word	0x08007a18
 8000dd0:	08007a24 	.word	0x08007a24
 8000dd4:	08007a4c 	.word	0x08007a4c

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 fbd4 	bl	8006594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <SystemClock_Config+0xdc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <SystemClock_Config+0xdc>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <SystemClock_Config+0xdc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <SystemClock_Config+0xe0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <SystemClock_Config+0xe0>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <SystemClock_Config+0xe0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000e34:	2306      	movs	r3, #6
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e40:	2310      	movs	r3, #16
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e50:	23b4      	movs	r3, #180	; 0xb4
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fac3 	bl	80033ec <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e6c:	f000 f9c4 	bl	80011f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f002 fa6c 	bl	800334c <HAL_PWREx_EnableOverDrive>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e7a:	f000 f9bd 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2302      	movs	r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fd1d 	bl	80038dc <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ea8:	f000 f9a6 	bl	80011f8 <Error_Handler>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3750      	adds	r7, #80	; 0x50
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f001 f9a8 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eca:	2027      	movs	r0, #39	; 0x27
 8000ecc:	f001 f9c1 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2028      	movs	r0, #40	; 0x28
 8000ed6:	f001 f9a0 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eda:	2028      	movs	r0, #40	; 0x28
 8000edc:	f001 f9b9 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f001 f998 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eea:	201c      	movs	r0, #28
 8000eec:	f001 f9b1 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	201e      	movs	r0, #30
 8000ef6:	f001 f990 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000efa:	201e      	movs	r0, #30
 8000efc:	f001 f9a9 	bl	8002252 <HAL_NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b63      	cmp	r3, #99	; 0x63
 8000f10:	d801      	bhi.n	8000f16 <button_status+0x12>
		return UP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	e02a      	b.n	8000f6c <button_status+0x68>
	if (800 < value && value < 900)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f1c:	d905      	bls.n	8000f2a <button_status+0x26>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f24:	d201      	bcs.n	8000f2a <button_status+0x26>
		return DOWN;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e020      	b.n	8000f6c <button_status+0x68>
	if (1800 < value && value < 2000)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000f30:	d905      	bls.n	8000f3e <button_status+0x3a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f38:	d201      	bcs.n	8000f3e <button_status+0x3a>
		return LEFT;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e016      	b.n	8000f6c <button_status+0x68>
	if (2800 < value && value < 3100)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000f44:	d906      	bls.n	8000f54 <button_status+0x50>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f640 421b 	movw	r2, #3099	; 0xc1b
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d801      	bhi.n	8000f54 <button_status+0x50>
		return RIGHT;
 8000f50:	2305      	movs	r3, #5
 8000f52:	e00b      	b.n	8000f6c <button_status+0x68>
	if (4000 < value && value < 5000)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f5a:	d906      	bls.n	8000f6a <button_status+0x66>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d801      	bhi.n	8000f6a <button_status+0x66>
		return SELECT;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <button_status+0x68>

	return NONE;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f88:	f040 8082 	bne.w	8001090 <HAL_TIM_PeriodElapsedCallback+0x118>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000f8c:	4842      	ldr	r0, [pc, #264]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f8e:	f000 fe2d 	bl	8001bec <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f96:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000f98:	483f      	ldr	r0, [pc, #252]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f9a:	f000 fdf4 	bl	8001b86 <HAL_ADC_Stop>

		if (3300 < ADC_value && ADC_value < 3400) {
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d905      	bls.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f640 5247 	movw	r2, #3399	; 0xd47
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d905      	bls.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x4a>

		}
		else {
			printf("%d\r\n", ADC_value);
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4838      	ldr	r0, [pc, #224]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000fbe:	f005 faf1 	bl	80065a4 <iprintf>
		}

		if (button_status(ADC_value) == UP) {
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff9c 	bl	8000f04 <button_status>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x72>
			up++;
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000fdc:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4830      	ldr	r0, [pc, #192]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000fe6:	f005 fadd 	bl	80065a4 <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff88 	bl	8000f04 <button_status>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d10b      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x9a>
			down++;
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001004:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4828      	ldr	r0, [pc, #160]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800100e:	f005 fac9 	bl	80065a4 <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff74 	bl	8000f04 <button_status>
 800101c:	4603      	mov	r3, r0
 800101e:	2b04      	cmp	r3, #4
 8001020:	d10b      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0xc2>
			left++;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800102c:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001036:	f005 fab5 	bl	80065a4 <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff60 	bl	8000f04 <button_status>
 8001044:	4603      	mov	r3, r0
 8001046:	2b05      	cmp	r3, #5
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0xea>
			right++;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x144>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001054:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800105e:	f005 faa1 	bl	80065a4 <iprintf>
		}

		if (apply_flag > 0) {
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0xfc>
			get_time_apply++;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001072:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x10e>
			get_time_exit++;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001084:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800108e:	6013      	str	r3, [r2, #0]
//		printf("%d\r\n", get_time);
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000094 	.word	0x20000094
 800109c:	2000016c 	.word	0x2000016c
 80010a0:	08008058 	.word	0x08008058
 80010a4:	20000170 	.word	0x20000170
 80010a8:	08008060 	.word	0x08008060
 80010ac:	20000171 	.word	0x20000171
 80010b0:	0800806c 	.word	0x0800806c
 80010b4:	20000172 	.word	0x20000172
 80010b8:	08008078 	.word	0x08008078
 80010bc:	20000173 	.word	0x20000173
 80010c0:	08008084 	.word	0x08008084
 80010c4:	20000138 	.word	0x20000138
 80010c8:	2000013c 	.word	0x2000013c
 80010cc:	20000140 	.word	0x20000140
 80010d0:	20000144 	.word	0x20000144
 80010d4:	20000134 	.word	0x20000134

080010d8 <screen>:




void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 80010d8:	b084      	sub	sp, #16
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af02      	add	r7, sp, #8
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	f107 001c 	add.w	r0, r7, #28
 80010e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80010ea:	7ffb      	ldrb	r3, [r7, #31]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	4a16      	ldr	r2, [pc, #88]	; (8001150 <screen+0x78>)
 80010f6:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 80010f8:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80010fa:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 80010fc:	7f7b      	ldrb	r3, [r7, #29]
 80010fe:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001100:	9101      	str	r1, [sp, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	4913      	ldr	r1, [pc, #76]	; (8001154 <screen+0x7c>)
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <screen+0x80>)
 800110a:	f005 fad9 	bl	80066c0 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800110e:	21c0      	movs	r1, #192	; 0xc0
 8001110:	204e      	movs	r0, #78	; 0x4e
 8001112:	f7ff fc83 	bl	8000a1c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 8001116:	4910      	ldr	r1, [pc, #64]	; (8001158 <screen+0x80>)
 8001118:	204e      	movs	r0, #78	; 0x4e
 800111a:	f7ff fcc0 	bl	8000a9e <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e006      	b.n	8001132 <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001124:	2110      	movs	r1, #16
 8001126:	204e      	movs	r0, #78	; 0x4e
 8001128:	f7ff fc78 	bl	8000a1c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f1c3 030b 	rsb	r3, r3, #11
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbf2      	blt.n	8001124 <screen+0x4c>
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114a:	b004      	add	sp, #16
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000
 8001154:	08008094 	.word	0x08008094
 8001158:	20000174 	.word	0x20000174

0800115c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116a:	481d      	ldr	r0, [pc, #116]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x84>)
 800116c:	f001 faca 	bl	8002704 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d114      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0x44>
		rising_edge++;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001180:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800118a:	f005 fa0b 	bl	80065a4 <iprintf>
		if (rising_edge == 1) {
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d104      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0x44>
			start_tick = HAL_GetTick();
 8001196:	f000 fc83 	bl	8001aa0 <HAL_GetTick>
 800119a:	4603      	mov	r3, r0
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_GPIO_EXTI_Callback+0x90>)
 800119e:	6013      	str	r3, [r2, #0]
		}

	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80011a6:	f001 faad 	bl	8002704 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d113      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x7c>
		if (rising_edge == 0) {
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x88>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <HAL_GPIO_EXTI_Callback+0x64>
			falling_edge = 0;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e005      	b.n	80011cc <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			falling_edge++;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x94>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x94>)
 80011ca:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x94>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x98>)
 80011d4:	f005 f9e6 	bl	80065a4 <iprintf>
	}

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020800 	.word	0x40020800
 80011e4:	20000159 	.word	0x20000159
 80011e8:	080080a8 	.word	0x080080a8
 80011ec:	2000015c 	.word	0x2000015c
 80011f0:	2000015a 	.word	0x2000015a
 80011f4:	080080bc 	.word	0x080080bc

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_RTC_Init+0xb0>)
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <MX_RTC_Init+0xb4>)
 8001220:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_RTC_Init+0xb0>)
 800122a:	227f      	movs	r2, #127	; 0x7f
 800122c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001230:	22ff      	movs	r2, #255	; 0xff
 8001232:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_RTC_Init+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001248:	f002 fee8 	bl	800401c <HAL_RTC_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001252:	f7ff ffd1 	bl	80011f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MX_RTC_Init+0xb0>)
 8001276:	f002 ff47 	bl	8004108 <HAL_RTC_SetTime>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001280:	f7ff ffba 	bl	80011f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001284:	2301      	movs	r3, #1
 8001286:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001288:	2301      	movs	r3, #1
 800128a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_RTC_Init+0xb0>)
 800129c:	f002 ffce 	bl	800423c <HAL_RTC_SetDate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80012a6:	f7ff ffa7 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001b0 	.word	0x200001b0
 80012b8:	40002800 	.word	0x40002800

080012bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 f961 	bl	8006594 <memset>
  if(rtcHandle->Instance==RTC)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_RTC_MspInit+0x4c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d111      	bne.n	8001300 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012dc:	2320      	movs	r3, #32
 80012de:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fcd6 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012f6:	f7ff ff7f 	bl	80011f8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_RTC_MspInit+0x50>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3738      	adds	r7, #56	; 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40002800 	.word	0x40002800
 800130c:	42470e3c 	.word	0x42470e3c

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 fb64 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM2_IRQHandler+0x10>)
 80013ba:	f003 fa45 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001d4 	.word	0x200001d4

080013c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM4_IRQHandler+0x10>)
 80013ce:	f003 fa3b 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000264 	.word	0x20000264

080013dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USART3_IRQHandler+0x10>)
 80013e2:	f004 f96b 	bl	80056bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002ac 	.word	0x200002ac

080013f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f8:	f001 f99c 	bl	8002734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e00a      	b.n	8001428 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001412:	f3af 8000 	nop.w
 8001416:	4601      	mov	r1, r0
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	b2ca      	uxtb	r2, r1
 8001420:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf0      	blt.n	8001412 <_read+0x12>
	}

return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e009      	b.n	8001460 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb5b 	bl	8000b10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf1      	blt.n	800144c <_write+0x12>
	}
	return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_close>:

int _close(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
	return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149a:	605a      	str	r2, [r3, #4]
	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_isatty>:

int _isatty(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f005 f80a 	bl	8006524 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20030000 	.word	0x20030000
 800153c:	00000400 	.word	0x00000400
 8001540:	200001d0 	.word	0x200001d0
 8001544:	20000308 	.word	0x20000308

08001548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_TIM2_Init+0x98>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_TIM2_Init+0x98>)
 8001592:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM2_Init+0x98>)
 800159a:	2210      	movs	r2, #16
 800159c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM2_Init+0x98>)
 80015a0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80015a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_TIM2_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MX_TIM2_Init+0x98>)
 80015b4:	f002 ff67 	bl	8004486 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015be:	f7ff fe1b 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_TIM2_Init+0x98>)
 80015d0:	f003 fb04 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015da:	f7ff fe0d 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_TIM2_Init+0x98>)
 80015ec:	f003 fef6 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015f6:	f7ff fdff 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001d4 	.word	0x200001d4

08001608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <MX_TIM3_Init+0xe4>)
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <MX_TIM3_Init+0xe8>)
 800163c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001640:	221d      	movs	r2, #29
 8001642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001646:	2210      	movs	r2, #16
 8001648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_TIM3_Init+0xe4>)
 800164c:	f641 0238 	movw	r2, #6200	; 0x1838
 8001650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <MX_TIM3_Init+0xe4>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_TIM3_Init+0xe4>)
 8001660:	f002 ff11 	bl	8004486 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800166a:	f7ff fdc5 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_TIM3_Init+0xe4>)
 800167c:	f003 faae 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001686:	f7ff fdb7 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM3_Init+0xe4>)
 800168c:	f002 ffba 	bl	8004604 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001696:	f7ff fdaf 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800169a:	2320      	movs	r3, #32
 800169c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4619      	mov	r1, r3
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016aa:	f003 fe97 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016b4:	f7ff fda0 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2208      	movs	r2, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016d0:	f003 f9c2 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016da:	f7ff fd8d 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM3_Init+0xe4>)
 80016e0:	f000 f8a2 	bl	8001828 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000021c 	.word	0x2000021c
 80016f0:	40000400 	.word	0x40000400

080016f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM4_Init+0x94>)
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <MX_TIM4_Init+0x98>)
 8001714:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM4_Init+0x94>)
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM4_Init+0x94>)
 800171e:	2210      	movs	r2, #16
 8001720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM4_Init+0x94>)
 8001724:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001728:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_TIM4_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_TIM4_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001736:	4814      	ldr	r0, [pc, #80]	; (8001788 <MX_TIM4_Init+0x94>)
 8001738:	f002 fea5 	bl	8004486 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001742:	f7ff fd59 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM4_Init+0x94>)
 8001754:	f003 fa42 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800175e:	f7ff fd4b 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM4_Init+0x94>)
 8001770:	f003 fe34 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800177a:	f7ff fd3d 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000264 	.word	0x20000264
 800178c:	40000800 	.word	0x40000800

08001790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d10e      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017be:	e026      	b.n	800180e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a16      	ldr	r2, [pc, #88]	; (8001820 <HAL_TIM_Base_MspInit+0x90>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
}
 80017e6:	e012      	b.n	800180e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x94>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10d      	bne.n	800180e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_TIM_Base_MspInit+0x8c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40000400 	.word	0x40000400
 8001824:	40000800 	.word	0x40000800

08001828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11d      	bne.n	8001886 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001866:	2301      	movs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001876:	2302      	movs	r3, #2
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_MspPostInit+0x70>)
 8001882:	f000 fd93 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40000400 	.word	0x40000400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400

0800189c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_USART3_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018d4:	f003 fe12 	bl	80054fc <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f7ff fc8b 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002ac 	.word	0x200002ac
 80018ec:	40004800 	.word	0x40004800

080018f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_MspInit+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12c      	bne.n	800196c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x88>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800195c:	2307      	movs	r3, #7
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_UART_MspInit+0x8c>)
 8001968:	f000 fd20 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3728      	adds	r7, #40	; 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40004800 	.word	0x40004800
 8001978:	40023800 	.word	0x40023800
 800197c:	40020c00 	.word	0x40020c00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff fdcd 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f004 fdbf 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff f8bf 	bl	8000b34 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019c4:	08008190 	.word	0x08008190
  ldr r2, =_sbss
 80019c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019cc:	20000304 	.word	0x20000304

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fc01 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fc82 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fc19 	bl	800226e <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 fbe1 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000010 	.word	0x20000010
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	200002f0 	.word	0x200002f0

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200002f0 	.word	0x200002f0

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000010 	.word	0x20000010

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fd92 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f98a 	bl	8001e6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_Stop+0x16>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e021      	b.n	8001be0 <HAL_ADC_Stop+0x5a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e113      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x244>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d925      	bls.n	8001c80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4403      	add	r3, r0
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e022      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	2207      	movs	r2, #7
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4403      	add	r3, r0
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d824      	bhi.n	8001d18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b05      	subs	r3, #5
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
 8001d16:	e04c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d824      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	; 0x23
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b23      	subs	r3, #35	; 0x23
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	e023      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	; 0x41
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b41      	subs	r3, #65	; 0x41
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_ADC_ConfigChannel+0x250>)
 8001db4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10f      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d003      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x1f4>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b11      	cmp	r3, #17
 8001dfa:	d122      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_ADC_ConfigChannel+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_ADC_ConfigChannel+0x260>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9a      	lsrs	r2, r3, #18
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	10000012 	.word	0x10000012
 8001e64:	20000008 	.word	0x20000008
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <ADC_Init+0x1f0>)
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <ADC_Init+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00f      	b.n	8001f6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0202 	bic.w	r2, r2, #2
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	035a      	lsls	r2, r3, #13
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e007      	b.n	8001fe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	051a      	lsls	r2, r3, #20
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002022:	025a      	lsls	r2, r3, #9
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	029a      	lsls	r2, r3, #10
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	0f000001 	.word	0x0f000001

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fc04 	bl	8001aa0 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d008      	beq.n	80022b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e052      	b.n	800235e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0216 	bic.w	r2, r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_DMA_Abort+0x62>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0208 	bic.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002308:	e013      	b.n	8002332 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230a:	f7ff fbc9 	bl	8001aa0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b05      	cmp	r3, #5
 8002316:	d90c      	bls.n	8002332 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e015      	b.n	800235e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e4      	bne.n	800230a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d004      	beq.n	8002384 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00c      	b.n	800239e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e177      	b.n	80026b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8166 	bne.w	80026b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80c0 	beq.w	80026b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a61      	ldr	r2, [pc, #388]	; (80026d4 <HAL_GPIO_Init+0x328>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_GPIO_Init+0x32c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d037      	beq.n	80025ea <HAL_GPIO_Init+0x23e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a57      	ldr	r2, [pc, #348]	; (80026dc <HAL_GPIO_Init+0x330>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d031      	beq.n	80025e6 <HAL_GPIO_Init+0x23a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <HAL_GPIO_Init+0x334>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x236>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a55      	ldr	r2, [pc, #340]	; (80026e4 <HAL_GPIO_Init+0x338>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x232>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_GPIO_Init+0x33c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x22e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a53      	ldr	r2, [pc, #332]	; (80026ec <HAL_GPIO_Init+0x340>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x22a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_GPIO_Init+0x344>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_GPIO_Init+0x348>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_GPIO_Init+0x34c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_GPIO_Init+0x350>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x21a>
 80025c2:	2309      	movs	r3, #9
 80025c4:	e012      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025c6:	230a      	movs	r3, #10
 80025c8:	e010      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ca:	2308      	movs	r3, #8
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_GPIO_Init+0x328>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_GPIO_Init+0x354>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_GPIO_Init+0x354>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_GPIO_Init+0x354>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <HAL_GPIO_Init+0x354>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_GPIO_Init+0x354>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_GPIO_Init+0x354>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_GPIO_Init+0x354>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_GPIO_Init+0x354>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae84 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40022400 	.word	0x40022400
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e001      	b.n	8002726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fd02 	bl	800115c <HAL_GPIO_EXTI_Callback>
  }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e12b      	b.n	80029ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe f83a 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c8:	f001 fa40 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a81      	ldr	r2, [pc, #516]	; (80029d8 <HAL_I2C_Init+0x274>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <HAL_I2C_Init+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a80      	ldr	r2, [pc, #512]	; (80029dc <HAL_I2C_Init+0x278>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e006      	b.n	80027f6 <HAL_I2C_Init+0x92>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a7d      	ldr	r2, [pc, #500]	; (80029e0 <HAL_I2C_Init+0x27c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e7      	b.n	80029ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <HAL_I2C_Init+0x280>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a6a      	ldr	r2, [pc, #424]	; (80029d8 <HAL_I2C_Init+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <HAL_I2C_Init+0xd4>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	e009      	b.n	800284c <HAL_I2C_Init+0xe8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <HAL_I2C_Init+0x284>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800285e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	495c      	ldr	r1, [pc, #368]	; (80029d8 <HAL_I2C_Init+0x274>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d819      	bhi.n	80028a0 <HAL_I2C_Init+0x13c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fbb1 f3f3 	udiv	r3, r1, r3
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002880:	400b      	ands	r3, r1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_I2C_Init+0x138>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e59      	subs	r1, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fbb1 f3f3 	udiv	r3, r1, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	e051      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 800289c:	2304      	movs	r3, #4
 800289e:	e04f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_I2C_Init+0x168>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e012      	b.n	80028f2 <HAL_I2C_Init+0x18e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x196>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <HAL_I2C_Init+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e58      	subs	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	440b      	add	r3, r1
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800296e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6911      	ldr	r1, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	000186a0 	.word	0x000186a0
 80029dc:	001e847f 	.word	0x001e847f
 80029e0:	003d08ff 	.word	0x003d08ff
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	817b      	strh	r3, [r7, #10]
 80029fc:	4613      	mov	r3, r2
 80029fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff f84e 	bl	8001aa0 <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	f040 80e0 	bne.w	8002bd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2319      	movs	r3, #25
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4970      	ldr	r1, [pc, #448]	; (8002be0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa92 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0d3      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0x50>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d007      	beq.n	8002a62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2221      	movs	r2, #33	; 0x21
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6a3a      	ldr	r2, [r7, #32]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f9ca 	bl	8002e44 <I2C_MasterRequestWrite>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e08d      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ad0:	e066      	b.n	8002ba0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fb0c 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d107      	bne.n	8002afa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06b      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d11b      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0x188>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6a39      	ldr	r1, [r7, #32]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fafc 	bl	8003176 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d107      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e01a      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d194      	bne.n	8002ad2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000

08002be8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7fe ff52 	bl	8001aa0 <HAL_GetTick>
 8002bfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	f040 8111 	bne.w	8002e32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2319      	movs	r3, #25
 8002c16:	2201      	movs	r2, #1
 8002c18:	4988      	ldr	r1, [pc, #544]	; (8002e3c <HAL_I2C_IsDeviceReady+0x254>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f994 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e104      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_I2C_IsDeviceReady+0x50>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0fd      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d007      	beq.n	8002c5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2224      	movs	r2, #36	; 0x24
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a70      	ldr	r2, [pc, #448]	; (8002e40 <HAL_I2C_IsDeviceReady+0x258>)
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f952 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb8:	d103      	bne.n	8002cc2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0b6      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cd4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fee3 	bl	8001aa0 <HAL_GetTick>
 8002cda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d0a:	e025      	b.n	8002d58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7fe fec8 	bl	8001aa0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <HAL_I2C_IsDeviceReady+0x13a>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22a0      	movs	r2, #160	; 0xa0
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2ba0      	cmp	r3, #160	; 0xa0
 8002d62:	d005      	beq.n	8002d70 <HAL_I2C_IsDeviceReady+0x188>
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_I2C_IsDeviceReady+0x188>
 8002d6a:	7dbb      	ldrb	r3, [r7, #22]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0cd      	beq.n	8002d0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d129      	bne.n	8002dda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	4921      	ldr	r1, [pc, #132]	; (8002e3c <HAL_I2C_IsDeviceReady+0x254>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8c6 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e036      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e02c      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2319      	movs	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	490f      	ldr	r1, [pc, #60]	; (8002e3c <HAL_I2C_IsDeviceReady+0x254>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f8a2 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e012      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	f4ff af32 	bcc.w	8002c82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000

08002e44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	460b      	mov	r3, r1
 8002e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d006      	beq.n	8002e6e <I2C_MasterRequestWrite+0x2a>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d003      	beq.n	8002e6e <I2C_MasterRequestWrite+0x2a>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e6c:	d108      	bne.n	8002e80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e00b      	b.n	8002e98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	d107      	bne.n	8002e98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f84f 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebe:	d103      	bne.n	8002ec8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e035      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed4:	d108      	bne.n	8002ee8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	e01b      	b.n	8002f20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee8:	897b      	ldrh	r3, [r7, #10]
 8002eea:	11db      	asrs	r3, r3, #7
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f063 030f 	orn	r3, r3, #15
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <I2C_MasterRequestWrite+0xfc>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f875 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e010      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <I2C_MasterRequestWrite+0x100>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f865 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	00010008 	.word	0x00010008
 8002f44:	00010002 	.word	0x00010002

08002f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f58:	e025      	b.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d021      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe fd9d 	bl	8001aa0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e023      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10d      	bne.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	e00c      	b.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d0b6      	beq.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003004:	e051      	b.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d123      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800302e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e046      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d021      	beq.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fd1b 	bl	8001aa0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e020      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00b      	b.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d18d      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	e02d      	b.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f878 	bl	80031f8 <I2C_IsAcknowledgeFailed>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe fcc1 	bl	8001aa0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d1ca      	bne.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003182:	e02d      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f837 	bl	80031f8 <I2C_IsAcknowledgeFailed>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d021      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fc80 	bl	8001aa0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1ca      	bne.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d11b      	bne.n	8003248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	d129      	bne.n	80032c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d12a      	bne.n	800333e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b29a      	uxth	r2, r3
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	4313      	orrs	r3, r2
 8003318:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	89fa      	ldrh	r2, [r7, #14]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7fe fb92 	bl	8001aa0 <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7fe fb8e 	bl	8001aa0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e01f      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a8:	f7fe fb7a 	bl	8001aa0 <HAL_GetTick>
 80033ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ae:	e009      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033b0:	f7fe fb76 	bl	8001aa0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033be:	d901      	bls.n	80033c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e007      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d0:	d1ee      	bne.n	80033b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	420e0040 	.word	0x420e0040
 80033e4:	40007000 	.word	0x40007000
 80033e8:	420e0044 	.word	0x420e0044

080033ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e267      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d075      	beq.n	80034f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d00c      	beq.n	8003430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	2b08      	cmp	r3, #8
 8003420:	d112      	bne.n	8003448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342e:	d10b      	bne.n	8003448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d05b      	beq.n	80034f4 <HAL_RCC_OscConfig+0x108>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d157      	bne.n	80034f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e242      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d106      	bne.n	8003460 <HAL_RCC_OscConfig+0x74>
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xb0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x98>
 800346a:	4b70      	ldr	r3, [pc, #448]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6f      	ldr	r2, [pc, #444]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b6d      	ldr	r3, [pc, #436]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6c      	ldr	r2, [pc, #432]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xb0>
 8003484:	4b69      	ldr	r3, [pc, #420]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a68      	ldr	r2, [pc, #416]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fafc 	bl	8001aa0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe faf8 	bl	8001aa0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e207      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xc0>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fae8 	bl	8001aa0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fae4 	bl	8001aa0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1f3      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0xe8>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d063      	beq.n	80035ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	4b4a      	ldr	r3, [pc, #296]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b44      	ldr	r3, [pc, #272]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x152>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1c7      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4937      	ldr	r1, [pc, #220]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e03a      	b.n	80035ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b34      	ldr	r3, [pc, #208]	; (8003630 <HAL_RCC_OscConfig+0x244>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fa9d 	bl	8001aa0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356a:	f7fe fa99 	bl	8001aa0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1a8      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4925      	ldr	r1, [pc, #148]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]
 800359c:	e015      	b.n	80035ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_OscConfig+0x244>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fa7c 	bl	8001aa0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ac:	f7fe fa78 	bl	8001aa0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e187      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d036      	beq.n	8003644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x248>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fa5c 	bl	8001aa0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fe fa58 	bl	8001aa0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e167      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x200>
 800360a:	e01b      	b.n	8003644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_OscConfig+0x248>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fa45 	bl	8001aa0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	e00e      	b.n	8003638 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361a:	f7fe fa41 	bl	8001aa0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d907      	bls.n	8003638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e150      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	42470000 	.word	0x42470000
 8003634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ea      	bne.n	800361a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8097 	beq.w	8003780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a7c      	ldr	r2, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b7a      	ldr	r3, [pc, #488]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b77      	ldr	r3, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368e:	4b74      	ldr	r3, [pc, #464]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a73      	ldr	r2, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fa01 	bl	8001aa0 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe f9fd 	bl	8001aa0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e10c      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x2ea>
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a63      	ldr	r2, [pc, #396]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	e01c      	b.n	8003710 <HAL_RCC_OscConfig+0x324>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x30c>
 80036de:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a5e      	ldr	r2, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b5c      	ldr	r3, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a5b      	ldr	r2, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0x324>
 80036f8:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 0304 	bic.w	r3, r3, #4
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fe f9c2 	bl	8001aa0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fe f9be 	bl	8001aa0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0cb      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ee      	beq.n	8003720 <HAL_RCC_OscConfig+0x334>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fe f9ac 	bl	8001aa0 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe f9a8 	bl	8001aa0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0b5      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ee      	bne.n	800374c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a38      	ldr	r2, [pc, #224]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a1 	beq.w	80038cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d05c      	beq.n	8003850 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d141      	bne.n	8003822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe f97c 	bl	8001aa0 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe f978 	bl	8001aa0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e087      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	061b      	lsls	r3, r3, #24
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe f951 	bl	8001aa0 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe f94d 	bl	8001aa0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e05c      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x416>
 8003820:	e054      	b.n	80038cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe f93a 	bl	8001aa0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f936 	bl	8001aa0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e045      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x444>
 800384e:	e03d      	b.n	80038cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e038      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	40007000 	.word	0x40007000
 8003864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4ec>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d028      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d11a      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800389e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	3b01      	subs	r3, #1
 80038b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0cc      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b63      	ldr	r3, [pc, #396]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b8      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003930:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a58      	ldr	r2, [pc, #352]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800393a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	494d      	ldr	r1, [pc, #308]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d044      	beq.n	80039fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d119      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d003      	beq.n	800399a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	2b03      	cmp	r3, #3
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e067      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4934      	ldr	r1, [pc, #208]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fe f868 	bl	8001aa0 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fe f864 	bl	8001aa0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e04f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d20c      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4916      	ldr	r1, [pc, #88]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a62:	f000 f821 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	490a      	ldr	r1, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd ffc8 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023c00 	.word	0x40023c00
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	080080d0 	.word	0x080080d0
 8003aa0:	20000008 	.word	0x20000008
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b090      	sub	sp, #64	; 0x40
 8003aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	2300      	movs	r3, #0
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d00d      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	f200 80a1 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x34>
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ada:	e09b      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ae0:	e09b      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae2:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae6:	e098      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af2:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d028      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	2200      	movs	r2, #0
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	627a      	str	r2, [r7, #36]	; 0x24
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b10:	2100      	movs	r1, #0
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b14:	fb03 f201 	mul.w	r2, r3, r1
 8003b18:	2300      	movs	r3, #0
 8003b1a:	fb00 f303 	mul.w	r3, r0, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a43      	ldr	r2, [pc, #268]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b22:	fba0 1202 	umull	r1, r2, r0, r2
 8003b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b28:	460a      	mov	r2, r1
 8003b2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2e:	4413      	add	r3, r2
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2200      	movs	r2, #0
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	61fa      	str	r2, [r7, #28]
 8003b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b42:	f7fc fbad 	bl	80002a0 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4e:	e053      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	617a      	str	r2, [r7, #20]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b62:	f04f 0b00 	mov.w	fp, #0
 8003b66:	4652      	mov	r2, sl
 8003b68:	465b      	mov	r3, fp
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b82:	eb63 090b 	sbc.w	r9, r3, fp
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b9a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b9e:	eb63 0509 	sbc.w	r5, r3, r9
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	00eb      	lsls	r3, r5, #3
 8003bac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb0:	00e2      	lsls	r2, r4, #3
 8003bb2:	4614      	mov	r4, r2
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	eb14 030a 	adds.w	r3, r4, sl
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	eb45 030b 	adc.w	r3, r5, fp
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	028b      	lsls	r3, r1, #10
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd8:	4621      	mov	r1, r4
 8003bda:	028a      	lsls	r2, r1, #10
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	2200      	movs	r2, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	60fa      	str	r2, [r7, #12]
 8003be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bec:	f7fc fb58 	bl	80002a0 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	3301      	adds	r3, #1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3740      	adds	r7, #64	; 0x40
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	017d7840 	.word	0x017d7840

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008

08003c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c50:	f7ff fff0 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0a9b      	lsrs	r3, r3, #10
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	080080e0 	.word	0x080080e0

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c78:	f7ff ffdc 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0b5b      	lsrs	r3, r3, #13
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	080080e0 	.word	0x080080e0

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d075      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cd0:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd fee3 	bl	8001aa0 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cde:	f7fd fedf 	bl	8001aa0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e189      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cf0:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	019a      	lsls	r2, r3, #6
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	071b      	lsls	r3, r3, #28
 8003d14:	4981      	ldr	r1, [pc, #516]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d28:	4b7c      	ldr	r3, [pc, #496]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	0f1b      	lsrs	r3, r3, #28
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	019a      	lsls	r2, r3, #6
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	431a      	orrs	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	071b      	lsls	r3, r3, #28
 8003d48:	4974      	ldr	r1, [pc, #464]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d50:	4b72      	ldr	r3, [pc, #456]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d56:	f023 021f 	bic.w	r2, r3, #31
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	496e      	ldr	r1, [pc, #440]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	019a      	lsls	r2, r3, #6
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	071b      	lsls	r3, r3, #28
 8003d88:	4964      	ldr	r1, [pc, #400]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d96:	f7fd fe83 	bl	8001aa0 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d9e:	f7fd fe7f 	bl	8001aa0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e129      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db0:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d079      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003dd4:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dda:	f7fd fe61 	bl	8001aa0 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003de2:	f7fd fe5d 	bl	8001aa0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e107      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df4:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e00:	d0ef      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e0e:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	0f1b      	lsrs	r3, r3, #28
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	019a      	lsls	r2, r3, #6
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	493b      	ldr	r1, [pc, #236]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	4934      	ldr	r1, [pc, #208]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e5c:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	0e1b      	lsrs	r3, r3, #24
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	019a      	lsls	r2, r3, #6
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	4927      	ldr	r1, [pc, #156]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	4922      	ldr	r1, [pc, #136]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7fd fdfe 	bl	8001aa0 <HAL_GetTick>
 8003ea4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ea8:	f7fd fdfa 	bl	8001aa0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0a4      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eba:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec6:	d1ef      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 808b 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003efe:	f7fd fdcf 	bl	8001aa0 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f04:	e010      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fd fdcb 	bl	8001aa0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d909      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e075      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f18:	42470068 	.word	0x42470068
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470070 	.word	0x42470070
 8003f24:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f28:	4b38      	ldr	r3, [pc, #224]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0e8      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f34:	4b36      	ldr	r3, [pc, #216]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02f      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d028      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f52:	4b2f      	ldr	r3, [pc, #188]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f62:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f68:	4a29      	ldr	r2, [pc, #164]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d114      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fd fd91 	bl	8001aa0 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fd fd8d 	bl	8001aa0 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e035      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb0:	d10d      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	4912      	ldr	r1, [pc, #72]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]
 8003fcc:	e005      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fd8:	6093      	str	r3, [r2, #8]
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004000:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40007000 	.word	0x40007000
 8004010:	40023800 	.word	0x40023800
 8004014:	42470e40 	.word	0x42470e40
 8004018:	424711e0 	.word	0x424711e0

0800401c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e066      	b.n	8004100 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7f5b      	ldrb	r3, [r3, #29]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd f93a 	bl	80012bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	22ca      	movs	r2, #202	; 0xca
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2253      	movs	r2, #83	; 0x53
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f998 	bl	8004394 <RTC_EnterInitMode>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d12c      	bne.n	80040c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800407c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004080:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6919      	ldr	r1, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	041a      	lsls	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f99f 	bl	8004402 <RTC_ExitInitMode>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d113      	bne.n	80040f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	22ff      	movs	r2, #255	; 0xff
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	7f1b      	ldrb	r3, [r3, #28]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_RTC_SetTime+0x1c>
 8004120:	2302      	movs	r3, #2
 8004122:	e087      	b.n	8004234 <HAL_RTC_SetTime+0x12c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2202      	movs	r2, #2
 800412e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d126      	bne.n	8004184 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f97c 	bl	800444c <RTC_ByteToBcd2>
 8004154:	4603      	mov	r3, r0
 8004156:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f975 	bl	800444c <RTC_ByteToBcd2>
 8004162:	4603      	mov	r3, r0
 8004164:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004166:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f96d 	bl	800444c <RTC_ByteToBcd2>
 8004172:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004174:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e018      	b.n	80041b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041a4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	22ca      	movs	r2, #202	; 0xca
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2253      	movs	r2, #83	; 0x53
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8e4 	bl	8004394 <RTC_EnterInitMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d120      	bne.n	8004218 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6899      	ldr	r1, [r3, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f8f7 	bl	8004402 <RTC_ExitInitMode>
 8004214:	4603      	mov	r3, r0
 8004216:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]

  return status;
 8004232:	7cfb      	ldrb	r3, [r7, #19]
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	7f1b      	ldrb	r3, [r3, #28]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_RTC_SetDate+0x1c>
 8004254:	2302      	movs	r3, #2
 8004256:	e071      	b.n	800433c <HAL_RTC_SetDate+0x100>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2202      	movs	r2, #2
 8004262:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10e      	bne.n	8004288 <HAL_RTC_SetDate+0x4c>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	785b      	ldrb	r3, [r3, #1]
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	b2db      	uxtb	r3, r3
 8004280:	330a      	adds	r3, #10
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11c      	bne.n	80042c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	78db      	ldrb	r3, [r3, #3]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f8da 	bl	800444c <RTC_ByteToBcd2>
 8004298:	4603      	mov	r3, r0
 800429a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f8d3 	bl	800444c <RTC_ByteToBcd2>
 80042a6:	4603      	mov	r3, r0
 80042a8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042aa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	789b      	ldrb	r3, [r3, #2]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f8cb 	bl	800444c <RTC_ByteToBcd2>
 80042b6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042b8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e00e      	b.n	80042e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	78db      	ldrb	r3, [r3, #3]
 80042cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042d4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	22ca      	movs	r2, #202	; 0xca
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2253      	movs	r2, #83	; 0x53
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f84c 	bl	8004394 <RTC_EnterInitMode>
 80042fc:	4603      	mov	r3, r0
 80042fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10c      	bne.n	8004320 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004310:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004314:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f873 	bl	8004402 <RTC_ExitInitMode>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	771a      	strb	r2, [r3, #28]

  return status;
 800433a:	7cfb      	ldrb	r3, [r7, #19]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd90      	pop	{r4, r7, pc}

08004344 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004360:	f7fd fb9e 	bl	8001aa0 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004366:	e009      	b.n	800437c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004368:	f7fd fb9a 	bl	8001aa0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004376:	d901      	bls.n	800437c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e007      	b.n	800438c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d122      	bne.n	80043f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c2:	f7fd fb6d 	bl	8001aa0 <HAL_GetTick>
 80043c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043c8:	e00c      	b.n	80043e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043ca:	f7fd fb69 	bl	8001aa0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d8:	d904      	bls.n	80043e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <RTC_EnterInitMode+0x64>
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d1e8      	bne.n	80043ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff89 	bl	8004344 <HAL_RTC_WaitForSynchro>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2204      	movs	r2, #4
 800443c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800445a:	e005      	b.n	8004468 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	3301      	adds	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	3b0a      	subs	r3, #10
 8004466:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b09      	cmp	r3, #9
 800446c:	d8f6      	bhi.n	800445c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	b2da      	uxtb	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4313      	orrs	r3, r2
 8004478:	b2db      	uxtb	r3, r3
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e041      	b.n	800451c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd f96f 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 fc79 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e04e      	b.n	80045da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_Base_Start_IT+0xc8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d111      	bne.n	80045c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d010      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	e007      	b.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40010400 	.word	0x40010400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40001800 	.word	0x40001800

08004604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e041      	b.n	800469a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f839 	bl	80046a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fbba 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <HAL_TIM_PWM_Start+0x24>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e022      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d109      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x3e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e015      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d109      	bne.n	8004710 <HAL_TIM_PWM_Start+0x58>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e008      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e07c      	b.n	8004824 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0x82>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	e013      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0x92>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	e00b      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	e003      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fe10 	bl	8005390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_TIM_PWM_Start+0x174>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIM_PWM_Start+0xcc>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <HAL_TIM_PWM_Start+0x178>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_TIM_PWM_Start+0xd0>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_TIM_PWM_Start+0xd2>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_TIM_PWM_Start+0x174>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d01d      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <HAL_TIM_PWM_Start+0x17c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_TIM_PWM_Start+0x180>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_TIM_PWM_Start+0x184>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_PWM_Start+0x178>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIM_PWM_Start+0x188>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIM_PWM_Start+0x136>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIM_PWM_Start+0x18c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d010      	beq.n	8004822 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e007      	b.n	8004822 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40010000 	.word	0x40010000
 8004830:	40010400 	.word	0x40010400
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40014000 	.word	0x40014000
 8004844:	40001800 	.word	0x40001800

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa77 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa69 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa7a 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa4d 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa3f 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fa50 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa23 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa15 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa26 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9f9 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9eb 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9fc 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fad6 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fd78 	bl	80054e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9c1 	bl	8004da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0220 	mvn.w	r2, #32
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fd42 	bl	80054d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0ae      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	f200 809f 	bhi.w	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004bc5 	.word	0x08004bc5
 8004a94:	08004bc5 	.word	0x08004bc5
 8004a98:	08004bc5 	.word	0x08004bc5
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004bc5 	.word	0x08004bc5
 8004aa4:	08004bc5 	.word	0x08004bc5
 8004aa8:	08004bc5 	.word	0x08004bc5
 8004aac:	08004b43 	.word	0x08004b43
 8004ab0:	08004bc5 	.word	0x08004bc5
 8004ab4:	08004bc5 	.word	0x08004bc5
 8004ab8:	08004bc5 	.word	0x08004bc5
 8004abc:	08004b83 	.word	0x08004b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa18 	bl	8004efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]
      break;
 8004afe:	e064      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa68 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
      break;
 8004b40:	e043      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fabd 	bl	80050c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	61da      	str	r2, [r3, #28]
      break;
 8004b80:	e023      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fb11 	bl	80051b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	021a      	lsls	r2, r3, #8
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0b4      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x186>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d03e      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	f200 8087 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_TIM_ConfigClockSource+0x172>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d87f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d01a      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xa6>
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d87b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d050      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d877      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d873      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d058      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x13a>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d86f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d064      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d86b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d060      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d867      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d05a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	e062      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f000 fb5d 	bl	8005350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e04f      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f000 fb46 	bl	8005350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e03c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 faba 	bl	800525c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2150      	movs	r1, #80	; 0x50
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb13 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e02c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fad9 	bl	80052ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2160      	movs	r1, #96	; 0x60
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fb03 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004d14:	e01c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fa9a 	bl	800525c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 faf3 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f000 faea 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40001c00 	.word	0x40001c00
 8004ef8:	40002000 	.word	0x40002000

08004efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0302 	bic.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC1_SetConfig+0x64>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0308 	bic.w	r3, r3, #8
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC1_SetConfig+0x8e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d111      	bne.n	8004fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC2_SetConfig+0x68>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x94>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d113      	bne.n	8005098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC3_SetConfig+0x66>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x92>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40010400 	.word	0x40010400

080051b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <TIM_OC4_SetConfig+0xa4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC4_SetConfig+0x68>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <TIM_OC4_SetConfig+0xa8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d109      	bne.n	800522c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400

0800525c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 030a 	bic.w	r3, r3, #10
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0210 	bic.w	r2, r3, #16
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2201      	movs	r2, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e05a      	b.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d01d      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10c      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800

080054d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03f      	b.n	800558e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fc f9e4 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	; 0x24
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fd7b 	bl	800603c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b08a      	sub	sp, #40	; 0x28
 800559a:	af02      	add	r7, sp, #8
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d17c      	bne.n	80056b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Transmit+0x2c>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e075      	b.n	80056b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Transmit+0x3e>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e06e      	b.n	80056b2 <HAL_UART_Transmit+0x11c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2221      	movs	r2, #33	; 0x21
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ea:	f7fc fa59 	bl	8001aa0 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005604:	d108      	bne.n	8005618 <HAL_UART_Transmit+0x82>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e003      	b.n	8005620 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005628:	e02a      	b.n	8005680 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 faf9 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e036      	b.n	80056b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e007      	b.n	8005672 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1cf      	bne.n	800562a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2140      	movs	r1, #64	; 0x40
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fac9 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e006      	b.n	80056b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b0ba      	sub	sp, #232	; 0xe8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0x66>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fbd3 	bl	8005ec6 <UART_Receive_IT>
      return;
 8005720:	e256      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80de 	beq.w	80058e8 <HAL_UART_IRQHandler+0x22c>
 800572c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80d1 	beq.w	80058e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_UART_IRQHandler+0xae>
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_UART_IRQHandler+0xd2>
 8005776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0202 	orr.w	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_UART_IRQHandler+0xf6>
 800579a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0204 	orr.w	r2, r3, #4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <HAL_UART_IRQHandler+0x126>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f043 0208 	orr.w	r2, r3, #8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 81ed 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_UART_IRQHandler+0x14e>
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb5e 	bl	8005ec6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_UART_IRQHandler+0x17a>
 800582e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa66 	bl	8005d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d141      	bne.n	80058ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800587a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800588e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1d9      	bne.n	800584a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	4a7d      	ldr	r2, [pc, #500]	; (8005a98 <HAL_UART_IRQHandler+0x3dc>)
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fc fd5b 	bl	8002366 <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00e      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f99a 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e00a      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f996 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e006      	b.n	80058e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f992 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058e2:	e170      	b.n	8005bc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	bf00      	nop
    return;
 80058e6:	e16e      	b.n	8005bc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	f040 814a 	bne.w	8005b86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8143 	beq.w	8005b86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 813c 	beq.w	8005b86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	f040 80b4 	bne.w	8005a9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8140 	beq.w	8005bca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800594e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005952:	429a      	cmp	r2, r3
 8005954:	f080 8139 	bcs.w	8005bca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	f000 8088 	beq.w	8005a7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800599a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800599e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1d9      	bne.n	800596e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3314      	adds	r3, #20
 80059c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e1      	bne.n	80059ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e3      	bne.n	80059f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4e:	f023 0310 	bic.w	r3, r3, #16
 8005a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e3      	bne.n	8005a3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fc fc04 	bl	8002286 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8c0 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a94:	e099      	b.n	8005bca <HAL_UART_IRQHandler+0x50e>
 8005a96:	bf00      	nop
 8005a98:	08005dcf 	.word	0x08005dcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 808b 	beq.w	8005bce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8086 	beq.w	8005bce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ae8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e3      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e3      	bne.n	8005afa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0310 	bic.w	r3, r3, #16
 8005b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b64:	61fa      	str	r2, [r7, #28]
 8005b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	617b      	str	r3, [r7, #20]
   return(result);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e3      	bne.n	8005b40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f848 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b84:	e023      	b.n	8005bce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x4ea>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f929 	bl	8005df6 <UART_Transmit_IT>
    return;
 8005ba4:	e014      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x514>
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f969 	bl	8005e96 <UART_EndTransmit_IT>
    return;
 8005bc4:	e004      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
    return;
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005bca:	bf00      	nop
 8005bcc:	e000      	b.n	8005bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005bce:	bf00      	nop
  }
}
 8005bd0:	37e8      	adds	r7, #232	; 0xe8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b090      	sub	sp, #64	; 0x40
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3c:	e050      	b.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d04c      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c4c:	f7fb ff28 	bl	8001aa0 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d241      	bcs.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c7c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3314      	adds	r3, #20
 8005c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cb0:	623a      	str	r2, [r7, #32]
 8005cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e00f      	b.n	8005d00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d09f      	beq.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3740      	adds	r7, #64	; 0x40
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b095      	sub	sp, #84	; 0x54
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d30:	643a      	str	r2, [r7, #64]	; 0x40
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d119      	bne.n	8005db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 0310 	bic.w	r3, r3, #16
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da0:	61ba      	str	r2, [r7, #24]
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dc2:	bf00      	nop
 8005dc4:	3754      	adds	r7, #84	; 0x54
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff09 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b21      	cmp	r3, #33	; 0x21
 8005e08:	d13e      	bne.n	8005e88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d114      	bne.n	8005e3e <UART_Transmit_IT+0x48>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d110      	bne.n	8005e3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]
 8005e3c:	e008      	b.n	8005e50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6211      	str	r1, [r2, #32]
 8005e48:	781a      	ldrb	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e000      	b.n	8005e8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
  }
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fe8e 	bl	8005bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b08c      	sub	sp, #48	; 0x30
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b22      	cmp	r3, #34	; 0x22
 8005ed8:	f040 80ab 	bne.w	8006032 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d117      	bne.n	8005f16 <UART_Receive_IT+0x50>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
 8005f14:	e026      	b.n	8005f64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f28:	d007      	beq.n	8005f3a <UART_Receive_IT+0x74>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <UART_Receive_IT+0x82>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e008      	b.n	8005f5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4619      	mov	r1, r3
 8005f72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d15a      	bne.n	800602e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0220 	bic.w	r2, r2, #32
 8005f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d135      	bne.n	8006024 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f023 0310 	bic.w	r3, r3, #16
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fde:	623a      	str	r2, [r7, #32]
 8005fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d10a      	bne.n	8006016 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fdf9 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
 8006022:	e002      	b.n	800602a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fde1 	bl	8005bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e002      	b.n	8006034 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e000      	b.n	8006034 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
  }
}
 8006034:	4618      	mov	r0, r3
 8006036:	3730      	adds	r7, #48	; 0x30
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b0c0      	sub	sp, #256	; 0x100
 8006042:	af00      	add	r7, sp, #0
 8006044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	ea40 0301 	orr.w	r3, r0, r1
 8006064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006094:	f021 010c 	bic.w	r1, r1, #12
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060a2:	430b      	orrs	r3, r1
 80060a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	6999      	ldr	r1, [r3, #24]
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	ea40 0301 	orr.w	r3, r0, r1
 80060c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b8f      	ldr	r3, [pc, #572]	; (8006308 <UART_SetConfig+0x2cc>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d005      	beq.n	80060dc <UART_SetConfig+0xa0>
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b8d      	ldr	r3, [pc, #564]	; (800630c <UART_SetConfig+0x2d0>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d104      	bne.n	80060e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd fdca 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 80060e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060e4:	e003      	b.n	80060ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060e6:	f7fd fdb1 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 80060ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	f040 810c 	bne.w	8006314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006100:	2200      	movs	r2, #0
 8006102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800610a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	1891      	adds	r1, r2, r2
 8006114:	65b9      	str	r1, [r7, #88]	; 0x58
 8006116:	415b      	adcs	r3, r3
 8006118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800611e:	4621      	mov	r1, r4
 8006120:	eb12 0801 	adds.w	r8, r2, r1
 8006124:	4629      	mov	r1, r5
 8006126:	eb43 0901 	adc.w	r9, r3, r1
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800613a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800613e:	4690      	mov	r8, r2
 8006140:	4699      	mov	r9, r3
 8006142:	4623      	mov	r3, r4
 8006144:	eb18 0303 	adds.w	r3, r8, r3
 8006148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800614c:	462b      	mov	r3, r5
 800614e:	eb49 0303 	adc.w	r3, r9, r3
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800616a:	460b      	mov	r3, r1
 800616c:	18db      	adds	r3, r3, r3
 800616e:	653b      	str	r3, [r7, #80]	; 0x50
 8006170:	4613      	mov	r3, r2
 8006172:	eb42 0303 	adc.w	r3, r2, r3
 8006176:	657b      	str	r3, [r7, #84]	; 0x54
 8006178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800617c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006180:	f7fa f88e 	bl	80002a0 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b61      	ldr	r3, [pc, #388]	; (8006310 <UART_SetConfig+0x2d4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	011c      	lsls	r4, r3, #4
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800619c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80061ac:	415b      	adcs	r3, r3
 80061ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061b4:	4641      	mov	r1, r8
 80061b6:	eb12 0a01 	adds.w	sl, r2, r1
 80061ba:	4649      	mov	r1, r9
 80061bc:	eb43 0b01 	adc.w	fp, r3, r1
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d4:	4692      	mov	sl, r2
 80061d6:	469b      	mov	fp, r3
 80061d8:	4643      	mov	r3, r8
 80061da:	eb1a 0303 	adds.w	r3, sl, r3
 80061de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e2:	464b      	mov	r3, r9
 80061e4:	eb4b 0303 	adc.w	r3, fp, r3
 80061e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006200:	460b      	mov	r3, r1
 8006202:	18db      	adds	r3, r3, r3
 8006204:	643b      	str	r3, [r7, #64]	; 0x40
 8006206:	4613      	mov	r3, r2
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	647b      	str	r3, [r7, #68]	; 0x44
 800620e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006216:	f7fa f843 	bl	80002a0 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4611      	mov	r1, r2
 8006220:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <UART_SetConfig+0x2d4>)
 8006222:	fba3 2301 	umull	r2, r3, r3, r1
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2264      	movs	r2, #100	; 0x64
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	1acb      	subs	r3, r1, r3
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006236:	4b36      	ldr	r3, [pc, #216]	; (8006310 <UART_SetConfig+0x2d4>)
 8006238:	fba3 2302 	umull	r2, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006244:	441c      	add	r4, r3
 8006246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006260:	415b      	adcs	r3, r3
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006268:	4641      	mov	r1, r8
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6339      	str	r1, [r7, #48]	; 0x30
 800626e:	4649      	mov	r1, r9
 8006270:	414b      	adcs	r3, r1
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006280:	4659      	mov	r1, fp
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628a:	4651      	mov	r1, sl
 800628c:	00ca      	lsls	r2, r1, #3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	4603      	mov	r3, r0
 8006294:	4642      	mov	r2, r8
 8006296:	189b      	adds	r3, r3, r2
 8006298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800629c:	464b      	mov	r3, r9
 800629e:	460a      	mov	r2, r1
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062d2:	f7f9 ffe5 	bl	80002a0 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <UART_SetConfig+0x2d4>)
 80062dc:	fba3 1302 	umull	r1, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	2164      	movs	r1, #100	; 0x64
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	3332      	adds	r3, #50	; 0x32
 80062ee:	4a08      	ldr	r2, [pc, #32]	; (8006310 <UART_SetConfig+0x2d4>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f003 0207 	and.w	r2, r3, #7
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4422      	add	r2, r4
 8006302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006304:	e105      	b.n	8006512 <UART_SetConfig+0x4d6>
 8006306:	bf00      	nop
 8006308:	40011000 	.word	0x40011000
 800630c:	40011400 	.word	0x40011400
 8006310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006318:	2200      	movs	r2, #0
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800631e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	1891      	adds	r1, r2, r2
 800632c:	6239      	str	r1, [r7, #32]
 800632e:	415b      	adcs	r3, r3
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006336:	4641      	mov	r1, r8
 8006338:	1854      	adds	r4, r2, r1
 800633a:	4649      	mov	r1, r9
 800633c:	eb43 0501 	adc.w	r5, r3, r1
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	00eb      	lsls	r3, r5, #3
 800634a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634e:	00e2      	lsls	r2, r4, #3
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4643      	mov	r3, r8
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800635c:	464b      	mov	r3, r9
 800635e:	eb45 0303 	adc.w	r3, r5, r3
 8006362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006382:	4629      	mov	r1, r5
 8006384:	008b      	lsls	r3, r1, #2
 8006386:	4621      	mov	r1, r4
 8006388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638c:	4621      	mov	r1, r4
 800638e:	008a      	lsls	r2, r1, #2
 8006390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006394:	f7f9 ff84 	bl	80002a0 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4b60      	ldr	r3, [pc, #384]	; (8006520 <UART_SetConfig+0x4e4>)
 800639e:	fba3 2302 	umull	r2, r3, r3, r2
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	011c      	lsls	r4, r3, #4
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	1891      	adds	r1, r2, r2
 80063be:	61b9      	str	r1, [r7, #24]
 80063c0:	415b      	adcs	r3, r3
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c8:	4641      	mov	r1, r8
 80063ca:	1851      	adds	r1, r2, r1
 80063cc:	6139      	str	r1, [r7, #16]
 80063ce:	4649      	mov	r1, r9
 80063d0:	414b      	adcs	r3, r1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e0:	4659      	mov	r1, fp
 80063e2:	00cb      	lsls	r3, r1, #3
 80063e4:	4651      	mov	r1, sl
 80063e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ea:	4651      	mov	r1, sl
 80063ec:	00ca      	lsls	r2, r1, #3
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	4642      	mov	r2, r8
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063fc:	464b      	mov	r3, r9
 80063fe:	460a      	mov	r2, r1
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	67bb      	str	r3, [r7, #120]	; 0x78
 8006412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006432:	f7f9 ff35 	bl	80002a0 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b39      	ldr	r3, [pc, #228]	; (8006520 <UART_SetConfig+0x4e4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	; 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	3332      	adds	r3, #50	; 0x32
 800644e:	4a34      	ldr	r2, [pc, #208]	; (8006520 <UART_SetConfig+0x4e4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800645a:	441c      	add	r4, r3
 800645c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006460:	2200      	movs	r2, #0
 8006462:	673b      	str	r3, [r7, #112]	; 0x70
 8006464:	677a      	str	r2, [r7, #116]	; 0x74
 8006466:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800646a:	4642      	mov	r2, r8
 800646c:	464b      	mov	r3, r9
 800646e:	1891      	adds	r1, r2, r2
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	415b      	adcs	r3, r3
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647a:	4641      	mov	r1, r8
 800647c:	1851      	adds	r1, r2, r1
 800647e:	6039      	str	r1, [r7, #0]
 8006480:	4649      	mov	r1, r9
 8006482:	414b      	adcs	r3, r1
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006492:	4659      	mov	r1, fp
 8006494:	00cb      	lsls	r3, r1, #3
 8006496:	4651      	mov	r1, sl
 8006498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649c:	4651      	mov	r1, sl
 800649e:	00ca      	lsls	r2, r1, #3
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	4603      	mov	r3, r0
 80064a6:	4642      	mov	r2, r8
 80064a8:	189b      	adds	r3, r3, r2
 80064aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ac:	464b      	mov	r3, r9
 80064ae:	460a      	mov	r2, r1
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	663b      	str	r3, [r7, #96]	; 0x60
 80064c0:	667a      	str	r2, [r7, #100]	; 0x64
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064ce:	4649      	mov	r1, r9
 80064d0:	008b      	lsls	r3, r1, #2
 80064d2:	4641      	mov	r1, r8
 80064d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d8:	4641      	mov	r1, r8
 80064da:	008a      	lsls	r2, r1, #2
 80064dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064e0:	f7f9 fede 	bl	80002a0 <__aeabi_uldivmod>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <UART_SetConfig+0x4e4>)
 80064ea:	fba3 1302 	umull	r1, r3, r3, r2
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	2164      	movs	r1, #100	; 0x64
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	3332      	adds	r3, #50	; 0x32
 80064fc:	4a08      	ldr	r2, [pc, #32]	; (8006520 <UART_SetConfig+0x4e4>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	f003 020f 	and.w	r2, r3, #15
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4422      	add	r2, r4
 8006510:	609a      	str	r2, [r3, #8]
}
 8006512:	bf00      	nop
 8006514:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800651e:	bf00      	nop
 8006520:	51eb851f 	.word	0x51eb851f

08006524 <__errno>:
 8006524:	4b01      	ldr	r3, [pc, #4]	; (800652c <__errno+0x8>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000014 	.word	0x20000014

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	; (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2600      	movs	r6, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	; (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <__libc_init_array+0x44>)
 8006544:	f001 fa00 	bl	8007948 <_init>
 8006548:	1b64      	subs	r4, r4, r5
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2600      	movs	r6, #0
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	08008188 	.word	0x08008188
 800656c:	08008188 	.word	0x08008188
 8006570:	08008188 	.word	0x08008188
 8006574:	0800818c 	.word	0x0800818c

08006578 <memcpy>:
 8006578:	440a      	add	r2, r1
 800657a:	4291      	cmp	r1, r2
 800657c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006580:	d100      	bne.n	8006584 <memcpy+0xc>
 8006582:	4770      	bx	lr
 8006584:	b510      	push	{r4, lr}
 8006586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658e:	4291      	cmp	r1, r2
 8006590:	d1f9      	bne.n	8006586 <memcpy+0xe>
 8006592:	bd10      	pop	{r4, pc}

08006594 <memset>:
 8006594:	4402      	add	r2, r0
 8006596:	4603      	mov	r3, r0
 8006598:	4293      	cmp	r3, r2
 800659a:	d100      	bne.n	800659e <memset+0xa>
 800659c:	4770      	bx	lr
 800659e:	f803 1b01 	strb.w	r1, [r3], #1
 80065a2:	e7f9      	b.n	8006598 <memset+0x4>

080065a4 <iprintf>:
 80065a4:	b40f      	push	{r0, r1, r2, r3}
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <iprintf+0x2c>)
 80065a8:	b513      	push	{r0, r1, r4, lr}
 80065aa:	681c      	ldr	r4, [r3, #0]
 80065ac:	b124      	cbz	r4, 80065b8 <iprintf+0x14>
 80065ae:	69a3      	ldr	r3, [r4, #24]
 80065b0:	b913      	cbnz	r3, 80065b8 <iprintf+0x14>
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fa7e 	bl	8006ab4 <__sinit>
 80065b8:	ab05      	add	r3, sp, #20
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	68a1      	ldr	r1, [r4, #8]
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fde3 	bl	800718c <_vfiprintf_r>
 80065c6:	b002      	add	sp, #8
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	b004      	add	sp, #16
 80065ce:	4770      	bx	lr
 80065d0:	20000014 	.word	0x20000014

080065d4 <_puts_r>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	460e      	mov	r6, r1
 80065d8:	4605      	mov	r5, r0
 80065da:	b118      	cbz	r0, 80065e4 <_puts_r+0x10>
 80065dc:	6983      	ldr	r3, [r0, #24]
 80065de:	b90b      	cbnz	r3, 80065e4 <_puts_r+0x10>
 80065e0:	f000 fa68 	bl	8006ab4 <__sinit>
 80065e4:	69ab      	ldr	r3, [r5, #24]
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	b913      	cbnz	r3, 80065f0 <_puts_r+0x1c>
 80065ea:	4628      	mov	r0, r5
 80065ec:	f000 fa62 	bl	8006ab4 <__sinit>
 80065f0:	4b2c      	ldr	r3, [pc, #176]	; (80066a4 <_puts_r+0xd0>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d120      	bne.n	8006638 <_puts_r+0x64>
 80065f6:	686c      	ldr	r4, [r5, #4]
 80065f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fa:	07db      	lsls	r3, r3, #31
 80065fc:	d405      	bmi.n	800660a <_puts_r+0x36>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	0598      	lsls	r0, r3, #22
 8006602:	d402      	bmi.n	800660a <_puts_r+0x36>
 8006604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006606:	f000 faf3 	bl	8006bf0 <__retarget_lock_acquire_recursive>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	0719      	lsls	r1, r3, #28
 800660e:	d51d      	bpl.n	800664c <_puts_r+0x78>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	b1db      	cbz	r3, 800664c <_puts_r+0x78>
 8006614:	3e01      	subs	r6, #1
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800661c:	3b01      	subs	r3, #1
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	bb39      	cbnz	r1, 8006672 <_puts_r+0x9e>
 8006622:	2b00      	cmp	r3, #0
 8006624:	da38      	bge.n	8006698 <_puts_r+0xc4>
 8006626:	4622      	mov	r2, r4
 8006628:	210a      	movs	r1, #10
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f868 	bl	8006700 <__swbuf_r>
 8006630:	3001      	adds	r0, #1
 8006632:	d011      	beq.n	8006658 <_puts_r+0x84>
 8006634:	250a      	movs	r5, #10
 8006636:	e011      	b.n	800665c <_puts_r+0x88>
 8006638:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <_puts_r+0xd4>)
 800663a:	429c      	cmp	r4, r3
 800663c:	d101      	bne.n	8006642 <_puts_r+0x6e>
 800663e:	68ac      	ldr	r4, [r5, #8]
 8006640:	e7da      	b.n	80065f8 <_puts_r+0x24>
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <_puts_r+0xd8>)
 8006644:	429c      	cmp	r4, r3
 8006646:	bf08      	it	eq
 8006648:	68ec      	ldreq	r4, [r5, #12]
 800664a:	e7d5      	b.n	80065f8 <_puts_r+0x24>
 800664c:	4621      	mov	r1, r4
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f8a8 	bl	80067a4 <__swsetup_r>
 8006654:	2800      	cmp	r0, #0
 8006656:	d0dd      	beq.n	8006614 <_puts_r+0x40>
 8006658:	f04f 35ff 	mov.w	r5, #4294967295
 800665c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800665e:	07da      	lsls	r2, r3, #31
 8006660:	d405      	bmi.n	800666e <_puts_r+0x9a>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	059b      	lsls	r3, r3, #22
 8006666:	d402      	bmi.n	800666e <_puts_r+0x9a>
 8006668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800666a:	f000 fac2 	bl	8006bf2 <__retarget_lock_release_recursive>
 800666e:	4628      	mov	r0, r5
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	2b00      	cmp	r3, #0
 8006674:	da04      	bge.n	8006680 <_puts_r+0xac>
 8006676:	69a2      	ldr	r2, [r4, #24]
 8006678:	429a      	cmp	r2, r3
 800667a:	dc06      	bgt.n	800668a <_puts_r+0xb6>
 800667c:	290a      	cmp	r1, #10
 800667e:	d004      	beq.n	800668a <_puts_r+0xb6>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	6022      	str	r2, [r4, #0]
 8006686:	7019      	strb	r1, [r3, #0]
 8006688:	e7c5      	b.n	8006616 <_puts_r+0x42>
 800668a:	4622      	mov	r2, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f000 f837 	bl	8006700 <__swbuf_r>
 8006692:	3001      	adds	r0, #1
 8006694:	d1bf      	bne.n	8006616 <_puts_r+0x42>
 8006696:	e7df      	b.n	8006658 <_puts_r+0x84>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	250a      	movs	r5, #10
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	701d      	strb	r5, [r3, #0]
 80066a2:	e7db      	b.n	800665c <_puts_r+0x88>
 80066a4:	0800810c 	.word	0x0800810c
 80066a8:	0800812c 	.word	0x0800812c
 80066ac:	080080ec 	.word	0x080080ec

080066b0 <puts>:
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <puts+0xc>)
 80066b2:	4601      	mov	r1, r0
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f7ff bf8d 	b.w	80065d4 <_puts_r>
 80066ba:	bf00      	nop
 80066bc:	20000014 	.word	0x20000014

080066c0 <siprintf>:
 80066c0:	b40e      	push	{r1, r2, r3}
 80066c2:	b500      	push	{lr}
 80066c4:	b09c      	sub	sp, #112	; 0x70
 80066c6:	ab1d      	add	r3, sp, #116	; 0x74
 80066c8:	9002      	str	r0, [sp, #8]
 80066ca:	9006      	str	r0, [sp, #24]
 80066cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066d0:	4809      	ldr	r0, [pc, #36]	; (80066f8 <siprintf+0x38>)
 80066d2:	9107      	str	r1, [sp, #28]
 80066d4:	9104      	str	r1, [sp, #16]
 80066d6:	4909      	ldr	r1, [pc, #36]	; (80066fc <siprintf+0x3c>)
 80066d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066dc:	9105      	str	r1, [sp, #20]
 80066de:	6800      	ldr	r0, [r0, #0]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	a902      	add	r1, sp, #8
 80066e4:	f000 fc28 	bl	8006f38 <_svfiprintf_r>
 80066e8:	9b02      	ldr	r3, [sp, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	b01c      	add	sp, #112	; 0x70
 80066f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f4:	b003      	add	sp, #12
 80066f6:	4770      	bx	lr
 80066f8:	20000014 	.word	0x20000014
 80066fc:	ffff0208 	.word	0xffff0208

08006700 <__swbuf_r>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	460e      	mov	r6, r1
 8006704:	4614      	mov	r4, r2
 8006706:	4605      	mov	r5, r0
 8006708:	b118      	cbz	r0, 8006712 <__swbuf_r+0x12>
 800670a:	6983      	ldr	r3, [r0, #24]
 800670c:	b90b      	cbnz	r3, 8006712 <__swbuf_r+0x12>
 800670e:	f000 f9d1 	bl	8006ab4 <__sinit>
 8006712:	4b21      	ldr	r3, [pc, #132]	; (8006798 <__swbuf_r+0x98>)
 8006714:	429c      	cmp	r4, r3
 8006716:	d12b      	bne.n	8006770 <__swbuf_r+0x70>
 8006718:	686c      	ldr	r4, [r5, #4]
 800671a:	69a3      	ldr	r3, [r4, #24]
 800671c:	60a3      	str	r3, [r4, #8]
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	071a      	lsls	r2, r3, #28
 8006722:	d52f      	bpl.n	8006784 <__swbuf_r+0x84>
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	b36b      	cbz	r3, 8006784 <__swbuf_r+0x84>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	1ac0      	subs	r0, r0, r3
 800672e:	6963      	ldr	r3, [r4, #20]
 8006730:	b2f6      	uxtb	r6, r6
 8006732:	4283      	cmp	r3, r0
 8006734:	4637      	mov	r7, r6
 8006736:	dc04      	bgt.n	8006742 <__swbuf_r+0x42>
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f926 	bl	800698c <_fflush_r>
 8006740:	bb30      	cbnz	r0, 8006790 <__swbuf_r+0x90>
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	3b01      	subs	r3, #1
 8006746:	60a3      	str	r3, [r4, #8]
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	6022      	str	r2, [r4, #0]
 800674e:	701e      	strb	r6, [r3, #0]
 8006750:	6963      	ldr	r3, [r4, #20]
 8006752:	3001      	adds	r0, #1
 8006754:	4283      	cmp	r3, r0
 8006756:	d004      	beq.n	8006762 <__swbuf_r+0x62>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	07db      	lsls	r3, r3, #31
 800675c:	d506      	bpl.n	800676c <__swbuf_r+0x6c>
 800675e:	2e0a      	cmp	r6, #10
 8006760:	d104      	bne.n	800676c <__swbuf_r+0x6c>
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 f911 	bl	800698c <_fflush_r>
 800676a:	b988      	cbnz	r0, 8006790 <__swbuf_r+0x90>
 800676c:	4638      	mov	r0, r7
 800676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <__swbuf_r+0x9c>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d101      	bne.n	800677a <__swbuf_r+0x7a>
 8006776:	68ac      	ldr	r4, [r5, #8]
 8006778:	e7cf      	b.n	800671a <__swbuf_r+0x1a>
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <__swbuf_r+0xa0>)
 800677c:	429c      	cmp	r4, r3
 800677e:	bf08      	it	eq
 8006780:	68ec      	ldreq	r4, [r5, #12]
 8006782:	e7ca      	b.n	800671a <__swbuf_r+0x1a>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f80c 	bl	80067a4 <__swsetup_r>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0cb      	beq.n	8006728 <__swbuf_r+0x28>
 8006790:	f04f 37ff 	mov.w	r7, #4294967295
 8006794:	e7ea      	b.n	800676c <__swbuf_r+0x6c>
 8006796:	bf00      	nop
 8006798:	0800810c 	.word	0x0800810c
 800679c:	0800812c 	.word	0x0800812c
 80067a0:	080080ec 	.word	0x080080ec

080067a4 <__swsetup_r>:
 80067a4:	4b32      	ldr	r3, [pc, #200]	; (8006870 <__swsetup_r+0xcc>)
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	681d      	ldr	r5, [r3, #0]
 80067aa:	4606      	mov	r6, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	b125      	cbz	r5, 80067ba <__swsetup_r+0x16>
 80067b0:	69ab      	ldr	r3, [r5, #24]
 80067b2:	b913      	cbnz	r3, 80067ba <__swsetup_r+0x16>
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 f97d 	bl	8006ab4 <__sinit>
 80067ba:	4b2e      	ldr	r3, [pc, #184]	; (8006874 <__swsetup_r+0xd0>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	d10f      	bne.n	80067e0 <__swsetup_r+0x3c>
 80067c0:	686c      	ldr	r4, [r5, #4]
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067c8:	0719      	lsls	r1, r3, #28
 80067ca:	d42c      	bmi.n	8006826 <__swsetup_r+0x82>
 80067cc:	06dd      	lsls	r5, r3, #27
 80067ce:	d411      	bmi.n	80067f4 <__swsetup_r+0x50>
 80067d0:	2309      	movs	r3, #9
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	e03e      	b.n	800685e <__swsetup_r+0xba>
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <__swsetup_r+0xd4>)
 80067e2:	429c      	cmp	r4, r3
 80067e4:	d101      	bne.n	80067ea <__swsetup_r+0x46>
 80067e6:	68ac      	ldr	r4, [r5, #8]
 80067e8:	e7eb      	b.n	80067c2 <__swsetup_r+0x1e>
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <__swsetup_r+0xd8>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	bf08      	it	eq
 80067f0:	68ec      	ldreq	r4, [r5, #12]
 80067f2:	e7e6      	b.n	80067c2 <__swsetup_r+0x1e>
 80067f4:	0758      	lsls	r0, r3, #29
 80067f6:	d512      	bpl.n	800681e <__swsetup_r+0x7a>
 80067f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fa:	b141      	cbz	r1, 800680e <__swsetup_r+0x6a>
 80067fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <__swsetup_r+0x66>
 8006804:	4630      	mov	r0, r6
 8006806:	f000 fa5b 	bl	8006cc0 <_free_r>
 800680a:	2300      	movs	r3, #0
 800680c:	6363      	str	r3, [r4, #52]	; 0x34
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	2300      	movs	r3, #0
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	f043 0308 	orr.w	r3, r3, #8
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	b94b      	cbnz	r3, 800683e <__swsetup_r+0x9a>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d003      	beq.n	800683e <__swsetup_r+0x9a>
 8006836:	4621      	mov	r1, r4
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fa01 	bl	8006c40 <__smakebuf_r>
 800683e:	89a0      	ldrh	r0, [r4, #12]
 8006840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006844:	f010 0301 	ands.w	r3, r0, #1
 8006848:	d00a      	beq.n	8006860 <__swsetup_r+0xbc>
 800684a:	2300      	movs	r3, #0
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	6963      	ldr	r3, [r4, #20]
 8006850:	425b      	negs	r3, r3
 8006852:	61a3      	str	r3, [r4, #24]
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	b943      	cbnz	r3, 800686a <__swsetup_r+0xc6>
 8006858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800685c:	d1ba      	bne.n	80067d4 <__swsetup_r+0x30>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	0781      	lsls	r1, r0, #30
 8006862:	bf58      	it	pl
 8006864:	6963      	ldrpl	r3, [r4, #20]
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	e7f4      	b.n	8006854 <__swsetup_r+0xb0>
 800686a:	2000      	movs	r0, #0
 800686c:	e7f7      	b.n	800685e <__swsetup_r+0xba>
 800686e:	bf00      	nop
 8006870:	20000014 	.word	0x20000014
 8006874:	0800810c 	.word	0x0800810c
 8006878:	0800812c 	.word	0x0800812c
 800687c:	080080ec 	.word	0x080080ec

08006880 <__sflush_r>:
 8006880:	898a      	ldrh	r2, [r1, #12]
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	4605      	mov	r5, r0
 8006888:	0710      	lsls	r0, r2, #28
 800688a:	460c      	mov	r4, r1
 800688c:	d458      	bmi.n	8006940 <__sflush_r+0xc0>
 800688e:	684b      	ldr	r3, [r1, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc05      	bgt.n	80068a0 <__sflush_r+0x20>
 8006894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	dc02      	bgt.n	80068a0 <__sflush_r+0x20>
 800689a:	2000      	movs	r0, #0
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	d0f9      	beq.n	800689a <__sflush_r+0x1a>
 80068a6:	2300      	movs	r3, #0
 80068a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068ac:	682f      	ldr	r7, [r5, #0]
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	d032      	beq.n	8006918 <__sflush_r+0x98>
 80068b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	075a      	lsls	r2, r3, #29
 80068b8:	d505      	bpl.n	80068c6 <__sflush_r+0x46>
 80068ba:	6863      	ldr	r3, [r4, #4]
 80068bc:	1ac0      	subs	r0, r0, r3
 80068be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068c0:	b10b      	cbz	r3, 80068c6 <__sflush_r+0x46>
 80068c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068c4:	1ac0      	subs	r0, r0, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	4602      	mov	r2, r0
 80068ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068cc:	6a21      	ldr	r1, [r4, #32]
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b0      	blx	r6
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	d106      	bne.n	80068e6 <__sflush_r+0x66>
 80068d8:	6829      	ldr	r1, [r5, #0]
 80068da:	291d      	cmp	r1, #29
 80068dc:	d82c      	bhi.n	8006938 <__sflush_r+0xb8>
 80068de:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <__sflush_r+0x108>)
 80068e0:	40ca      	lsrs	r2, r1
 80068e2:	07d6      	lsls	r6, r2, #31
 80068e4:	d528      	bpl.n	8006938 <__sflush_r+0xb8>
 80068e6:	2200      	movs	r2, #0
 80068e8:	6062      	str	r2, [r4, #4]
 80068ea:	04d9      	lsls	r1, r3, #19
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	d504      	bpl.n	80068fc <__sflush_r+0x7c>
 80068f2:	1c42      	adds	r2, r0, #1
 80068f4:	d101      	bne.n	80068fa <__sflush_r+0x7a>
 80068f6:	682b      	ldr	r3, [r5, #0]
 80068f8:	b903      	cbnz	r3, 80068fc <__sflush_r+0x7c>
 80068fa:	6560      	str	r0, [r4, #84]	; 0x54
 80068fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fe:	602f      	str	r7, [r5, #0]
 8006900:	2900      	cmp	r1, #0
 8006902:	d0ca      	beq.n	800689a <__sflush_r+0x1a>
 8006904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006908:	4299      	cmp	r1, r3
 800690a:	d002      	beq.n	8006912 <__sflush_r+0x92>
 800690c:	4628      	mov	r0, r5
 800690e:	f000 f9d7 	bl	8006cc0 <_free_r>
 8006912:	2000      	movs	r0, #0
 8006914:	6360      	str	r0, [r4, #52]	; 0x34
 8006916:	e7c1      	b.n	800689c <__sflush_r+0x1c>
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	2301      	movs	r3, #1
 800691c:	4628      	mov	r0, r5
 800691e:	47b0      	blx	r6
 8006920:	1c41      	adds	r1, r0, #1
 8006922:	d1c7      	bne.n	80068b4 <__sflush_r+0x34>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0c4      	beq.n	80068b4 <__sflush_r+0x34>
 800692a:	2b1d      	cmp	r3, #29
 800692c:	d001      	beq.n	8006932 <__sflush_r+0xb2>
 800692e:	2b16      	cmp	r3, #22
 8006930:	d101      	bne.n	8006936 <__sflush_r+0xb6>
 8006932:	602f      	str	r7, [r5, #0]
 8006934:	e7b1      	b.n	800689a <__sflush_r+0x1a>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	e7ad      	b.n	800689c <__sflush_r+0x1c>
 8006940:	690f      	ldr	r7, [r1, #16]
 8006942:	2f00      	cmp	r7, #0
 8006944:	d0a9      	beq.n	800689a <__sflush_r+0x1a>
 8006946:	0793      	lsls	r3, r2, #30
 8006948:	680e      	ldr	r6, [r1, #0]
 800694a:	bf08      	it	eq
 800694c:	694b      	ldreq	r3, [r1, #20]
 800694e:	600f      	str	r7, [r1, #0]
 8006950:	bf18      	it	ne
 8006952:	2300      	movne	r3, #0
 8006954:	eba6 0807 	sub.w	r8, r6, r7
 8006958:	608b      	str	r3, [r1, #8]
 800695a:	f1b8 0f00 	cmp.w	r8, #0
 800695e:	dd9c      	ble.n	800689a <__sflush_r+0x1a>
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006964:	4643      	mov	r3, r8
 8006966:	463a      	mov	r2, r7
 8006968:	4628      	mov	r0, r5
 800696a:	47b0      	blx	r6
 800696c:	2800      	cmp	r0, #0
 800696e:	dc06      	bgt.n	800697e <__sflush_r+0xfe>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e78e      	b.n	800689c <__sflush_r+0x1c>
 800697e:	4407      	add	r7, r0
 8006980:	eba8 0800 	sub.w	r8, r8, r0
 8006984:	e7e9      	b.n	800695a <__sflush_r+0xda>
 8006986:	bf00      	nop
 8006988:	20400001 	.word	0x20400001

0800698c <_fflush_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b913      	cbnz	r3, 800699c <_fflush_r+0x10>
 8006996:	2500      	movs	r5, #0
 8006998:	4628      	mov	r0, r5
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	b118      	cbz	r0, 80069a6 <_fflush_r+0x1a>
 800699e:	6983      	ldr	r3, [r0, #24]
 80069a0:	b90b      	cbnz	r3, 80069a6 <_fflush_r+0x1a>
 80069a2:	f000 f887 	bl	8006ab4 <__sinit>
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <_fflush_r+0x6c>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d11b      	bne.n	80069e4 <_fflush_r+0x58>
 80069ac:	686c      	ldr	r4, [r5, #4]
 80069ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ef      	beq.n	8006996 <_fflush_r+0xa>
 80069b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d404      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069bc:	0599      	lsls	r1, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f000 f915 	bl	8006bf0 <__retarget_lock_acquire_recursive>
 80069c6:	4628      	mov	r0, r5
 80069c8:	4621      	mov	r1, r4
 80069ca:	f7ff ff59 	bl	8006880 <__sflush_r>
 80069ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	4605      	mov	r5, r0
 80069d4:	d4e0      	bmi.n	8006998 <_fflush_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d4dd      	bmi.n	8006998 <_fflush_r+0xc>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f000 f908 	bl	8006bf2 <__retarget_lock_release_recursive>
 80069e2:	e7d9      	b.n	8006998 <_fflush_r+0xc>
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <_fflush_r+0x70>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d101      	bne.n	80069ee <_fflush_r+0x62>
 80069ea:	68ac      	ldr	r4, [r5, #8]
 80069ec:	e7df      	b.n	80069ae <_fflush_r+0x22>
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <_fflush_r+0x74>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	bf08      	it	eq
 80069f4:	68ec      	ldreq	r4, [r5, #12]
 80069f6:	e7da      	b.n	80069ae <_fflush_r+0x22>
 80069f8:	0800810c 	.word	0x0800810c
 80069fc:	0800812c 	.word	0x0800812c
 8006a00:	080080ec 	.word	0x080080ec

08006a04 <std>:
 8006a04:	2300      	movs	r3, #0
 8006a06:	b510      	push	{r4, lr}
 8006a08:	4604      	mov	r4, r0
 8006a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a12:	6083      	str	r3, [r0, #8]
 8006a14:	8181      	strh	r1, [r0, #12]
 8006a16:	6643      	str	r3, [r0, #100]	; 0x64
 8006a18:	81c2      	strh	r2, [r0, #14]
 8006a1a:	6183      	str	r3, [r0, #24]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	2208      	movs	r2, #8
 8006a20:	305c      	adds	r0, #92	; 0x5c
 8006a22:	f7ff fdb7 	bl	8006594 <memset>
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <std+0x38>)
 8006a28:	6263      	str	r3, [r4, #36]	; 0x24
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <std+0x3c>)
 8006a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <std+0x40>)
 8006a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <std+0x44>)
 8006a34:	6224      	str	r4, [r4, #32]
 8006a36:	6323      	str	r3, [r4, #48]	; 0x30
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08007735 	.word	0x08007735
 8006a40:	08007757 	.word	0x08007757
 8006a44:	0800778f 	.word	0x0800778f
 8006a48:	080077b3 	.word	0x080077b3

08006a4c <_cleanup_r>:
 8006a4c:	4901      	ldr	r1, [pc, #4]	; (8006a54 <_cleanup_r+0x8>)
 8006a4e:	f000 b8af 	b.w	8006bb0 <_fwalk_reent>
 8006a52:	bf00      	nop
 8006a54:	0800698d 	.word	0x0800698d

08006a58 <__sfmoreglue>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	2268      	movs	r2, #104	; 0x68
 8006a5c:	1e4d      	subs	r5, r1, #1
 8006a5e:	4355      	muls	r5, r2
 8006a60:	460e      	mov	r6, r1
 8006a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a66:	f000 f997 	bl	8006d98 <_malloc_r>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	b140      	cbz	r0, 8006a80 <__sfmoreglue+0x28>
 8006a6e:	2100      	movs	r1, #0
 8006a70:	e9c0 1600 	strd	r1, r6, [r0]
 8006a74:	300c      	adds	r0, #12
 8006a76:	60a0      	str	r0, [r4, #8]
 8006a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a7c:	f7ff fd8a 	bl	8006594 <memset>
 8006a80:	4620      	mov	r0, r4
 8006a82:	bd70      	pop	{r4, r5, r6, pc}

08006a84 <__sfp_lock_acquire>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__sfp_lock_acquire+0x8>)
 8006a86:	f000 b8b3 	b.w	8006bf0 <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	200002f5 	.word	0x200002f5

08006a90 <__sfp_lock_release>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__sfp_lock_release+0x8>)
 8006a92:	f000 b8ae 	b.w	8006bf2 <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	200002f5 	.word	0x200002f5

08006a9c <__sinit_lock_acquire>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__sinit_lock_acquire+0x8>)
 8006a9e:	f000 b8a7 	b.w	8006bf0 <__retarget_lock_acquire_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	200002f6 	.word	0x200002f6

08006aa8 <__sinit_lock_release>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__sinit_lock_release+0x8>)
 8006aaa:	f000 b8a2 	b.w	8006bf2 <__retarget_lock_release_recursive>
 8006aae:	bf00      	nop
 8006ab0:	200002f6 	.word	0x200002f6

08006ab4 <__sinit>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f7ff fff0 	bl	8006a9c <__sinit_lock_acquire>
 8006abc:	69a3      	ldr	r3, [r4, #24]
 8006abe:	b11b      	cbz	r3, 8006ac8 <__sinit+0x14>
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f7ff bff0 	b.w	8006aa8 <__sinit_lock_release>
 8006ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006acc:	6523      	str	r3, [r4, #80]	; 0x50
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <__sinit+0x68>)
 8006ad0:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <__sinit+0x6c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	bf04      	itt	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	61a3      	streq	r3, [r4, #24]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 f820 	bl	8006b24 <__sfp>
 8006ae4:	6060      	str	r0, [r4, #4]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f000 f81c 	bl	8006b24 <__sfp>
 8006aec:	60a0      	str	r0, [r4, #8]
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f818 	bl	8006b24 <__sfp>
 8006af4:	2200      	movs	r2, #0
 8006af6:	60e0      	str	r0, [r4, #12]
 8006af8:	2104      	movs	r1, #4
 8006afa:	6860      	ldr	r0, [r4, #4]
 8006afc:	f7ff ff82 	bl	8006a04 <std>
 8006b00:	68a0      	ldr	r0, [r4, #8]
 8006b02:	2201      	movs	r2, #1
 8006b04:	2109      	movs	r1, #9
 8006b06:	f7ff ff7d 	bl	8006a04 <std>
 8006b0a:	68e0      	ldr	r0, [r4, #12]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	2112      	movs	r1, #18
 8006b10:	f7ff ff78 	bl	8006a04 <std>
 8006b14:	2301      	movs	r3, #1
 8006b16:	61a3      	str	r3, [r4, #24]
 8006b18:	e7d2      	b.n	8006ac0 <__sinit+0xc>
 8006b1a:	bf00      	nop
 8006b1c:	080080e8 	.word	0x080080e8
 8006b20:	08006a4d 	.word	0x08006a4d

08006b24 <__sfp>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4607      	mov	r7, r0
 8006b28:	f7ff ffac 	bl	8006a84 <__sfp_lock_acquire>
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <__sfp+0x84>)
 8006b2e:	681e      	ldr	r6, [r3, #0]
 8006b30:	69b3      	ldr	r3, [r6, #24]
 8006b32:	b913      	cbnz	r3, 8006b3a <__sfp+0x16>
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff ffbd 	bl	8006ab4 <__sinit>
 8006b3a:	3648      	adds	r6, #72	; 0x48
 8006b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	d503      	bpl.n	8006b4c <__sfp+0x28>
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	b30b      	cbz	r3, 8006b8c <__sfp+0x68>
 8006b48:	6836      	ldr	r6, [r6, #0]
 8006b4a:	e7f7      	b.n	8006b3c <__sfp+0x18>
 8006b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b50:	b9d5      	cbnz	r5, 8006b88 <__sfp+0x64>
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <__sfp+0x88>)
 8006b54:	60e3      	str	r3, [r4, #12]
 8006b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b5c:	f000 f847 	bl	8006bee <__retarget_lock_init_recursive>
 8006b60:	f7ff ff96 	bl	8006a90 <__sfp_lock_release>
 8006b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b6c:	6025      	str	r5, [r4, #0]
 8006b6e:	61a5      	str	r5, [r4, #24]
 8006b70:	2208      	movs	r2, #8
 8006b72:	4629      	mov	r1, r5
 8006b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b78:	f7ff fd0c 	bl	8006594 <memset>
 8006b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b84:	4620      	mov	r0, r4
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	3468      	adds	r4, #104	; 0x68
 8006b8a:	e7d9      	b.n	8006b40 <__sfp+0x1c>
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f7ff ff62 	bl	8006a58 <__sfmoreglue>
 8006b94:	4604      	mov	r4, r0
 8006b96:	6030      	str	r0, [r6, #0]
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d1d5      	bne.n	8006b48 <__sfp+0x24>
 8006b9c:	f7ff ff78 	bl	8006a90 <__sfp_lock_release>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	e7ee      	b.n	8006b84 <__sfp+0x60>
 8006ba6:	bf00      	nop
 8006ba8:	080080e8 	.word	0x080080e8
 8006bac:	ffff0001 	.word	0xffff0001

08006bb0 <_fwalk_reent>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bbc:	2700      	movs	r7, #0
 8006bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006bc6:	d505      	bpl.n	8006bd4 <_fwalk_reent+0x24>
 8006bc8:	6824      	ldr	r4, [r4, #0]
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	d1f7      	bne.n	8006bbe <_fwalk_reent+0xe>
 8006bce:	4638      	mov	r0, r7
 8006bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd4:	89ab      	ldrh	r3, [r5, #12]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d907      	bls.n	8006bea <_fwalk_reent+0x3a>
 8006bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bde:	3301      	adds	r3, #1
 8006be0:	d003      	beq.n	8006bea <_fwalk_reent+0x3a>
 8006be2:	4629      	mov	r1, r5
 8006be4:	4630      	mov	r0, r6
 8006be6:	47c0      	blx	r8
 8006be8:	4307      	orrs	r7, r0
 8006bea:	3568      	adds	r5, #104	; 0x68
 8006bec:	e7e9      	b.n	8006bc2 <_fwalk_reent+0x12>

08006bee <__retarget_lock_init_recursive>:
 8006bee:	4770      	bx	lr

08006bf0 <__retarget_lock_acquire_recursive>:
 8006bf0:	4770      	bx	lr

08006bf2 <__retarget_lock_release_recursive>:
 8006bf2:	4770      	bx	lr

08006bf4 <__swhatbuf_r>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	b096      	sub	sp, #88	; 0x58
 8006c00:	4614      	mov	r4, r2
 8006c02:	461d      	mov	r5, r3
 8006c04:	da08      	bge.n	8006c18 <__swhatbuf_r+0x24>
 8006c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	061a      	lsls	r2, r3, #24
 8006c10:	d410      	bmi.n	8006c34 <__swhatbuf_r+0x40>
 8006c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c16:	e00e      	b.n	8006c36 <__swhatbuf_r+0x42>
 8006c18:	466a      	mov	r2, sp
 8006c1a:	f000 fdf1 	bl	8007800 <_fstat_r>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	dbf1      	blt.n	8006c06 <__swhatbuf_r+0x12>
 8006c22:	9a01      	ldr	r2, [sp, #4]
 8006c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c2c:	425a      	negs	r2, r3
 8006c2e:	415a      	adcs	r2, r3
 8006c30:	602a      	str	r2, [r5, #0]
 8006c32:	e7ee      	b.n	8006c12 <__swhatbuf_r+0x1e>
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	2000      	movs	r0, #0
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	b016      	add	sp, #88	; 0x58
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c40 <__smakebuf_r>:
 8006c40:	898b      	ldrh	r3, [r1, #12]
 8006c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c44:	079d      	lsls	r5, r3, #30
 8006c46:	4606      	mov	r6, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	d507      	bpl.n	8006c5c <__smakebuf_r+0x1c>
 8006c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	2301      	movs	r3, #1
 8006c56:	6163      	str	r3, [r4, #20]
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	ab01      	add	r3, sp, #4
 8006c5e:	466a      	mov	r2, sp
 8006c60:	f7ff ffc8 	bl	8006bf4 <__swhatbuf_r>
 8006c64:	9900      	ldr	r1, [sp, #0]
 8006c66:	4605      	mov	r5, r0
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f895 	bl	8006d98 <_malloc_r>
 8006c6e:	b948      	cbnz	r0, 8006c84 <__smakebuf_r+0x44>
 8006c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c74:	059a      	lsls	r2, r3, #22
 8006c76:	d4ef      	bmi.n	8006c58 <__smakebuf_r+0x18>
 8006c78:	f023 0303 	bic.w	r3, r3, #3
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	e7e3      	b.n	8006c4c <__smakebuf_r+0xc>
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <__smakebuf_r+0x7c>)
 8006c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	6020      	str	r0, [r4, #0]
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	9b00      	ldr	r3, [sp, #0]
 8006c94:	6163      	str	r3, [r4, #20]
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	6120      	str	r0, [r4, #16]
 8006c9a:	b15b      	cbz	r3, 8006cb4 <__smakebuf_r+0x74>
 8006c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 fdbf 	bl	8007824 <_isatty_r>
 8006ca6:	b128      	cbz	r0, 8006cb4 <__smakebuf_r+0x74>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	89a0      	ldrh	r0, [r4, #12]
 8006cb6:	4305      	orrs	r5, r0
 8006cb8:	81a5      	strh	r5, [r4, #12]
 8006cba:	e7cd      	b.n	8006c58 <__smakebuf_r+0x18>
 8006cbc:	08006a4d 	.word	0x08006a4d

08006cc0 <_free_r>:
 8006cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d044      	beq.n	8006d50 <_free_r+0x90>
 8006cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cca:	9001      	str	r0, [sp, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f1a1 0404 	sub.w	r4, r1, #4
 8006cd2:	bfb8      	it	lt
 8006cd4:	18e4      	addlt	r4, r4, r3
 8006cd6:	f000 fde1 	bl	800789c <__malloc_lock>
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <_free_r+0x94>)
 8006cdc:	9801      	ldr	r0, [sp, #4]
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	b933      	cbnz	r3, 8006cf0 <_free_r+0x30>
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	6014      	str	r4, [r2, #0]
 8006ce6:	b003      	add	sp, #12
 8006ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cec:	f000 bddc 	b.w	80078a8 <__malloc_unlock>
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	d908      	bls.n	8006d06 <_free_r+0x46>
 8006cf4:	6825      	ldr	r5, [r4, #0]
 8006cf6:	1961      	adds	r1, r4, r5
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf01      	itttt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	1949      	addeq	r1, r1, r5
 8006d02:	6021      	streq	r1, [r4, #0]
 8006d04:	e7ed      	b.n	8006ce2 <_free_r+0x22>
 8006d06:	461a      	mov	r2, r3
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b10b      	cbz	r3, 8006d10 <_free_r+0x50>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d9fa      	bls.n	8006d06 <_free_r+0x46>
 8006d10:	6811      	ldr	r1, [r2, #0]
 8006d12:	1855      	adds	r5, r2, r1
 8006d14:	42a5      	cmp	r5, r4
 8006d16:	d10b      	bne.n	8006d30 <_free_r+0x70>
 8006d18:	6824      	ldr	r4, [r4, #0]
 8006d1a:	4421      	add	r1, r4
 8006d1c:	1854      	adds	r4, r2, r1
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	d1e0      	bne.n	8006ce6 <_free_r+0x26>
 8006d24:	681c      	ldr	r4, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	6053      	str	r3, [r2, #4]
 8006d2a:	4421      	add	r1, r4
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	e7da      	b.n	8006ce6 <_free_r+0x26>
 8006d30:	d902      	bls.n	8006d38 <_free_r+0x78>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6003      	str	r3, [r0, #0]
 8006d36:	e7d6      	b.n	8006ce6 <_free_r+0x26>
 8006d38:	6825      	ldr	r5, [r4, #0]
 8006d3a:	1961      	adds	r1, r4, r5
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	bf04      	itt	eq
 8006d40:	6819      	ldreq	r1, [r3, #0]
 8006d42:	685b      	ldreq	r3, [r3, #4]
 8006d44:	6063      	str	r3, [r4, #4]
 8006d46:	bf04      	itt	eq
 8006d48:	1949      	addeq	r1, r1, r5
 8006d4a:	6021      	streq	r1, [r4, #0]
 8006d4c:	6054      	str	r4, [r2, #4]
 8006d4e:	e7ca      	b.n	8006ce6 <_free_r+0x26>
 8006d50:	b003      	add	sp, #12
 8006d52:	bd30      	pop	{r4, r5, pc}
 8006d54:	200002f8 	.word	0x200002f8

08006d58 <sbrk_aligned>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4e0e      	ldr	r6, [pc, #56]	; (8006d94 <sbrk_aligned+0x3c>)
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	6831      	ldr	r1, [r6, #0]
 8006d60:	4605      	mov	r5, r0
 8006d62:	b911      	cbnz	r1, 8006d6a <sbrk_aligned+0x12>
 8006d64:	f000 fcd6 	bl	8007714 <_sbrk_r>
 8006d68:	6030      	str	r0, [r6, #0]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 fcd1 	bl	8007714 <_sbrk_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d00a      	beq.n	8006d8c <sbrk_aligned+0x34>
 8006d76:	1cc4      	adds	r4, r0, #3
 8006d78:	f024 0403 	bic.w	r4, r4, #3
 8006d7c:	42a0      	cmp	r0, r4
 8006d7e:	d007      	beq.n	8006d90 <sbrk_aligned+0x38>
 8006d80:	1a21      	subs	r1, r4, r0
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fcc6 	bl	8007714 <_sbrk_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d101      	bne.n	8006d90 <sbrk_aligned+0x38>
 8006d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d90:	4620      	mov	r0, r4
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	200002fc 	.word	0x200002fc

08006d98 <_malloc_r>:
 8006d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	1ccd      	adds	r5, r1, #3
 8006d9e:	f025 0503 	bic.w	r5, r5, #3
 8006da2:	3508      	adds	r5, #8
 8006da4:	2d0c      	cmp	r5, #12
 8006da6:	bf38      	it	cc
 8006da8:	250c      	movcc	r5, #12
 8006daa:	2d00      	cmp	r5, #0
 8006dac:	4607      	mov	r7, r0
 8006dae:	db01      	blt.n	8006db4 <_malloc_r+0x1c>
 8006db0:	42a9      	cmp	r1, r5
 8006db2:	d905      	bls.n	8006dc0 <_malloc_r+0x28>
 8006db4:	230c      	movs	r3, #12
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	2600      	movs	r6, #0
 8006dba:	4630      	mov	r0, r6
 8006dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc0:	4e2e      	ldr	r6, [pc, #184]	; (8006e7c <_malloc_r+0xe4>)
 8006dc2:	f000 fd6b 	bl	800789c <__malloc_lock>
 8006dc6:	6833      	ldr	r3, [r6, #0]
 8006dc8:	461c      	mov	r4, r3
 8006dca:	bb34      	cbnz	r4, 8006e1a <_malloc_r+0x82>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7ff ffc2 	bl	8006d58 <sbrk_aligned>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	d14d      	bne.n	8006e76 <_malloc_r+0xde>
 8006dda:	6834      	ldr	r4, [r6, #0]
 8006ddc:	4626      	mov	r6, r4
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	d140      	bne.n	8006e64 <_malloc_r+0xcc>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	4631      	mov	r1, r6
 8006de6:	4638      	mov	r0, r7
 8006de8:	eb04 0803 	add.w	r8, r4, r3
 8006dec:	f000 fc92 	bl	8007714 <_sbrk_r>
 8006df0:	4580      	cmp	r8, r0
 8006df2:	d13a      	bne.n	8006e6a <_malloc_r+0xd2>
 8006df4:	6821      	ldr	r1, [r4, #0]
 8006df6:	3503      	adds	r5, #3
 8006df8:	1a6d      	subs	r5, r5, r1
 8006dfa:	f025 0503 	bic.w	r5, r5, #3
 8006dfe:	3508      	adds	r5, #8
 8006e00:	2d0c      	cmp	r5, #12
 8006e02:	bf38      	it	cc
 8006e04:	250c      	movcc	r5, #12
 8006e06:	4629      	mov	r1, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ffa5 	bl	8006d58 <sbrk_aligned>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d02b      	beq.n	8006e6a <_malloc_r+0xd2>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	442b      	add	r3, r5
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	e00e      	b.n	8006e38 <_malloc_r+0xa0>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	1b52      	subs	r2, r2, r5
 8006e1e:	d41e      	bmi.n	8006e5e <_malloc_r+0xc6>
 8006e20:	2a0b      	cmp	r2, #11
 8006e22:	d916      	bls.n	8006e52 <_malloc_r+0xba>
 8006e24:	1961      	adds	r1, r4, r5
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	6025      	str	r5, [r4, #0]
 8006e2a:	bf18      	it	ne
 8006e2c:	6059      	strne	r1, [r3, #4]
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	bf08      	it	eq
 8006e32:	6031      	streq	r1, [r6, #0]
 8006e34:	5162      	str	r2, [r4, r5]
 8006e36:	604b      	str	r3, [r1, #4]
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f104 060b 	add.w	r6, r4, #11
 8006e3e:	f000 fd33 	bl	80078a8 <__malloc_unlock>
 8006e42:	f026 0607 	bic.w	r6, r6, #7
 8006e46:	1d23      	adds	r3, r4, #4
 8006e48:	1af2      	subs	r2, r6, r3
 8006e4a:	d0b6      	beq.n	8006dba <_malloc_r+0x22>
 8006e4c:	1b9b      	subs	r3, r3, r6
 8006e4e:	50a3      	str	r3, [r4, r2]
 8006e50:	e7b3      	b.n	8006dba <_malloc_r+0x22>
 8006e52:	6862      	ldr	r2, [r4, #4]
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	bf0c      	ite	eq
 8006e58:	6032      	streq	r2, [r6, #0]
 8006e5a:	605a      	strne	r2, [r3, #4]
 8006e5c:	e7ec      	b.n	8006e38 <_malloc_r+0xa0>
 8006e5e:	4623      	mov	r3, r4
 8006e60:	6864      	ldr	r4, [r4, #4]
 8006e62:	e7b2      	b.n	8006dca <_malloc_r+0x32>
 8006e64:	4634      	mov	r4, r6
 8006e66:	6876      	ldr	r6, [r6, #4]
 8006e68:	e7b9      	b.n	8006dde <_malloc_r+0x46>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f000 fd1a 	bl	80078a8 <__malloc_unlock>
 8006e74:	e7a1      	b.n	8006dba <_malloc_r+0x22>
 8006e76:	6025      	str	r5, [r4, #0]
 8006e78:	e7de      	b.n	8006e38 <_malloc_r+0xa0>
 8006e7a:	bf00      	nop
 8006e7c:	200002f8 	.word	0x200002f8

08006e80 <__ssputs_r>:
 8006e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	688e      	ldr	r6, [r1, #8]
 8006e86:	429e      	cmp	r6, r3
 8006e88:	4682      	mov	sl, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	4690      	mov	r8, r2
 8006e8e:	461f      	mov	r7, r3
 8006e90:	d838      	bhi.n	8006f04 <__ssputs_r+0x84>
 8006e92:	898a      	ldrh	r2, [r1, #12]
 8006e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e98:	d032      	beq.n	8006f00 <__ssputs_r+0x80>
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	6909      	ldr	r1, [r1, #16]
 8006e9e:	eba5 0901 	sub.w	r9, r5, r1
 8006ea2:	6965      	ldr	r5, [r4, #20]
 8006ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006eac:	3301      	adds	r3, #1
 8006eae:	444b      	add	r3, r9
 8006eb0:	106d      	asrs	r5, r5, #1
 8006eb2:	429d      	cmp	r5, r3
 8006eb4:	bf38      	it	cc
 8006eb6:	461d      	movcc	r5, r3
 8006eb8:	0553      	lsls	r3, r2, #21
 8006eba:	d531      	bpl.n	8006f20 <__ssputs_r+0xa0>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7ff ff6b 	bl	8006d98 <_malloc_r>
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	b950      	cbnz	r0, 8006edc <__ssputs_r+0x5c>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	f8ca 3000 	str.w	r3, [sl]
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	6921      	ldr	r1, [r4, #16]
 8006ede:	464a      	mov	r2, r9
 8006ee0:	f7ff fb4a 	bl	8006578 <memcpy>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	6126      	str	r6, [r4, #16]
 8006ef2:	6165      	str	r5, [r4, #20]
 8006ef4:	444e      	add	r6, r9
 8006ef6:	eba5 0509 	sub.w	r5, r5, r9
 8006efa:	6026      	str	r6, [r4, #0]
 8006efc:	60a5      	str	r5, [r4, #8]
 8006efe:	463e      	mov	r6, r7
 8006f00:	42be      	cmp	r6, r7
 8006f02:	d900      	bls.n	8006f06 <__ssputs_r+0x86>
 8006f04:	463e      	mov	r6, r7
 8006f06:	6820      	ldr	r0, [r4, #0]
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	f000 fcac 	bl	8007868 <memmove>
 8006f10:	68a3      	ldr	r3, [r4, #8]
 8006f12:	1b9b      	subs	r3, r3, r6
 8006f14:	60a3      	str	r3, [r4, #8]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	4433      	add	r3, r6
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7db      	b.n	8006ed8 <__ssputs_r+0x58>
 8006f20:	462a      	mov	r2, r5
 8006f22:	f000 fcc7 	bl	80078b4 <_realloc_r>
 8006f26:	4606      	mov	r6, r0
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1e1      	bne.n	8006ef0 <__ssputs_r+0x70>
 8006f2c:	6921      	ldr	r1, [r4, #16]
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f7ff fec6 	bl	8006cc0 <_free_r>
 8006f34:	e7c7      	b.n	8006ec6 <__ssputs_r+0x46>
	...

08006f38 <_svfiprintf_r>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	898b      	ldrh	r3, [r1, #12]
 8006f40:	061b      	lsls	r3, r3, #24
 8006f42:	b09d      	sub	sp, #116	; 0x74
 8006f44:	4607      	mov	r7, r0
 8006f46:	460d      	mov	r5, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	d50e      	bpl.n	8006f6a <_svfiprintf_r+0x32>
 8006f4c:	690b      	ldr	r3, [r1, #16]
 8006f4e:	b963      	cbnz	r3, 8006f6a <_svfiprintf_r+0x32>
 8006f50:	2140      	movs	r1, #64	; 0x40
 8006f52:	f7ff ff21 	bl	8006d98 <_malloc_r>
 8006f56:	6028      	str	r0, [r5, #0]
 8006f58:	6128      	str	r0, [r5, #16]
 8006f5a:	b920      	cbnz	r0, 8006f66 <_svfiprintf_r+0x2e>
 8006f5c:	230c      	movs	r3, #12
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	e0d1      	b.n	800710a <_svfiprintf_r+0x1d2>
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	616b      	str	r3, [r5, #20]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	2320      	movs	r3, #32
 8006f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f78:	2330      	movs	r3, #48	; 0x30
 8006f7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007124 <_svfiprintf_r+0x1ec>
 8006f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f82:	f04f 0901 	mov.w	r9, #1
 8006f86:	4623      	mov	r3, r4
 8006f88:	469a      	mov	sl, r3
 8006f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f8e:	b10a      	cbz	r2, 8006f94 <_svfiprintf_r+0x5c>
 8006f90:	2a25      	cmp	r2, #37	; 0x25
 8006f92:	d1f9      	bne.n	8006f88 <_svfiprintf_r+0x50>
 8006f94:	ebba 0b04 	subs.w	fp, sl, r4
 8006f98:	d00b      	beq.n	8006fb2 <_svfiprintf_r+0x7a>
 8006f9a:	465b      	mov	r3, fp
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ff6d 	bl	8006e80 <__ssputs_r>
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	f000 80aa 	beq.w	8007100 <_svfiprintf_r+0x1c8>
 8006fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fae:	445a      	add	r2, fp
 8006fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80a2 	beq.w	8007100 <_svfiprintf_r+0x1c8>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fc6:	f10a 0a01 	add.w	sl, sl, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	9307      	str	r3, [sp, #28]
 8006fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8006fd4:	4654      	mov	r4, sl
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fdc:	4851      	ldr	r0, [pc, #324]	; (8007124 <_svfiprintf_r+0x1ec>)
 8006fde:	f7f9 f90f 	bl	8000200 <memchr>
 8006fe2:	9a04      	ldr	r2, [sp, #16]
 8006fe4:	b9d8      	cbnz	r0, 800701e <_svfiprintf_r+0xe6>
 8006fe6:	06d0      	lsls	r0, r2, #27
 8006fe8:	bf44      	itt	mi
 8006fea:	2320      	movmi	r3, #32
 8006fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ff0:	0711      	lsls	r1, r2, #28
 8006ff2:	bf44      	itt	mi
 8006ff4:	232b      	movmi	r3, #43	; 0x2b
 8006ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8006ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8007000:	d015      	beq.n	800702e <_svfiprintf_r+0xf6>
 8007002:	9a07      	ldr	r2, [sp, #28]
 8007004:	4654      	mov	r4, sl
 8007006:	2000      	movs	r0, #0
 8007008:	f04f 0c0a 	mov.w	ip, #10
 800700c:	4621      	mov	r1, r4
 800700e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007012:	3b30      	subs	r3, #48	; 0x30
 8007014:	2b09      	cmp	r3, #9
 8007016:	d94e      	bls.n	80070b6 <_svfiprintf_r+0x17e>
 8007018:	b1b0      	cbz	r0, 8007048 <_svfiprintf_r+0x110>
 800701a:	9207      	str	r2, [sp, #28]
 800701c:	e014      	b.n	8007048 <_svfiprintf_r+0x110>
 800701e:	eba0 0308 	sub.w	r3, r0, r8
 8007022:	fa09 f303 	lsl.w	r3, r9, r3
 8007026:	4313      	orrs	r3, r2
 8007028:	9304      	str	r3, [sp, #16]
 800702a:	46a2      	mov	sl, r4
 800702c:	e7d2      	b.n	8006fd4 <_svfiprintf_r+0x9c>
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	1d19      	adds	r1, r3, #4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	9103      	str	r1, [sp, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfbb      	ittet	lt
 800703a:	425b      	neglt	r3, r3
 800703c:	f042 0202 	orrlt.w	r2, r2, #2
 8007040:	9307      	strge	r3, [sp, #28]
 8007042:	9307      	strlt	r3, [sp, #28]
 8007044:	bfb8      	it	lt
 8007046:	9204      	strlt	r2, [sp, #16]
 8007048:	7823      	ldrb	r3, [r4, #0]
 800704a:	2b2e      	cmp	r3, #46	; 0x2e
 800704c:	d10c      	bne.n	8007068 <_svfiprintf_r+0x130>
 800704e:	7863      	ldrb	r3, [r4, #1]
 8007050:	2b2a      	cmp	r3, #42	; 0x2a
 8007052:	d135      	bne.n	80070c0 <_svfiprintf_r+0x188>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	1d1a      	adds	r2, r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	9203      	str	r2, [sp, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfb8      	it	lt
 8007060:	f04f 33ff 	movlt.w	r3, #4294967295
 8007064:	3402      	adds	r4, #2
 8007066:	9305      	str	r3, [sp, #20]
 8007068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007134 <_svfiprintf_r+0x1fc>
 800706c:	7821      	ldrb	r1, [r4, #0]
 800706e:	2203      	movs	r2, #3
 8007070:	4650      	mov	r0, sl
 8007072:	f7f9 f8c5 	bl	8000200 <memchr>
 8007076:	b140      	cbz	r0, 800708a <_svfiprintf_r+0x152>
 8007078:	2340      	movs	r3, #64	; 0x40
 800707a:	eba0 000a 	sub.w	r0, r0, sl
 800707e:	fa03 f000 	lsl.w	r0, r3, r0
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	4303      	orrs	r3, r0
 8007086:	3401      	adds	r4, #1
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708e:	4826      	ldr	r0, [pc, #152]	; (8007128 <_svfiprintf_r+0x1f0>)
 8007090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007094:	2206      	movs	r2, #6
 8007096:	f7f9 f8b3 	bl	8000200 <memchr>
 800709a:	2800      	cmp	r0, #0
 800709c:	d038      	beq.n	8007110 <_svfiprintf_r+0x1d8>
 800709e:	4b23      	ldr	r3, [pc, #140]	; (800712c <_svfiprintf_r+0x1f4>)
 80070a0:	bb1b      	cbnz	r3, 80070ea <_svfiprintf_r+0x1b2>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	3307      	adds	r3, #7
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	3308      	adds	r3, #8
 80070ac:	9303      	str	r3, [sp, #12]
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	4433      	add	r3, r6
 80070b2:	9309      	str	r3, [sp, #36]	; 0x24
 80070b4:	e767      	b.n	8006f86 <_svfiprintf_r+0x4e>
 80070b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ba:	460c      	mov	r4, r1
 80070bc:	2001      	movs	r0, #1
 80070be:	e7a5      	b.n	800700c <_svfiprintf_r+0xd4>
 80070c0:	2300      	movs	r3, #0
 80070c2:	3401      	adds	r4, #1
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	4619      	mov	r1, r3
 80070c8:	f04f 0c0a 	mov.w	ip, #10
 80070cc:	4620      	mov	r0, r4
 80070ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d2:	3a30      	subs	r2, #48	; 0x30
 80070d4:	2a09      	cmp	r2, #9
 80070d6:	d903      	bls.n	80070e0 <_svfiprintf_r+0x1a8>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0c5      	beq.n	8007068 <_svfiprintf_r+0x130>
 80070dc:	9105      	str	r1, [sp, #20]
 80070de:	e7c3      	b.n	8007068 <_svfiprintf_r+0x130>
 80070e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070e4:	4604      	mov	r4, r0
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7f0      	b.n	80070cc <_svfiprintf_r+0x194>
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <_svfiprintf_r+0x1f8>)
 80070f2:	a904      	add	r1, sp, #16
 80070f4:	4638      	mov	r0, r7
 80070f6:	f3af 8000 	nop.w
 80070fa:	1c42      	adds	r2, r0, #1
 80070fc:	4606      	mov	r6, r0
 80070fe:	d1d6      	bne.n	80070ae <_svfiprintf_r+0x176>
 8007100:	89ab      	ldrh	r3, [r5, #12]
 8007102:	065b      	lsls	r3, r3, #25
 8007104:	f53f af2c 	bmi.w	8006f60 <_svfiprintf_r+0x28>
 8007108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710a:	b01d      	add	sp, #116	; 0x74
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	462a      	mov	r2, r5
 8007116:	4b06      	ldr	r3, [pc, #24]	; (8007130 <_svfiprintf_r+0x1f8>)
 8007118:	a904      	add	r1, sp, #16
 800711a:	4638      	mov	r0, r7
 800711c:	f000 f9d4 	bl	80074c8 <_printf_i>
 8007120:	e7eb      	b.n	80070fa <_svfiprintf_r+0x1c2>
 8007122:	bf00      	nop
 8007124:	0800814c 	.word	0x0800814c
 8007128:	08008156 	.word	0x08008156
 800712c:	00000000 	.word	0x00000000
 8007130:	08006e81 	.word	0x08006e81
 8007134:	08008152 	.word	0x08008152

08007138 <__sfputc_r>:
 8007138:	6893      	ldr	r3, [r2, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	b410      	push	{r4}
 8007140:	6093      	str	r3, [r2, #8]
 8007142:	da08      	bge.n	8007156 <__sfputc_r+0x1e>
 8007144:	6994      	ldr	r4, [r2, #24]
 8007146:	42a3      	cmp	r3, r4
 8007148:	db01      	blt.n	800714e <__sfputc_r+0x16>
 800714a:	290a      	cmp	r1, #10
 800714c:	d103      	bne.n	8007156 <__sfputc_r+0x1e>
 800714e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007152:	f7ff bad5 	b.w	8006700 <__swbuf_r>
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	1c58      	adds	r0, r3, #1
 800715a:	6010      	str	r0, [r2, #0]
 800715c:	7019      	strb	r1, [r3, #0]
 800715e:	4608      	mov	r0, r1
 8007160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007164:	4770      	bx	lr

08007166 <__sfputs_r>:
 8007166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007168:	4606      	mov	r6, r0
 800716a:	460f      	mov	r7, r1
 800716c:	4614      	mov	r4, r2
 800716e:	18d5      	adds	r5, r2, r3
 8007170:	42ac      	cmp	r4, r5
 8007172:	d101      	bne.n	8007178 <__sfputs_r+0x12>
 8007174:	2000      	movs	r0, #0
 8007176:	e007      	b.n	8007188 <__sfputs_r+0x22>
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	463a      	mov	r2, r7
 800717e:	4630      	mov	r0, r6
 8007180:	f7ff ffda 	bl	8007138 <__sfputc_r>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d1f3      	bne.n	8007170 <__sfputs_r+0xa>
 8007188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800718c <_vfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	460d      	mov	r5, r1
 8007192:	b09d      	sub	sp, #116	; 0x74
 8007194:	4614      	mov	r4, r2
 8007196:	4698      	mov	r8, r3
 8007198:	4606      	mov	r6, r0
 800719a:	b118      	cbz	r0, 80071a4 <_vfiprintf_r+0x18>
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	b90b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x18>
 80071a0:	f7ff fc88 	bl	8006ab4 <__sinit>
 80071a4:	4b89      	ldr	r3, [pc, #548]	; (80073cc <_vfiprintf_r+0x240>)
 80071a6:	429d      	cmp	r5, r3
 80071a8:	d11b      	bne.n	80071e2 <_vfiprintf_r+0x56>
 80071aa:	6875      	ldr	r5, [r6, #4]
 80071ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	d405      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d402      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ba:	f7ff fd19 	bl	8006bf0 <__retarget_lock_acquire_recursive>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	071b      	lsls	r3, r3, #28
 80071c2:	d501      	bpl.n	80071c8 <_vfiprintf_r+0x3c>
 80071c4:	692b      	ldr	r3, [r5, #16]
 80071c6:	b9eb      	cbnz	r3, 8007204 <_vfiprintf_r+0x78>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff faea 	bl	80067a4 <__swsetup_r>
 80071d0:	b1c0      	cbz	r0, 8007204 <_vfiprintf_r+0x78>
 80071d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d4:	07dc      	lsls	r4, r3, #31
 80071d6:	d50e      	bpl.n	80071f6 <_vfiprintf_r+0x6a>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b01d      	add	sp, #116	; 0x74
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <_vfiprintf_r+0x244>)
 80071e4:	429d      	cmp	r5, r3
 80071e6:	d101      	bne.n	80071ec <_vfiprintf_r+0x60>
 80071e8:	68b5      	ldr	r5, [r6, #8]
 80071ea:	e7df      	b.n	80071ac <_vfiprintf_r+0x20>
 80071ec:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <_vfiprintf_r+0x248>)
 80071ee:	429d      	cmp	r5, r3
 80071f0:	bf08      	it	eq
 80071f2:	68f5      	ldreq	r5, [r6, #12]
 80071f4:	e7da      	b.n	80071ac <_vfiprintf_r+0x20>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	0598      	lsls	r0, r3, #22
 80071fa:	d4ed      	bmi.n	80071d8 <_vfiprintf_r+0x4c>
 80071fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fe:	f7ff fcf8 	bl	8006bf2 <__retarget_lock_release_recursive>
 8007202:	e7e9      	b.n	80071d8 <_vfiprintf_r+0x4c>
 8007204:	2300      	movs	r3, #0
 8007206:	9309      	str	r3, [sp, #36]	; 0x24
 8007208:	2320      	movs	r3, #32
 800720a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073d8 <_vfiprintf_r+0x24c>
 8007218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721c:	f04f 0901 	mov.w	r9, #1
 8007220:	4623      	mov	r3, r4
 8007222:	469a      	mov	sl, r3
 8007224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007228:	b10a      	cbz	r2, 800722e <_vfiprintf_r+0xa2>
 800722a:	2a25      	cmp	r2, #37	; 0x25
 800722c:	d1f9      	bne.n	8007222 <_vfiprintf_r+0x96>
 800722e:	ebba 0b04 	subs.w	fp, sl, r4
 8007232:	d00b      	beq.n	800724c <_vfiprintf_r+0xc0>
 8007234:	465b      	mov	r3, fp
 8007236:	4622      	mov	r2, r4
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ff93 	bl	8007166 <__sfputs_r>
 8007240:	3001      	adds	r0, #1
 8007242:	f000 80aa 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007248:	445a      	add	r2, fp
 800724a:	9209      	str	r2, [sp, #36]	; 0x24
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80a2 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007256:	2300      	movs	r3, #0
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007260:	f10a 0a01 	add.w	sl, sl, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726c:	931a      	str	r3, [sp, #104]	; 0x68
 800726e:	4654      	mov	r4, sl
 8007270:	2205      	movs	r2, #5
 8007272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007276:	4858      	ldr	r0, [pc, #352]	; (80073d8 <_vfiprintf_r+0x24c>)
 8007278:	f7f8 ffc2 	bl	8000200 <memchr>
 800727c:	9a04      	ldr	r2, [sp, #16]
 800727e:	b9d8      	cbnz	r0, 80072b8 <_vfiprintf_r+0x12c>
 8007280:	06d1      	lsls	r1, r2, #27
 8007282:	bf44      	itt	mi
 8007284:	2320      	movmi	r3, #32
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	0713      	lsls	r3, r2, #28
 800728c:	bf44      	itt	mi
 800728e:	232b      	movmi	r3, #43	; 0x2b
 8007290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007294:	f89a 3000 	ldrb.w	r3, [sl]
 8007298:	2b2a      	cmp	r3, #42	; 0x2a
 800729a:	d015      	beq.n	80072c8 <_vfiprintf_r+0x13c>
 800729c:	9a07      	ldr	r2, [sp, #28]
 800729e:	4654      	mov	r4, sl
 80072a0:	2000      	movs	r0, #0
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4621      	mov	r1, r4
 80072a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ac:	3b30      	subs	r3, #48	; 0x30
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d94e      	bls.n	8007350 <_vfiprintf_r+0x1c4>
 80072b2:	b1b0      	cbz	r0, 80072e2 <_vfiprintf_r+0x156>
 80072b4:	9207      	str	r2, [sp, #28]
 80072b6:	e014      	b.n	80072e2 <_vfiprintf_r+0x156>
 80072b8:	eba0 0308 	sub.w	r3, r0, r8
 80072bc:	fa09 f303 	lsl.w	r3, r9, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	46a2      	mov	sl, r4
 80072c6:	e7d2      	b.n	800726e <_vfiprintf_r+0xe2>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	1d19      	adds	r1, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	9103      	str	r1, [sp, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbb      	ittet	lt
 80072d4:	425b      	neglt	r3, r3
 80072d6:	f042 0202 	orrlt.w	r2, r2, #2
 80072da:	9307      	strge	r3, [sp, #28]
 80072dc:	9307      	strlt	r3, [sp, #28]
 80072de:	bfb8      	it	lt
 80072e0:	9204      	strlt	r2, [sp, #16]
 80072e2:	7823      	ldrb	r3, [r4, #0]
 80072e4:	2b2e      	cmp	r3, #46	; 0x2e
 80072e6:	d10c      	bne.n	8007302 <_vfiprintf_r+0x176>
 80072e8:	7863      	ldrb	r3, [r4, #1]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d135      	bne.n	800735a <_vfiprintf_r+0x1ce>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	9203      	str	r2, [sp, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bfb8      	it	lt
 80072fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073e8 <_vfiprintf_r+0x25c>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ff78 	bl	8000200 <memchr>
 8007310:	b140      	cbz	r0, 8007324 <_vfiprintf_r+0x198>
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	fa03 f000 	lsl.w	r0, r3, r0
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4303      	orrs	r3, r0
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	482c      	ldr	r0, [pc, #176]	; (80073dc <_vfiprintf_r+0x250>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff66 	bl	8000200 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d03f      	beq.n	80073b8 <_vfiprintf_r+0x22c>
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <_vfiprintf_r+0x254>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_vfiprintf_r+0x1f8>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734a:	443b      	add	r3, r7
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	e767      	b.n	8007220 <_vfiprintf_r+0x94>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a5      	b.n	80072a6 <_vfiprintf_r+0x11a>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	; 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_vfiprintf_r+0x1ee>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c5      	beq.n	8007302 <_vfiprintf_r+0x176>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c3      	b.n	8007302 <_vfiprintf_r+0x176>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_vfiprintf_r+0x1da>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <_vfiprintf_r+0x258>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4630      	mov	r0, r6
 8007390:	f3af 8000 	nop.w
 8007394:	4607      	mov	r7, r0
 8007396:	1c78      	adds	r0, r7, #1
 8007398:	d1d6      	bne.n	8007348 <_vfiprintf_r+0x1bc>
 800739a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739c:	07d9      	lsls	r1, r3, #31
 800739e:	d405      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	059a      	lsls	r2, r3, #22
 80073a4:	d402      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a8:	f7ff fc23 	bl	8006bf2 <__retarget_lock_release_recursive>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	f53f af12 	bmi.w	80071d8 <_vfiprintf_r+0x4c>
 80073b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b6:	e711      	b.n	80071dc <_vfiprintf_r+0x50>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <_vfiprintf_r+0x258>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 f880 	bl	80074c8 <_printf_i>
 80073c8:	e7e4      	b.n	8007394 <_vfiprintf_r+0x208>
 80073ca:	bf00      	nop
 80073cc:	0800810c 	.word	0x0800810c
 80073d0:	0800812c 	.word	0x0800812c
 80073d4:	080080ec 	.word	0x080080ec
 80073d8:	0800814c 	.word	0x0800814c
 80073dc:	08008156 	.word	0x08008156
 80073e0:	00000000 	.word	0x00000000
 80073e4:	08007167 	.word	0x08007167
 80073e8:	08008152 	.word	0x08008152

080073ec <_printf_common>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	4616      	mov	r6, r2
 80073f2:	4699      	mov	r9, r3
 80073f4:	688a      	ldr	r2, [r1, #8]
 80073f6:	690b      	ldr	r3, [r1, #16]
 80073f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	bfb8      	it	lt
 8007400:	4613      	movlt	r3, r2
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007408:	4607      	mov	r7, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b10a      	cbz	r2, 8007412 <_printf_common+0x26>
 800740e:	3301      	adds	r3, #1
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	0699      	lsls	r1, r3, #26
 8007416:	bf42      	ittt	mi
 8007418:	6833      	ldrmi	r3, [r6, #0]
 800741a:	3302      	addmi	r3, #2
 800741c:	6033      	strmi	r3, [r6, #0]
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	f015 0506 	ands.w	r5, r5, #6
 8007424:	d106      	bne.n	8007434 <_printf_common+0x48>
 8007426:	f104 0a19 	add.w	sl, r4, #25
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	6832      	ldr	r2, [r6, #0]
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	42ab      	cmp	r3, r5
 8007432:	dc26      	bgt.n	8007482 <_printf_common+0x96>
 8007434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007438:	1e13      	subs	r3, r2, #0
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	2301      	movne	r3, #1
 8007440:	0692      	lsls	r2, r2, #26
 8007442:	d42b      	bmi.n	800749c <_printf_common+0xb0>
 8007444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d01e      	beq.n	8007490 <_printf_common+0xa4>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	68e5      	ldr	r5, [r4, #12]
 8007456:	6832      	ldr	r2, [r6, #0]
 8007458:	f003 0306 	and.w	r3, r3, #6
 800745c:	2b04      	cmp	r3, #4
 800745e:	bf08      	it	eq
 8007460:	1aad      	subeq	r5, r5, r2
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	bf0c      	ite	eq
 8007468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800746c:	2500      	movne	r5, #0
 800746e:	4293      	cmp	r3, r2
 8007470:	bfc4      	itt	gt
 8007472:	1a9b      	subgt	r3, r3, r2
 8007474:	18ed      	addgt	r5, r5, r3
 8007476:	2600      	movs	r6, #0
 8007478:	341a      	adds	r4, #26
 800747a:	42b5      	cmp	r5, r6
 800747c:	d11a      	bne.n	80074b4 <_printf_common+0xc8>
 800747e:	2000      	movs	r0, #0
 8007480:	e008      	b.n	8007494 <_printf_common+0xa8>
 8007482:	2301      	movs	r3, #1
 8007484:	4652      	mov	r2, sl
 8007486:	4649      	mov	r1, r9
 8007488:	4638      	mov	r0, r7
 800748a:	47c0      	blx	r8
 800748c:	3001      	adds	r0, #1
 800748e:	d103      	bne.n	8007498 <_printf_common+0xac>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	3501      	adds	r5, #1
 800749a:	e7c6      	b.n	800742a <_printf_common+0x3e>
 800749c:	18e1      	adds	r1, r4, r3
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	2030      	movs	r0, #48	; 0x30
 80074a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a6:	4422      	add	r2, r4
 80074a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074b0:	3302      	adds	r3, #2
 80074b2:	e7c7      	b.n	8007444 <_printf_common+0x58>
 80074b4:	2301      	movs	r3, #1
 80074b6:	4622      	mov	r2, r4
 80074b8:	4649      	mov	r1, r9
 80074ba:	4638      	mov	r0, r7
 80074bc:	47c0      	blx	r8
 80074be:	3001      	adds	r0, #1
 80074c0:	d0e6      	beq.n	8007490 <_printf_common+0xa4>
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7d9      	b.n	800747a <_printf_common+0x8e>
	...

080074c8 <_printf_i>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	7e0f      	ldrb	r7, [r1, #24]
 80074ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d0:	2f78      	cmp	r7, #120	; 0x78
 80074d2:	4691      	mov	r9, r2
 80074d4:	4680      	mov	r8, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	469a      	mov	sl, r3
 80074da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074de:	d807      	bhi.n	80074f0 <_printf_i+0x28>
 80074e0:	2f62      	cmp	r7, #98	; 0x62
 80074e2:	d80a      	bhi.n	80074fa <_printf_i+0x32>
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	f000 80d8 	beq.w	800769a <_printf_i+0x1d2>
 80074ea:	2f58      	cmp	r7, #88	; 0x58
 80074ec:	f000 80a3 	beq.w	8007636 <_printf_i+0x16e>
 80074f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f8:	e03a      	b.n	8007570 <_printf_i+0xa8>
 80074fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fe:	2b15      	cmp	r3, #21
 8007500:	d8f6      	bhi.n	80074f0 <_printf_i+0x28>
 8007502:	a101      	add	r1, pc, #4	; (adr r1, 8007508 <_printf_i+0x40>)
 8007504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007508:	08007561 	.word	0x08007561
 800750c:	08007575 	.word	0x08007575
 8007510:	080074f1 	.word	0x080074f1
 8007514:	080074f1 	.word	0x080074f1
 8007518:	080074f1 	.word	0x080074f1
 800751c:	080074f1 	.word	0x080074f1
 8007520:	08007575 	.word	0x08007575
 8007524:	080074f1 	.word	0x080074f1
 8007528:	080074f1 	.word	0x080074f1
 800752c:	080074f1 	.word	0x080074f1
 8007530:	080074f1 	.word	0x080074f1
 8007534:	08007681 	.word	0x08007681
 8007538:	080075a5 	.word	0x080075a5
 800753c:	08007663 	.word	0x08007663
 8007540:	080074f1 	.word	0x080074f1
 8007544:	080074f1 	.word	0x080074f1
 8007548:	080076a3 	.word	0x080076a3
 800754c:	080074f1 	.word	0x080074f1
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080074f1 	.word	0x080074f1
 8007558:	080074f1 	.word	0x080074f1
 800755c:	0800766b 	.word	0x0800766b
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800756c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007570:	2301      	movs	r3, #1
 8007572:	e0a3      	b.n	80076bc <_printf_i+0x1f4>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	6829      	ldr	r1, [r5, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	f101 0304 	add.w	r3, r1, #4
 800757e:	d50a      	bpl.n	8007596 <_printf_i+0xce>
 8007580:	680e      	ldr	r6, [r1, #0]
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	2e00      	cmp	r6, #0
 8007586:	da03      	bge.n	8007590 <_printf_i+0xc8>
 8007588:	232d      	movs	r3, #45	; 0x2d
 800758a:	4276      	negs	r6, r6
 800758c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007590:	485e      	ldr	r0, [pc, #376]	; (800770c <_printf_i+0x244>)
 8007592:	230a      	movs	r3, #10
 8007594:	e019      	b.n	80075ca <_printf_i+0x102>
 8007596:	680e      	ldr	r6, [r1, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800759e:	bf18      	it	ne
 80075a0:	b236      	sxthne	r6, r6
 80075a2:	e7ef      	b.n	8007584 <_printf_i+0xbc>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	6029      	str	r1, [r5, #0]
 80075ac:	0601      	lsls	r1, r0, #24
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0xec>
 80075b0:	681e      	ldr	r6, [r3, #0]
 80075b2:	e002      	b.n	80075ba <_printf_i+0xf2>
 80075b4:	0646      	lsls	r6, r0, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0xe8>
 80075b8:	881e      	ldrh	r6, [r3, #0]
 80075ba:	4854      	ldr	r0, [pc, #336]	; (800770c <_printf_i+0x244>)
 80075bc:	2f6f      	cmp	r7, #111	; 0x6f
 80075be:	bf0c      	ite	eq
 80075c0:	2308      	moveq	r3, #8
 80075c2:	230a      	movne	r3, #10
 80075c4:	2100      	movs	r1, #0
 80075c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ca:	6865      	ldr	r5, [r4, #4]
 80075cc:	60a5      	str	r5, [r4, #8]
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	bfa2      	ittt	ge
 80075d2:	6821      	ldrge	r1, [r4, #0]
 80075d4:	f021 0104 	bicge.w	r1, r1, #4
 80075d8:	6021      	strge	r1, [r4, #0]
 80075da:	b90e      	cbnz	r6, 80075e0 <_printf_i+0x118>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	d04d      	beq.n	800767c <_printf_i+0x1b4>
 80075e0:	4615      	mov	r5, r2
 80075e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075e6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ea:	5dc7      	ldrb	r7, [r0, r7]
 80075ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075f0:	4637      	mov	r7, r6
 80075f2:	42bb      	cmp	r3, r7
 80075f4:	460e      	mov	r6, r1
 80075f6:	d9f4      	bls.n	80075e2 <_printf_i+0x11a>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d10b      	bne.n	8007614 <_printf_i+0x14c>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07de      	lsls	r6, r3, #31
 8007600:	d508      	bpl.n	8007614 <_printf_i+0x14c>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6861      	ldr	r1, [r4, #4]
 8007606:	4299      	cmp	r1, r3
 8007608:	bfde      	ittt	le
 800760a:	2330      	movle	r3, #48	; 0x30
 800760c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007614:	1b52      	subs	r2, r2, r5
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	f8cd a000 	str.w	sl, [sp]
 800761c:	464b      	mov	r3, r9
 800761e:	aa03      	add	r2, sp, #12
 8007620:	4621      	mov	r1, r4
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fee2 	bl	80073ec <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	d14c      	bne.n	80076c6 <_printf_i+0x1fe>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b004      	add	sp, #16
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	4835      	ldr	r0, [pc, #212]	; (800770c <_printf_i+0x244>)
 8007638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800763c:	6829      	ldr	r1, [r5, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f851 6b04 	ldr.w	r6, [r1], #4
 8007644:	6029      	str	r1, [r5, #0]
 8007646:	061d      	lsls	r5, r3, #24
 8007648:	d514      	bpl.n	8007674 <_printf_i+0x1ac>
 800764a:	07df      	lsls	r7, r3, #31
 800764c:	bf44      	itt	mi
 800764e:	f043 0320 	orrmi.w	r3, r3, #32
 8007652:	6023      	strmi	r3, [r4, #0]
 8007654:	b91e      	cbnz	r6, 800765e <_printf_i+0x196>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f023 0320 	bic.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	2310      	movs	r3, #16
 8007660:	e7b0      	b.n	80075c4 <_printf_i+0xfc>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f043 0320 	orr.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2378      	movs	r3, #120	; 0x78
 800766c:	4828      	ldr	r0, [pc, #160]	; (8007710 <_printf_i+0x248>)
 800766e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007672:	e7e3      	b.n	800763c <_printf_i+0x174>
 8007674:	0659      	lsls	r1, r3, #25
 8007676:	bf48      	it	mi
 8007678:	b2b6      	uxthmi	r6, r6
 800767a:	e7e6      	b.n	800764a <_printf_i+0x182>
 800767c:	4615      	mov	r5, r2
 800767e:	e7bb      	b.n	80075f8 <_printf_i+0x130>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	6826      	ldr	r6, [r4, #0]
 8007684:	6961      	ldr	r1, [r4, #20]
 8007686:	1d18      	adds	r0, r3, #4
 8007688:	6028      	str	r0, [r5, #0]
 800768a:	0635      	lsls	r5, r6, #24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	d501      	bpl.n	8007694 <_printf_i+0x1cc>
 8007690:	6019      	str	r1, [r3, #0]
 8007692:	e002      	b.n	800769a <_printf_i+0x1d2>
 8007694:	0670      	lsls	r0, r6, #25
 8007696:	d5fb      	bpl.n	8007690 <_printf_i+0x1c8>
 8007698:	8019      	strh	r1, [r3, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	4615      	mov	r5, r2
 80076a0:	e7ba      	b.n	8007618 <_printf_i+0x150>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	602a      	str	r2, [r5, #0]
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	2100      	movs	r1, #0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 fda6 	bl	8000200 <memchr>
 80076b4:	b108      	cbz	r0, 80076ba <_printf_i+0x1f2>
 80076b6:	1b40      	subs	r0, r0, r5
 80076b8:	6060      	str	r0, [r4, #4]
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	2300      	movs	r3, #0
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	e7a8      	b.n	8007618 <_printf_i+0x150>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	462a      	mov	r2, r5
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d0ab      	beq.n	800762c <_printf_i+0x164>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	079b      	lsls	r3, r3, #30
 80076d8:	d413      	bmi.n	8007702 <_printf_i+0x23a>
 80076da:	68e0      	ldr	r0, [r4, #12]
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	4298      	cmp	r0, r3
 80076e0:	bfb8      	it	lt
 80076e2:	4618      	movlt	r0, r3
 80076e4:	e7a4      	b.n	8007630 <_printf_i+0x168>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d09b      	beq.n	800762c <_printf_i+0x164>
 80076f4:	3501      	adds	r5, #1
 80076f6:	68e3      	ldr	r3, [r4, #12]
 80076f8:	9903      	ldr	r1, [sp, #12]
 80076fa:	1a5b      	subs	r3, r3, r1
 80076fc:	42ab      	cmp	r3, r5
 80076fe:	dcf2      	bgt.n	80076e6 <_printf_i+0x21e>
 8007700:	e7eb      	b.n	80076da <_printf_i+0x212>
 8007702:	2500      	movs	r5, #0
 8007704:	f104 0619 	add.w	r6, r4, #25
 8007708:	e7f5      	b.n	80076f6 <_printf_i+0x22e>
 800770a:	bf00      	nop
 800770c:	0800815d 	.word	0x0800815d
 8007710:	0800816e 	.word	0x0800816e

08007714 <_sbrk_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d06      	ldr	r5, [pc, #24]	; (8007730 <_sbrk_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	f7f9 fedc 	bl	80014dc <_sbrk>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_sbrk_r+0x1a>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_sbrk_r+0x1a>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000300 	.word	0x20000300

08007734 <__sread>:
 8007734:	b510      	push	{r4, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773c:	f000 f8ea 	bl	8007914 <_read_r>
 8007740:	2800      	cmp	r0, #0
 8007742:	bfab      	itete	ge
 8007744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007746:	89a3      	ldrhlt	r3, [r4, #12]
 8007748:	181b      	addge	r3, r3, r0
 800774a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800774e:	bfac      	ite	ge
 8007750:	6563      	strge	r3, [r4, #84]	; 0x54
 8007752:	81a3      	strhlt	r3, [r4, #12]
 8007754:	bd10      	pop	{r4, pc}

08007756 <__swrite>:
 8007756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775a:	461f      	mov	r7, r3
 800775c:	898b      	ldrh	r3, [r1, #12]
 800775e:	05db      	lsls	r3, r3, #23
 8007760:	4605      	mov	r5, r0
 8007762:	460c      	mov	r4, r1
 8007764:	4616      	mov	r6, r2
 8007766:	d505      	bpl.n	8007774 <__swrite+0x1e>
 8007768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776c:	2302      	movs	r3, #2
 800776e:	2200      	movs	r2, #0
 8007770:	f000 f868 	bl	8007844 <_lseek_r>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	4628      	mov	r0, r5
 8007786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778a:	f000 b817 	b.w	80077bc <_write_r>

0800778e <__sseek>:
 800778e:	b510      	push	{r4, lr}
 8007790:	460c      	mov	r4, r1
 8007792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007796:	f000 f855 	bl	8007844 <_lseek_r>
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	bf15      	itete	ne
 80077a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80077a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077aa:	81a3      	strheq	r3, [r4, #12]
 80077ac:	bf18      	it	ne
 80077ae:	81a3      	strhne	r3, [r4, #12]
 80077b0:	bd10      	pop	{r4, pc}

080077b2 <__sclose>:
 80077b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b6:	f000 b813 	b.w	80077e0 <_close_r>
	...

080077bc <_write_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d07      	ldr	r5, [pc, #28]	; (80077dc <_write_r+0x20>)
 80077c0:	4604      	mov	r4, r0
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f7f9 fe35 	bl	800143a <_write>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_write_r+0x1e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_write_r+0x1e>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000300 	.word	0x20000300

080077e0 <_close_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	; (80077fc <_close_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7f9 fe41 	bl	8001472 <_close>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_close_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_close_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20000300 	.word	0x20000300

08007800 <_fstat_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_fstat_r+0x20>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f7f9 fe3c 	bl	800148a <_fstat>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d102      	bne.n	800781c <_fstat_r+0x1c>
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	b103      	cbz	r3, 800781c <_fstat_r+0x1c>
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	bf00      	nop
 8007820:	20000300 	.word	0x20000300

08007824 <_isatty_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_isatty_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fe3b 	bl	80014aa <_isatty>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_isatty_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_isatty_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20000300 	.word	0x20000300

08007844 <_lseek_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	; (8007864 <_lseek_r+0x20>)
 8007848:	4604      	mov	r4, r0
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	2200      	movs	r2, #0
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f7f9 fe34 	bl	80014c0 <_lseek>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_lseek_r+0x1e>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_lseek_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	20000300 	.word	0x20000300

08007868 <memmove>:
 8007868:	4288      	cmp	r0, r1
 800786a:	b510      	push	{r4, lr}
 800786c:	eb01 0402 	add.w	r4, r1, r2
 8007870:	d902      	bls.n	8007878 <memmove+0x10>
 8007872:	4284      	cmp	r4, r0
 8007874:	4623      	mov	r3, r4
 8007876:	d807      	bhi.n	8007888 <memmove+0x20>
 8007878:	1e43      	subs	r3, r0, #1
 800787a:	42a1      	cmp	r1, r4
 800787c:	d008      	beq.n	8007890 <memmove+0x28>
 800787e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007886:	e7f8      	b.n	800787a <memmove+0x12>
 8007888:	4402      	add	r2, r0
 800788a:	4601      	mov	r1, r0
 800788c:	428a      	cmp	r2, r1
 800788e:	d100      	bne.n	8007892 <memmove+0x2a>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789a:	e7f7      	b.n	800788c <memmove+0x24>

0800789c <__malloc_lock>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__malloc_lock+0x8>)
 800789e:	f7ff b9a7 	b.w	8006bf0 <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	200002f4 	.word	0x200002f4

080078a8 <__malloc_unlock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_unlock+0x8>)
 80078aa:	f7ff b9a2 	b.w	8006bf2 <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	200002f4 	.word	0x200002f4

080078b4 <_realloc_r>:
 80078b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	4680      	mov	r8, r0
 80078ba:	4614      	mov	r4, r2
 80078bc:	460e      	mov	r6, r1
 80078be:	b921      	cbnz	r1, 80078ca <_realloc_r+0x16>
 80078c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c4:	4611      	mov	r1, r2
 80078c6:	f7ff ba67 	b.w	8006d98 <_malloc_r>
 80078ca:	b92a      	cbnz	r2, 80078d8 <_realloc_r+0x24>
 80078cc:	f7ff f9f8 	bl	8006cc0 <_free_r>
 80078d0:	4625      	mov	r5, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d8:	f000 f82e 	bl	8007938 <_malloc_usable_size_r>
 80078dc:	4284      	cmp	r4, r0
 80078de:	4607      	mov	r7, r0
 80078e0:	d802      	bhi.n	80078e8 <_realloc_r+0x34>
 80078e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078e6:	d812      	bhi.n	800790e <_realloc_r+0x5a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4640      	mov	r0, r8
 80078ec:	f7ff fa54 	bl	8006d98 <_malloc_r>
 80078f0:	4605      	mov	r5, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d0ed      	beq.n	80078d2 <_realloc_r+0x1e>
 80078f6:	42bc      	cmp	r4, r7
 80078f8:	4622      	mov	r2, r4
 80078fa:	4631      	mov	r1, r6
 80078fc:	bf28      	it	cs
 80078fe:	463a      	movcs	r2, r7
 8007900:	f7fe fe3a 	bl	8006578 <memcpy>
 8007904:	4631      	mov	r1, r6
 8007906:	4640      	mov	r0, r8
 8007908:	f7ff f9da 	bl	8006cc0 <_free_r>
 800790c:	e7e1      	b.n	80078d2 <_realloc_r+0x1e>
 800790e:	4635      	mov	r5, r6
 8007910:	e7df      	b.n	80078d2 <_realloc_r+0x1e>
	...

08007914 <_read_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	; (8007934 <_read_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 fd6c 	bl	8001400 <_read>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_read_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_read_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000300 	.word	0x20000300

08007938 <_malloc_usable_size_r>:
 8007938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793c:	1f18      	subs	r0, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfbc      	itt	lt
 8007942:	580b      	ldrlt	r3, [r1, r0]
 8007944:	18c0      	addlt	r0, r0, r3
 8007946:	4770      	bx	lr

08007948 <_init>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr

08007954 <_fini>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr
