
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e1c  08007e1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e24  08007e24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000250  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001723a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003367  00000000  00000000  000372e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d88  00000000  00000000  0003cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e2f  00000000  00000000  00064948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f08a6  00000000  00000000  0007e777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f01d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a40  00000000  00000000  0016f070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bcc 	.word	0x08007bcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007bcc 	.word	0x08007bcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x9c>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x9c>)
 800060a:	f001 fdd9 	bl	80021c0 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000614:	f001 fa82 	bl	8001b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000618:	2303      	movs	r3, #3
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x9c>)
 800062a:	f001 ff1f 	bl	800246c <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000634:	f001 fa72 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012000 	.word	0x40012000

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 faab 	bl	8002c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_GPIO_Init+0xac>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xac>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0xac>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_GPIO_Init+0xac>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_GPIO_Init+0xac>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xb0>)
 800076e:	f002 fa4f 	bl	8002c10 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f002 fc01 	bl	8002fc8 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f001 f9a6 	bl	8001b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f003 f971 	bl	8003aba <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f001 f99d 	bl	8001b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f003 f9a4 	bl	8003b32 <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f001 f994 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 8000860:	f002 f9d6 	bl	8002c10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <__io_putchar+0x20>)
 80008a4:	f004 ffb9 	bl	800581a <HAL_UART_Transmit>
	return ch;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000270 	.word	0x20000270

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f001 fbe9 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 fdfd 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff03 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80008ca:	f001 f92d 	bl	8001b28 <MX_RTC_Init>
  MX_I2C1_Init();
 80008ce:	f7ff ff59 	bl	8000784 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80008d2:	f001 fb43 	bl	8001f5c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008d6:	f7ff fe65 	bl	80005a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008da:	f001 facf 	bl	8001e7c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008de:	f000 fe61 	bl	80015a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80008e2:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <main+0x2d0>)
 80008e4:	f004 fb1a 	bl	8004f1c <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 80008e8:	f001 f812 	bl	8001910 <init>
	LCD_Init(LCD_ADDR);
 80008ec:	204e      	movs	r0, #78	; 0x4e
 80008ee:	f000 ffd7 	bl	80018a0 <LCD_Init>
	up = 0;
 80008f2:	4ba6      	ldr	r3, [pc, #664]	; (8000b8c <main+0x2d4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
	down = 0;
 80008f8:	4ba5      	ldr	r3, [pc, #660]	; (8000b90 <main+0x2d8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	left = 0;
 80008fe:	4ba5      	ldr	r3, [pc, #660]	; (8000b94 <main+0x2dc>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000904:	4ba4      	ldr	r3, [pc, #656]	; (8000b98 <main+0x2e0>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 800090a:	4ba4      	ldr	r3, [pc, #656]	; (8000b9c <main+0x2e4>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000910:	4ba2      	ldr	r3, [pc, #648]	; (8000b9c <main+0x2e4>)
 8000912:	2200      	movs	r2, #0
 8000914:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000916:	4ba1      	ldr	r3, [pc, #644]	; (8000b9c <main+0x2e4>)
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 800091c:	4b9f      	ldr	r3, [pc, #636]	; (8000b9c <main+0x2e4>)
 800091e:	2200      	movs	r2, #0
 8000920:	70da      	strb	r2, [r3, #3]

		//Main loop
		while (mode == 0) {
 8000922:	e0b5      	b.n	8000a90 <main+0x1d8>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000924:	2200      	movs	r2, #0
 8000926:	499e      	ldr	r1, [pc, #632]	; (8000ba0 <main+0x2e8>)
 8000928:	489e      	ldr	r0, [pc, #632]	; (8000ba4 <main+0x2ec>)
 800092a:	f004 f8b9 	bl	8004aa0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800092e:	2200      	movs	r2, #0
 8000930:	499d      	ldr	r1, [pc, #628]	; (8000ba8 <main+0x2f0>)
 8000932:	489c      	ldr	r0, [pc, #624]	; (8000ba4 <main+0x2ec>)
 8000934:	f004 f996 	bl	8004c64 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000938:	489c      	ldr	r0, [pc, #624]	; (8000bac <main+0x2f4>)
 800093a:	f001 fc85 	bl	8002248 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 800093e:	4b98      	ldr	r3, [pc, #608]	; (8000ba0 <main+0x2e8>)
 8000940:	78db      	ldrb	r3, [r3, #3]
 8000942:	461a      	mov	r2, r3
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	4a99      	ldr	r2, [pc, #612]	; (8000bb0 <main+0x2f8>)
 800094c:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800094e:	4b94      	ldr	r3, [pc, #592]	; (8000ba0 <main+0x2e8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000952:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000954:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <main+0x2e8>)
 8000956:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000958:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800095a:	4b91      	ldr	r3, [pc, #580]	; (8000ba0 <main+0x2e8>)
 800095c:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	9100      	str	r1, [sp, #0]
 8000962:	4603      	mov	r3, r0
 8000964:	4993      	ldr	r1, [pc, #588]	; (8000bb4 <main+0x2fc>)
 8000966:	4894      	ldr	r0, [pc, #592]	; (8000bb8 <main+0x300>)
 8000968:	f005 ffde 	bl	8006928 <siprintf>

			// LCD up
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	204e      	movs	r0, #78	; 0x4e
 8000970:	f000 ff72 	bl	8001858 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, "Park Jung Hwan");
 8000974:	4991      	ldr	r1, [pc, #580]	; (8000bbc <main+0x304>)
 8000976:	204e      	movs	r0, #78	; 0x4e
 8000978:	f000 ffaf 	bl	80018da <LCD_SendString>

			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 800097c:	21c0      	movs	r1, #192	; 0xc0
 800097e:	204e      	movs	r0, #78	; 0x4e
 8000980:	f000 ff6a 	bl	8001858 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 8000984:	498c      	ldr	r1, [pc, #560]	; (8000bb8 <main+0x300>)
 8000986:	204e      	movs	r0, #78	; 0x4e
 8000988:	f000 ffa7 	bl	80018da <LCD_SendString>

			//==========================================================================================================
			//mode choose while loop
			while (rising_edge >= 1) {
 800098c:	e07b      	b.n	8000a86 <main+0x1ce>
				cur_tick = HAL_GetTick();
 800098e:	f001 fbe7 	bl	8002160 <HAL_GetTick>
 8000992:	4603      	mov	r3, r0
 8000994:	4a8a      	ldr	r2, [pc, #552]	; (8000bc0 <main+0x308>)
 8000996:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8000998:	4b89      	ldr	r3, [pc, #548]	; (8000bc0 <main+0x308>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b89      	ldr	r3, [pc, #548]	; (8000bc4 <main+0x30c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a89      	ldr	r2, [pc, #548]	; (8000bc8 <main+0x310>)
 80009a4:	6013      	str	r3, [r2, #0]

				if (tick_gap >= 300) {
 80009a6:	4b88      	ldr	r3, [pc, #544]	; (8000bc8 <main+0x310>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009ae:	d36a      	bcc.n	8000a86 <main+0x1ce>

					if (rising_edge == 1 && falling_edge >= 1) {
 80009b0:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <main+0x314>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d132      	bne.n	8000a1e <main+0x166>
 80009b8:	4b85      	ldr	r3, [pc, #532]	; (8000bd0 <main+0x318>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d02e      	beq.n	8000a1e <main+0x166>

						// init the temp
						sTime_temp.Hours = 0;
 80009c0:	4b76      	ldr	r3, [pc, #472]	; (8000b9c <main+0x2e4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 80009c6:	4b75      	ldr	r3, [pc, #468]	; (8000b9c <main+0x2e4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 80009cc:	4b73      	ldr	r3, [pc, #460]	; (8000b9c <main+0x2e4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 80009d2:	4b72      	ldr	r3, [pc, #456]	; (8000b9c <main+0x2e4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 80009d8:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <main+0x31c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
						// LCD up
						LCD_Init(LCD_ADDR);
 80009de:	204e      	movs	r0, #78	; 0x4e
 80009e0:	f000 ff5e 	bl	80018a0 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	204e      	movs	r0, #78	; 0x4e
 80009e8:	f000 ff36 	bl	8001858 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Set Time Mode");
 80009ec:	497a      	ldr	r1, [pc, #488]	; (8000bd8 <main+0x320>)
 80009ee:	204e      	movs	r0, #78	; 0x4e
 80009f0:	f000 ff73 	bl	80018da <LCD_SendString>
						screen(cursor);
 80009f4:	4b77      	ldr	r3, [pc, #476]	; (8000bd4 <main+0x31c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fe29 	bl	8001650 <screen>


						LCD_SendCommand(LCD_ADDR, 0b00001111);
 80009fe:	210f      	movs	r1, #15
 8000a00:	204e      	movs	r0, #78	; 0x4e
 8000a02:	f000 ff29 	bl	8001858 <LCD_SendCommand>

						//init the user button
						rising_edge = 0;
 8000a06:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <main+0x314>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a0c:	4b70      	ldr	r3, [pc, #448]	; (8000bd0 <main+0x318>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
						mode = 1;
 8000a12:	4b72      	ldr	r3, [pc, #456]	; (8000bdc <main+0x324>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
						printf("one click==========================\r\n");
 8000a18:	4871      	ldr	r0, [pc, #452]	; (8000be0 <main+0x328>)
 8000a1a:	f005 ff7d 	bl	8006918 <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8000a1e:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <main+0x314>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d91a      	bls.n	8000a5c <main+0x1a4>
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <main+0x318>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d016      	beq.n	8000a5c <main+0x1a4>
						rising_edge = 0;
 8000a2e:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <main+0x314>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a34:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <main+0x318>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
						mode = 2;
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <main+0x324>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	701a      	strb	r2, [r3, #0]
						LCD_Init(LCD_ADDR);
 8000a40:	204e      	movs	r0, #78	; 0x4e
 8000a42:	f000 ff2d 	bl	80018a0 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	204e      	movs	r0, #78	; 0x4e
 8000a4a:	f000 ff05 	bl	8001858 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Alarm Mode");
 8000a4e:	4965      	ldr	r1, [pc, #404]	; (8000be4 <main+0x32c>)
 8000a50:	204e      	movs	r0, #78	; 0x4e
 8000a52:	f000 ff42 	bl	80018da <LCD_SendString>
						printf("two click++++++++++++++++++++++++++\r\n");
 8000a56:	4864      	ldr	r0, [pc, #400]	; (8000be8 <main+0x330>)
 8000a58:	f005 ff5e 	bl	8006918 <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 8000a5c:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <main+0x310>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a64:	d30f      	bcc.n	8000a86 <main+0x1ce>
 8000a66:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <main+0x318>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10b      	bne.n	8000a86 <main+0x1ce>
						rising_edge = 0;
 8000a6e:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <main+0x314>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a74:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <main+0x318>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <main+0x324>)
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8000a80:	485a      	ldr	r0, [pc, #360]	; (8000bec <main+0x334>)
 8000a82:	f005 ff49 	bl	8006918 <puts>
			while (rising_edge >= 1) {
 8000a86:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <main+0x314>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f47f af7f 	bne.w	800098e <main+0xd6>
		while (mode == 0) {
 8000a90:	4b52      	ldr	r3, [pc, #328]	; (8000bdc <main+0x324>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f43f af45 	beq.w	8000924 <main+0x6c>
				}
			}
		}
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8000a9a:	e292      	b.n	8000fc2 <main+0x70a>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8000a9c:	4843      	ldr	r0, [pc, #268]	; (8000bac <main+0x2f4>)
 8000a9e:	f001 fbd3 	bl	8002248 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <main+0x314>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d04c      	beq.n	8000b44 <main+0x28c>

				// this flag is check the exit or apply
				apply_flag = 1;
 8000aaa:	4b51      	ldr	r3, [pc, #324]	; (8000bf0 <main+0x338>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <main+0x318>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d012      	beq.n	8000ade <main+0x226>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 8000ab8:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <main+0x338>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <main+0x314>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000ac4:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <main+0x318>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000aca:	210e      	movs	r1, #14
 8000acc:	204e      	movs	r0, #78	; 0x4e
 8000ace:	f000 fec3 	bl	8001858 <LCD_SendCommand>
					mode = 0;
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <main+0x324>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 8000ad8:	4846      	ldr	r0, [pc, #280]	; (8000bf4 <main+0x33c>)
 8000ada:	f005 ff1d 	bl	8006918 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <main+0x318>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d12e      	bne.n	8000b44 <main+0x28c>
 8000ae6:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <main+0x340>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d92a      	bls.n	8000b44 <main+0x28c>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <main+0x2e4>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <main+0x2e8>)
 8000af4:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <main+0x2e4>)
 8000af8:	785a      	ldrb	r2, [r3, #1]
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <main+0x2e8>)
 8000afc:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <main+0x2e4>)
 8000b00:	789a      	ldrb	r2, [r3, #2]
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <main+0x2e8>)
 8000b04:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <main+0x2e4>)
 8000b08:	78da      	ldrb	r2, [r3, #3]
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <main+0x2e8>)
 8000b0c:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <main+0x2e8>)
 8000b12:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <main+0x2ec>)
 8000b14:	f003 ff2a 	bl	800496c <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000b18:	210e      	movs	r1, #14
 8000b1a:	204e      	movs	r0, #78	; 0x4e
 8000b1c:	f000 fe9c 	bl	8001858 <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <main+0x338>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <main+0x340>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <main+0x314>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <main+0x318>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

					mode = 0;
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <main+0x324>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 8000b3e:	482f      	ldr	r0, [pc, #188]	; (8000bfc <main+0x344>)
 8000b40:	f005 feea 	bl	8006918 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <main+0x348>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 823a 	beq.w	8000fc2 <main+0x70a>

				if (up > 0) {
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <main+0x2d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80fc 	beq.w	8000d50 <main+0x498>
					//AM or PM switching
					if (cursor == 0) {
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <main+0x31c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d166      	bne.n	8000c2e <main+0x376>
						if (sTime_temp.TimeFormat == 0) {
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <main+0x2e4>)
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14d      	bne.n	8000c04 <main+0x34c>
							sTime_temp.TimeFormat = 1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <main+0x2e4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <main+0x2e4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <main+0x2c4>
								sTime_temp.Hours = 12;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <main+0x2e4>)
 8000b78:	220c      	movs	r2, #12
 8000b7a:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <main+0x31c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fd65 	bl	8001650 <screen>
 8000b86:	e0e0      	b.n	8000d4a <main+0x492>
 8000b88:	20000228 	.word	0x20000228
 8000b8c:	2000015c 	.word	0x2000015c
 8000b90:	2000015d 	.word	0x2000015d
 8000b94:	2000015e 	.word	0x2000015e
 8000b98:	2000015f 	.word	0x2000015f
 8000b9c:	200001a0 	.word	0x200001a0
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	20000204 	.word	0x20000204
 8000ba8:	20000188 	.word	0x20000188
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08007be4 	.word	0x08007be4
 8000bb8:	20000160 	.word	0x20000160
 8000bbc:	08007bf8 	.word	0x08007bf8
 8000bc0:	2000014c 	.word	0x2000014c
 8000bc4:	20000148 	.word	0x20000148
 8000bc8:	20000150 	.word	0x20000150
 8000bcc:	20000145 	.word	0x20000145
 8000bd0:	20000146 	.word	0x20000146
 8000bd4:	20000154 	.word	0x20000154
 8000bd8:	08007c08 	.word	0x08007c08
 8000bdc:	20000147 	.word	0x20000147
 8000be0:	08007c18 	.word	0x08007c18
 8000be4:	08007c40 	.word	0x08007c40
 8000be8:	08007c4c 	.word	0x08007c4c
 8000bec:	08007c74 	.word	0x08007c74
 8000bf0:	20000134 	.word	0x20000134
 8000bf4:	08007c9c 	.word	0x08007c9c
 8000bf8:	20000138 	.word	0x20000138
 8000bfc:	08007ca8 	.word	0x08007ca8
 8000c00:	20000130 	.word	0x20000130

						}
						else if (sTime_temp.TimeFormat == 1) {
 8000c04:	4b8d      	ldr	r3, [pc, #564]	; (8000e3c <main+0x584>)
 8000c06:	78db      	ldrb	r3, [r3, #3]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	f040 809e 	bne.w	8000d4a <main+0x492>
							sTime_temp.TimeFormat = 0;
 8000c0e:	4b8b      	ldr	r3, [pc, #556]	; (8000e3c <main+0x584>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8000c14:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <main+0x584>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b0c      	cmp	r3, #12
 8000c1a:	d102      	bne.n	8000c22 <main+0x36a>
								sTime_temp.Hours = 0;
 8000c1c:	4b87      	ldr	r3, [pc, #540]	; (8000e3c <main+0x584>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <main+0x588>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fd12 	bl	8001650 <screen>
 8000c2c:	e08d      	b.n	8000d4a <main+0x492>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 8000c2e:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <main+0x588>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d10f      	bne.n	8000c56 <main+0x39e>

						if (sTime_temp.Hours < 3) {
 8000c36:	4b81      	ldr	r3, [pc, #516]	; (8000e3c <main+0x584>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d805      	bhi.n	8000c4a <main+0x392>
							sTime_temp.Hours += 10;
 8000c3e:	4b7f      	ldr	r3, [pc, #508]	; (8000e3c <main+0x584>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	330a      	adds	r3, #10
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <main+0x584>)
 8000c48:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor);
 8000c4a:	4b7d      	ldr	r3, [pc, #500]	; (8000e40 <main+0x588>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fcfe 	bl	8001650 <screen>
 8000c54:	e079      	b.n	8000d4a <main+0x492>
					}

					// 1H switching
					else if (cursor == 4) {
 8000c56:	4b7a      	ldr	r3, [pc, #488]	; (8000e40 <main+0x588>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d126      	bne.n	8000cac <main+0x3f4>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 8000c5e:	4b77      	ldr	r3, [pc, #476]	; (8000e3c <main+0x584>)
 8000c60:	78db      	ldrb	r3, [r3, #3]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10a      	bne.n	8000c7c <main+0x3c4>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours && sTime_temp.Hours < 11) {
 8000c66:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <main+0x584>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	d818      	bhi.n	8000ca0 <main+0x3e8>
								sTime_temp.Hours ++;
 8000c6e:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <main+0x584>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <main+0x584>)
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e011      	b.n	8000ca0 <main+0x3e8>
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <main+0x584>)
 8000c7e:	78db      	ldrb	r3, [r3, #3]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10d      	bne.n	8000ca0 <main+0x3e8>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours && sTime_temp.Hours < 12) {
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <main+0x584>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d009      	beq.n	8000ca0 <main+0x3e8>
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <main+0x584>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b0b      	cmp	r3, #11
 8000c92:	d805      	bhi.n	8000ca0 <main+0x3e8>
								sTime_temp.Hours ++;
 8000c94:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <main+0x584>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b67      	ldr	r3, [pc, #412]	; (8000e3c <main+0x584>)
 8000c9e:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor);
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <main+0x588>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fcd3 	bl	8001650 <screen>
 8000caa:	e04e      	b.n	8000d4a <main+0x492>
					}

					// 10M switching
					else if (cursor == 6) {
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <main+0x588>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d10f      	bne.n	8000cd4 <main+0x41c>
						if (0 <= sTime_temp.Minutes && sTime_temp.Minutes < 50) {
 8000cb4:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <main+0x584>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	2b31      	cmp	r3, #49	; 0x31
 8000cba:	d805      	bhi.n	8000cc8 <main+0x410>
							sTime_temp.Minutes += 10;
 8000cbc:	4b5f      	ldr	r3, [pc, #380]	; (8000e3c <main+0x584>)
 8000cbe:	785b      	ldrb	r3, [r3, #1]
 8000cc0:	330a      	adds	r3, #10
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b5d      	ldr	r3, [pc, #372]	; (8000e3c <main+0x584>)
 8000cc6:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <main+0x588>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fcbf 	bl	8001650 <screen>
 8000cd2:	e03a      	b.n	8000d4a <main+0x492>
					}
					// 1M switching
					else if (cursor == 7) {
 8000cd4:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <main+0x588>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b07      	cmp	r3, #7
 8000cda:	d10f      	bne.n	8000cfc <main+0x444>
						if (0 <= sTime_temp.Minutes && sTime_temp.Minutes < 59) {
 8000cdc:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <main+0x584>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	2b3a      	cmp	r3, #58	; 0x3a
 8000ce2:	d805      	bhi.n	8000cf0 <main+0x438>
							sTime_temp.Minutes += 1;
 8000ce4:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <main+0x584>)
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <main+0x584>)
 8000cee:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 8000cf0:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <main+0x588>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fcab 	bl	8001650 <screen>
 8000cfa:	e026      	b.n	8000d4a <main+0x492>
					}

					// 10S switching
					else if (cursor == 9) {
 8000cfc:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <main+0x588>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b09      	cmp	r3, #9
 8000d02:	d10f      	bne.n	8000d24 <main+0x46c>
						if (0 <= sTime_temp.Seconds && sTime_temp.Seconds < 50) {
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <main+0x584>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	2b31      	cmp	r3, #49	; 0x31
 8000d0a:	d805      	bhi.n	8000d18 <main+0x460>
							sTime_temp.Seconds += 10;
 8000d0c:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <main+0x584>)
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	330a      	adds	r3, #10
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <main+0x584>)
 8000d16:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 8000d18:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <main+0x588>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fc97 	bl	8001650 <screen>
 8000d22:	e012      	b.n	8000d4a <main+0x492>
					}
					// 1S switching
					else if (cursor == 10) {
 8000d24:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <main+0x588>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	d10e      	bne.n	8000d4a <main+0x492>
						if (0 <= sTime_temp.Seconds && sTime_temp.Seconds < 59) {
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <main+0x584>)
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	2b3a      	cmp	r3, #58	; 0x3a
 8000d32:	d805      	bhi.n	8000d40 <main+0x488>
							sTime_temp.Seconds += 1;
 8000d34:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <main+0x584>)
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <main+0x584>)
 8000d3e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 8000d40:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <main+0x588>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fc83 	bl	8001650 <screen>
					}

					// clear the up flag
					up = 0;
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <main+0x58c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <main+0x590>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80ab 	beq.w	8000eb0 <main+0x5f8>

					//AM or PM switching
					if (cursor == 0) {
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <main+0x588>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d128      	bne.n	8000db4 <main+0x4fc>
						if (sTime_temp.TimeFormat == 0) {
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <main+0x584>)
 8000d64:	78db      	ldrb	r3, [r3, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <main+0x4d2>
							sTime_temp.TimeFormat = 1;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <main+0x584>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <main+0x584>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <main+0x4c6>
								sTime_temp.Hours = 12;
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <main+0x584>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <main+0x588>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fc64 	bl	8001650 <screen>
 8000d88:	e08f      	b.n	8000eaa <main+0x5f2>
						}
						else if (sTime_temp.TimeFormat == 1) {
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <main+0x584>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	f040 808b 	bne.w	8000eaa <main+0x5f2>
							sTime_temp.TimeFormat = 0;
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <main+0x584>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <main+0x584>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d102      	bne.n	8000da8 <main+0x4f0>
								sTime_temp.Hours = 0;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <main+0x584>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <main+0x588>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fc4f 	bl	8001650 <screen>
 8000db2:	e07a      	b.n	8000eaa <main+0x5f2>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <main+0x588>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d10f      	bne.n	8000ddc <main+0x524>
						if (sTime_temp.Hours > 0) {
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <main+0x584>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <main+0x518>
							sTime_temp.Hours --;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <main+0x584>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <main+0x584>)
 8000dce:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor);
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <main+0x588>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fc3b 	bl	8001650 <screen>
 8000dda:	e066      	b.n	8000eaa <main+0x5f2>
					}

					// 10M switching
					else if (cursor == 6) {
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <main+0x588>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d113      	bne.n	8000e0c <main+0x554>
						if (0 < sTime_temp.Minutes && sTime_temp.Minutes <= 50) {
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <main+0x584>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <main+0x548>
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <main+0x584>)
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	2b32      	cmp	r3, #50	; 0x32
 8000df2:	d805      	bhi.n	8000e00 <main+0x548>
							sTime_temp.Minutes -= 10;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <main+0x584>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	3b0a      	subs	r3, #10
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <main+0x584>)
 8000dfe:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <main+0x588>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fc23 	bl	8001650 <screen>
 8000e0a:	e04e      	b.n	8000eaa <main+0x5f2>
					}
					// 1M switching
					else if (cursor == 7) {
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <main+0x588>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d11b      	bne.n	8000e4c <main+0x594>
						if (0 < sTime_temp.Minutes && sTime_temp.Minutes <= 59) {
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <main+0x584>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d009      	beq.n	8000e30 <main+0x578>
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <main+0x584>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	2b3b      	cmp	r3, #59	; 0x3b
 8000e22:	d805      	bhi.n	8000e30 <main+0x578>
							sTime_temp.Minutes -= 1;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <main+0x584>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <main+0x584>)
 8000e2e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <main+0x588>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc0b 	bl	8001650 <screen>
 8000e3a:	e036      	b.n	8000eaa <main+0x5f2>
 8000e3c:	200001a0 	.word	0x200001a0
 8000e40:	20000154 	.word	0x20000154
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	2000015d 	.word	0x2000015d
					}

					// 10S switching
					else if (cursor == 9) {
 8000e4c:	4b9a      	ldr	r3, [pc, #616]	; (80010b8 <main+0x800>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d113      	bne.n	8000e7c <main+0x5c4>
						if (0 < sTime_temp.Seconds && sTime_temp.Seconds <= 50) {
 8000e54:	4b99      	ldr	r3, [pc, #612]	; (80010bc <main+0x804>)
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d009      	beq.n	8000e70 <main+0x5b8>
 8000e5c:	4b97      	ldr	r3, [pc, #604]	; (80010bc <main+0x804>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	2b32      	cmp	r3, #50	; 0x32
 8000e62:	d805      	bhi.n	8000e70 <main+0x5b8>
							sTime_temp.Seconds -= 10;
 8000e64:	4b95      	ldr	r3, [pc, #596]	; (80010bc <main+0x804>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	3b0a      	subs	r3, #10
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b93      	ldr	r3, [pc, #588]	; (80010bc <main+0x804>)
 8000e6e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 8000e70:	4b91      	ldr	r3, [pc, #580]	; (80010b8 <main+0x800>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fbeb 	bl	8001650 <screen>
 8000e7a:	e016      	b.n	8000eaa <main+0x5f2>
					}
					// 1S switching
					else if (cursor == 10) {
 8000e7c:	4b8e      	ldr	r3, [pc, #568]	; (80010b8 <main+0x800>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b0a      	cmp	r3, #10
 8000e82:	d112      	bne.n	8000eaa <main+0x5f2>
						if (0 < sTime_temp.Seconds && sTime_temp.Seconds <= 59) {
 8000e84:	4b8d      	ldr	r3, [pc, #564]	; (80010bc <main+0x804>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d009      	beq.n	8000ea0 <main+0x5e8>
 8000e8c:	4b8b      	ldr	r3, [pc, #556]	; (80010bc <main+0x804>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	2b3b      	cmp	r3, #59	; 0x3b
 8000e92:	d805      	bhi.n	8000ea0 <main+0x5e8>
							sTime_temp.Seconds -= 1;
 8000e94:	4b89      	ldr	r3, [pc, #548]	; (80010bc <main+0x804>)
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <main+0x804>)
 8000e9e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 8000ea0:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <main+0x800>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fbd3 	bl	8001650 <screen>
					}

					// clear the down flag
					down = 0;
 8000eaa:	4b85      	ldr	r3, [pc, #532]	; (80010c0 <main+0x808>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8000eb0:	4b84      	ldr	r3, [pc, #528]	; (80010c4 <main+0x80c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d03e      	beq.n	8000f36 <main+0x67e>
					if (cursor > 0) {
 8000eb8:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <main+0x800>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d037      	beq.n	8000f30 <main+0x678>
						cursor--;
 8000ec0:	4b7d      	ldr	r3, [pc, #500]	; (80010b8 <main+0x800>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <main+0x800>)
 8000eca:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000ecc:	2110      	movs	r1, #16
 8000ece:	204e      	movs	r0, #78	; 0x4e
 8000ed0:	f000 fcc2 	bl	8001858 <LCD_SendCommand>

						if (cursor == 8) {
 8000ed4:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <main+0x800>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d109      	bne.n	8000ef0 <main+0x638>
							cursor--;
 8000edc:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <main+0x800>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b74      	ldr	r3, [pc, #464]	; (80010b8 <main+0x800>)
 8000ee6:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000ee8:	2110      	movs	r1, #16
 8000eea:	204e      	movs	r0, #78	; 0x4e
 8000eec:	f000 fcb4 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 5) {
 8000ef0:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <main+0x800>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d109      	bne.n	8000f0c <main+0x654>
							cursor--;
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <main+0x800>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <main+0x800>)
 8000f02:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000f04:	2110      	movs	r1, #16
 8000f06:	204e      	movs	r0, #78	; 0x4e
 8000f08:	f000 fca6 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 2) {
 8000f0c:	4b6a      	ldr	r3, [pc, #424]	; (80010b8 <main+0x800>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d10d      	bne.n	8000f30 <main+0x678>
							cursor -= 2;
 8000f14:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <main+0x800>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <main+0x800>)
 8000f1e:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000f20:	2110      	movs	r1, #16
 8000f22:	204e      	movs	r0, #78	; 0x4e
 8000f24:	f000 fc98 	bl	8001858 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000f28:	2110      	movs	r1, #16
 8000f2a:	204e      	movs	r0, #78	; 0x4e
 8000f2c:	f000 fc94 	bl	8001858 <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 8000f30:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <main+0x80c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8000f36:	4b64      	ldr	r3, [pc, #400]	; (80010c8 <main+0x810>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d03e      	beq.n	8000fbc <main+0x704>

					if (cursor < 10) {
 8000f3e:	4b5e      	ldr	r3, [pc, #376]	; (80010b8 <main+0x800>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	d837      	bhi.n	8000fb6 <main+0x6fe>
						cursor++;
 8000f46:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <main+0x800>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <main+0x800>)
 8000f50:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f52:	2114      	movs	r1, #20
 8000f54:	204e      	movs	r0, #78	; 0x4e
 8000f56:	f000 fc7f 	bl	8001858 <LCD_SendCommand>

						if (cursor == 8) {
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <main+0x800>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d109      	bne.n	8000f76 <main+0x6be>
							cursor++;
 8000f62:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <main+0x800>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <main+0x800>)
 8000f6c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f6e:	2114      	movs	r1, #20
 8000f70:	204e      	movs	r0, #78	; 0x4e
 8000f72:	f000 fc71 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 5) {
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <main+0x800>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d109      	bne.n	8000f92 <main+0x6da>
							cursor++;
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <main+0x800>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <main+0x800>)
 8000f88:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f8a:	2114      	movs	r1, #20
 8000f8c:	204e      	movs	r0, #78	; 0x4e
 8000f8e:	f000 fc63 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 1) {
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <main+0x800>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10d      	bne.n	8000fb6 <main+0x6fe>
							cursor += 2;
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <main+0x800>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <main+0x800>)
 8000fa4:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000fa6:	2114      	movs	r1, #20
 8000fa8:	204e      	movs	r0, #78	; 0x4e
 8000faa:	f000 fc55 	bl	8001858 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000fae:	2114      	movs	r1, #20
 8000fb0:	204e      	movs	r0, #78	; 0x4e
 8000fb2:	f000 fc51 	bl	8001858 <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <main+0x810>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <main+0x814>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <main+0x818>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	f43f ad68 	beq.w	8000a9c <main+0x1e4>

			}
		}
		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 8000fcc:	e22f      	b.n	800142e <main+0xb76>
			HAL_ADC_Start(&hadc1);
 8000fce:	4841      	ldr	r0, [pc, #260]	; (80010d4 <main+0x81c>)
 8000fd0:	f001 f93a 	bl	8002248 <HAL_ADC_Start>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <main+0x820>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00f      	beq.n	8000ffc <main+0x744>
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <main+0x824>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <main+0x744>
				rising_edge = 0;
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <main+0x820>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <main+0x824>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <main+0x818>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8000ff6:	483a      	ldr	r0, [pc, #232]	; (80010e0 <main+0x828>)
 8000ff8:	f005 fc8e 	bl	8006918 <puts>
			}

			if (get_time > 0) {
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <main+0x814>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 8214 	beq.w	800142e <main+0xb76>

				if (up > 0) {
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <main+0x82c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80d6 	beq.w	80011bc <main+0x904>
					//AM or PM switching
					if (cursor == 0) {
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <main+0x800>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d128      	bne.n	800106a <main+0x7b2>
						if (sTime_temp.TimeFormat == 0) {
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0x804>)
 800101a:	78db      	ldrb	r3, [r3, #3]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10f      	bne.n	8001040 <main+0x788>
							sTime_temp.TimeFormat = 1;
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <main+0x804>)
 8001022:	2201      	movs	r2, #1
 8001024:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <main+0x804>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <main+0x77c>
								sTime_temp.Hours = 12;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <main+0x804>)
 8001030:	220c      	movs	r2, #12
 8001032:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <main+0x800>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fb09 	bl	8001650 <screen>
 800103e:	e0ba      	b.n	80011b6 <main+0x8fe>

						}
						else if (sTime_temp.TimeFormat == 1) {
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <main+0x804>)
 8001042:	78db      	ldrb	r3, [r3, #3]
 8001044:	2b01      	cmp	r3, #1
 8001046:	f040 80b6 	bne.w	80011b6 <main+0x8fe>
							sTime_temp.TimeFormat = 0;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <main+0x804>)
 800104c:	2200      	movs	r2, #0
 800104e:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <main+0x804>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d102      	bne.n	800105e <main+0x7a6>
								sTime_temp.Hours = 0;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <main+0x804>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <main+0x800>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 faf4 	bl	8001650 <screen>
 8001068:	e0a5      	b.n	80011b6 <main+0x8fe>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <main+0x800>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d10f      	bne.n	8001092 <main+0x7da>

						if (sTime_temp.Hours < 3) {
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <main+0x804>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d805      	bhi.n	8001086 <main+0x7ce>
							sTime_temp.Hours += 10;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <main+0x804>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	330a      	adds	r3, #10
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <main+0x804>)
 8001084:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor);
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <main+0x800>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fae0 	bl	8001650 <screen>
 8001090:	e091      	b.n	80011b6 <main+0x8fe>
					}

					// 1H switching
					else if (cursor == 4) {
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <main+0x800>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d13e      	bne.n	8001118 <main+0x860>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <main+0x804>)
 800109c:	78db      	ldrb	r3, [r3, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d122      	bne.n	80010e8 <main+0x830>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours && sTime_temp.Hours < 11) {
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <main+0x804>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	d830      	bhi.n	800110c <main+0x854>
								sTime_temp.Hours ++;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <main+0x804>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <main+0x804>)
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e029      	b.n	800110c <main+0x854>
 80010b8:	20000154 	.word	0x20000154
 80010bc:	200001a0 	.word	0x200001a0
 80010c0:	2000015d 	.word	0x2000015d
 80010c4:	2000015e 	.word	0x2000015e
 80010c8:	2000015f 	.word	0x2000015f
 80010cc:	20000130 	.word	0x20000130
 80010d0:	20000147 	.word	0x20000147
 80010d4:	20000094 	.word	0x20000094
 80010d8:	20000145 	.word	0x20000145
 80010dc:	20000146 	.word	0x20000146
 80010e0:	08007cb4 	.word	0x08007cb4
 80010e4:	2000015c 	.word	0x2000015c
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 80010e8:	4b7b      	ldr	r3, [pc, #492]	; (80012d8 <main+0xa20>)
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d10d      	bne.n	800110c <main+0x854>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours && sTime_temp.Hours < 12) {
 80010f0:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <main+0xa20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <main+0x854>
 80010f8:	4b77      	ldr	r3, [pc, #476]	; (80012d8 <main+0xa20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	d805      	bhi.n	800110c <main+0x854>
								sTime_temp.Hours ++;
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <main+0xa20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <main+0xa20>)
 800110a:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor);
 800110c:	4b73      	ldr	r3, [pc, #460]	; (80012dc <main+0xa24>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fa9d 	bl	8001650 <screen>
 8001116:	e04e      	b.n	80011b6 <main+0x8fe>
					}

					// 10M switching
					else if (cursor == 6) {
 8001118:	4b70      	ldr	r3, [pc, #448]	; (80012dc <main+0xa24>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d10f      	bne.n	8001140 <main+0x888>
						if (0 <= sTime_temp.Minutes && sTime_temp.Minutes < 50) {
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <main+0xa20>)
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	2b31      	cmp	r3, #49	; 0x31
 8001126:	d805      	bhi.n	8001134 <main+0x87c>
							sTime_temp.Minutes += 10;
 8001128:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <main+0xa20>)
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	330a      	adds	r3, #10
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <main+0xa20>)
 8001132:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 8001134:	4b69      	ldr	r3, [pc, #420]	; (80012dc <main+0xa24>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fa89 	bl	8001650 <screen>
 800113e:	e03a      	b.n	80011b6 <main+0x8fe>
					}
					// 1M switching
					else if (cursor == 7) {
 8001140:	4b66      	ldr	r3, [pc, #408]	; (80012dc <main+0xa24>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d10f      	bne.n	8001168 <main+0x8b0>
						if (0 <= sTime_temp.Minutes && sTime_temp.Minutes < 59) {
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <main+0xa20>)
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	2b3a      	cmp	r3, #58	; 0x3a
 800114e:	d805      	bhi.n	800115c <main+0x8a4>
							sTime_temp.Minutes += 1;
 8001150:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <main+0xa20>)
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <main+0xa20>)
 800115a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 800115c:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <main+0xa24>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fa75 	bl	8001650 <screen>
 8001166:	e026      	b.n	80011b6 <main+0x8fe>
					}

					// 10S switching
					else if (cursor == 9) {
 8001168:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <main+0xa24>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b09      	cmp	r3, #9
 800116e:	d10f      	bne.n	8001190 <main+0x8d8>
						if (0 <= sTime_temp.Seconds && sTime_temp.Seconds < 50) {
 8001170:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <main+0xa20>)
 8001172:	789b      	ldrb	r3, [r3, #2]
 8001174:	2b31      	cmp	r3, #49	; 0x31
 8001176:	d805      	bhi.n	8001184 <main+0x8cc>
							sTime_temp.Seconds += 10;
 8001178:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <main+0xa20>)
 800117a:	789b      	ldrb	r3, [r3, #2]
 800117c:	330a      	adds	r3, #10
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <main+0xa20>)
 8001182:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <main+0xa24>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa61 	bl	8001650 <screen>
 800118e:	e012      	b.n	80011b6 <main+0x8fe>
					}
					// 1S switching
					else if (cursor == 10) {
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <main+0xa24>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b0a      	cmp	r3, #10
 8001196:	d10e      	bne.n	80011b6 <main+0x8fe>
						if (0 <= sTime_temp.Seconds && sTime_temp.Seconds < 59) {
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <main+0xa20>)
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	2b3a      	cmp	r3, #58	; 0x3a
 800119e:	d805      	bhi.n	80011ac <main+0x8f4>
							sTime_temp.Seconds += 1;
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <main+0xa20>)
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <main+0xa20>)
 80011aa:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <main+0xa24>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fa4d 	bl	8001650 <screen>
					}

					// clear the up flag
					up = 0;
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <main+0xa28>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <main+0xa2c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80ab 	beq.w	800131c <main+0xa64>

					//AM or PM switching
					if (cursor == 0) {
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <main+0xa24>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d128      	bne.n	8001220 <main+0x968>
						if (sTime_temp.TimeFormat == 0) {
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <main+0xa20>)
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <main+0x93e>
							sTime_temp.TimeFormat = 1;
 80011d6:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <main+0xa20>)
 80011d8:	2201      	movs	r2, #1
 80011da:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <main+0xa20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <main+0x932>
								sTime_temp.Hours = 12;
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <main+0xa20>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <main+0xa24>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fa2e 	bl	8001650 <screen>
 80011f4:	e08f      	b.n	8001316 <main+0xa5e>
						}
						else if (sTime_temp.TimeFormat == 1) {
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <main+0xa20>)
 80011f8:	78db      	ldrb	r3, [r3, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	f040 808b 	bne.w	8001316 <main+0xa5e>
							sTime_temp.TimeFormat = 0;
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <main+0xa20>)
 8001202:	2200      	movs	r2, #0
 8001204:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <main+0xa20>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d102      	bne.n	8001214 <main+0x95c>
								sTime_temp.Hours = 0;
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <main+0xa20>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor);
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <main+0xa24>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fa19 	bl	8001650 <screen>
 800121e:	e07a      	b.n	8001316 <main+0xa5e>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <main+0xa24>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d10f      	bne.n	8001248 <main+0x990>
						if (sTime_temp.Hours > 0) {
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <main+0xa20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <main+0x984>
							sTime_temp.Hours --;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <main+0xa20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <main+0xa20>)
 800123a:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor);
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <main+0xa24>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fa05 	bl	8001650 <screen>
 8001246:	e066      	b.n	8001316 <main+0xa5e>
					}

					// 10M switching
					else if (cursor == 6) {
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <main+0xa24>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b06      	cmp	r3, #6
 800124e:	d113      	bne.n	8001278 <main+0x9c0>
						if (0 < sTime_temp.Minutes && sTime_temp.Minutes <= 50) {
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <main+0xa20>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <main+0x9b4>
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <main+0xa20>)
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	2b32      	cmp	r3, #50	; 0x32
 800125e:	d805      	bhi.n	800126c <main+0x9b4>
							sTime_temp.Minutes -= 10;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <main+0xa20>)
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	3b0a      	subs	r3, #10
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <main+0xa20>)
 800126a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <main+0xa24>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f9ed 	bl	8001650 <screen>
 8001276:	e04e      	b.n	8001316 <main+0xa5e>
					}
					// 1M switching
					else if (cursor == 7) {
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <main+0xa24>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b07      	cmp	r3, #7
 800127e:	d113      	bne.n	80012a8 <main+0x9f0>
						if (0 < sTime_temp.Minutes && sTime_temp.Minutes <= 59) {
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <main+0xa20>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d009      	beq.n	800129c <main+0x9e4>
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <main+0xa20>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	2b3b      	cmp	r3, #59	; 0x3b
 800128e:	d805      	bhi.n	800129c <main+0x9e4>
							sTime_temp.Minutes -= 1;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <main+0xa20>)
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	3b01      	subs	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <main+0xa20>)
 800129a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor);
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <main+0xa24>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f9d5 	bl	8001650 <screen>
 80012a6:	e036      	b.n	8001316 <main+0xa5e>
					}

					// 10S switching
					else if (cursor == 9) {
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <main+0xa24>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d11b      	bne.n	80012e8 <main+0xa30>
						if (0 < sTime_temp.Seconds && sTime_temp.Seconds <= 50) {
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <main+0xa20>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <main+0xa14>
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <main+0xa20>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b32      	cmp	r3, #50	; 0x32
 80012be:	d805      	bhi.n	80012cc <main+0xa14>
							sTime_temp.Seconds -= 10;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <main+0xa20>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	3b0a      	subs	r3, #10
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <main+0xa20>)
 80012ca:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <main+0xa24>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f9bd 	bl	8001650 <screen>
 80012d6:	e01e      	b.n	8001316 <main+0xa5e>
 80012d8:	200001a0 	.word	0x200001a0
 80012dc:	20000154 	.word	0x20000154
 80012e0:	2000015c 	.word	0x2000015c
 80012e4:	2000015d 	.word	0x2000015d
					}
					// 1S switching
					else if (cursor == 10) {
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <main+0xbd4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d112      	bne.n	8001316 <main+0xa5e>
						if (0 < sTime_temp.Seconds && sTime_temp.Seconds <= 59) {
 80012f0:	4b67      	ldr	r3, [pc, #412]	; (8001490 <main+0xbd8>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <main+0xa54>
 80012f8:	4b65      	ldr	r3, [pc, #404]	; (8001490 <main+0xbd8>)
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	2b3b      	cmp	r3, #59	; 0x3b
 80012fe:	d805      	bhi.n	800130c <main+0xa54>
							sTime_temp.Seconds -= 1;
 8001300:	4b63      	ldr	r3, [pc, #396]	; (8001490 <main+0xbd8>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	3b01      	subs	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b61      	ldr	r3, [pc, #388]	; (8001490 <main+0xbd8>)
 800130a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor);
 800130c:	4b5f      	ldr	r3, [pc, #380]	; (800148c <main+0xbd4>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f99d 	bl	8001650 <screen>
					}

					// clear the down flag
					down = 0;
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <main+0xbdc>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 800131c:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <main+0xbe0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d03e      	beq.n	80013a2 <main+0xaea>
					if (cursor > 0) {
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <main+0xbd4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d037      	beq.n	800139c <main+0xae4>
						cursor--;
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <main+0xbd4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b55      	ldr	r3, [pc, #340]	; (800148c <main+0xbd4>)
 8001336:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001338:	2110      	movs	r1, #16
 800133a:	204e      	movs	r0, #78	; 0x4e
 800133c:	f000 fa8c 	bl	8001858 <LCD_SendCommand>

						if (cursor == 8) {
 8001340:	4b52      	ldr	r3, [pc, #328]	; (800148c <main+0xbd4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d109      	bne.n	800135c <main+0xaa4>
							cursor--;
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <main+0xbd4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b4e      	ldr	r3, [pc, #312]	; (800148c <main+0xbd4>)
 8001352:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001354:	2110      	movs	r1, #16
 8001356:	204e      	movs	r0, #78	; 0x4e
 8001358:	f000 fa7e 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 5) {
 800135c:	4b4b      	ldr	r3, [pc, #300]	; (800148c <main+0xbd4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d109      	bne.n	8001378 <main+0xac0>
							cursor--;
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <main+0xbd4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b47      	ldr	r3, [pc, #284]	; (800148c <main+0xbd4>)
 800136e:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001370:	2110      	movs	r1, #16
 8001372:	204e      	movs	r0, #78	; 0x4e
 8001374:	f000 fa70 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 2) {
 8001378:	4b44      	ldr	r3, [pc, #272]	; (800148c <main+0xbd4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d10d      	bne.n	800139c <main+0xae4>
							cursor -= 2;
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <main+0xbd4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3b02      	subs	r3, #2
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b40      	ldr	r3, [pc, #256]	; (800148c <main+0xbd4>)
 800138a:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 800138c:	2110      	movs	r1, #16
 800138e:	204e      	movs	r0, #78	; 0x4e
 8001390:	f000 fa62 	bl	8001858 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001394:	2110      	movs	r1, #16
 8001396:	204e      	movs	r0, #78	; 0x4e
 8001398:	f000 fa5e 	bl	8001858 <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <main+0xbe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <main+0xbe4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d03e      	beq.n	8001428 <main+0xb70>

					if (cursor < 10) {
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <main+0xbd4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d837      	bhi.n	8001422 <main+0xb6a>
						cursor++;
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <main+0xbd4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <main+0xbd4>)
 80013bc:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 80013be:	2114      	movs	r1, #20
 80013c0:	204e      	movs	r0, #78	; 0x4e
 80013c2:	f000 fa49 	bl	8001858 <LCD_SendCommand>

						if (cursor == 8) {
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <main+0xbd4>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d109      	bne.n	80013e2 <main+0xb2a>
							cursor++;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <main+0xbd4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <main+0xbd4>)
 80013d8:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 80013da:	2114      	movs	r1, #20
 80013dc:	204e      	movs	r0, #78	; 0x4e
 80013de:	f000 fa3b 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 5) {
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <main+0xbd4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d109      	bne.n	80013fe <main+0xb46>
							cursor++;
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <main+0xbd4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <main+0xbd4>)
 80013f4:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 80013f6:	2114      	movs	r1, #20
 80013f8:	204e      	movs	r0, #78	; 0x4e
 80013fa:	f000 fa2d 	bl	8001858 <LCD_SendCommand>
						}

						if (cursor == 1) {
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <main+0xbd4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <main+0xb6a>
							cursor += 2;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0xbd4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3302      	adds	r3, #2
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <main+0xbd4>)
 8001410:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001412:	2114      	movs	r1, #20
 8001414:	204e      	movs	r0, #78	; 0x4e
 8001416:	f000 fa1f 	bl	8001858 <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800141a:	2114      	movs	r1, #20
 800141c:	204e      	movs	r0, #78	; 0x4e
 800141e:	f000 fa1b 	bl	8001858 <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <main+0xbe4>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <main+0xbe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <main+0xbec>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	f43f adcb 	beq.w	8000fce <main+0x716>
			}
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 8001438:	e016      	b.n	8001468 <main+0xbb0>

			if (rising_edge >= 1 && falling_edge >= 1) {
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <main+0xbf0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00f      	beq.n	8001462 <main+0xbaa>
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <main+0xbf4>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <main+0xbaa>
				rising_edge = 0;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <main+0xbf0>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0xbf4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <main+0xbec>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 800145c:	4814      	ldr	r0, [pc, #80]	; (80014b0 <main+0xbf8>)
 800145e:	f005 fa5b 	bl	8006918 <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <main+0xbe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <main+0xbec>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d0e4      	beq.n	800143a <main+0xb82>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 8001470:	2250      	movs	r2, #80	; 0x50
 8001472:	2100      	movs	r1, #0
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <main+0xbfc>)
 8001476:	f005 f9c1 	bl	80067fc <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <main+0xc00>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	490e      	ldr	r1, [pc, #56]	; (80014bc <main+0xc04>)
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <main+0xbfc>)
 8001484:	f005 fa50 	bl	8006928 <siprintf>
	while (1) {
 8001488:	f7ff ba3f 	b.w	800090a <main+0x52>
 800148c:	20000154 	.word	0x20000154
 8001490:	200001a0 	.word	0x200001a0
 8001494:	2000015d 	.word	0x2000015d
 8001498:	2000015e 	.word	0x2000015e
 800149c:	2000015f 	.word	0x2000015f
 80014a0:	20000130 	.word	0x20000130
 80014a4:	20000147 	.word	0x20000147
 80014a8:	20000145 	.word	0x20000145
 80014ac:	20000146 	.word	0x20000146
 80014b0:	08007cb4 	.word	0x08007cb4
 80014b4:	200001b4 	.word	0x200001b4
 80014b8:	20000158 	.word	0x20000158
 80014bc:	08007cc0 	.word	0x08007cc0

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	; 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 f994 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <SystemClock_Config+0xdc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a2b      	ldr	r2, [pc, #172]	; (800159c <SystemClock_Config+0xdc>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <SystemClock_Config+0xdc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <SystemClock_Config+0xe0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a25      	ldr	r2, [pc, #148]	; (80015a0 <SystemClock_Config+0xe0>)
 800150a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <SystemClock_Config+0xe0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800151c:	2306      	movs	r3, #6
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001534:	2308      	movs	r3, #8
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001538:	23b4      	movs	r3, #180	; 0xb4
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fb81 	bl	8003c50 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001554:	f000 fae2 	bl	8001b1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001558:	f002 fb2a 	bl	8003bb0 <HAL_PWREx_EnableOverDrive>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001562:	f000 fadb 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2105      	movs	r1, #5
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fddb 	bl	8004140 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001590:	f000 fac4 	bl	8001b1c <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3750      	adds	r7, #80	; 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2027      	movs	r0, #39	; 0x27
 80015ae:	f001 fa66 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015b2:	2027      	movs	r0, #39	; 0x27
 80015b4:	f001 fa7f 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f001 fa5e 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f001 fa77 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	201d      	movs	r0, #29
 80015ce:	f001 fa56 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015d2:	201d      	movs	r0, #29
 80015d4:	f001 fa6f 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	if (value < 100)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b63      	cmp	r3, #99	; 0x63
 80015e8:	d801      	bhi.n	80015ee <button_status+0x12>
		return UP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	e02a      	b.n	8001644 <button_status+0x68>
	if (800 < value && value < 900)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015f4:	d905      	bls.n	8001602 <button_status+0x26>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80015fc:	d201      	bcs.n	8001602 <button_status+0x26>
		return DOWN;
 80015fe:	2303      	movs	r3, #3
 8001600:	e020      	b.n	8001644 <button_status+0x68>
	if (1800 < value && value < 2000)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001608:	d905      	bls.n	8001616 <button_status+0x3a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001610:	d201      	bcs.n	8001616 <button_status+0x3a>
		return LEFT;
 8001612:	2304      	movs	r3, #4
 8001614:	e016      	b.n	8001644 <button_status+0x68>
	if (2800 < value && value < 3000)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800161c:	d906      	bls.n	800162c <button_status+0x50>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001624:	4293      	cmp	r3, r2
 8001626:	d801      	bhi.n	800162c <button_status+0x50>
		return RIGHT;
 8001628:	2305      	movs	r3, #5
 800162a:	e00b      	b.n	8001644 <button_status+0x68>
	if (4000 < value && value < 5000)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001632:	d906      	bls.n	8001642 <button_status+0x66>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f241 3287 	movw	r2, #4999	; 0x1387
 800163a:	4293      	cmp	r3, r2
 800163c:	d801      	bhi.n	8001642 <button_status+0x66>
		return SELECT;
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <button_status+0x68>

	return NONE;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <screen>:

void screen(int cursor) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
 8001656:	6078      	str	r0, [r7, #4]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_temp.TimeFormat],
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <screen+0x70>)
 800165a:	78db      	ldrb	r3, [r3, #3]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <screen+0x74>)
 8001666:	441a      	add	r2, r3
			sTime_temp.Hours, sTime_temp.Minutes, sTime_temp.Seconds);
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <screen+0x70>)
 800166a:	781b      	ldrb	r3, [r3, #0]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_temp.TimeFormat],
 800166c:	4618      	mov	r0, r3
			sTime_temp.Hours, sTime_temp.Minutes, sTime_temp.Seconds);
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <screen+0x70>)
 8001670:	785b      	ldrb	r3, [r3, #1]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_temp.TimeFormat],
 8001672:	4619      	mov	r1, r3
			sTime_temp.Hours, sTime_temp.Minutes, sTime_temp.Seconds);
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <screen+0x70>)
 8001676:	789b      	ldrb	r3, [r3, #2]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_temp.TimeFormat],
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	9100      	str	r1, [sp, #0]
 800167c:	4603      	mov	r3, r0
 800167e:	4912      	ldr	r1, [pc, #72]	; (80016c8 <screen+0x78>)
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <screen+0x7c>)
 8001682:	f005 f951 	bl	8006928 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001686:	21c0      	movs	r1, #192	; 0xc0
 8001688:	204e      	movs	r0, #78	; 0x4e
 800168a:	f000 f8e5 	bl	8001858 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 800168e:	490f      	ldr	r1, [pc, #60]	; (80016cc <screen+0x7c>)
 8001690:	204e      	movs	r0, #78	; 0x4e
 8001692:	f000 f922 	bl	80018da <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e006      	b.n	80016aa <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 800169c:	2110      	movs	r1, #16
 800169e:	204e      	movs	r0, #78	; 0x4e
 80016a0:	f000 f8da 	bl	8001858 <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1c3 030b 	rsb	r3, r3, #11
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbf2      	blt.n	800169c <screen+0x4c>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200001a0 	.word	0x200001a0
 80016c4:	20000000 	.word	0x20000000
 80016c8:	08007be4 	.word	0x08007be4
 80016cc:	2000018c 	.word	0x2000018c

080016d0 <I2C_Scan>:

void I2C_Scan() {
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b096      	sub	sp, #88	; 0x58
 80016d4:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <I2C_Scan+0xc0>)
 80016d8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80016dc:	461d      	mov	r5, r3
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016e6:	6020      	str	r0, [r4, #0]
 80016e8:	3404      	adds	r4, #4
 80016ea:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80016ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fd7d 	bl	80001f0 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	4824      	ldr	r0, [pc, #144]	; (8001794 <I2C_Scan+0xc4>)
 8001704:	f004 f889 	bl	800581a <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800170e:	e030      	b.n	8001772 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001710:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b299      	uxth	r1, r3
 8001718:	230a      	movs	r3, #10
 800171a:	2201      	movs	r2, #1
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <I2C_Scan+0xc8>)
 800171e:	f001 fe95 	bl	800344c <HAL_I2C_IsDeviceReady>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <I2C_Scan+0xcc>)
 8001728:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <I2C_Scan+0xcc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d113      	bne.n	800175a <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8001732:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001736:	4638      	mov	r0, r7
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <I2C_Scan+0xd0>)
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	f005 f8f4 	bl	8006928 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8001740:	463b      	mov	r3, r7
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd54 	bl	80001f0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	4639      	mov	r1, r7
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <I2C_Scan+0xc4>)
 8001754:	f004 f861 	bl	800581a <HAL_UART_Transmit>
 8001758:	e006      	b.n	8001768 <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	2201      	movs	r2, #1
 8001760:	4910      	ldr	r1, [pc, #64]	; (80017a4 <I2C_Scan+0xd4>)
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <I2C_Scan+0xc4>)
 8001764:	f004 f859 	bl	800581a <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8001768:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800176c:	3301      	adds	r3, #1
 800176e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001772:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001776:	2b7f      	cmp	r3, #127	; 0x7f
 8001778:	d9ca      	bls.n	8001710 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2202      	movs	r2, #2
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <I2C_Scan+0xd8>)
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <I2C_Scan+0xc4>)
 8001784:	f004 f849 	bl	800581a <HAL_UART_Transmit>
}
 8001788:	bf00      	nop
 800178a:	3758      	adds	r7, #88	; 0x58
 800178c:	46bd      	mov	sp, r7
 800178e:	bdb0      	pop	{r4, r5, r7, pc}
 8001790:	08007cd8 	.word	0x08007cd8
 8001794:	20000270 	.word	0x20000270
 8001798:	200000dc 	.word	0x200000dc
 800179c:	20000144 	.word	0x20000144
 80017a0:	08007cc8 	.word	0x08007cc8
 80017a4:	08007cd0 	.word	0x08007cd0
 80017a8:	08007cd4 	.word	0x08007cd4

080017ac <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	460b      	mov	r3, r1
 80017b8:	71bb      	strb	r3, [r7, #6]
 80017ba:	4613      	mov	r3, r2
 80017bc:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	b299      	uxth	r1, r3
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	2201      	movs	r2, #1
 80017c8:	4822      	ldr	r0, [pc, #136]	; (8001854 <LCD_SendInternal+0xa8>)
 80017ca:	f001 fe3f 	bl	800344c <HAL_I2C_IsDeviceReady>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d000      	beq.n	80017da <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80017d8:	e7f1      	b.n	80017be <LCD_SendInternal+0x12>
			break;
 80017da:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	f023 030f 	bic.w	r3, r3, #15
 80017e2:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80017ea:	7bba      	ldrb	r2, [r7, #14]
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f043 030c 	orr.w	r3, r3, #12
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80017fa:	7bba      	ldrb	r2, [r7, #14]
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	4313      	orrs	r3, r2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	b2db      	uxtb	r3, r3
 8001808:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 800180a:	7b7a      	ldrb	r2, [r7, #13]
 800180c:	797b      	ldrb	r3, [r7, #5]
 800180e:	4313      	orrs	r3, r2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 030c 	orr.w	r3, r3, #12
 8001816:	b2db      	uxtb	r3, r3
 8001818:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 800181a:	7b7a      	ldrb	r2, [r7, #13]
 800181c:	797b      	ldrb	r3, [r7, #5]
 800181e:	4313      	orrs	r3, r2
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	b2db      	uxtb	r3, r3
 8001828:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b299      	uxth	r1, r3
 800182e:	f107 0208 	add.w	r2, r7, #8
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2304      	movs	r3, #4
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <LCD_SendInternal+0xa8>)
 800183c:	f001 fd08 	bl	8003250 <HAL_I2C_Master_Transmit>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001844:	2005      	movs	r0, #5
 8001846:	f000 fc97 	bl	8002178 <HAL_Delay>
	return res;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000dc 	.word	0x200000dc

08001858 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001868:	79b9      	ldrb	r1, [r7, #6]
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2200      	movs	r2, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff9c 	bl	80017ac <LCD_SendInternal>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 800188c:	79b9      	ldrb	r1, [r7, #6]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2201      	movs	r2, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff8a 	bl	80017ac <LCD_SendInternal>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2130      	movs	r1, #48	; 0x30
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffd2 	bl	8001858 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ffcd 	bl	8001858 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	210c      	movs	r1, #12
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffc8 	bl	8001858 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2101      	movs	r1, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffc3 	bl	8001858 <LCD_SendCommand>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	6039      	str	r1, [r7, #0]
 80018e4:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80018e6:	e009      	b.n	80018fc <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ffc3 	bl	800187c <LCD_SendData>
		str++;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	603b      	str	r3, [r7, #0]
	while (*str) {
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f1      	bne.n	80018e8 <LCD_SendString+0xe>
	}
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <init>:

void init() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	I2C_Scan();
 8001914:	f7ff fedc 	bl	80016d0 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8001918:	204e      	movs	r0, #78	; 0x4e
 800191a:	f7ff ffc1 	bl	80018a0 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	204e      	movs	r0, #78	; 0x4e
 8001922:	f7ff ff99 	bl	8001858 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8001926:	4907      	ldr	r1, [pc, #28]	; (8001944 <init+0x34>)
 8001928:	204e      	movs	r0, #78	; 0x4e
 800192a:	f7ff ffd6 	bl	80018da <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800192e:	21c0      	movs	r1, #192	; 0xc0
 8001930:	204e      	movs	r0, #78	; 0x4e
 8001932:	f7ff ff91 	bl	8001858 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8001936:	4904      	ldr	r1, [pc, #16]	; (8001948 <init+0x38>)
 8001938:	204e      	movs	r0, #78	; 0x4e
 800193a:	f7ff ffce 	bl	80018da <LCD_SendString>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	08007cf0 	.word	0x08007cf0
 8001948:	08007d00 	.word	0x08007d00

0800194c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195a:	481b      	ldr	r0, [pc, #108]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800195c:	f001 fb04 	bl	8002f68 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d110      	bne.n	8001988 <HAL_GPIO_EXTI_Callback+0x3c>
		rising_edge++;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_GPIO_EXTI_Callback+0x80>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_GPIO_EXTI_Callback+0x80>)
 8001970:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_GPIO_EXTI_Callback+0x80>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4815      	ldr	r0, [pc, #84]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x84>)
 800197a:	f004 ff47 	bl	800680c <iprintf>
		start_tick = HAL_GetTick();
 800197e:	f000 fbef 	bl	8002160 <HAL_GetTick>
 8001982:	4603      	mov	r3, r0
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001986:	6013      	str	r3, [r2, #0]
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	480e      	ldr	r0, [pc, #56]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800198e:	f001 faeb 	bl	8002f68 <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d113      	bne.n	80019c0 <HAL_GPIO_EXTI_Callback+0x74>
		if (rising_edge == 0) {
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_GPIO_EXTI_Callback+0x80>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x5c>
			falling_edge = 0;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e005      	b.n	80019b4 <HAL_GPIO_EXTI_Callback+0x68>
		} else {
			falling_edge++;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019b2:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_Callback+0x90>)
 80019bc:	f004 ff26 	bl	800680c <iprintf>
	}

}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020800 	.word	0x40020800
 80019cc:	20000145 	.word	0x20000145
 80019d0:	08007d10 	.word	0x08007d10
 80019d4:	20000148 	.word	0x20000148
 80019d8:	20000146 	.word	0x20000146
 80019dc:	08007d24 	.word	0x08007d24

080019e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d16f      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0xf2>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80019f2:	483b      	ldr	r0, [pc, #236]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019f4:	f000 fd2d 	bl	8002452 <HAL_ADC_GetValue>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80019fc:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80019fe:	4838      	ldr	r0, [pc, #224]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a00:	f000 fcf4 	bl	80023ec <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001a04:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fde7 	bl	80015dc <button_status>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d10b      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a1e:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001a28:	f004 fef0 	bl	800680c <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fdd3 	bl	80015dc <button_status>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d10b      	bne.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a46:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4829      	ldr	r0, [pc, #164]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a50:	f004 fedc 	bl	800680c <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fdbf 	bl	80015dc <button_status>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d10b      	bne.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a6e:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4821      	ldr	r0, [pc, #132]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a78:	f004 fec8 	bl	800680c <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fdab 	bl	80015dc <button_status>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a96:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4819      	ldr	r0, [pc, #100]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001aa0:	f004 feb4 	bl	800680c <iprintf>
		}

		if (apply_flag > 0) {
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			get_time_apply++;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001ab4:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0xe8>
			get_time_exit++;
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ac6:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ad0:	6013      	str	r3, [r2, #0]
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	20000094 	.word	0x20000094
 8001ae4:	20000158 	.word	0x20000158
 8001ae8:	2000015c 	.word	0x2000015c
 8001aec:	08007d38 	.word	0x08007d38
 8001af0:	2000015d 	.word	0x2000015d
 8001af4:	08007d44 	.word	0x08007d44
 8001af8:	2000015e 	.word	0x2000015e
 8001afc:	08007d50 	.word	0x08007d50
 8001b00:	2000015f 	.word	0x2000015f
 8001b04:	08007d5c 	.word	0x08007d5c
 8001b08:	20000134 	.word	0x20000134
 8001b0c:	20000138 	.word	0x20000138
 8001b10:	2000013c 	.word	0x2000013c
 8001b14:	20000140 	.word	0x20000140
 8001b18:	20000130 	.word	0x20000130

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <MX_RTC_Init+0xb4>)
 8001b44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b4e:	227f      	movs	r2, #127	; 0x7f
 8001b50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b54:	22ff      	movs	r2, #255	; 0xff
 8001b56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b6c:	f002 fe88 	bl	8004880 <HAL_RTC_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b76:	f7ff ffd1 	bl	8001b1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001b86:	2301      	movs	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001b9a:	f002 fee7 	bl	800496c <HAL_RTC_SetTime>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001ba4:	f7ff ffba 	bl	8001b1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001bac:	2301      	movs	r3, #1
 8001bae:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <MX_RTC_Init+0xb0>)
 8001bc0:	f002 ffcc 	bl	8004b5c <HAL_RTC_SetDate>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001bca:	f7ff ffa7 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2230      	movs	r2, #48	; 0x30
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fe03 	bl	80067fc <memset>
  if(rtcHandle->Instance==RTC)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_RTC_MspInit+0x4c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d111      	bne.n	8001c24 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c00:	2320      	movs	r3, #32
 8001c02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fc76 	bl	8004500 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c1a:	f7ff ff7f 	bl	8001b1c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_RTC_MspInit+0x50>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3738      	adds	r7, #56	; 0x38
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40002800 	.word	0x40002800
 8001c30:	42470e3c 	.word	0x42470e3c

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 fa32 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM3_IRQHandler+0x10>)
 8001cde:	f003 f98d 	bl	8004ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000228 	.word	0x20000228

08001cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART3_IRQHandler+0x10>)
 8001cf2:	f003 fe25 	bl	8005940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000270 	.word	0x20000270

08001d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d08:	f001 f946 	bl	8002f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
	}

return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fd95 	bl	8000894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
	}
	return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f004 fcc4 	bl	80067a8 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20030000 	.word	0x20030000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000224 	.word	0x20000224
 8001e54:	200002c8 	.word	0x200002c8

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <MX_TIM3_Init+0x98>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001ea0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001eae:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001ec2:	f002 ffdb 	bl	8004e7c <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f7ff fe26 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001ede:	f003 f995 	bl	800520c <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f7ff fe18 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eec:	2320      	movs	r3, #32
 8001eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_TIM3_Init+0x94>)
 8001efa:	f003 fbb1 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f7ff fe0a 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000228 	.word	0x20000228
 8001f14:	40000400 	.word	0x40000400

08001f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_TIM_Base_MspInit+0x3c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10d      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_Base_MspInit+0x40>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_TIM_Base_MspInit+0x40>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_TIM_Base_MspInit+0x40>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40023800 	.word	0x40023800

08001f5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_USART3_UART_Init+0x50>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART3_UART_Init+0x4c>)
 8001f94:	f003 fbf4 	bl	8005780 <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f9e:	f7ff fdbd 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000270 	.word	0x20000270
 8001fac:	40004800 	.word	0x40004800

08001fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_UART_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_UART_MspInit+0x88>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_UART_MspInit+0x88>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_UART_MspInit+0x88>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_UART_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_UART_MspInit+0x88>)
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_UART_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800200a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800201c:	2307      	movs	r3, #7
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_UART_MspInit+0x8c>)
 8002028:	f000 fdf2 	bl	8002c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40004800 	.word	0x40004800
 8002038:	40023800 	.word	0x40023800
 800203c:	40020c00 	.word	0x40020c00

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002046:	490e      	ldr	r1, [pc, #56]	; (8002080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800205c:	4c0b      	ldr	r4, [pc, #44]	; (800208c <LoopFillZerobss+0x26>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800206a:	f7ff fef5 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f004 fba1 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7fe fc21 	bl	80008b8 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002078:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002084:	08007e2c 	.word	0x08007e2c
  ldr r2, =_sbss
 8002088:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800208c:	200002c8 	.word	0x200002c8

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fcd3 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	200f      	movs	r0, #15
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fdb4 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fceb 	bl	8002ad2 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 fcb3 	bl	8002a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	; (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000008 	.word	0x20000008
 8002130:	20000010 	.word	0x20000010
 8002134:	2000000c 	.word	0x2000000c

08002138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000010 	.word	0x20000010
 800215c:	200002b4 	.word	0x200002b4

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200002b4 	.word	0x200002b4

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000010 	.word	0x20000010

080021c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e033      	b.n	800223e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fa32 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002206:	f023 0302 	bic.w	r3, r3, #2
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa5c 	bl	80026d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
 800222e:	e001      	b.n	8002234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Start+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e0b2      	b.n	80023c8 <HAL_ADC_Start+0x180>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d018      	beq.n	80022aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002288:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_ADC_Start+0x18c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_ADC_Start+0x190>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9a      	lsrs	r2, r3, #18
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d17a      	bne.n	80023ae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f6:	d106      	bne.n	8002306 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f023 0206 	bic.w	r2, r3, #6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
 8002304:	e002      	b.n	800230c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_ADC_Start+0x194>)
 8002316:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002320:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12a      	bne.n	8002384 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <HAL_ADC_Start+0x198>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d015      	beq.n	8002364 <HAL_ADC_Start+0x11c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_ADC_Start+0x19c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d105      	bne.n	800234e <HAL_ADC_Start+0x106>
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_ADC_Start+0x194>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_ADC_Start+0x1a0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d136      	bne.n	80023c6 <HAL_ADC_Start+0x17e>
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_ADC_Start+0x194>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d130      	bne.n	80023c6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d129      	bne.n	80023c6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	e020      	b.n	80023c6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_ADC_Start+0x198>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d11b      	bne.n	80023c6 <HAL_ADC_Start+0x17e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d114      	bne.n	80023c6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e00b      	b.n	80023c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000008 	.word	0x20000008
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	40012300 	.word	0x40012300
 80023e0:	40012000 	.word	0x40012000
 80023e4:	40012100 	.word	0x40012100
 80023e8:	40012200 	.word	0x40012200

080023ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Stop+0x16>
 80023fe:	2302      	movs	r3, #2
 8002400:	e021      	b.n	8002446 <HAL_ADC_Stop+0x5a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e113      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x244>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d925      	bls.n	80024e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	2207      	movs	r2, #7
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4403      	add	r3, r0
 80024d6:	3b1e      	subs	r3, #30
 80024d8:	409a      	lsls	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	e022      	b.n	800252a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6919      	ldr	r1, [r3, #16]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	2207      	movs	r2, #7
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	4603      	mov	r3, r0
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4403      	add	r3, r0
 8002520:	409a      	lsls	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d824      	bhi.n	800257c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b05      	subs	r3, #5
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	400a      	ands	r2, r1
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4618      	mov	r0, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b05      	subs	r3, #5
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
 800257a:	e04c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d824      	bhi.n	80025ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	; 0x23
 8002596:	221f      	movs	r2, #31
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	3b23      	subs	r3, #35	; 0x23
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	e023      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b41      	subs	r3, #65	; 0x41
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b41      	subs	r3, #65	; 0x41
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_ADC_ConfigChannel+0x250>)
 8002618:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10f      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d10b      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12b      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x1f4>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b11      	cmp	r3, #17
 800265e:	d122      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_ConfigChannel+0x260>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9a      	lsrs	r2, r3, #18
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3b01      	subs	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012300 	.word	0x40012300
 80026c0:	40012000 	.word	0x40012000
 80026c4:	10000012 	.word	0x10000012
 80026c8:	20000008 	.word	0x20000008
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <ADC_Init+0x1f0>)
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <ADC_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00f      	b.n	80027ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800281a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	3b01      	subs	r3, #1
 8002828:	035a      	lsls	r2, r3, #13
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e007      	b.n	8002844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	3b01      	subs	r3, #1
 8002860:	051a      	lsls	r2, r3, #20
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002886:	025a      	lsls	r2, r3, #9
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	029a      	lsls	r2, r3, #10
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012300 	.word	0x40012300
 80028c4:	0f000001 	.word	0x0f000001

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff fb32 	bl	8002160 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d008      	beq.n	8002b1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e052      	b.n	8002bc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0216 	bic.w	r2, r2, #22
 8002b2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <HAL_DMA_Abort+0x62>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6c:	e013      	b.n	8002b96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b6e:	f7ff faf7 	bl	8002160 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d90c      	bls.n	8002b96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2203      	movs	r2, #3
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e015      	b.n	8002bc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e4      	bne.n	8002b6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00c      	b.n	8002c02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e177      	b.n	8002f1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 8166 	bne.w	8002f16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80c0 	beq.w	8002f16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a61      	ldr	r2, [pc, #388]	; (8002f38 <HAL_GPIO_Init+0x328>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_GPIO_Init+0x32c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d037      	beq.n	8002e4e <HAL_GPIO_Init+0x23e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_GPIO_Init+0x330>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_GPIO_Init+0x23a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <HAL_GPIO_Init+0x236>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a55      	ldr	r2, [pc, #340]	; (8002f48 <HAL_GPIO_Init+0x338>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d025      	beq.n	8002e42 <HAL_GPIO_Init+0x232>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_GPIO_Init+0x33c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <HAL_GPIO_Init+0x22e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_GPIO_Init+0x340>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0x22a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_GPIO_Init+0x344>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0x226>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_GPIO_Init+0x348>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00d      	beq.n	8002e32 <HAL_GPIO_Init+0x222>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_GPIO_Init+0x34c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x21e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_GPIO_Init+0x350>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_GPIO_Init+0x21a>
 8002e26:	2309      	movs	r3, #9
 8002e28:	e012      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	e010      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	e00e      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e00c      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e36:	2306      	movs	r3, #6
 8002e38:	e00a      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	e008      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e004      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f002 0203 	and.w	r2, r2, #3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e60:	4935      	ldr	r1, [pc, #212]	; (8002f38 <HAL_GPIO_Init+0x328>)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e92:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f ae84 	bls.w	8002c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40020800 	.word	0x40020800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40021400 	.word	0x40021400
 8002f54:	40021800 	.word	0x40021800
 8002f58:	40021c00 	.word	0x40021c00
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40022400 	.word	0x40022400
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fcc8 	bl	800194c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e12b      	b.n	8003232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fc08 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800302c:	f001 fa40 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a81      	ldr	r2, [pc, #516]	; (800323c <HAL_I2C_Init+0x274>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d807      	bhi.n	800304c <HAL_I2C_Init+0x84>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a80      	ldr	r2, [pc, #512]	; (8003240 <HAL_I2C_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e006      	b.n	800305a <HAL_I2C_Init+0x92>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7d      	ldr	r2, [pc, #500]	; (8003244 <HAL_I2C_Init+0x27c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0e7      	b.n	8003232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a78      	ldr	r2, [pc, #480]	; (8003248 <HAL_I2C_Init+0x280>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_I2C_Init+0x274>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <HAL_I2C_Init+0xd4>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3301      	adds	r3, #1
 800309a:	e009      	b.n	80030b0 <HAL_I2C_Init+0xe8>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_I2C_Init+0x284>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	3301      	adds	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	495c      	ldr	r1, [pc, #368]	; (800323c <HAL_I2C_Init+0x274>)
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d819      	bhi.n	8003104 <HAL_I2C_Init+0x13c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e59      	subs	r1, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fbb1 f3f3 	udiv	r3, r1, r3
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_I2C_Init+0x138>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e59      	subs	r1, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	e051      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003100:	2304      	movs	r3, #4
 8003102:	e04f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d111      	bne.n	8003130 <HAL_I2C_Init+0x168>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e012      	b.n	8003156 <HAL_I2C_Init+0x18e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x196>
 800315a:	2301      	movs	r3, #1
 800315c:	e022      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_I2C_Init+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	440b      	add	r3, r1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6911      	ldr	r1, [r2, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	000186a0 	.word	0x000186a0
 8003240:	001e847f 	.word	0x001e847f
 8003244:	003d08ff 	.word	0x003d08ff
 8003248:	431bde83 	.word	0x431bde83
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	460b      	mov	r3, r1
 800325e:	817b      	strh	r3, [r7, #10]
 8003260:	4613      	mov	r3, r2
 8003262:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7fe ff7c 	bl	8002160 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b20      	cmp	r3, #32
 8003274:	f040 80e0 	bne.w	8003438 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	4970      	ldr	r1, [pc, #448]	; (8003444 <HAL_I2C_Master_Transmit+0x1f4>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa92 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	e0d3      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x50>
 800329c:	2302      	movs	r3, #2
 800329e:	e0cc      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d007      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2221      	movs	r2, #33	; 0x21
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2210      	movs	r2, #16
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a50      	ldr	r2, [pc, #320]	; (8003448 <HAL_I2C_Master_Transmit+0x1f8>)
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003308:	8979      	ldrh	r1, [r7, #10]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f9ca 	bl	80036a8 <I2C_MasterRequestWrite>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08d      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003334:	e066      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	6a39      	ldr	r1, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fb0c 	bl	8003958 <I2C_WaitOnTXEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b04      	cmp	r3, #4
 800334c:	d107      	bne.n	800335e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11b      	bne.n	80033d8 <HAL_I2C_Master_Transmit+0x188>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d017      	beq.n	80033d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6a39      	ldr	r1, [r7, #32]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fafc 	bl	80039da <I2C_WaitOnBTFFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d107      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e01a      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d194      	bne.n	8003336 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	00100002 	.word	0x00100002
 8003448:	ffff0000 	.word	0xffff0000

0800344c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	460b      	mov	r3, r1
 800345a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7fe fe80 	bl	8002160 <HAL_GetTick>
 8003460:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b20      	cmp	r3, #32
 8003470:	f040 8111 	bne.w	8003696 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2319      	movs	r3, #25
 800347a:	2201      	movs	r2, #1
 800347c:	4988      	ldr	r1, [pc, #544]	; (80036a0 <HAL_I2C_IsDeviceReady+0x254>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f994 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	e104      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_I2C_IsDeviceReady+0x50>
 8003498:	2302      	movs	r3, #2
 800349a:	e0fd      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d007      	beq.n	80034c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2224      	movs	r2, #36	; 0x24
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a70      	ldr	r2, [pc, #448]	; (80036a4 <HAL_I2C_IsDeviceReady+0x258>)
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f952 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351c:	d103      	bne.n	8003526 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b6      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003538:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fe11 	bl	8002160 <HAL_GetTick>
 800353e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800356e:	e025      	b.n	80035bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7fe fdf6 	bl	8002160 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <HAL_I2C_IsDeviceReady+0x13a>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	22a0      	movs	r2, #160	; 0xa0
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2ba0      	cmp	r3, #160	; 0xa0
 80035c6:	d005      	beq.n	80035d4 <HAL_I2C_IsDeviceReady+0x188>
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_I2C_IsDeviceReady+0x188>
 80035ce:	7dbb      	ldrb	r3, [r7, #22]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0cd      	beq.n	8003570 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d129      	bne.n	800363e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	4921      	ldr	r1, [pc, #132]	; (80036a0 <HAL_I2C_IsDeviceReady+0x254>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f8c6 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e036      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e02c      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003656:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2319      	movs	r3, #25
 800365e:	2201      	movs	r2, #1
 8003660:	490f      	ldr	r1, [pc, #60]	; (80036a0 <HAL_I2C_IsDeviceReady+0x254>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8a2 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e012      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3301      	adds	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	f4ff af32 	bcc.w	80034e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00100002 	.word	0x00100002
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	460b      	mov	r3, r1
 80036b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d006      	beq.n	80036d2 <I2C_MasterRequestWrite+0x2a>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d003      	beq.n	80036d2 <I2C_MasterRequestWrite+0x2a>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036d0:	d108      	bne.n	80036e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e00b      	b.n	80036fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	2b12      	cmp	r3, #18
 80036ea:	d107      	bne.n	80036fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f84f 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003722:	d103      	bne.n	800372c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e035      	b.n	800379c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003738:	d108      	bne.n	800374c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003748:	611a      	str	r2, [r3, #16]
 800374a:	e01b      	b.n	8003784 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800374c:	897b      	ldrh	r3, [r7, #10]
 800374e:	11db      	asrs	r3, r3, #7
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0306 	and.w	r3, r3, #6
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f063 030f 	orn	r3, r3, #15
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <I2C_MasterRequestWrite+0xfc>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f875 	bl	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e010      	b.n	800379c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4907      	ldr	r1, [pc, #28]	; (80037a8 <I2C_MasterRequestWrite+0x100>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f865 	bl	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	00010008 	.word	0x00010008
 80037a8:	00010002 	.word	0x00010002

080037ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037bc:	e025      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fccb 	bl	8002160 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e023      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10d      	bne.n	8003830 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	e00c      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d0b6      	beq.n	80037be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003868:	e051      	b.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d123      	bne.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003892:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e046      	b.n	8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d021      	beq.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fc49 	bl	8002160 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e020      	b.n	8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d10c      	bne.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e00b      	b.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	43da      	mvns	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d18d      	bne.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003964:	e02d      	b.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f878 	bl	8003a5c <I2C_IsAcknowledgeFailed>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e02d      	b.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d021      	beq.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fe fbef 	bl	8002160 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d116      	bne.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e007      	b.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b80      	cmp	r3, #128	; 0x80
 80039ce:	d1ca      	bne.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e6:	e02d      	b.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f837 	bl	8003a5c <I2C_IsAcknowledgeFailed>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e02d      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d021      	beq.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fe fbae 	bl	8002160 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d1ca      	bne.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d11b      	bne.n	8003aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d129      	bne.n	8003b24 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0210 	bic.w	r2, r2, #16
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d12a      	bne.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b6c:	89fb      	ldrh	r3, [r7, #14]
 8003b6e:	f023 030f 	bic.w	r3, r3, #15
 8003b72:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	89fa      	ldrh	r2, [r7, #14]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_PWREx_EnableOverDrive+0x94>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe fac0 	bl	8002160 <HAL_GetTick>
 8003be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003be2:	e009      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be4:	f7fe fabc 	bl	8002160 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e01f      	b.n	8003c38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d1ee      	bne.n	8003be4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0c:	f7fe faa8 	bl	8002160 <HAL_GetTick>
 8003c10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c12:	e009      	b.n	8003c28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c14:	f7fe faa4 	bl	8002160 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c22:	d901      	bls.n	8003c28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e007      	b.n	8003c38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c34:	d1ee      	bne.n	8003c14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	420e0040 	.word	0x420e0040
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	420e0044 	.word	0x420e0044

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e267      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d075      	beq.n	8003d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d112      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b82      	ldr	r3, [pc, #520]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c92:	d10b      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05b      	beq.n	8003d58 <HAL_RCC_OscConfig+0x108>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d157      	bne.n	8003d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e242      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x74>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x98>
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6f      	ldr	r2, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6c      	ldr	r2, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fa2a 	bl	8002160 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe fa26 	bl	8002160 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e207      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xc0>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fa16 	bl	8002160 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fe fa12 	bl	8002160 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1f3      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0xe8>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1c7      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e03a      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f9cb 	bl	8002160 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe f9c7 	bl	8002160 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1a8      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
 8003e00:	e015      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f9aa 	bl	8002160 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fe f9a6 	bl	8002160 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e187      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d036      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fe f98a 	bl	8002160 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fe f986 	bl	8002160 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e167      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x200>
 8003e6e:	e01b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fe f973 	bl	8002160 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fe f96f 	bl	8002160 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d907      	bls.n	8003e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e150      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470000 	.word	0x42470000
 8003e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ea      	bne.n	8003e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8097 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a7c      	ldr	r2, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b7a      	ldr	r3, [pc, #488]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b74      	ldr	r3, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a73      	ldr	r2, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fe f92f 	bl	8002160 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fe f92b 	bl	8002160 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e10c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2ea>
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a63      	ldr	r2, [pc, #396]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x30c>
 8003f42:	4b5f      	ldr	r3, [pc, #380]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a5e      	ldr	r2, [pc, #376]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b5c      	ldr	r3, [pc, #368]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5b      	ldr	r2, [pc, #364]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a54      	ldr	r2, [pc, #336]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0304 	bic.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f8f0 	bl	8002160 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe f8ec 	bl	8002160 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0cb      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0ee      	beq.n	8003f84 <HAL_RCC_OscConfig+0x334>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f8da 	bl	8002160 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f8d6 	bl	8002160 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0b5      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ee      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a1 	beq.w	8004130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d05c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d141      	bne.n	8004086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe f8aa 	bl	8002160 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe f8a6 	bl	8002160 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e087      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	491b      	ldr	r1, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fe f87f 	bl	8002160 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fe f87b 	bl	8002160 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e05c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x416>
 8004084:	e054      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe f868 	bl	8002160 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe f864 	bl	8002160 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e045      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x444>
 80040b2:	e03d      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e038      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x4ec>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d028      	beq.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d121      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d11a      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	4293      	cmp	r3, r2
 8004106:	d111      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0cc      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d90c      	bls.n	800417c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d044      	beq.n	8004260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d119      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e067      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 0203 	bic.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004230:	f7fd ff96 	bl	8002160 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	e00a      	b.n	800424e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fd ff92 	bl	8002160 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e04f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 020c 	and.w	r2, r3, #12
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	429a      	cmp	r2, r3
 800425e:	d1eb      	bne.n	8004238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d20c      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042c6:	f000 f821 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490a      	ldr	r1, [pc, #40]	; (8004300 <HAL_RCC_ClockConfig+0x1c0>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fd fef6 	bl	80020d8 <HAL_InitTick>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023c00 	.word	0x40023c00
 80042fc:	40023800 	.word	0x40023800
 8004300:	08007d6c 	.word	0x08007d6c
 8004304:	20000008 	.word	0x20000008
 8004308:	2000000c 	.word	0x2000000c

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b090      	sub	sp, #64	; 0x40
 8004312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	2300      	movs	r3, #0
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431c:	2300      	movs	r3, #0
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d00d      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x40>
 8004330:	2b08      	cmp	r3, #8
 8004332:	f200 80a1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x16c>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x34>
 800433a:	2b04      	cmp	r3, #4
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x3a>
 800433e:	e09b      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_GetSysClockFreq+0x184>)
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004344:	e09b      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800434a:	e098      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434c:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004356:	4b4d      	ldr	r3, [pc, #308]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	2200      	movs	r2, #0
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	627a      	str	r2, [r7, #36]	; 0x24
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004374:	2100      	movs	r1, #0
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004378:	fb03 f201 	mul.w	r2, r3, r1
 800437c:	2300      	movs	r3, #0
 800437e:	fb00 f303 	mul.w	r3, r0, r3
 8004382:	4413      	add	r3, r2
 8004384:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004386:	fba0 1202 	umull	r1, r2, r0, r2
 800438a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800438c:	460a      	mov	r2, r1
 800438e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004392:	4413      	add	r3, r2
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2200      	movs	r2, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	61fa      	str	r2, [r7, #28]
 800439e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043a6:	f7fb ff7b 	bl	80002a0 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4613      	mov	r3, r2
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b2:	e053      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	617a      	str	r2, [r7, #20]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043c6:	f04f 0b00 	mov.w	fp, #0
 80043ca:	4652      	mov	r2, sl
 80043cc:	465b      	mov	r3, fp
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	ebb2 080a 	subs.w	r8, r2, sl
 80043e6:	eb63 090b 	sbc.w	r9, r3, fp
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004402:	eb63 0509 	sbc.w	r5, r3, r9
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	00eb      	lsls	r3, r5, #3
 8004410:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004414:	00e2      	lsls	r2, r4, #3
 8004416:	4614      	mov	r4, r2
 8004418:	461d      	mov	r5, r3
 800441a:	eb14 030a 	adds.w	r3, r4, sl
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	eb45 030b 	adc.w	r3, r5, fp
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004432:	4629      	mov	r1, r5
 8004434:	028b      	lsls	r3, r1, #10
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800443c:	4621      	mov	r1, r4
 800443e:	028a      	lsls	r2, r1, #10
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	2200      	movs	r2, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004450:	f7fb ff26 	bl	80002a0 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800446c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x184>)
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004480:	4618      	mov	r0, r3
 8004482:	3740      	adds	r7, #64	; 0x40
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	017d7840 	.word	0x017d7840

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000008 	.word	0x20000008

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08007d7c 	.word	0x08007d7c

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044dc:	f7ff ffdc 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0b5b      	lsrs	r3, r3, #13
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08007d7c 	.word	0x08007d7c

08004500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d075      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004534:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fd fe11 	bl	8002160 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fd fe0d 	bl	8002160 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e189      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	4b8a      	ldr	r3, [pc, #552]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4981      	ldr	r1, [pc, #516]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800458c:	4b7c      	ldr	r3, [pc, #496]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	431a      	orrs	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	071b      	lsls	r3, r3, #28
 80045ac:	4974      	ldr	r1, [pc, #464]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045b4:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ba:	f023 021f 	bic.w	r2, r3, #31
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	496e      	ldr	r1, [pc, #440]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	019a      	lsls	r2, r3, #6
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	071b      	lsls	r3, r3, #28
 80045ec:	4964      	ldr	r1, [pc, #400]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f4:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fa:	f7fd fdb1 	bl	8002160 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fd fdad 	bl	8002160 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e129      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d079      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004638:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800463e:	f7fd fd8f 	bl	8002160 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004646:	f7fd fd8b 	bl	8002160 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e107      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004658:	4b49      	ldr	r3, [pc, #292]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004664:	d0ef      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	019a      	lsls	r2, r3, #6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	431a      	orrs	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	071b      	lsls	r3, r3, #28
 8004692:	493b      	ldr	r1, [pc, #236]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800469a:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	0e1b      	lsrs	r3, r3, #24
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	071b      	lsls	r3, r3, #28
 80046e0:	4927      	ldr	r1, [pc, #156]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	4922      	ldr	r1, [pc, #136]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004704:	f7fd fd2c 	bl	8002160 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800470c:	f7fd fd28 	bl	8002160 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0a4      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472a:	d1ef      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 808b 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004762:	f7fd fcfd 	bl	8002160 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004768:	e010      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd fcf9 	bl	8002160 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d909      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e075      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800477c:	42470068 	.word	0x42470068
 8004780:	40023800 	.word	0x40023800
 8004784:	42470070 	.word	0x42470070
 8004788:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800478c:	4b38      	ldr	r3, [pc, #224]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0e8      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004798:	4b36      	ldr	r3, [pc, #216]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d028      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b6:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d114      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd fcbf 	bl	8002160 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fcbb 	bl	8002160 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e035      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	d10d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	4912      	ldr	r1, [pc, #72]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]
 8004830:	e005      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004838:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800483c:	6093      	str	r3, [r2, #8]
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800484c:	4313      	orrs	r3, r2
 800484e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004864:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40007000 	.word	0x40007000
 8004874:	40023800 	.word	0x40023800
 8004878:	42470e40 	.word	0x42470e40
 800487c:	424711e0 	.word	0x424711e0

08004880 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e066      	b.n	8004964 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7f5b      	ldrb	r3, [r3, #29]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f99a 	bl	8001be0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	22ca      	movs	r2, #202	; 0xca
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2253      	movs	r2, #83	; 0x53
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa45 	bl	8004d52 <RTC_EnterInitMode>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d12c      	bne.n	800492c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68d2      	ldr	r2, [r2, #12]
 800490c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6919      	ldr	r1, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa4c 	bl	8004dc0 <RTC_ExitInitMode>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d113      	bne.n	800495a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	7f1b      	ldrb	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_RTC_SetTime+0x1c>
 8004984:	2302      	movs	r3, #2
 8004986:	e087      	b.n	8004a98 <HAL_RTC_SetTime+0x12c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2202      	movs	r2, #2
 8004992:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d126      	bne.n	80049e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa29 	bl	8004e0a <RTC_ByteToBcd2>
 80049b8:	4603      	mov	r3, r0
 80049ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fa22 	bl	8004e0a <RTC_ByteToBcd2>
 80049c6:	4603      	mov	r3, r0
 80049c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa1a 	bl	8004e0a <RTC_ByteToBcd2>
 80049d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	78db      	ldrb	r3, [r3, #3]
 80049e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e018      	b.n	8004a1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	78db      	ldrb	r3, [r3, #3]
 8004a14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	22ca      	movs	r2, #202	; 0xca
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2253      	movs	r2, #83	; 0x53
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f991 	bl	8004d52 <RTC_EnterInitMode>
 8004a30:	4603      	mov	r3, r0
 8004a32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d120      	bne.n	8004a7c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f9a4 	bl	8004dc0 <RTC_ExitInitMode>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	771a      	strb	r2, [r3, #28]

  return status;
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}

08004aa0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ad2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	0d9b      	lsrs	r3, r3, #22
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11a      	bne.n	8004b52 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f98f 	bl	8004e44 <RTC_Bcd2ToByte>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f986 	bl	8004e44 <RTC_Bcd2ToByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	789b      	ldrb	r3, [r3, #2]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f97d 	bl	8004e44 <RTC_Bcd2ToByte>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	7f1b      	ldrb	r3, [r3, #28]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_RTC_SetDate+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e071      	b.n	8004c5c <HAL_RTC_SetDate+0x100>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <HAL_RTC_SetDate+0x4c>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	330a      	adds	r3, #10
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11c      	bne.n	8004be8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	78db      	ldrb	r3, [r3, #3]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f929 	bl	8004e0a <RTC_ByteToBcd2>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f922 	bl	8004e0a <RTC_ByteToBcd2>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	789b      	ldrb	r3, [r3, #2]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f91a 	bl	8004e0a <RTC_ByteToBcd2>
 8004bd6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bd8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e00e      	b.n	8004c06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	78db      	ldrb	r3, [r3, #3]
 8004bec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bf4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004bfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	22ca      	movs	r2, #202	; 0xca
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2253      	movs	r2, #83	; 0x53
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f89b 	bl	8004d52 <RTC_EnterInitMode>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f8c2 	bl	8004dc0 <RTC_ExitInitMode>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	771a      	strb	r2, [r3, #28]

  return status;
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd90      	pop	{r4, r7, pc}

08004c64 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	0b5b      	lsrs	r3, r3, #13
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11a      	bne.n	8004cf8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f8bc 	bl	8004e44 <RTC_Bcd2ToByte>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f8b3 	bl	8004e44 <RTC_Bcd2ToByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	789b      	ldrb	r3, [r3, #2]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f8aa 	bl	8004e44 <RTC_Bcd2ToByte>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d1c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1e:	f7fd fa1f 	bl	8002160 <HAL_GetTick>
 8004d22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d24:	e009      	b.n	8004d3a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d26:	f7fd fa1b 	bl	8002160 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d34:	d901      	bls.n	8004d3a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e007      	b.n	8004d4a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ee      	beq.n	8004d26 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d122      	bne.n	8004db6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d80:	f7fd f9ee 	bl	8002160 <HAL_GetTick>
 8004d84:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d86:	e00c      	b.n	8004da2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d88:	f7fd f9ea 	bl	8002160 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d96:	d904      	bls.n	8004da2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <RTC_EnterInitMode+0x64>
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d1e8      	bne.n	8004d88 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dda:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ff89 	bl	8004d02 <HAL_RTC_WaitForSynchro>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004e18:	e005      	b.n	8004e26 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	3b0a      	subs	r3, #10
 8004e24:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2b09      	cmp	r3, #9
 8004e2a:	d8f6      	bhi.n	8004e1a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	0092      	lsls	r2, r2, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	b2db      	uxtb	r3, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e041      	b.n	8004f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fd f838 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fa96 	bl	80053ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e04e      	b.n	8004fd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d01d      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_TIM_Base_Start_IT+0xd0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x80>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d010      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	e007      	b.n	8004fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40001800 	.word	0x40001800

08004ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0202 	mvn.w	r2, #2
 8005028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9b5 	bl	80053ae <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9a7 	bl	800539a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9b8 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0204 	mvn.w	r2, #4
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f98b 	bl	80053ae <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f97d 	bl	800539a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f98e 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0208 	mvn.w	r2, #8
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2204      	movs	r2, #4
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f961 	bl	80053ae <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f953 	bl	800539a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f964 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0210 	mvn.w	r2, #16
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2208      	movs	r2, #8
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f937 	bl	80053ae <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f929 	bl	800539a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f93a 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0201 	mvn.w	r2, #1
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fc30 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b80      	cmp	r3, #128	; 0x80
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fae0 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8ff 	bl	80053d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0220 	mvn.w	r2, #32
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 faaa 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIM_ConfigClockSource+0x1c>
 8005224:	2302      	movs	r3, #2
 8005226:	e0b4      	b.n	8005392 <HAL_TIM_ConfigClockSource+0x186>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005260:	d03e      	beq.n	80052e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005266:	f200 8087 	bhi.w	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	f000 8086 	beq.w	800537e <HAL_TIM_ConfigClockSource+0x172>
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005276:	d87f      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b70      	cmp	r3, #112	; 0x70
 800527a:	d01a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0xa6>
 800527c:	2b70      	cmp	r3, #112	; 0x70
 800527e:	d87b      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b60      	cmp	r3, #96	; 0x60
 8005282:	d050      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x11a>
 8005284:	2b60      	cmp	r3, #96	; 0x60
 8005286:	d877      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b50      	cmp	r3, #80	; 0x50
 800528a:	d03c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0xfa>
 800528c:	2b50      	cmp	r3, #80	; 0x50
 800528e:	d873      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d058      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x13a>
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d86f      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b30      	cmp	r3, #48	; 0x30
 800529a:	d064      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x15a>
 800529c:	2b30      	cmp	r3, #48	; 0x30
 800529e:	d86b      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d060      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x15a>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d867      	bhi.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05c      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d05a      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x15a>
 80052b0:	e062      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f000 f9ad 	bl	8005620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	609a      	str	r2, [r3, #8]
      break;
 80052de:	e04f      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6899      	ldr	r1, [r3, #8]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f000 f996 	bl	8005620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005302:	609a      	str	r2, [r3, #8]
      break;
 8005304:	e03c      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	461a      	mov	r2, r3
 8005314:	f000 f90a 	bl	800552c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2150      	movs	r1, #80	; 0x50
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f963 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 8005324:	e02c      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	f000 f929 	bl	800558a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2160      	movs	r1, #96	; 0x60
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f953 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 8005344:	e01c      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	461a      	mov	r2, r3
 8005354:	f000 f8ea 	bl	800552c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f943 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 8005364:	e00c      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f000 f93a 	bl	80055ea <TIM_ITRx_SetConfig>
      break;
 8005376:	e003      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e000      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800537e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a40      	ldr	r2, [pc, #256]	; (8005500 <TIM_Base_SetConfig+0x114>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3d      	ldr	r2, [pc, #244]	; (8005504 <TIM_Base_SetConfig+0x118>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3c      	ldr	r2, [pc, #240]	; (8005508 <TIM_Base_SetConfig+0x11c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3b      	ldr	r2, [pc, #236]	; (800550c <TIM_Base_SetConfig+0x120>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3a      	ldr	r2, [pc, #232]	; (8005510 <TIM_Base_SetConfig+0x124>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d108      	bne.n	800543e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <TIM_Base_SetConfig+0x114>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d02b      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d027      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <TIM_Base_SetConfig+0x118>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d023      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <TIM_Base_SetConfig+0x11c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01f      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2a      	ldr	r2, [pc, #168]	; (800550c <TIM_Base_SetConfig+0x120>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01b      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a29      	ldr	r2, [pc, #164]	; (8005510 <TIM_Base_SetConfig+0x124>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d017      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a28      	ldr	r2, [pc, #160]	; (8005514 <TIM_Base_SetConfig+0x128>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a27      	ldr	r2, [pc, #156]	; (8005518 <TIM_Base_SetConfig+0x12c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a26      	ldr	r2, [pc, #152]	; (800551c <TIM_Base_SetConfig+0x130>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a25      	ldr	r2, [pc, #148]	; (8005520 <TIM_Base_SetConfig+0x134>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a24      	ldr	r2, [pc, #144]	; (8005524 <TIM_Base_SetConfig+0x138>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a23      	ldr	r2, [pc, #140]	; (8005528 <TIM_Base_SetConfig+0x13c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d108      	bne.n	80054b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <TIM_Base_SetConfig+0x114>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0xf8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <TIM_Base_SetConfig+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d103      	bne.n	80054ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	615a      	str	r2, [r3, #20]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800
 8005520:	40001800 	.word	0x40001800
 8005524:	40001c00 	.word	0x40001c00
 8005528:	40002000 	.word	0x40002000

0800552c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0201 	bic.w	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f023 030a 	bic.w	r3, r3, #10
 8005568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558a:	b480      	push	{r7}
 800558c:	b087      	sub	sp, #28
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0210 	bic.w	r2, r3, #16
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	031b      	lsls	r3, r3, #12
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	f043 0307 	orr.w	r3, r3, #7
 800560c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	431a      	orrs	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e05a      	b.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d01d      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a15      	ldr	r2, [pc, #84]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d10c      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4313      	orrs	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40010400 	.word	0x40010400
 8005750:	40014000 	.word	0x40014000
 8005754:	40001800 	.word	0x40001800

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e03f      	b.n	8005812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fc02 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fd7b 	bl	80062c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08a      	sub	sp, #40	; 0x28
 800581e:	af02      	add	r7, sp, #8
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d17c      	bne.n	8005934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_UART_Transmit+0x2c>
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e075      	b.n	8005936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_UART_Transmit+0x3e>
 8005854:	2302      	movs	r3, #2
 8005856:	e06e      	b.n	8005936 <HAL_UART_Transmit+0x11c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2221      	movs	r2, #33	; 0x21
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586e:	f7fc fc77 	bl	8002160 <HAL_GetTick>
 8005872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d108      	bne.n	800589c <HAL_UART_Transmit+0x82>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e003      	b.n	80058a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058ac:	e02a      	b.n	8005904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 faf9 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e036      	b.n	8005936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3302      	adds	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e007      	b.n	80058f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	3301      	adds	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1cf      	bne.n	80058ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2140      	movs	r1, #64	; 0x40
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fac9 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b0ba      	sub	sp, #232	; 0xe8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800597e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_UART_IRQHandler+0x66>
 8005992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fbd3 	bl	800614a <UART_Receive_IT>
      return;
 80059a4:	e256      	b.n	8005e54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80de 	beq.w	8005b6c <HAL_UART_IRQHandler+0x22c>
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80d1 	beq.w	8005b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_UART_IRQHandler+0xae>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_UART_IRQHandler+0xd2>
 80059fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f043 0202 	orr.w	r2, r3, #2
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_UART_IRQHandler+0xf6>
 8005a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <HAL_UART_IRQHandler+0x126>
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0208 	orr.w	r2, r3, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 81ed 	beq.w	8005e4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x14e>
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb5e 	bl	800614a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_UART_IRQHandler+0x17a>
 8005ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04f      	beq.n	8005b5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa66 	bl	8005f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d141      	bne.n	8005b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1d9      	bne.n	8005ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4a7d      	ldr	r2, [pc, #500]	; (8005d1c <HAL_UART_IRQHandler+0x3dc>)
 8005b28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fd f84b 	bl	8002bca <HAL_DMA_Abort_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00e      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f99a 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e00a      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f996 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	e006      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f992 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b66:	e170      	b.n	8005e4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	bf00      	nop
    return;
 8005b6a:	e16e      	b.n	8005e4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 814a 	bne.w	8005e0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8143 	beq.w	8005e0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 813c 	beq.w	8005e0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	f040 80b4 	bne.w	8005d20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8140 	beq.w	8005e4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f080 8139 	bcs.w	8005e4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005be2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bee:	f000 8088 	beq.w	8005d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1d9      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e1      	bne.n	8005c3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ce6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e3      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fc fef4 	bl	8002aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f8c0 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d18:	e099      	b.n	8005e4e <HAL_UART_IRQHandler+0x50e>
 8005d1a:	bf00      	nop
 8005d1c:	08006053 	.word	0x08006053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 808b 	beq.w	8005e52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8086 	beq.w	8005e52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e3      	bne.n	8005d46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005da2:	633a      	str	r2, [r7, #48]	; 0x30
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e3      	bne.n	8005d7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0310 	bic.w	r3, r3, #16
 8005dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005de8:	61fa      	str	r2, [r7, #28]
 8005dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	69b9      	ldr	r1, [r7, #24]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	617b      	str	r3, [r7, #20]
   return(result);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e3      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f848 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e08:	e023      	b.n	8005e52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_UART_IRQHandler+0x4ea>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f929 	bl	800607a <UART_Transmit_IT>
    return;
 8005e28:	e014      	b.n	8005e54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <HAL_UART_IRQHandler+0x514>
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f969 	bl	800611a <UART_EndTransmit_IT>
    return;
 8005e48:	e004      	b.n	8005e54 <HAL_UART_IRQHandler+0x514>
    return;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_UART_IRQHandler+0x514>
      return;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_UART_IRQHandler+0x514>
      return;
 8005e52:	bf00      	nop
  }
}
 8005e54:	37e8      	adds	r7, #232	; 0xe8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop

08005e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b090      	sub	sp, #64	; 0x40
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec0:	e050      	b.n	8005f64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d04c      	beq.n	8005f64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed0:	f7fc f946 	bl	8002160 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d241      	bcs.n	8005f64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f00:	637a      	str	r2, [r7, #52]	; 0x34
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	613b      	str	r3, [r7, #16]
   return(result);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f34:	623a      	str	r2, [r7, #32]
 8005f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	6a3a      	ldr	r2, [r7, #32]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e00f      	b.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d09f      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3740      	adds	r7, #64	; 0x40
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b095      	sub	sp, #84	; 0x54
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3314      	adds	r3, #20
 8005fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e5      	bne.n	8005fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	2b01      	cmp	r3, #1
 8006002:	d119      	bne.n	8006038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	60bb      	str	r3, [r7, #8]
   return(result);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f023 0310 	bic.w	r3, r3, #16
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006024:	61ba      	str	r2, [r7, #24]
 8006026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	613b      	str	r3, [r7, #16]
   return(result);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e5      	bne.n	8006004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006046:	bf00      	nop
 8006048:	3754      	adds	r7, #84	; 0x54
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff ff09 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b21      	cmp	r3, #33	; 0x21
 800608c:	d13e      	bne.n	800610c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d114      	bne.n	80060c2 <UART_Transmit_IT+0x48>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	621a      	str	r2, [r3, #32]
 80060c0:	e008      	b.n	80060d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6211      	str	r1, [r2, #32]
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29b      	uxth	r3, r3
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4619      	mov	r1, r3
 80060e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff fe8e 	bl	8005e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b08c      	sub	sp, #48	; 0x30
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	f040 80ab 	bne.w	80062b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006168:	d117      	bne.n	800619a <UART_Receive_IT+0x50>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d113      	bne.n	800619a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	b29a      	uxth	r2, r3
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
 8006198:	e026      	b.n	80061e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ac:	d007      	beq.n	80061be <UART_Receive_IT+0x74>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <UART_Receive_IT+0x82>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e008      	b.n	80061de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4619      	mov	r1, r3
 80061f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d15a      	bne.n	80062b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0220 	bic.w	r2, r2, #32
 800620a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800621a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	2b01      	cmp	r3, #1
 800623a:	d135      	bne.n	80062a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	613b      	str	r3, [r7, #16]
   return(result);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	623a      	str	r2, [r7, #32]
 8006264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b10      	cmp	r3, #16
 8006282:	d10a      	bne.n	800629a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fdf9 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
 80062a6:	e002      	b.n	80062ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fde1 	bl	8005e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e002      	b.n	80062b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3730      	adds	r7, #48	; 0x30
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c4:	b0c0      	sub	sp, #256	; 0x100
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	ea40 0301 	orr.w	r3, r0, r1
 80062e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006318:	f021 010c 	bic.w	r1, r1, #12
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006326:	430b      	orrs	r3, r1
 8006328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	6999      	ldr	r1, [r3, #24]
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	ea40 0301 	orr.w	r3, r0, r1
 8006346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b8f      	ldr	r3, [pc, #572]	; (800658c <UART_SetConfig+0x2cc>)
 8006350:	429a      	cmp	r2, r3
 8006352:	d005      	beq.n	8006360 <UART_SetConfig+0xa0>
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b8d      	ldr	r3, [pc, #564]	; (8006590 <UART_SetConfig+0x2d0>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d104      	bne.n	800636a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fe f8ba 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8006364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006368:	e003      	b.n	8006372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800636a:	f7fe f8a1 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800636e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	f040 810c 	bne.w	8006598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800638a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800638e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	1891      	adds	r1, r2, r2
 8006398:	65b9      	str	r1, [r7, #88]	; 0x58
 800639a:	415b      	adcs	r3, r3
 800639c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063a2:	4621      	mov	r1, r4
 80063a4:	eb12 0801 	adds.w	r8, r2, r1
 80063a8:	4629      	mov	r1, r5
 80063aa:	eb43 0901 	adc.w	r9, r3, r1
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c2:	4690      	mov	r8, r2
 80063c4:	4699      	mov	r9, r3
 80063c6:	4623      	mov	r3, r4
 80063c8:	eb18 0303 	adds.w	r3, r8, r3
 80063cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d0:	462b      	mov	r3, r5
 80063d2:	eb49 0303 	adc.w	r3, r9, r3
 80063d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ee:	460b      	mov	r3, r1
 80063f0:	18db      	adds	r3, r3, r3
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	4613      	mov	r3, r2
 80063f6:	eb42 0303 	adc.w	r3, r2, r3
 80063fa:	657b      	str	r3, [r7, #84]	; 0x54
 80063fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006404:	f7f9 ff4c 	bl	80002a0 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <UART_SetConfig+0x2d4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006430:	415b      	adcs	r3, r3
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006438:	4641      	mov	r1, r8
 800643a:	eb12 0a01 	adds.w	sl, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb43 0b01 	adc.w	fp, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006458:	4692      	mov	sl, r2
 800645a:	469b      	mov	fp, r3
 800645c:	4643      	mov	r3, r8
 800645e:	eb1a 0303 	adds.w	r3, sl, r3
 8006462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006466:	464b      	mov	r3, r9
 8006468:	eb4b 0303 	adc.w	r3, fp, r3
 800646c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006484:	460b      	mov	r3, r1
 8006486:	18db      	adds	r3, r3, r3
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
 800648a:	4613      	mov	r3, r2
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800649a:	f7f9 ff01 	bl	80002a0 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2301 	umull	r2, r3, r3, r1
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2264      	movs	r2, #100	; 0x64
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	1acb      	subs	r3, r1, r3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <UART_SetConfig+0x2d4>)
 80064bc:	fba3 2302 	umull	r2, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c8:	441c      	add	r4, r3
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e4:	415b      	adcs	r3, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6339      	str	r1, [r7, #48]	; 0x30
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006520:	464b      	mov	r3, r9
 8006522:	460a      	mov	r2, r1
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800653c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006540:	460b      	mov	r3, r1
 8006542:	18db      	adds	r3, r3, r3
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
 8006546:	4613      	mov	r3, r2
 8006548:	eb42 0303 	adc.w	r3, r2, r3
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006556:	f7f9 fea3 	bl	80002a0 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <UART_SetConfig+0x2d4>)
 8006560:	fba3 1302 	umull	r1, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	2164      	movs	r1, #100	; 0x64
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	3332      	adds	r3, #50	; 0x32
 8006572:	4a08      	ldr	r2, [pc, #32]	; (8006594 <UART_SetConfig+0x2d4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f003 0207 	and.w	r2, r3, #7
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4422      	add	r2, r4
 8006586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006588:	e105      	b.n	8006796 <UART_SetConfig+0x4d6>
 800658a:	bf00      	nop
 800658c:	40011000 	.word	0x40011000
 8006590:	40011400 	.word	0x40011400
 8006594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065aa:	4642      	mov	r2, r8
 80065ac:	464b      	mov	r3, r9
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	6239      	str	r1, [r7, #32]
 80065b2:	415b      	adcs	r3, r3
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
 80065b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ba:	4641      	mov	r1, r8
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb43 0501 	adc.w	r5, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	18e3      	adds	r3, r4, r3
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065e0:	464b      	mov	r3, r9
 80065e2:	eb45 0303 	adc.w	r3, r5, r3
 80065e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006606:	4629      	mov	r1, r5
 8006608:	008b      	lsls	r3, r1, #2
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006610:	4621      	mov	r1, r4
 8006612:	008a      	lsls	r2, r1, #2
 8006614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006618:	f7f9 fe42 	bl	80002a0 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b60      	ldr	r3, [pc, #384]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	011c      	lsls	r4, r3, #4
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	61b9      	str	r1, [r7, #24]
 8006644:	415b      	adcs	r3, r3
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664c:	4641      	mov	r1, r8
 800664e:	1851      	adds	r1, r2, r1
 8006650:	6139      	str	r1, [r7, #16]
 8006652:	4649      	mov	r1, r9
 8006654:	414b      	adcs	r3, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006664:	4659      	mov	r1, fp
 8006666:	00cb      	lsls	r3, r1, #3
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666e:	4651      	mov	r1, sl
 8006670:	00ca      	lsls	r2, r1, #3
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	4603      	mov	r3, r0
 8006678:	4642      	mov	r2, r8
 800667a:	189b      	adds	r3, r3, r2
 800667c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006680:	464b      	mov	r3, r9
 8006682:	460a      	mov	r2, r1
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
 8006696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066a4:	4649      	mov	r1, r9
 80066a6:	008b      	lsls	r3, r1, #2
 80066a8:	4641      	mov	r1, r8
 80066aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ae:	4641      	mov	r1, r8
 80066b0:	008a      	lsls	r2, r1, #2
 80066b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066b6:	f7f9 fdf3 	bl	80002a0 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	; 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	3332      	adds	r3, #50	; 0x32
 80066d2:	4a34      	ldr	r2, [pc, #208]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066de:	441c      	add	r4, r3
 80066e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e4:	2200      	movs	r2, #0
 80066e6:	673b      	str	r3, [r7, #112]	; 0x70
 80066e8:	677a      	str	r2, [r7, #116]	; 0x74
 80066ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	1891      	adds	r1, r2, r2
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	415b      	adcs	r3, r3
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066fe:	4641      	mov	r1, r8
 8006700:	1851      	adds	r1, r2, r1
 8006702:	6039      	str	r1, [r7, #0]
 8006704:	4649      	mov	r1, r9
 8006706:	414b      	adcs	r3, r1
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006716:	4659      	mov	r1, fp
 8006718:	00cb      	lsls	r3, r1, #3
 800671a:	4651      	mov	r1, sl
 800671c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006720:	4651      	mov	r1, sl
 8006722:	00ca      	lsls	r2, r1, #3
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	4603      	mov	r3, r0
 800672a:	4642      	mov	r2, r8
 800672c:	189b      	adds	r3, r3, r2
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	663b      	str	r3, [r7, #96]	; 0x60
 8006744:	667a      	str	r2, [r7, #100]	; 0x64
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006752:	4649      	mov	r1, r9
 8006754:	008b      	lsls	r3, r1, #2
 8006756:	4641      	mov	r1, r8
 8006758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675c:	4641      	mov	r1, r8
 800675e:	008a      	lsls	r2, r1, #2
 8006760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006764:	f7f9 fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <UART_SetConfig+0x4e4>)
 800676e:	fba3 1302 	umull	r1, r3, r3, r2
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	2164      	movs	r1, #100	; 0x64
 8006776:	fb01 f303 	mul.w	r3, r1, r3
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	3332      	adds	r3, #50	; 0x32
 8006780:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4422      	add	r2, r4
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	bf00      	nop
 8006798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a2:	bf00      	nop
 80067a4:	51eb851f 	.word	0x51eb851f

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	; (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000014 	.word	0x20000014

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	; (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	; (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	; (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	; (80067f8 <__libc_init_array+0x44>)
 80067c8:	f001 fa00 	bl	8007bcc <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	08007e24 	.word	0x08007e24
 80067f0:	08007e24 	.word	0x08007e24
 80067f4:	08007e24 	.word	0x08007e24
 80067f8:	08007e28 	.word	0x08007e28

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <iprintf>:
 800680c:	b40f      	push	{r0, r1, r2, r3}
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <iprintf+0x2c>)
 8006810:	b513      	push	{r0, r1, r4, lr}
 8006812:	681c      	ldr	r4, [r3, #0]
 8006814:	b124      	cbz	r4, 8006820 <iprintf+0x14>
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	b913      	cbnz	r3, 8006820 <iprintf+0x14>
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fa7e 	bl	8006d1c <__sinit>
 8006820:	ab05      	add	r3, sp, #20
 8006822:	9a04      	ldr	r2, [sp, #16]
 8006824:	68a1      	ldr	r1, [r4, #8]
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fde3 	bl	80073f4 <_vfiprintf_r>
 800682e:	b002      	add	sp, #8
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	b004      	add	sp, #16
 8006836:	4770      	bx	lr
 8006838:	20000014 	.word	0x20000014

0800683c <_puts_r>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	460e      	mov	r6, r1
 8006840:	4605      	mov	r5, r0
 8006842:	b118      	cbz	r0, 800684c <_puts_r+0x10>
 8006844:	6983      	ldr	r3, [r0, #24]
 8006846:	b90b      	cbnz	r3, 800684c <_puts_r+0x10>
 8006848:	f000 fa68 	bl	8006d1c <__sinit>
 800684c:	69ab      	ldr	r3, [r5, #24]
 800684e:	68ac      	ldr	r4, [r5, #8]
 8006850:	b913      	cbnz	r3, 8006858 <_puts_r+0x1c>
 8006852:	4628      	mov	r0, r5
 8006854:	f000 fa62 	bl	8006d1c <__sinit>
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <_puts_r+0xd0>)
 800685a:	429c      	cmp	r4, r3
 800685c:	d120      	bne.n	80068a0 <_puts_r+0x64>
 800685e:	686c      	ldr	r4, [r5, #4]
 8006860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006862:	07db      	lsls	r3, r3, #31
 8006864:	d405      	bmi.n	8006872 <_puts_r+0x36>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	0598      	lsls	r0, r3, #22
 800686a:	d402      	bmi.n	8006872 <_puts_r+0x36>
 800686c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800686e:	f000 faf3 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	0719      	lsls	r1, r3, #28
 8006876:	d51d      	bpl.n	80068b4 <_puts_r+0x78>
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	b1db      	cbz	r3, 80068b4 <_puts_r+0x78>
 800687c:	3e01      	subs	r6, #1
 800687e:	68a3      	ldr	r3, [r4, #8]
 8006880:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006884:	3b01      	subs	r3, #1
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	bb39      	cbnz	r1, 80068da <_puts_r+0x9e>
 800688a:	2b00      	cmp	r3, #0
 800688c:	da38      	bge.n	8006900 <_puts_r+0xc4>
 800688e:	4622      	mov	r2, r4
 8006890:	210a      	movs	r1, #10
 8006892:	4628      	mov	r0, r5
 8006894:	f000 f868 	bl	8006968 <__swbuf_r>
 8006898:	3001      	adds	r0, #1
 800689a:	d011      	beq.n	80068c0 <_puts_r+0x84>
 800689c:	250a      	movs	r5, #10
 800689e:	e011      	b.n	80068c4 <_puts_r+0x88>
 80068a0:	4b1b      	ldr	r3, [pc, #108]	; (8006910 <_puts_r+0xd4>)
 80068a2:	429c      	cmp	r4, r3
 80068a4:	d101      	bne.n	80068aa <_puts_r+0x6e>
 80068a6:	68ac      	ldr	r4, [r5, #8]
 80068a8:	e7da      	b.n	8006860 <_puts_r+0x24>
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <_puts_r+0xd8>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	bf08      	it	eq
 80068b0:	68ec      	ldreq	r4, [r5, #12]
 80068b2:	e7d5      	b.n	8006860 <_puts_r+0x24>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f8a8 	bl	8006a0c <__swsetup_r>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d0dd      	beq.n	800687c <_puts_r+0x40>
 80068c0:	f04f 35ff 	mov.w	r5, #4294967295
 80068c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068c6:	07da      	lsls	r2, r3, #31
 80068c8:	d405      	bmi.n	80068d6 <_puts_r+0x9a>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	059b      	lsls	r3, r3, #22
 80068ce:	d402      	bmi.n	80068d6 <_puts_r+0x9a>
 80068d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d2:	f000 fac2 	bl	8006e5a <__retarget_lock_release_recursive>
 80068d6:	4628      	mov	r0, r5
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da04      	bge.n	80068e8 <_puts_r+0xac>
 80068de:	69a2      	ldr	r2, [r4, #24]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	dc06      	bgt.n	80068f2 <_puts_r+0xb6>
 80068e4:	290a      	cmp	r1, #10
 80068e6:	d004      	beq.n	80068f2 <_puts_r+0xb6>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	7019      	strb	r1, [r3, #0]
 80068f0:	e7c5      	b.n	800687e <_puts_r+0x42>
 80068f2:	4622      	mov	r2, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f837 	bl	8006968 <__swbuf_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	d1bf      	bne.n	800687e <_puts_r+0x42>
 80068fe:	e7df      	b.n	80068c0 <_puts_r+0x84>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	250a      	movs	r5, #10
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	701d      	strb	r5, [r3, #0]
 800690a:	e7db      	b.n	80068c4 <_puts_r+0x88>
 800690c:	08007da8 	.word	0x08007da8
 8006910:	08007dc8 	.word	0x08007dc8
 8006914:	08007d88 	.word	0x08007d88

08006918 <puts>:
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <puts+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f7ff bf8d 	b.w	800683c <_puts_r>
 8006922:	bf00      	nop
 8006924:	20000014 	.word	0x20000014

08006928 <siprintf>:
 8006928:	b40e      	push	{r1, r2, r3}
 800692a:	b500      	push	{lr}
 800692c:	b09c      	sub	sp, #112	; 0x70
 800692e:	ab1d      	add	r3, sp, #116	; 0x74
 8006930:	9002      	str	r0, [sp, #8]
 8006932:	9006      	str	r0, [sp, #24]
 8006934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006938:	4809      	ldr	r0, [pc, #36]	; (8006960 <siprintf+0x38>)
 800693a:	9107      	str	r1, [sp, #28]
 800693c:	9104      	str	r1, [sp, #16]
 800693e:	4909      	ldr	r1, [pc, #36]	; (8006964 <siprintf+0x3c>)
 8006940:	f853 2b04 	ldr.w	r2, [r3], #4
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	6800      	ldr	r0, [r0, #0]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	a902      	add	r1, sp, #8
 800694c:	f000 fc28 	bl	80071a0 <_svfiprintf_r>
 8006950:	9b02      	ldr	r3, [sp, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	b01c      	add	sp, #112	; 0x70
 8006958:	f85d eb04 	ldr.w	lr, [sp], #4
 800695c:	b003      	add	sp, #12
 800695e:	4770      	bx	lr
 8006960:	20000014 	.word	0x20000014
 8006964:	ffff0208 	.word	0xffff0208

08006968 <__swbuf_r>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	460e      	mov	r6, r1
 800696c:	4614      	mov	r4, r2
 800696e:	4605      	mov	r5, r0
 8006970:	b118      	cbz	r0, 800697a <__swbuf_r+0x12>
 8006972:	6983      	ldr	r3, [r0, #24]
 8006974:	b90b      	cbnz	r3, 800697a <__swbuf_r+0x12>
 8006976:	f000 f9d1 	bl	8006d1c <__sinit>
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <__swbuf_r+0x98>)
 800697c:	429c      	cmp	r4, r3
 800697e:	d12b      	bne.n	80069d8 <__swbuf_r+0x70>
 8006980:	686c      	ldr	r4, [r5, #4]
 8006982:	69a3      	ldr	r3, [r4, #24]
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	071a      	lsls	r2, r3, #28
 800698a:	d52f      	bpl.n	80069ec <__swbuf_r+0x84>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b36b      	cbz	r3, 80069ec <__swbuf_r+0x84>
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	1ac0      	subs	r0, r0, r3
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	b2f6      	uxtb	r6, r6
 800699a:	4283      	cmp	r3, r0
 800699c:	4637      	mov	r7, r6
 800699e:	dc04      	bgt.n	80069aa <__swbuf_r+0x42>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f926 	bl	8006bf4 <_fflush_r>
 80069a8:	bb30      	cbnz	r0, 80069f8 <__swbuf_r+0x90>
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	701e      	strb	r6, [r3, #0]
 80069b8:	6963      	ldr	r3, [r4, #20]
 80069ba:	3001      	adds	r0, #1
 80069bc:	4283      	cmp	r3, r0
 80069be:	d004      	beq.n	80069ca <__swbuf_r+0x62>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d506      	bpl.n	80069d4 <__swbuf_r+0x6c>
 80069c6:	2e0a      	cmp	r6, #10
 80069c8:	d104      	bne.n	80069d4 <__swbuf_r+0x6c>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f911 	bl	8006bf4 <_fflush_r>
 80069d2:	b988      	cbnz	r0, 80069f8 <__swbuf_r+0x90>
 80069d4:	4638      	mov	r0, r7
 80069d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <__swbuf_r+0x9c>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d101      	bne.n	80069e2 <__swbuf_r+0x7a>
 80069de:	68ac      	ldr	r4, [r5, #8]
 80069e0:	e7cf      	b.n	8006982 <__swbuf_r+0x1a>
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <__swbuf_r+0xa0>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	bf08      	it	eq
 80069e8:	68ec      	ldreq	r4, [r5, #12]
 80069ea:	e7ca      	b.n	8006982 <__swbuf_r+0x1a>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f80c 	bl	8006a0c <__swsetup_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0cb      	beq.n	8006990 <__swbuf_r+0x28>
 80069f8:	f04f 37ff 	mov.w	r7, #4294967295
 80069fc:	e7ea      	b.n	80069d4 <__swbuf_r+0x6c>
 80069fe:	bf00      	nop
 8006a00:	08007da8 	.word	0x08007da8
 8006a04:	08007dc8 	.word	0x08007dc8
 8006a08:	08007d88 	.word	0x08007d88

08006a0c <__swsetup_r>:
 8006a0c:	4b32      	ldr	r3, [pc, #200]	; (8006ad8 <__swsetup_r+0xcc>)
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	4606      	mov	r6, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	b125      	cbz	r5, 8006a22 <__swsetup_r+0x16>
 8006a18:	69ab      	ldr	r3, [r5, #24]
 8006a1a:	b913      	cbnz	r3, 8006a22 <__swsetup_r+0x16>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 f97d 	bl	8006d1c <__sinit>
 8006a22:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <__swsetup_r+0xd0>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d10f      	bne.n	8006a48 <__swsetup_r+0x3c>
 8006a28:	686c      	ldr	r4, [r5, #4]
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a30:	0719      	lsls	r1, r3, #28
 8006a32:	d42c      	bmi.n	8006a8e <__swsetup_r+0x82>
 8006a34:	06dd      	lsls	r5, r3, #27
 8006a36:	d411      	bmi.n	8006a5c <__swsetup_r+0x50>
 8006a38:	2309      	movs	r3, #9
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	e03e      	b.n	8006ac6 <__swsetup_r+0xba>
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <__swsetup_r+0xd4>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <__swsetup_r+0x46>
 8006a4e:	68ac      	ldr	r4, [r5, #8]
 8006a50:	e7eb      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <__swsetup_r+0xd8>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68ec      	ldreq	r4, [r5, #12]
 8006a5a:	e7e6      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a5c:	0758      	lsls	r0, r3, #29
 8006a5e:	d512      	bpl.n	8006a86 <__swsetup_r+0x7a>
 8006a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a62:	b141      	cbz	r1, 8006a76 <__swsetup_r+0x6a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__swsetup_r+0x66>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 fa5b 	bl	8006f28 <_free_r>
 8006a72:	2300      	movs	r3, #0
 8006a74:	6363      	str	r3, [r4, #52]	; 0x34
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	b94b      	cbnz	r3, 8006aa6 <__swsetup_r+0x9a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9c:	d003      	beq.n	8006aa6 <__swsetup_r+0x9a>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 fa01 	bl	8006ea8 <__smakebuf_r>
 8006aa6:	89a0      	ldrh	r0, [r4, #12]
 8006aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aac:	f010 0301 	ands.w	r3, r0, #1
 8006ab0:	d00a      	beq.n	8006ac8 <__swsetup_r+0xbc>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60a3      	str	r3, [r4, #8]
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	425b      	negs	r3, r3
 8006aba:	61a3      	str	r3, [r4, #24]
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b943      	cbnz	r3, 8006ad2 <__swsetup_r+0xc6>
 8006ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ac4:	d1ba      	bne.n	8006a3c <__swsetup_r+0x30>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	0781      	lsls	r1, r0, #30
 8006aca:	bf58      	it	pl
 8006acc:	6963      	ldrpl	r3, [r4, #20]
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	e7f4      	b.n	8006abc <__swsetup_r+0xb0>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e7f7      	b.n	8006ac6 <__swsetup_r+0xba>
 8006ad6:	bf00      	nop
 8006ad8:	20000014 	.word	0x20000014
 8006adc:	08007da8 	.word	0x08007da8
 8006ae0:	08007dc8 	.word	0x08007dc8
 8006ae4:	08007d88 	.word	0x08007d88

08006ae8 <__sflush_r>:
 8006ae8:	898a      	ldrh	r2, [r1, #12]
 8006aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	0710      	lsls	r0, r2, #28
 8006af2:	460c      	mov	r4, r1
 8006af4:	d458      	bmi.n	8006ba8 <__sflush_r+0xc0>
 8006af6:	684b      	ldr	r3, [r1, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc05      	bgt.n	8006b08 <__sflush_r+0x20>
 8006afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dc02      	bgt.n	8006b08 <__sflush_r+0x20>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d0f9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b14:	682f      	ldr	r7, [r5, #0]
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	d032      	beq.n	8006b80 <__sflush_r+0x98>
 8006b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	075a      	lsls	r2, r3, #29
 8006b20:	d505      	bpl.n	8006b2e <__sflush_r+0x46>
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	1ac0      	subs	r0, r0, r3
 8006b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b28:	b10b      	cbz	r3, 8006b2e <__sflush_r+0x46>
 8006b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4602      	mov	r2, r0
 8006b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b34:	6a21      	ldr	r1, [r4, #32]
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b0      	blx	r6
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	d106      	bne.n	8006b4e <__sflush_r+0x66>
 8006b40:	6829      	ldr	r1, [r5, #0]
 8006b42:	291d      	cmp	r1, #29
 8006b44:	d82c      	bhi.n	8006ba0 <__sflush_r+0xb8>
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <__sflush_r+0x108>)
 8006b48:	40ca      	lsrs	r2, r1
 8006b4a:	07d6      	lsls	r6, r2, #31
 8006b4c:	d528      	bpl.n	8006ba0 <__sflush_r+0xb8>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6062      	str	r2, [r4, #4]
 8006b52:	04d9      	lsls	r1, r3, #19
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	d504      	bpl.n	8006b64 <__sflush_r+0x7c>
 8006b5a:	1c42      	adds	r2, r0, #1
 8006b5c:	d101      	bne.n	8006b62 <__sflush_r+0x7a>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	b903      	cbnz	r3, 8006b64 <__sflush_r+0x7c>
 8006b62:	6560      	str	r0, [r4, #84]	; 0x54
 8006b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b66:	602f      	str	r7, [r5, #0]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d0ca      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <__sflush_r+0x92>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f9d7 	bl	8006f28 <_free_r>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b7e:	e7c1      	b.n	8006b04 <__sflush_r+0x1c>
 8006b80:	6a21      	ldr	r1, [r4, #32]
 8006b82:	2301      	movs	r3, #1
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c41      	adds	r1, r0, #1
 8006b8a:	d1c7      	bne.n	8006b1c <__sflush_r+0x34>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c4      	beq.n	8006b1c <__sflush_r+0x34>
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d001      	beq.n	8006b9a <__sflush_r+0xb2>
 8006b96:	2b16      	cmp	r3, #22
 8006b98:	d101      	bne.n	8006b9e <__sflush_r+0xb6>
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	e7b1      	b.n	8006b02 <__sflush_r+0x1a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	e7ad      	b.n	8006b04 <__sflush_r+0x1c>
 8006ba8:	690f      	ldr	r7, [r1, #16]
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	d0a9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006bae:	0793      	lsls	r3, r2, #30
 8006bb0:	680e      	ldr	r6, [r1, #0]
 8006bb2:	bf08      	it	eq
 8006bb4:	694b      	ldreq	r3, [r1, #20]
 8006bb6:	600f      	str	r7, [r1, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	eba6 0807 	sub.w	r8, r6, r7
 8006bc0:	608b      	str	r3, [r1, #8]
 8006bc2:	f1b8 0f00 	cmp.w	r8, #0
 8006bc6:	dd9c      	ble.n	8006b02 <__sflush_r+0x1a>
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bcc:	4643      	mov	r3, r8
 8006bce:	463a      	mov	r2, r7
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dc06      	bgt.n	8006be6 <__sflush_r+0xfe>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e78e      	b.n	8006b04 <__sflush_r+0x1c>
 8006be6:	4407      	add	r7, r0
 8006be8:	eba8 0800 	sub.w	r8, r8, r0
 8006bec:	e7e9      	b.n	8006bc2 <__sflush_r+0xda>
 8006bee:	bf00      	nop
 8006bf0:	20400001 	.word	0x20400001

08006bf4 <_fflush_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b913      	cbnz	r3, 8006c04 <_fflush_r+0x10>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	4628      	mov	r0, r5
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	b118      	cbz	r0, 8006c0e <_fflush_r+0x1a>
 8006c06:	6983      	ldr	r3, [r0, #24]
 8006c08:	b90b      	cbnz	r3, 8006c0e <_fflush_r+0x1a>
 8006c0a:	f000 f887 	bl	8006d1c <__sinit>
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <_fflush_r+0x6c>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d11b      	bne.n	8006c4c <_fflush_r+0x58>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0ef      	beq.n	8006bfe <_fflush_r+0xa>
 8006c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c20:	07d0      	lsls	r0, r2, #31
 8006c22:	d404      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c24:	0599      	lsls	r1, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f000 f915 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4621      	mov	r1, r4
 8006c32:	f7ff ff59 	bl	8006ae8 <__sflush_r>
 8006c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c38:	07da      	lsls	r2, r3, #31
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	d4e0      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	059b      	lsls	r3, r3, #22
 8006c42:	d4dd      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f000 f908 	bl	8006e5a <__retarget_lock_release_recursive>
 8006c4a:	e7d9      	b.n	8006c00 <_fflush_r+0xc>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_fflush_r+0x70>)
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	d101      	bne.n	8006c56 <_fflush_r+0x62>
 8006c52:	68ac      	ldr	r4, [r5, #8]
 8006c54:	e7df      	b.n	8006c16 <_fflush_r+0x22>
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <_fflush_r+0x74>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	bf08      	it	eq
 8006c5c:	68ec      	ldreq	r4, [r5, #12]
 8006c5e:	e7da      	b.n	8006c16 <_fflush_r+0x22>
 8006c60:	08007da8 	.word	0x08007da8
 8006c64:	08007dc8 	.word	0x08007dc8
 8006c68:	08007d88 	.word	0x08007d88

08006c6c <std>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	e9c0 3300 	strd	r3, r3, [r0]
 8006c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c7a:	6083      	str	r3, [r0, #8]
 8006c7c:	8181      	strh	r1, [r0, #12]
 8006c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c80:	81c2      	strh	r2, [r0, #14]
 8006c82:	6183      	str	r3, [r0, #24]
 8006c84:	4619      	mov	r1, r3
 8006c86:	2208      	movs	r2, #8
 8006c88:	305c      	adds	r0, #92	; 0x5c
 8006c8a:	f7ff fdb7 	bl	80067fc <memset>
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <std+0x38>)
 8006c90:	6263      	str	r3, [r4, #36]	; 0x24
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <std+0x3c>)
 8006c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x40>)
 8006c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <std+0x44>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	bf00      	nop
 8006ca4:	0800799d 	.word	0x0800799d
 8006ca8:	080079bf 	.word	0x080079bf
 8006cac:	080079f7 	.word	0x080079f7
 8006cb0:	08007a1b 	.word	0x08007a1b

08006cb4 <_cleanup_r>:
 8006cb4:	4901      	ldr	r1, [pc, #4]	; (8006cbc <_cleanup_r+0x8>)
 8006cb6:	f000 b8af 	b.w	8006e18 <_fwalk_reent>
 8006cba:	bf00      	nop
 8006cbc:	08006bf5 	.word	0x08006bf5

08006cc0 <__sfmoreglue>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	2268      	movs	r2, #104	; 0x68
 8006cc4:	1e4d      	subs	r5, r1, #1
 8006cc6:	4355      	muls	r5, r2
 8006cc8:	460e      	mov	r6, r1
 8006cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cce:	f000 f997 	bl	8007000 <_malloc_r>
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	b140      	cbz	r0, 8006ce8 <__sfmoreglue+0x28>
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cdc:	300c      	adds	r0, #12
 8006cde:	60a0      	str	r0, [r4, #8]
 8006ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ce4:	f7ff fd8a 	bl	80067fc <memset>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	bd70      	pop	{r4, r5, r6, pc}

08006cec <__sfp_lock_acquire>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sfp_lock_acquire+0x8>)
 8006cee:	f000 b8b3 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	200002b9 	.word	0x200002b9

08006cf8 <__sfp_lock_release>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__sfp_lock_release+0x8>)
 8006cfa:	f000 b8ae 	b.w	8006e5a <__retarget_lock_release_recursive>
 8006cfe:	bf00      	nop
 8006d00:	200002b9 	.word	0x200002b9

08006d04 <__sinit_lock_acquire>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__sinit_lock_acquire+0x8>)
 8006d06:	f000 b8a7 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	200002ba 	.word	0x200002ba

08006d10 <__sinit_lock_release>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__sinit_lock_release+0x8>)
 8006d12:	f000 b8a2 	b.w	8006e5a <__retarget_lock_release_recursive>
 8006d16:	bf00      	nop
 8006d18:	200002ba 	.word	0x200002ba

08006d1c <__sinit>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4604      	mov	r4, r0
 8006d20:	f7ff fff0 	bl	8006d04 <__sinit_lock_acquire>
 8006d24:	69a3      	ldr	r3, [r4, #24]
 8006d26:	b11b      	cbz	r3, 8006d30 <__sinit+0x14>
 8006d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d2c:	f7ff bff0 	b.w	8006d10 <__sinit_lock_release>
 8006d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d34:	6523      	str	r3, [r4, #80]	; 0x50
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <__sinit+0x68>)
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <__sinit+0x6c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	bf04      	itt	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	61a3      	streq	r3, [r4, #24]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f820 	bl	8006d8c <__sfp>
 8006d4c:	6060      	str	r0, [r4, #4]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f81c 	bl	8006d8c <__sfp>
 8006d54:	60a0      	str	r0, [r4, #8]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f818 	bl	8006d8c <__sfp>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	60e0      	str	r0, [r4, #12]
 8006d60:	2104      	movs	r1, #4
 8006d62:	6860      	ldr	r0, [r4, #4]
 8006d64:	f7ff ff82 	bl	8006c6c <std>
 8006d68:	68a0      	ldr	r0, [r4, #8]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2109      	movs	r1, #9
 8006d6e:	f7ff ff7d 	bl	8006c6c <std>
 8006d72:	68e0      	ldr	r0, [r4, #12]
 8006d74:	2202      	movs	r2, #2
 8006d76:	2112      	movs	r1, #18
 8006d78:	f7ff ff78 	bl	8006c6c <std>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	61a3      	str	r3, [r4, #24]
 8006d80:	e7d2      	b.n	8006d28 <__sinit+0xc>
 8006d82:	bf00      	nop
 8006d84:	08007d84 	.word	0x08007d84
 8006d88:	08006cb5 	.word	0x08006cb5

08006d8c <__sfp>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	4607      	mov	r7, r0
 8006d90:	f7ff ffac 	bl	8006cec <__sfp_lock_acquire>
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <__sfp+0x84>)
 8006d96:	681e      	ldr	r6, [r3, #0]
 8006d98:	69b3      	ldr	r3, [r6, #24]
 8006d9a:	b913      	cbnz	r3, 8006da2 <__sfp+0x16>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff ffbd 	bl	8006d1c <__sinit>
 8006da2:	3648      	adds	r6, #72	; 0x48
 8006da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	d503      	bpl.n	8006db4 <__sfp+0x28>
 8006dac:	6833      	ldr	r3, [r6, #0]
 8006dae:	b30b      	cbz	r3, 8006df4 <__sfp+0x68>
 8006db0:	6836      	ldr	r6, [r6, #0]
 8006db2:	e7f7      	b.n	8006da4 <__sfp+0x18>
 8006db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006db8:	b9d5      	cbnz	r5, 8006df0 <__sfp+0x64>
 8006dba:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <__sfp+0x88>)
 8006dbc:	60e3      	str	r3, [r4, #12]
 8006dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8006dc4:	f000 f847 	bl	8006e56 <__retarget_lock_init_recursive>
 8006dc8:	f7ff ff96 	bl	8006cf8 <__sfp_lock_release>
 8006dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dd4:	6025      	str	r5, [r4, #0]
 8006dd6:	61a5      	str	r5, [r4, #24]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006de0:	f7ff fd0c 	bl	80067fc <memset>
 8006de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dec:	4620      	mov	r0, r4
 8006dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df0:	3468      	adds	r4, #104	; 0x68
 8006df2:	e7d9      	b.n	8006da8 <__sfp+0x1c>
 8006df4:	2104      	movs	r1, #4
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7ff ff62 	bl	8006cc0 <__sfmoreglue>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	6030      	str	r0, [r6, #0]
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1d5      	bne.n	8006db0 <__sfp+0x24>
 8006e04:	f7ff ff78 	bl	8006cf8 <__sfp_lock_release>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	e7ee      	b.n	8006dec <__sfp+0x60>
 8006e0e:	bf00      	nop
 8006e10:	08007d84 	.word	0x08007d84
 8006e14:	ffff0001 	.word	0xffff0001

08006e18 <_fwalk_reent>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	4688      	mov	r8, r1
 8006e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e24:	2700      	movs	r7, #0
 8006e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e2e:	d505      	bpl.n	8006e3c <_fwalk_reent+0x24>
 8006e30:	6824      	ldr	r4, [r4, #0]
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	d1f7      	bne.n	8006e26 <_fwalk_reent+0xe>
 8006e36:	4638      	mov	r0, r7
 8006e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3c:	89ab      	ldrh	r3, [r5, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d907      	bls.n	8006e52 <_fwalk_reent+0x3a>
 8006e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e46:	3301      	adds	r3, #1
 8006e48:	d003      	beq.n	8006e52 <_fwalk_reent+0x3a>
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	47c0      	blx	r8
 8006e50:	4307      	orrs	r7, r0
 8006e52:	3568      	adds	r5, #104	; 0x68
 8006e54:	e7e9      	b.n	8006e2a <_fwalk_reent+0x12>

08006e56 <__retarget_lock_init_recursive>:
 8006e56:	4770      	bx	lr

08006e58 <__retarget_lock_acquire_recursive>:
 8006e58:	4770      	bx	lr

08006e5a <__retarget_lock_release_recursive>:
 8006e5a:	4770      	bx	lr

08006e5c <__swhatbuf_r>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	460e      	mov	r6, r1
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	2900      	cmp	r1, #0
 8006e66:	b096      	sub	sp, #88	; 0x58
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	da08      	bge.n	8006e80 <__swhatbuf_r+0x24>
 8006e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	061a      	lsls	r2, r3, #24
 8006e78:	d410      	bmi.n	8006e9c <__swhatbuf_r+0x40>
 8006e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e7e:	e00e      	b.n	8006e9e <__swhatbuf_r+0x42>
 8006e80:	466a      	mov	r2, sp
 8006e82:	f000 fdf1 	bl	8007a68 <_fstat_r>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	dbf1      	blt.n	8006e6e <__swhatbuf_r+0x12>
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e94:	425a      	negs	r2, r3
 8006e96:	415a      	adcs	r2, r3
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	e7ee      	b.n	8006e7a <__swhatbuf_r+0x1e>
 8006e9c:	2340      	movs	r3, #64	; 0x40
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	b016      	add	sp, #88	; 0x58
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ea8 <__smakebuf_r>:
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eac:	079d      	lsls	r5, r3, #30
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	d507      	bpl.n	8006ec4 <__smakebuf_r+0x1c>
 8006eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	6163      	str	r3, [r4, #20]
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	ab01      	add	r3, sp, #4
 8006ec6:	466a      	mov	r2, sp
 8006ec8:	f7ff ffc8 	bl	8006e5c <__swhatbuf_r>
 8006ecc:	9900      	ldr	r1, [sp, #0]
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f895 	bl	8007000 <_malloc_r>
 8006ed6:	b948      	cbnz	r0, 8006eec <__smakebuf_r+0x44>
 8006ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006edc:	059a      	lsls	r2, r3, #22
 8006ede:	d4ef      	bmi.n	8006ec0 <__smakebuf_r+0x18>
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	f043 0302 	orr.w	r3, r3, #2
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	e7e3      	b.n	8006eb4 <__smakebuf_r+0xc>
 8006eec:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <__smakebuf_r+0x7c>)
 8006eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	9b00      	ldr	r3, [sp, #0]
 8006efc:	6163      	str	r3, [r4, #20]
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	6120      	str	r0, [r4, #16]
 8006f02:	b15b      	cbz	r3, 8006f1c <__smakebuf_r+0x74>
 8006f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 fdbf 	bl	8007a8c <_isatty_r>
 8006f0e:	b128      	cbz	r0, 8006f1c <__smakebuf_r+0x74>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	89a0      	ldrh	r0, [r4, #12]
 8006f1e:	4305      	orrs	r5, r0
 8006f20:	81a5      	strh	r5, [r4, #12]
 8006f22:	e7cd      	b.n	8006ec0 <__smakebuf_r+0x18>
 8006f24:	08006cb5 	.word	0x08006cb5

08006f28 <_free_r>:
 8006f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	d044      	beq.n	8006fb8 <_free_r+0x90>
 8006f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f32:	9001      	str	r0, [sp, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f1a1 0404 	sub.w	r4, r1, #4
 8006f3a:	bfb8      	it	lt
 8006f3c:	18e4      	addlt	r4, r4, r3
 8006f3e:	f000 fdef 	bl	8007b20 <__malloc_lock>
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <_free_r+0x94>)
 8006f44:	9801      	ldr	r0, [sp, #4]
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	b933      	cbnz	r3, 8006f58 <_free_r+0x30>
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	6014      	str	r4, [r2, #0]
 8006f4e:	b003      	add	sp, #12
 8006f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f54:	f000 bdea 	b.w	8007b2c <__malloc_unlock>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d908      	bls.n	8006f6e <_free_r+0x46>
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	1961      	adds	r1, r4, r5
 8006f60:	428b      	cmp	r3, r1
 8006f62:	bf01      	itttt	eq
 8006f64:	6819      	ldreq	r1, [r3, #0]
 8006f66:	685b      	ldreq	r3, [r3, #4]
 8006f68:	1949      	addeq	r1, r1, r5
 8006f6a:	6021      	streq	r1, [r4, #0]
 8006f6c:	e7ed      	b.n	8006f4a <_free_r+0x22>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b10b      	cbz	r3, 8006f78 <_free_r+0x50>
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d9fa      	bls.n	8006f6e <_free_r+0x46>
 8006f78:	6811      	ldr	r1, [r2, #0]
 8006f7a:	1855      	adds	r5, r2, r1
 8006f7c:	42a5      	cmp	r5, r4
 8006f7e:	d10b      	bne.n	8006f98 <_free_r+0x70>
 8006f80:	6824      	ldr	r4, [r4, #0]
 8006f82:	4421      	add	r1, r4
 8006f84:	1854      	adds	r4, r2, r1
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	d1e0      	bne.n	8006f4e <_free_r+0x26>
 8006f8c:	681c      	ldr	r4, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	6053      	str	r3, [r2, #4]
 8006f92:	4421      	add	r1, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	e7da      	b.n	8006f4e <_free_r+0x26>
 8006f98:	d902      	bls.n	8006fa0 <_free_r+0x78>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	e7d6      	b.n	8006f4e <_free_r+0x26>
 8006fa0:	6825      	ldr	r5, [r4, #0]
 8006fa2:	1961      	adds	r1, r4, r5
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	bf04      	itt	eq
 8006fa8:	6819      	ldreq	r1, [r3, #0]
 8006faa:	685b      	ldreq	r3, [r3, #4]
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	bf04      	itt	eq
 8006fb0:	1949      	addeq	r1, r1, r5
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	6054      	str	r4, [r2, #4]
 8006fb6:	e7ca      	b.n	8006f4e <_free_r+0x26>
 8006fb8:	b003      	add	sp, #12
 8006fba:	bd30      	pop	{r4, r5, pc}
 8006fbc:	200002bc 	.word	0x200002bc

08006fc0 <sbrk_aligned>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4e0e      	ldr	r6, [pc, #56]	; (8006ffc <sbrk_aligned+0x3c>)
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6831      	ldr	r1, [r6, #0]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b911      	cbnz	r1, 8006fd2 <sbrk_aligned+0x12>
 8006fcc:	f000 fcd6 	bl	800797c <_sbrk_r>
 8006fd0:	6030      	str	r0, [r6, #0]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 fcd1 	bl	800797c <_sbrk_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d00a      	beq.n	8006ff4 <sbrk_aligned+0x34>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d007      	beq.n	8006ff8 <sbrk_aligned+0x38>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fcc6 	bl	800797c <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d101      	bne.n	8006ff8 <sbrk_aligned+0x38>
 8006ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	200002c0 	.word	0x200002c0

08007000 <_malloc_r>:
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	1ccd      	adds	r5, r1, #3
 8007006:	f025 0503 	bic.w	r5, r5, #3
 800700a:	3508      	adds	r5, #8
 800700c:	2d0c      	cmp	r5, #12
 800700e:	bf38      	it	cc
 8007010:	250c      	movcc	r5, #12
 8007012:	2d00      	cmp	r5, #0
 8007014:	4607      	mov	r7, r0
 8007016:	db01      	blt.n	800701c <_malloc_r+0x1c>
 8007018:	42a9      	cmp	r1, r5
 800701a:	d905      	bls.n	8007028 <_malloc_r+0x28>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	2600      	movs	r6, #0
 8007022:	4630      	mov	r0, r6
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	4e2e      	ldr	r6, [pc, #184]	; (80070e4 <_malloc_r+0xe4>)
 800702a:	f000 fd79 	bl	8007b20 <__malloc_lock>
 800702e:	6833      	ldr	r3, [r6, #0]
 8007030:	461c      	mov	r4, r3
 8007032:	bb34      	cbnz	r4, 8007082 <_malloc_r+0x82>
 8007034:	4629      	mov	r1, r5
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff ffc2 	bl	8006fc0 <sbrk_aligned>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	4604      	mov	r4, r0
 8007040:	d14d      	bne.n	80070de <_malloc_r+0xde>
 8007042:	6834      	ldr	r4, [r6, #0]
 8007044:	4626      	mov	r6, r4
 8007046:	2e00      	cmp	r6, #0
 8007048:	d140      	bne.n	80070cc <_malloc_r+0xcc>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	4631      	mov	r1, r6
 800704e:	4638      	mov	r0, r7
 8007050:	eb04 0803 	add.w	r8, r4, r3
 8007054:	f000 fc92 	bl	800797c <_sbrk_r>
 8007058:	4580      	cmp	r8, r0
 800705a:	d13a      	bne.n	80070d2 <_malloc_r+0xd2>
 800705c:	6821      	ldr	r1, [r4, #0]
 800705e:	3503      	adds	r5, #3
 8007060:	1a6d      	subs	r5, r5, r1
 8007062:	f025 0503 	bic.w	r5, r5, #3
 8007066:	3508      	adds	r5, #8
 8007068:	2d0c      	cmp	r5, #12
 800706a:	bf38      	it	cc
 800706c:	250c      	movcc	r5, #12
 800706e:	4629      	mov	r1, r5
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff ffa5 	bl	8006fc0 <sbrk_aligned>
 8007076:	3001      	adds	r0, #1
 8007078:	d02b      	beq.n	80070d2 <_malloc_r+0xd2>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	442b      	add	r3, r5
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	e00e      	b.n	80070a0 <_malloc_r+0xa0>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	1b52      	subs	r2, r2, r5
 8007086:	d41e      	bmi.n	80070c6 <_malloc_r+0xc6>
 8007088:	2a0b      	cmp	r2, #11
 800708a:	d916      	bls.n	80070ba <_malloc_r+0xba>
 800708c:	1961      	adds	r1, r4, r5
 800708e:	42a3      	cmp	r3, r4
 8007090:	6025      	str	r5, [r4, #0]
 8007092:	bf18      	it	ne
 8007094:	6059      	strne	r1, [r3, #4]
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	bf08      	it	eq
 800709a:	6031      	streq	r1, [r6, #0]
 800709c:	5162      	str	r2, [r4, r5]
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	4638      	mov	r0, r7
 80070a2:	f104 060b 	add.w	r6, r4, #11
 80070a6:	f000 fd41 	bl	8007b2c <__malloc_unlock>
 80070aa:	f026 0607 	bic.w	r6, r6, #7
 80070ae:	1d23      	adds	r3, r4, #4
 80070b0:	1af2      	subs	r2, r6, r3
 80070b2:	d0b6      	beq.n	8007022 <_malloc_r+0x22>
 80070b4:	1b9b      	subs	r3, r3, r6
 80070b6:	50a3      	str	r3, [r4, r2]
 80070b8:	e7b3      	b.n	8007022 <_malloc_r+0x22>
 80070ba:	6862      	ldr	r2, [r4, #4]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	bf0c      	ite	eq
 80070c0:	6032      	streq	r2, [r6, #0]
 80070c2:	605a      	strne	r2, [r3, #4]
 80070c4:	e7ec      	b.n	80070a0 <_malloc_r+0xa0>
 80070c6:	4623      	mov	r3, r4
 80070c8:	6864      	ldr	r4, [r4, #4]
 80070ca:	e7b2      	b.n	8007032 <_malloc_r+0x32>
 80070cc:	4634      	mov	r4, r6
 80070ce:	6876      	ldr	r6, [r6, #4]
 80070d0:	e7b9      	b.n	8007046 <_malloc_r+0x46>
 80070d2:	230c      	movs	r3, #12
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	4638      	mov	r0, r7
 80070d8:	f000 fd28 	bl	8007b2c <__malloc_unlock>
 80070dc:	e7a1      	b.n	8007022 <_malloc_r+0x22>
 80070de:	6025      	str	r5, [r4, #0]
 80070e0:	e7de      	b.n	80070a0 <_malloc_r+0xa0>
 80070e2:	bf00      	nop
 80070e4:	200002bc 	.word	0x200002bc

080070e8 <__ssputs_r>:
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	688e      	ldr	r6, [r1, #8]
 80070ee:	429e      	cmp	r6, r3
 80070f0:	4682      	mov	sl, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4690      	mov	r8, r2
 80070f6:	461f      	mov	r7, r3
 80070f8:	d838      	bhi.n	800716c <__ssputs_r+0x84>
 80070fa:	898a      	ldrh	r2, [r1, #12]
 80070fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007100:	d032      	beq.n	8007168 <__ssputs_r+0x80>
 8007102:	6825      	ldr	r5, [r4, #0]
 8007104:	6909      	ldr	r1, [r1, #16]
 8007106:	eba5 0901 	sub.w	r9, r5, r1
 800710a:	6965      	ldr	r5, [r4, #20]
 800710c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007114:	3301      	adds	r3, #1
 8007116:	444b      	add	r3, r9
 8007118:	106d      	asrs	r5, r5, #1
 800711a:	429d      	cmp	r5, r3
 800711c:	bf38      	it	cc
 800711e:	461d      	movcc	r5, r3
 8007120:	0553      	lsls	r3, r2, #21
 8007122:	d531      	bpl.n	8007188 <__ssputs_r+0xa0>
 8007124:	4629      	mov	r1, r5
 8007126:	f7ff ff6b 	bl	8007000 <_malloc_r>
 800712a:	4606      	mov	r6, r0
 800712c:	b950      	cbnz	r0, 8007144 <__ssputs_r+0x5c>
 800712e:	230c      	movs	r3, #12
 8007130:	f8ca 3000 	str.w	r3, [sl]
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007144:	6921      	ldr	r1, [r4, #16]
 8007146:	464a      	mov	r2, r9
 8007148:	f000 fcc2 	bl	8007ad0 <memcpy>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	6126      	str	r6, [r4, #16]
 800715a:	6165      	str	r5, [r4, #20]
 800715c:	444e      	add	r6, r9
 800715e:	eba5 0509 	sub.w	r5, r5, r9
 8007162:	6026      	str	r6, [r4, #0]
 8007164:	60a5      	str	r5, [r4, #8]
 8007166:	463e      	mov	r6, r7
 8007168:	42be      	cmp	r6, r7
 800716a:	d900      	bls.n	800716e <__ssputs_r+0x86>
 800716c:	463e      	mov	r6, r7
 800716e:	6820      	ldr	r0, [r4, #0]
 8007170:	4632      	mov	r2, r6
 8007172:	4641      	mov	r1, r8
 8007174:	f000 fcba 	bl	8007aec <memmove>
 8007178:	68a3      	ldr	r3, [r4, #8]
 800717a:	1b9b      	subs	r3, r3, r6
 800717c:	60a3      	str	r3, [r4, #8]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	4433      	add	r3, r6
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	2000      	movs	r0, #0
 8007186:	e7db      	b.n	8007140 <__ssputs_r+0x58>
 8007188:	462a      	mov	r2, r5
 800718a:	f000 fcd5 	bl	8007b38 <_realloc_r>
 800718e:	4606      	mov	r6, r0
 8007190:	2800      	cmp	r0, #0
 8007192:	d1e1      	bne.n	8007158 <__ssputs_r+0x70>
 8007194:	6921      	ldr	r1, [r4, #16]
 8007196:	4650      	mov	r0, sl
 8007198:	f7ff fec6 	bl	8006f28 <_free_r>
 800719c:	e7c7      	b.n	800712e <__ssputs_r+0x46>
	...

080071a0 <_svfiprintf_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	4698      	mov	r8, r3
 80071a6:	898b      	ldrh	r3, [r1, #12]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	b09d      	sub	sp, #116	; 0x74
 80071ac:	4607      	mov	r7, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	4614      	mov	r4, r2
 80071b2:	d50e      	bpl.n	80071d2 <_svfiprintf_r+0x32>
 80071b4:	690b      	ldr	r3, [r1, #16]
 80071b6:	b963      	cbnz	r3, 80071d2 <_svfiprintf_r+0x32>
 80071b8:	2140      	movs	r1, #64	; 0x40
 80071ba:	f7ff ff21 	bl	8007000 <_malloc_r>
 80071be:	6028      	str	r0, [r5, #0]
 80071c0:	6128      	str	r0, [r5, #16]
 80071c2:	b920      	cbnz	r0, 80071ce <_svfiprintf_r+0x2e>
 80071c4:	230c      	movs	r3, #12
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	e0d1      	b.n	8007372 <_svfiprintf_r+0x1d2>
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	616b      	str	r3, [r5, #20]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	2320      	movs	r3, #32
 80071d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e0:	2330      	movs	r3, #48	; 0x30
 80071e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800738c <_svfiprintf_r+0x1ec>
 80071e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ea:	f04f 0901 	mov.w	r9, #1
 80071ee:	4623      	mov	r3, r4
 80071f0:	469a      	mov	sl, r3
 80071f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f6:	b10a      	cbz	r2, 80071fc <_svfiprintf_r+0x5c>
 80071f8:	2a25      	cmp	r2, #37	; 0x25
 80071fa:	d1f9      	bne.n	80071f0 <_svfiprintf_r+0x50>
 80071fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007200:	d00b      	beq.n	800721a <_svfiprintf_r+0x7a>
 8007202:	465b      	mov	r3, fp
 8007204:	4622      	mov	r2, r4
 8007206:	4629      	mov	r1, r5
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ff6d 	bl	80070e8 <__ssputs_r>
 800720e:	3001      	adds	r0, #1
 8007210:	f000 80aa 	beq.w	8007368 <_svfiprintf_r+0x1c8>
 8007214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007216:	445a      	add	r2, fp
 8007218:	9209      	str	r2, [sp, #36]	; 0x24
 800721a:	f89a 3000 	ldrb.w	r3, [sl]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80a2 	beq.w	8007368 <_svfiprintf_r+0x1c8>
 8007224:	2300      	movs	r3, #0
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722e:	f10a 0a01 	add.w	sl, sl, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	9307      	str	r3, [sp, #28]
 8007236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800723a:	931a      	str	r3, [sp, #104]	; 0x68
 800723c:	4654      	mov	r4, sl
 800723e:	2205      	movs	r2, #5
 8007240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007244:	4851      	ldr	r0, [pc, #324]	; (800738c <_svfiprintf_r+0x1ec>)
 8007246:	f7f8 ffdb 	bl	8000200 <memchr>
 800724a:	9a04      	ldr	r2, [sp, #16]
 800724c:	b9d8      	cbnz	r0, 8007286 <_svfiprintf_r+0xe6>
 800724e:	06d0      	lsls	r0, r2, #27
 8007250:	bf44      	itt	mi
 8007252:	2320      	movmi	r3, #32
 8007254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007258:	0711      	lsls	r1, r2, #28
 800725a:	bf44      	itt	mi
 800725c:	232b      	movmi	r3, #43	; 0x2b
 800725e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007262:	f89a 3000 	ldrb.w	r3, [sl]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d015      	beq.n	8007296 <_svfiprintf_r+0xf6>
 800726a:	9a07      	ldr	r2, [sp, #28]
 800726c:	4654      	mov	r4, sl
 800726e:	2000      	movs	r0, #0
 8007270:	f04f 0c0a 	mov.w	ip, #10
 8007274:	4621      	mov	r1, r4
 8007276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727a:	3b30      	subs	r3, #48	; 0x30
 800727c:	2b09      	cmp	r3, #9
 800727e:	d94e      	bls.n	800731e <_svfiprintf_r+0x17e>
 8007280:	b1b0      	cbz	r0, 80072b0 <_svfiprintf_r+0x110>
 8007282:	9207      	str	r2, [sp, #28]
 8007284:	e014      	b.n	80072b0 <_svfiprintf_r+0x110>
 8007286:	eba0 0308 	sub.w	r3, r0, r8
 800728a:	fa09 f303 	lsl.w	r3, r9, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	46a2      	mov	sl, r4
 8007294:	e7d2      	b.n	800723c <_svfiprintf_r+0x9c>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	9103      	str	r1, [sp, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfbb      	ittet	lt
 80072a2:	425b      	neglt	r3, r3
 80072a4:	f042 0202 	orrlt.w	r2, r2, #2
 80072a8:	9307      	strge	r3, [sp, #28]
 80072aa:	9307      	strlt	r3, [sp, #28]
 80072ac:	bfb8      	it	lt
 80072ae:	9204      	strlt	r2, [sp, #16]
 80072b0:	7823      	ldrb	r3, [r4, #0]
 80072b2:	2b2e      	cmp	r3, #46	; 0x2e
 80072b4:	d10c      	bne.n	80072d0 <_svfiprintf_r+0x130>
 80072b6:	7863      	ldrb	r3, [r4, #1]
 80072b8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ba:	d135      	bne.n	8007328 <_svfiprintf_r+0x188>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9203      	str	r2, [sp, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb8      	it	lt
 80072c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072cc:	3402      	adds	r4, #2
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800739c <_svfiprintf_r+0x1fc>
 80072d4:	7821      	ldrb	r1, [r4, #0]
 80072d6:	2203      	movs	r2, #3
 80072d8:	4650      	mov	r0, sl
 80072da:	f7f8 ff91 	bl	8000200 <memchr>
 80072de:	b140      	cbz	r0, 80072f2 <_svfiprintf_r+0x152>
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	eba0 000a 	sub.w	r0, r0, sl
 80072e6:	fa03 f000 	lsl.w	r0, r3, r0
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	4303      	orrs	r3, r0
 80072ee:	3401      	adds	r4, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4826      	ldr	r0, [pc, #152]	; (8007390 <_svfiprintf_r+0x1f0>)
 80072f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072fc:	2206      	movs	r2, #6
 80072fe:	f7f8 ff7f 	bl	8000200 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d038      	beq.n	8007378 <_svfiprintf_r+0x1d8>
 8007306:	4b23      	ldr	r3, [pc, #140]	; (8007394 <_svfiprintf_r+0x1f4>)
 8007308:	bb1b      	cbnz	r3, 8007352 <_svfiprintf_r+0x1b2>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	4433      	add	r3, r6
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	e767      	b.n	80071ee <_svfiprintf_r+0x4e>
 800731e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007322:	460c      	mov	r4, r1
 8007324:	2001      	movs	r0, #1
 8007326:	e7a5      	b.n	8007274 <_svfiprintf_r+0xd4>
 8007328:	2300      	movs	r3, #0
 800732a:	3401      	adds	r4, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0c0a 	mov.w	ip, #10
 8007334:	4620      	mov	r0, r4
 8007336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733a:	3a30      	subs	r2, #48	; 0x30
 800733c:	2a09      	cmp	r2, #9
 800733e:	d903      	bls.n	8007348 <_svfiprintf_r+0x1a8>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0c5      	beq.n	80072d0 <_svfiprintf_r+0x130>
 8007344:	9105      	str	r1, [sp, #20]
 8007346:	e7c3      	b.n	80072d0 <_svfiprintf_r+0x130>
 8007348:	fb0c 2101 	mla	r1, ip, r1, r2
 800734c:	4604      	mov	r4, r0
 800734e:	2301      	movs	r3, #1
 8007350:	e7f0      	b.n	8007334 <_svfiprintf_r+0x194>
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <_svfiprintf_r+0x1f8>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4638      	mov	r0, r7
 800735e:	f3af 8000 	nop.w
 8007362:	1c42      	adds	r2, r0, #1
 8007364:	4606      	mov	r6, r0
 8007366:	d1d6      	bne.n	8007316 <_svfiprintf_r+0x176>
 8007368:	89ab      	ldrh	r3, [r5, #12]
 800736a:	065b      	lsls	r3, r3, #25
 800736c:	f53f af2c 	bmi.w	80071c8 <_svfiprintf_r+0x28>
 8007370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007372:	b01d      	add	sp, #116	; 0x74
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	462a      	mov	r2, r5
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <_svfiprintf_r+0x1f8>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4638      	mov	r0, r7
 8007384:	f000 f9d4 	bl	8007730 <_printf_i>
 8007388:	e7eb      	b.n	8007362 <_svfiprintf_r+0x1c2>
 800738a:	bf00      	nop
 800738c:	08007de8 	.word	0x08007de8
 8007390:	08007df2 	.word	0x08007df2
 8007394:	00000000 	.word	0x00000000
 8007398:	080070e9 	.word	0x080070e9
 800739c:	08007dee 	.word	0x08007dee

080073a0 <__sfputc_r>:
 80073a0:	6893      	ldr	r3, [r2, #8]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	b410      	push	{r4}
 80073a8:	6093      	str	r3, [r2, #8]
 80073aa:	da08      	bge.n	80073be <__sfputc_r+0x1e>
 80073ac:	6994      	ldr	r4, [r2, #24]
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	db01      	blt.n	80073b6 <__sfputc_r+0x16>
 80073b2:	290a      	cmp	r1, #10
 80073b4:	d103      	bne.n	80073be <__sfputc_r+0x1e>
 80073b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ba:	f7ff bad5 	b.w	8006968 <__swbuf_r>
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	1c58      	adds	r0, r3, #1
 80073c2:	6010      	str	r0, [r2, #0]
 80073c4:	7019      	strb	r1, [r3, #0]
 80073c6:	4608      	mov	r0, r1
 80073c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <__sfputs_r>:
 80073ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d0:	4606      	mov	r6, r0
 80073d2:	460f      	mov	r7, r1
 80073d4:	4614      	mov	r4, r2
 80073d6:	18d5      	adds	r5, r2, r3
 80073d8:	42ac      	cmp	r4, r5
 80073da:	d101      	bne.n	80073e0 <__sfputs_r+0x12>
 80073dc:	2000      	movs	r0, #0
 80073de:	e007      	b.n	80073f0 <__sfputs_r+0x22>
 80073e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e4:	463a      	mov	r2, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ffda 	bl	80073a0 <__sfputc_r>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d1f3      	bne.n	80073d8 <__sfputs_r+0xa>
 80073f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f4 <_vfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	b09d      	sub	sp, #116	; 0x74
 80073fc:	4614      	mov	r4, r2
 80073fe:	4698      	mov	r8, r3
 8007400:	4606      	mov	r6, r0
 8007402:	b118      	cbz	r0, 800740c <_vfiprintf_r+0x18>
 8007404:	6983      	ldr	r3, [r0, #24]
 8007406:	b90b      	cbnz	r3, 800740c <_vfiprintf_r+0x18>
 8007408:	f7ff fc88 	bl	8006d1c <__sinit>
 800740c:	4b89      	ldr	r3, [pc, #548]	; (8007634 <_vfiprintf_r+0x240>)
 800740e:	429d      	cmp	r5, r3
 8007410:	d11b      	bne.n	800744a <_vfiprintf_r+0x56>
 8007412:	6875      	ldr	r5, [r6, #4]
 8007414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d405      	bmi.n	8007426 <_vfiprintf_r+0x32>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	059a      	lsls	r2, r3, #22
 800741e:	d402      	bmi.n	8007426 <_vfiprintf_r+0x32>
 8007420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007422:	f7ff fd19 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	071b      	lsls	r3, r3, #28
 800742a:	d501      	bpl.n	8007430 <_vfiprintf_r+0x3c>
 800742c:	692b      	ldr	r3, [r5, #16]
 800742e:	b9eb      	cbnz	r3, 800746c <_vfiprintf_r+0x78>
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff faea 	bl	8006a0c <__swsetup_r>
 8007438:	b1c0      	cbz	r0, 800746c <_vfiprintf_r+0x78>
 800743a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743c:	07dc      	lsls	r4, r3, #31
 800743e:	d50e      	bpl.n	800745e <_vfiprintf_r+0x6a>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b01d      	add	sp, #116	; 0x74
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <_vfiprintf_r+0x244>)
 800744c:	429d      	cmp	r5, r3
 800744e:	d101      	bne.n	8007454 <_vfiprintf_r+0x60>
 8007450:	68b5      	ldr	r5, [r6, #8]
 8007452:	e7df      	b.n	8007414 <_vfiprintf_r+0x20>
 8007454:	4b79      	ldr	r3, [pc, #484]	; (800763c <_vfiprintf_r+0x248>)
 8007456:	429d      	cmp	r5, r3
 8007458:	bf08      	it	eq
 800745a:	68f5      	ldreq	r5, [r6, #12]
 800745c:	e7da      	b.n	8007414 <_vfiprintf_r+0x20>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	0598      	lsls	r0, r3, #22
 8007462:	d4ed      	bmi.n	8007440 <_vfiprintf_r+0x4c>
 8007464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007466:	f7ff fcf8 	bl	8006e5a <__retarget_lock_release_recursive>
 800746a:	e7e9      	b.n	8007440 <_vfiprintf_r+0x4c>
 800746c:	2300      	movs	r3, #0
 800746e:	9309      	str	r3, [sp, #36]	; 0x24
 8007470:	2320      	movs	r3, #32
 8007472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007476:	f8cd 800c 	str.w	r8, [sp, #12]
 800747a:	2330      	movs	r3, #48	; 0x30
 800747c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007640 <_vfiprintf_r+0x24c>
 8007480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007484:	f04f 0901 	mov.w	r9, #1
 8007488:	4623      	mov	r3, r4
 800748a:	469a      	mov	sl, r3
 800748c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007490:	b10a      	cbz	r2, 8007496 <_vfiprintf_r+0xa2>
 8007492:	2a25      	cmp	r2, #37	; 0x25
 8007494:	d1f9      	bne.n	800748a <_vfiprintf_r+0x96>
 8007496:	ebba 0b04 	subs.w	fp, sl, r4
 800749a:	d00b      	beq.n	80074b4 <_vfiprintf_r+0xc0>
 800749c:	465b      	mov	r3, fp
 800749e:	4622      	mov	r2, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff ff93 	bl	80073ce <__sfputs_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	f000 80aa 	beq.w	8007602 <_vfiprintf_r+0x20e>
 80074ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b0:	445a      	add	r2, fp
 80074b2:	9209      	str	r2, [sp, #36]	; 0x24
 80074b4:	f89a 3000 	ldrb.w	r3, [sl]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80a2 	beq.w	8007602 <_vfiprintf_r+0x20e>
 80074be:	2300      	movs	r3, #0
 80074c0:	f04f 32ff 	mov.w	r2, #4294967295
 80074c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c8:	f10a 0a01 	add.w	sl, sl, #1
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d4:	931a      	str	r3, [sp, #104]	; 0x68
 80074d6:	4654      	mov	r4, sl
 80074d8:	2205      	movs	r2, #5
 80074da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074de:	4858      	ldr	r0, [pc, #352]	; (8007640 <_vfiprintf_r+0x24c>)
 80074e0:	f7f8 fe8e 	bl	8000200 <memchr>
 80074e4:	9a04      	ldr	r2, [sp, #16]
 80074e6:	b9d8      	cbnz	r0, 8007520 <_vfiprintf_r+0x12c>
 80074e8:	06d1      	lsls	r1, r2, #27
 80074ea:	bf44      	itt	mi
 80074ec:	2320      	movmi	r3, #32
 80074ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f2:	0713      	lsls	r3, r2, #28
 80074f4:	bf44      	itt	mi
 80074f6:	232b      	movmi	r3, #43	; 0x2b
 80074f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007500:	2b2a      	cmp	r3, #42	; 0x2a
 8007502:	d015      	beq.n	8007530 <_vfiprintf_r+0x13c>
 8007504:	9a07      	ldr	r2, [sp, #28]
 8007506:	4654      	mov	r4, sl
 8007508:	2000      	movs	r0, #0
 800750a:	f04f 0c0a 	mov.w	ip, #10
 800750e:	4621      	mov	r1, r4
 8007510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007514:	3b30      	subs	r3, #48	; 0x30
 8007516:	2b09      	cmp	r3, #9
 8007518:	d94e      	bls.n	80075b8 <_vfiprintf_r+0x1c4>
 800751a:	b1b0      	cbz	r0, 800754a <_vfiprintf_r+0x156>
 800751c:	9207      	str	r2, [sp, #28]
 800751e:	e014      	b.n	800754a <_vfiprintf_r+0x156>
 8007520:	eba0 0308 	sub.w	r3, r0, r8
 8007524:	fa09 f303 	lsl.w	r3, r9, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	46a2      	mov	sl, r4
 800752e:	e7d2      	b.n	80074d6 <_vfiprintf_r+0xe2>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	1d19      	adds	r1, r3, #4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	9103      	str	r1, [sp, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfbb      	ittet	lt
 800753c:	425b      	neglt	r3, r3
 800753e:	f042 0202 	orrlt.w	r2, r2, #2
 8007542:	9307      	strge	r3, [sp, #28]
 8007544:	9307      	strlt	r3, [sp, #28]
 8007546:	bfb8      	it	lt
 8007548:	9204      	strlt	r2, [sp, #16]
 800754a:	7823      	ldrb	r3, [r4, #0]
 800754c:	2b2e      	cmp	r3, #46	; 0x2e
 800754e:	d10c      	bne.n	800756a <_vfiprintf_r+0x176>
 8007550:	7863      	ldrb	r3, [r4, #1]
 8007552:	2b2a      	cmp	r3, #42	; 0x2a
 8007554:	d135      	bne.n	80075c2 <_vfiprintf_r+0x1ce>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9203      	str	r2, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfb8      	it	lt
 8007562:	f04f 33ff 	movlt.w	r3, #4294967295
 8007566:	3402      	adds	r4, #2
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007650 <_vfiprintf_r+0x25c>
 800756e:	7821      	ldrb	r1, [r4, #0]
 8007570:	2203      	movs	r2, #3
 8007572:	4650      	mov	r0, sl
 8007574:	f7f8 fe44 	bl	8000200 <memchr>
 8007578:	b140      	cbz	r0, 800758c <_vfiprintf_r+0x198>
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	eba0 000a 	sub.w	r0, r0, sl
 8007580:	fa03 f000 	lsl.w	r0, r3, r0
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	4303      	orrs	r3, r0
 8007588:	3401      	adds	r4, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007590:	482c      	ldr	r0, [pc, #176]	; (8007644 <_vfiprintf_r+0x250>)
 8007592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007596:	2206      	movs	r2, #6
 8007598:	f7f8 fe32 	bl	8000200 <memchr>
 800759c:	2800      	cmp	r0, #0
 800759e:	d03f      	beq.n	8007620 <_vfiprintf_r+0x22c>
 80075a0:	4b29      	ldr	r3, [pc, #164]	; (8007648 <_vfiprintf_r+0x254>)
 80075a2:	bb1b      	cbnz	r3, 80075ec <_vfiprintf_r+0x1f8>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	3307      	adds	r3, #7
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	3308      	adds	r3, #8
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b2:	443b      	add	r3, r7
 80075b4:	9309      	str	r3, [sp, #36]	; 0x24
 80075b6:	e767      	b.n	8007488 <_vfiprintf_r+0x94>
 80075b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075bc:	460c      	mov	r4, r1
 80075be:	2001      	movs	r0, #1
 80075c0:	e7a5      	b.n	800750e <_vfiprintf_r+0x11a>
 80075c2:	2300      	movs	r3, #0
 80075c4:	3401      	adds	r4, #1
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	4619      	mov	r1, r3
 80075ca:	f04f 0c0a 	mov.w	ip, #10
 80075ce:	4620      	mov	r0, r4
 80075d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d4:	3a30      	subs	r2, #48	; 0x30
 80075d6:	2a09      	cmp	r2, #9
 80075d8:	d903      	bls.n	80075e2 <_vfiprintf_r+0x1ee>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0c5      	beq.n	800756a <_vfiprintf_r+0x176>
 80075de:	9105      	str	r1, [sp, #20]
 80075e0:	e7c3      	b.n	800756a <_vfiprintf_r+0x176>
 80075e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e6:	4604      	mov	r4, r0
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f0      	b.n	80075ce <_vfiprintf_r+0x1da>
 80075ec:	ab03      	add	r3, sp, #12
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	462a      	mov	r2, r5
 80075f2:	4b16      	ldr	r3, [pc, #88]	; (800764c <_vfiprintf_r+0x258>)
 80075f4:	a904      	add	r1, sp, #16
 80075f6:	4630      	mov	r0, r6
 80075f8:	f3af 8000 	nop.w
 80075fc:	4607      	mov	r7, r0
 80075fe:	1c78      	adds	r0, r7, #1
 8007600:	d1d6      	bne.n	80075b0 <_vfiprintf_r+0x1bc>
 8007602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007604:	07d9      	lsls	r1, r3, #31
 8007606:	d405      	bmi.n	8007614 <_vfiprintf_r+0x220>
 8007608:	89ab      	ldrh	r3, [r5, #12]
 800760a:	059a      	lsls	r2, r3, #22
 800760c:	d402      	bmi.n	8007614 <_vfiprintf_r+0x220>
 800760e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007610:	f7ff fc23 	bl	8006e5a <__retarget_lock_release_recursive>
 8007614:	89ab      	ldrh	r3, [r5, #12]
 8007616:	065b      	lsls	r3, r3, #25
 8007618:	f53f af12 	bmi.w	8007440 <_vfiprintf_r+0x4c>
 800761c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800761e:	e711      	b.n	8007444 <_vfiprintf_r+0x50>
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	462a      	mov	r2, r5
 8007626:	4b09      	ldr	r3, [pc, #36]	; (800764c <_vfiprintf_r+0x258>)
 8007628:	a904      	add	r1, sp, #16
 800762a:	4630      	mov	r0, r6
 800762c:	f000 f880 	bl	8007730 <_printf_i>
 8007630:	e7e4      	b.n	80075fc <_vfiprintf_r+0x208>
 8007632:	bf00      	nop
 8007634:	08007da8 	.word	0x08007da8
 8007638:	08007dc8 	.word	0x08007dc8
 800763c:	08007d88 	.word	0x08007d88
 8007640:	08007de8 	.word	0x08007de8
 8007644:	08007df2 	.word	0x08007df2
 8007648:	00000000 	.word	0x00000000
 800764c:	080073cf 	.word	0x080073cf
 8007650:	08007dee 	.word	0x08007dee

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4616      	mov	r6, r2
 800765a:	4699      	mov	r9, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007664:	4293      	cmp	r3, r2
 8007666:	bfb8      	it	lt
 8007668:	4613      	movlt	r3, r2
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b10a      	cbz	r2, 800767a <_printf_common+0x26>
 8007676:	3301      	adds	r3, #1
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	0699      	lsls	r1, r3, #26
 800767e:	bf42      	ittt	mi
 8007680:	6833      	ldrmi	r3, [r6, #0]
 8007682:	3302      	addmi	r3, #2
 8007684:	6033      	strmi	r3, [r6, #0]
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	f015 0506 	ands.w	r5, r5, #6
 800768c:	d106      	bne.n	800769c <_printf_common+0x48>
 800768e:	f104 0a19 	add.w	sl, r4, #25
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	6832      	ldr	r2, [r6, #0]
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc26      	bgt.n	80076ea <_printf_common+0x96>
 800769c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a0:	1e13      	subs	r3, r2, #0
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	0692      	lsls	r2, r2, #26
 80076aa:	d42b      	bmi.n	8007704 <_printf_common+0xb0>
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d01e      	beq.n	80076f8 <_printf_common+0xa4>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	68e5      	ldr	r5, [r4, #12]
 80076be:	6832      	ldr	r2, [r6, #0]
 80076c0:	f003 0306 	and.w	r3, r3, #6
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	bf08      	it	eq
 80076c8:	1aad      	subeq	r5, r5, r2
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	2600      	movs	r6, #0
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xc8>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xa8>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xac>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c6      	b.n	8007692 <_printf_common+0x3e>
 8007704:	18e1      	adds	r1, r4, r3
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770e:	4422      	add	r2, r4
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007718:	3302      	adds	r3, #2
 800771a:	e7c7      	b.n	80076ac <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa4>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x8e>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	7e0f      	ldrb	r7, [r1, #24]
 8007736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007738:	2f78      	cmp	r7, #120	; 0x78
 800773a:	4691      	mov	r9, r2
 800773c:	4680      	mov	r8, r0
 800773e:	460c      	mov	r4, r1
 8007740:	469a      	mov	sl, r3
 8007742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d8 	beq.w	8007902 <_printf_i+0x1d2>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80a3 	beq.w	800789e <_printf_i+0x16e>
 8007758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a101      	add	r1, pc, #4	; (adr r1, 8007770 <_printf_i+0x40>)
 800776c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078e9 	.word	0x080078e9
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	080078cb 	.word	0x080078cb
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	0800790b 	.word	0x0800790b
 80077b4:	08007759 	.word	0x08007759
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078d3 	.word	0x080078d3
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e0a3      	b.n	8007924 <_printf_i+0x1f4>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	6829      	ldr	r1, [r5, #0]
 80077e0:	0606      	lsls	r6, r0, #24
 80077e2:	f101 0304 	add.w	r3, r1, #4
 80077e6:	d50a      	bpl.n	80077fe <_printf_i+0xce>
 80077e8:	680e      	ldr	r6, [r1, #0]
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	da03      	bge.n	80077f8 <_printf_i+0xc8>
 80077f0:	232d      	movs	r3, #45	; 0x2d
 80077f2:	4276      	negs	r6, r6
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	485e      	ldr	r0, [pc, #376]	; (8007974 <_printf_i+0x244>)
 80077fa:	230a      	movs	r3, #10
 80077fc:	e019      	b.n	8007832 <_printf_i+0x102>
 80077fe:	680e      	ldr	r6, [r1, #0]
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007806:	bf18      	it	ne
 8007808:	b236      	sxthne	r6, r6
 800780a:	e7ef      	b.n	80077ec <_printf_i+0xbc>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	6029      	str	r1, [r5, #0]
 8007814:	0601      	lsls	r1, r0, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xec>
 8007818:	681e      	ldr	r6, [r3, #0]
 800781a:	e002      	b.n	8007822 <_printf_i+0xf2>
 800781c:	0646      	lsls	r6, r0, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xe8>
 8007820:	881e      	ldrh	r6, [r3, #0]
 8007822:	4854      	ldr	r0, [pc, #336]	; (8007974 <_printf_i+0x244>)
 8007824:	2f6f      	cmp	r7, #111	; 0x6f
 8007826:	bf0c      	ite	eq
 8007828:	2308      	moveq	r3, #8
 800782a:	230a      	movne	r3, #10
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007832:	6865      	ldr	r5, [r4, #4]
 8007834:	60a5      	str	r5, [r4, #8]
 8007836:	2d00      	cmp	r5, #0
 8007838:	bfa2      	ittt	ge
 800783a:	6821      	ldrge	r1, [r4, #0]
 800783c:	f021 0104 	bicge.w	r1, r1, #4
 8007840:	6021      	strge	r1, [r4, #0]
 8007842:	b90e      	cbnz	r6, 8007848 <_printf_i+0x118>
 8007844:	2d00      	cmp	r5, #0
 8007846:	d04d      	beq.n	80078e4 <_printf_i+0x1b4>
 8007848:	4615      	mov	r5, r2
 800784a:	fbb6 f1f3 	udiv	r1, r6, r3
 800784e:	fb03 6711 	mls	r7, r3, r1, r6
 8007852:	5dc7      	ldrb	r7, [r0, r7]
 8007854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007858:	4637      	mov	r7, r6
 800785a:	42bb      	cmp	r3, r7
 800785c:	460e      	mov	r6, r1
 800785e:	d9f4      	bls.n	800784a <_printf_i+0x11a>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10b      	bne.n	800787c <_printf_i+0x14c>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07de      	lsls	r6, r3, #31
 8007868:	d508      	bpl.n	800787c <_printf_i+0x14c>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4299      	cmp	r1, r3
 8007870:	bfde      	ittt	le
 8007872:	2330      	movle	r3, #48	; 0x30
 8007874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800787c:	1b52      	subs	r2, r2, r5
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	464b      	mov	r3, r9
 8007886:	aa03      	add	r2, sp, #12
 8007888:	4621      	mov	r1, r4
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fee2 	bl	8007654 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	d14c      	bne.n	800792e <_printf_i+0x1fe>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b004      	add	sp, #16
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	4835      	ldr	r0, [pc, #212]	; (8007974 <_printf_i+0x244>)
 80078a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ac:	6029      	str	r1, [r5, #0]
 80078ae:	061d      	lsls	r5, r3, #24
 80078b0:	d514      	bpl.n	80078dc <_printf_i+0x1ac>
 80078b2:	07df      	lsls	r7, r3, #31
 80078b4:	bf44      	itt	mi
 80078b6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ba:	6023      	strmi	r3, [r4, #0]
 80078bc:	b91e      	cbnz	r6, 80078c6 <_printf_i+0x196>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f023 0320 	bic.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	2310      	movs	r3, #16
 80078c8:	e7b0      	b.n	800782c <_printf_i+0xfc>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2378      	movs	r3, #120	; 0x78
 80078d4:	4828      	ldr	r0, [pc, #160]	; (8007978 <_printf_i+0x248>)
 80078d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078da:	e7e3      	b.n	80078a4 <_printf_i+0x174>
 80078dc:	0659      	lsls	r1, r3, #25
 80078de:	bf48      	it	mi
 80078e0:	b2b6      	uxthmi	r6, r6
 80078e2:	e7e6      	b.n	80078b2 <_printf_i+0x182>
 80078e4:	4615      	mov	r5, r2
 80078e6:	e7bb      	b.n	8007860 <_printf_i+0x130>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	6826      	ldr	r6, [r4, #0]
 80078ec:	6961      	ldr	r1, [r4, #20]
 80078ee:	1d18      	adds	r0, r3, #4
 80078f0:	6028      	str	r0, [r5, #0]
 80078f2:	0635      	lsls	r5, r6, #24
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0x1cc>
 80078f8:	6019      	str	r1, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0x1d2>
 80078fc:	0670      	lsls	r0, r6, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0x1c8>
 8007900:	8019      	strh	r1, [r3, #0]
 8007902:	2300      	movs	r3, #0
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	4615      	mov	r5, r2
 8007908:	e7ba      	b.n	8007880 <_printf_i+0x150>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	602a      	str	r2, [r5, #0]
 8007910:	681d      	ldr	r5, [r3, #0]
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	2100      	movs	r1, #0
 8007916:	4628      	mov	r0, r5
 8007918:	f7f8 fc72 	bl	8000200 <memchr>
 800791c:	b108      	cbz	r0, 8007922 <_printf_i+0x1f2>
 800791e:	1b40      	subs	r0, r0, r5
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	2300      	movs	r3, #0
 8007928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792c:	e7a8      	b.n	8007880 <_printf_i+0x150>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	462a      	mov	r2, r5
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	47d0      	blx	sl
 8007938:	3001      	adds	r0, #1
 800793a:	d0ab      	beq.n	8007894 <_printf_i+0x164>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	079b      	lsls	r3, r3, #30
 8007940:	d413      	bmi.n	800796a <_printf_i+0x23a>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	4298      	cmp	r0, r3
 8007948:	bfb8      	it	lt
 800794a:	4618      	movlt	r0, r3
 800794c:	e7a4      	b.n	8007898 <_printf_i+0x168>
 800794e:	2301      	movs	r3, #1
 8007950:	4632      	mov	r2, r6
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d09b      	beq.n	8007894 <_printf_i+0x164>
 800795c:	3501      	adds	r5, #1
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	9903      	ldr	r1, [sp, #12]
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	42ab      	cmp	r3, r5
 8007966:	dcf2      	bgt.n	800794e <_printf_i+0x21e>
 8007968:	e7eb      	b.n	8007942 <_printf_i+0x212>
 800796a:	2500      	movs	r5, #0
 800796c:	f104 0619 	add.w	r6, r4, #25
 8007970:	e7f5      	b.n	800795e <_printf_i+0x22e>
 8007972:	bf00      	nop
 8007974:	08007df9 	.word	0x08007df9
 8007978:	08007e0a 	.word	0x08007e0a

0800797c <_sbrk_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_sbrk_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa fa30 	bl	8001dec <_sbrk>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_sbrk_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_sbrk_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002c4 	.word	0x200002c4

0800799c <__sread>:
 800799c:	b510      	push	{r4, lr}
 800799e:	460c      	mov	r4, r1
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	f000 f8f8 	bl	8007b98 <_read_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	bfab      	itete	ge
 80079ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079ae:	89a3      	ldrhlt	r3, [r4, #12]
 80079b0:	181b      	addge	r3, r3, r0
 80079b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079b6:	bfac      	ite	ge
 80079b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079ba:	81a3      	strhlt	r3, [r4, #12]
 80079bc:	bd10      	pop	{r4, pc}

080079be <__swrite>:
 80079be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	461f      	mov	r7, r3
 80079c4:	898b      	ldrh	r3, [r1, #12]
 80079c6:	05db      	lsls	r3, r3, #23
 80079c8:	4605      	mov	r5, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	4616      	mov	r6, r2
 80079ce:	d505      	bpl.n	80079dc <__swrite+0x1e>
 80079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d4:	2302      	movs	r3, #2
 80079d6:	2200      	movs	r2, #0
 80079d8:	f000 f868 	bl	8007aac <_lseek_r>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	4628      	mov	r0, r5
 80079ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	f000 b817 	b.w	8007a24 <_write_r>

080079f6 <__sseek>:
 80079f6:	b510      	push	{r4, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fe:	f000 f855 	bl	8007aac <_lseek_r>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	bf15      	itete	ne
 8007a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a12:	81a3      	strheq	r3, [r4, #12]
 8007a14:	bf18      	it	ne
 8007a16:	81a3      	strhne	r3, [r4, #12]
 8007a18:	bd10      	pop	{r4, pc}

08007a1a <__sclose>:
 8007a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1e:	f000 b813 	b.w	8007a48 <_close_r>
	...

08007a24 <_write_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	; (8007a44 <_write_r+0x20>)
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7fa f989 	bl	8001d4a <_write>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_write_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_write_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200002c4 	.word	0x200002c4

08007a48 <_close_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d06      	ldr	r5, [pc, #24]	; (8007a64 <_close_r+0x1c>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	f7fa f995 	bl	8001d82 <_close>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_close_r+0x1a>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_close_r+0x1a>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	200002c4 	.word	0x200002c4

08007a68 <_fstat_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	; (8007a88 <_fstat_r+0x20>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	f7fa f990 	bl	8001d9a <_fstat>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d102      	bne.n	8007a84 <_fstat_r+0x1c>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b103      	cbz	r3, 8007a84 <_fstat_r+0x1c>
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	200002c4 	.word	0x200002c4

08007a8c <_isatty_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d06      	ldr	r5, [pc, #24]	; (8007aa8 <_isatty_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7fa f98f 	bl	8001dba <_isatty>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_isatty_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_isatty_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200002c4 	.word	0x200002c4

08007aac <_lseek_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	; (8007acc <_lseek_r+0x20>)
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	602a      	str	r2, [r5, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f7fa f988 	bl	8001dd0 <_lseek>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_lseek_r+0x1e>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_lseek_r+0x1e>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	200002c4 	.word	0x200002c4

08007ad0 <memcpy>:
 8007ad0:	440a      	add	r2, r1
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad8:	d100      	bne.n	8007adc <memcpy+0xc>
 8007ada:	4770      	bx	lr
 8007adc:	b510      	push	{r4, lr}
 8007ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	d1f9      	bne.n	8007ade <memcpy+0xe>
 8007aea:	bd10      	pop	{r4, pc}

08007aec <memmove>:
 8007aec:	4288      	cmp	r0, r1
 8007aee:	b510      	push	{r4, lr}
 8007af0:	eb01 0402 	add.w	r4, r1, r2
 8007af4:	d902      	bls.n	8007afc <memmove+0x10>
 8007af6:	4284      	cmp	r4, r0
 8007af8:	4623      	mov	r3, r4
 8007afa:	d807      	bhi.n	8007b0c <memmove+0x20>
 8007afc:	1e43      	subs	r3, r0, #1
 8007afe:	42a1      	cmp	r1, r4
 8007b00:	d008      	beq.n	8007b14 <memmove+0x28>
 8007b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b0a:	e7f8      	b.n	8007afe <memmove+0x12>
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4601      	mov	r1, r0
 8007b10:	428a      	cmp	r2, r1
 8007b12:	d100      	bne.n	8007b16 <memmove+0x2a>
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b1e:	e7f7      	b.n	8007b10 <memmove+0x24>

08007b20 <__malloc_lock>:
 8007b20:	4801      	ldr	r0, [pc, #4]	; (8007b28 <__malloc_lock+0x8>)
 8007b22:	f7ff b999 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8007b26:	bf00      	nop
 8007b28:	200002b8 	.word	0x200002b8

08007b2c <__malloc_unlock>:
 8007b2c:	4801      	ldr	r0, [pc, #4]	; (8007b34 <__malloc_unlock+0x8>)
 8007b2e:	f7ff b994 	b.w	8006e5a <__retarget_lock_release_recursive>
 8007b32:	bf00      	nop
 8007b34:	200002b8 	.word	0x200002b8

08007b38 <_realloc_r>:
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4614      	mov	r4, r2
 8007b40:	460e      	mov	r6, r1
 8007b42:	b921      	cbnz	r1, 8007b4e <_realloc_r+0x16>
 8007b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	4611      	mov	r1, r2
 8007b4a:	f7ff ba59 	b.w	8007000 <_malloc_r>
 8007b4e:	b92a      	cbnz	r2, 8007b5c <_realloc_r+0x24>
 8007b50:	f7ff f9ea 	bl	8006f28 <_free_r>
 8007b54:	4625      	mov	r5, r4
 8007b56:	4628      	mov	r0, r5
 8007b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b5c:	f000 f82e 	bl	8007bbc <_malloc_usable_size_r>
 8007b60:	4284      	cmp	r4, r0
 8007b62:	4607      	mov	r7, r0
 8007b64:	d802      	bhi.n	8007b6c <_realloc_r+0x34>
 8007b66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b6a:	d812      	bhi.n	8007b92 <_realloc_r+0x5a>
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4640      	mov	r0, r8
 8007b70:	f7ff fa46 	bl	8007000 <_malloc_r>
 8007b74:	4605      	mov	r5, r0
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d0ed      	beq.n	8007b56 <_realloc_r+0x1e>
 8007b7a:	42bc      	cmp	r4, r7
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4631      	mov	r1, r6
 8007b80:	bf28      	it	cs
 8007b82:	463a      	movcs	r2, r7
 8007b84:	f7ff ffa4 	bl	8007ad0 <memcpy>
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff f9cc 	bl	8006f28 <_free_r>
 8007b90:	e7e1      	b.n	8007b56 <_realloc_r+0x1e>
 8007b92:	4635      	mov	r5, r6
 8007b94:	e7df      	b.n	8007b56 <_realloc_r+0x1e>
	...

08007b98 <_read_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d07      	ldr	r5, [pc, #28]	; (8007bb8 <_read_r+0x20>)
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	4608      	mov	r0, r1
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f7fa f8b2 	bl	8001d10 <_read>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_read_r+0x1e>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_read_r+0x1e>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	200002c4 	.word	0x200002c4

08007bbc <_malloc_usable_size_r>:
 8007bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc0:	1f18      	subs	r0, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfbc      	itt	lt
 8007bc6:	580b      	ldrlt	r3, [r1, r0]
 8007bc8:	18c0      	addlt	r0, r0, r3
 8007bca:	4770      	bx	lr

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
