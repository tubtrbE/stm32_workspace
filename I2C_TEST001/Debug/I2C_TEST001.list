
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009514  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009970  08009970  000207d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009978  08009978  000207d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d0  20000000  08009980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000207d0  2**0
                  CONTENTS
 10 .bss          00000374  200007d0  200007d0  000207d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  000207d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000207d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001956f  00000000  00000000  00020800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ca8  00000000  00000000  00039d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001458  00000000  00000000  0003f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028809  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d01b  00000000  00000000  00068c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f16a7  00000000  00000000  00085c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00177333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064ac  00000000  00000000  00177384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200007d0 	.word	0x200007d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080096ac 	.word	0x080096ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200007d4 	.word	0x200007d4
 80001ec:	080096ac 	.word	0x080096ac

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f002 fba5 	bl	8002d78 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f001 feb4 	bl	80023a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f002 fceb 	bl	8003024 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f001 fea4 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200007ec 	.word	0x200007ec
 8000664:	40012000 	.word	0x40012000

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d127      	bne.n	80006da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0x84>)
 80006d6:	f003 fb7d 	bl	8003dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <GetSector>:
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetSector(uint32_t Address)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a82      	ldr	r2, [pc, #520]	; (8000908 <GetSector+0x218>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d206      	bcs.n	8000712 <GetSector+0x22>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800070a:	d302      	bcc.n	8000712 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e0f3      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a7d      	ldr	r2, [pc, #500]	; (800090c <GetSector+0x21c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d206      	bcs.n	8000728 <GetSector+0x38>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a7a      	ldr	r2, [pc, #488]	; (8000908 <GetSector+0x218>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d302      	bcc.n	8000728 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e0e8      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a79      	ldr	r2, [pc, #484]	; (8000910 <GetSector+0x220>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d206      	bcs.n	800073e <GetSector+0x4e>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a76      	ldr	r2, [pc, #472]	; (800090c <GetSector+0x21c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d302      	bcc.n	800073e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e0dd      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a74      	ldr	r2, [pc, #464]	; (8000914 <GetSector+0x224>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d806      	bhi.n	8000754 <GetSector+0x64>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a71      	ldr	r2, [pc, #452]	; (8000910 <GetSector+0x220>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d302      	bcc.n	8000754 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800074e:	2303      	movs	r3, #3
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e0d2      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a70      	ldr	r2, [pc, #448]	; (8000918 <GetSector+0x228>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d806      	bhi.n	800076a <GetSector+0x7a>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <GetSector+0x224>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000764:	2304      	movs	r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e0c7      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a6b      	ldr	r2, [pc, #428]	; (800091c <GetSector+0x22c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d806      	bhi.n	8000780 <GetSector+0x90>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a68      	ldr	r2, [pc, #416]	; (8000918 <GetSector+0x228>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d902      	bls.n	8000780 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800077a:	2305      	movs	r3, #5
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e0bc      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a67      	ldr	r2, [pc, #412]	; (8000920 <GetSector+0x230>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d806      	bhi.n	8000796 <GetSector+0xa6>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a64      	ldr	r2, [pc, #400]	; (800091c <GetSector+0x22c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d902      	bls.n	8000796 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000790:	2306      	movs	r3, #6
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e0b1      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a62      	ldr	r2, [pc, #392]	; (8000924 <GetSector+0x234>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d806      	bhi.n	80007ac <GetSector+0xbc>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a5f      	ldr	r2, [pc, #380]	; (8000920 <GetSector+0x230>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d902      	bls.n	80007ac <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e0a6      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <GetSector+0x238>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d806      	bhi.n	80007c2 <GetSector+0xd2>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a5b      	ldr	r2, [pc, #364]	; (8000924 <GetSector+0x234>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80007bc:	2308      	movs	r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e09b      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a59      	ldr	r2, [pc, #356]	; (800092c <GetSector+0x23c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d806      	bhi.n	80007d8 <GetSector+0xe8>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <GetSector+0x238>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d902      	bls.n	80007d8 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80007d2:	2309      	movs	r3, #9
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e090      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <GetSector+0x240>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d806      	bhi.n	80007ee <GetSector+0xfe>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a52      	ldr	r2, [pc, #328]	; (800092c <GetSector+0x23c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d902      	bls.n	80007ee <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80007e8:	230a      	movs	r3, #10
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e085      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80007f4:	d206      	bcs.n	8000804 <GetSector+0x114>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a4d      	ldr	r2, [pc, #308]	; (8000930 <GetSector+0x240>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d902      	bls.n	8000804 <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;
 80007fe:	230b      	movs	r3, #11
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e07a      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a4b      	ldr	r2, [pc, #300]	; (8000934 <GetSector+0x244>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d206      	bcs.n	800081a <GetSector+0x12a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000812:	d302      	bcc.n	800081a <GetSector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000814:	230c      	movs	r3, #12
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e06f      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a46      	ldr	r2, [pc, #280]	; (8000938 <GetSector+0x248>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d206      	bcs.n	8000830 <GetSector+0x140>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a43      	ldr	r2, [pc, #268]	; (8000934 <GetSector+0x244>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d302      	bcc.n	8000830 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_13;
 800082a:	230d      	movs	r3, #13
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e064      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a42      	ldr	r2, [pc, #264]	; (800093c <GetSector+0x24c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d206      	bcs.n	8000846 <GetSector+0x156>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <GetSector+0x248>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d302      	bcc.n	8000846 <GetSector+0x156>
  {
    sector = FLASH_SECTOR_14;
 8000840:	230e      	movs	r3, #14
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e059      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <GetSector+0x250>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d806      	bhi.n	800085c <GetSector+0x16c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a3a      	ldr	r2, [pc, #232]	; (800093c <GetSector+0x24c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d302      	bcc.n	800085c <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000856:	230f      	movs	r3, #15
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e04e      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a39      	ldr	r2, [pc, #228]	; (8000944 <GetSector+0x254>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d806      	bhi.n	8000872 <GetSector+0x182>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <GetSector+0x250>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d902      	bls.n	8000872 <GetSector+0x182>
  {
    sector = FLASH_SECTOR_16;
 800086c:	2310      	movs	r3, #16
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e043      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a34      	ldr	r2, [pc, #208]	; (8000948 <GetSector+0x258>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d806      	bhi.n	8000888 <GetSector+0x198>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a31      	ldr	r2, [pc, #196]	; (8000944 <GetSector+0x254>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d902      	bls.n	8000888 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_17;
 8000882:	2311      	movs	r3, #17
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e038      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <GetSector+0x25c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d806      	bhi.n	800089e <GetSector+0x1ae>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <GetSector+0x258>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d902      	bls.n	800089e <GetSector+0x1ae>
  {
    sector = FLASH_SECTOR_18;
 8000898:	2312      	movs	r3, #18
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e02d      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <GetSector+0x260>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d806      	bhi.n	80008b4 <GetSector+0x1c4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <GetSector+0x25c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d902      	bls.n	80008b4 <GetSector+0x1c4>
  {
    sector = FLASH_SECTOR_19;
 80008ae:	2313      	movs	r3, #19
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e022      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <GetSector+0x264>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d806      	bhi.n	80008ca <GetSector+0x1da>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <GetSector+0x260>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d902      	bls.n	80008ca <GetSector+0x1da>
  {
    sector = FLASH_SECTOR_20;
 80008c4:	2314      	movs	r3, #20
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e017      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <GetSector+0x268>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d806      	bhi.n	80008e0 <GetSector+0x1f0>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <GetSector+0x264>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d902      	bls.n	80008e0 <GetSector+0x1f0>
  {
    sector = FLASH_SECTOR_21;
 80008da:	2315      	movs	r3, #21
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00c      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <GetSector+0x26c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d806      	bhi.n	80008f6 <GetSector+0x206>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <GetSector+0x268>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <GetSector+0x206>
  {
    sector = FLASH_SECTOR_22;
 80008f0:	2316      	movs	r3, #22
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e001      	b.n	80008fa <GetSector+0x20a>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
  {
    sector = FLASH_SECTOR_23;
 80008f6:	2317      	movs	r3, #23
 80008f8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	08004000 	.word	0x08004000
 800090c:	08008000 	.word	0x08008000
 8000910:	0800c000 	.word	0x0800c000
 8000914:	0800ffff 	.word	0x0800ffff
 8000918:	0801ffff 	.word	0x0801ffff
 800091c:	0803ffff 	.word	0x0803ffff
 8000920:	0805ffff 	.word	0x0805ffff
 8000924:	0807ffff 	.word	0x0807ffff
 8000928:	0809ffff 	.word	0x0809ffff
 800092c:	080bffff 	.word	0x080bffff
 8000930:	080dffff 	.word	0x080dffff
 8000934:	08104000 	.word	0x08104000
 8000938:	08108000 	.word	0x08108000
 800093c:	0810c000 	.word	0x0810c000
 8000940:	0810ffff 	.word	0x0810ffff
 8000944:	0811ffff 	.word	0x0811ffff
 8000948:	0813ffff 	.word	0x0813ffff
 800094c:	0815ffff 	.word	0x0815ffff
 8000950:	0817ffff 	.word	0x0817ffff
 8000954:	0819ffff 	.word	0x0819ffff
 8000958:	081bffff 	.word	0x081bffff
 800095c:	081dffff 	.word	0x081dffff

08000960 <FlashWritingOne>:
    sectorsize = 128 * 1024;
  }
  return sectorsize;
}

void FlashWritingOne (uint32_t FLASH_USER_ADDR, uint32_t DATA_32)  {
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]

	  HAL_FLASH_Unlock();
 800096a:	f002 ff81 	bl	8003870 <HAL_FLASH_Unlock>

	  NbOfSectors = 1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <FlashWritingOne+0x6c>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
	  FirstSector = GetSector(FLASH_USER_ADDR);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff febb 	bl	80006f0 <GetSector>
 800097a:	4603      	mov	r3, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <FlashWritingOne+0x70>)
 800097e:	6013      	str	r3, [r2, #0]
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <FlashWritingOne+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <FlashWritingOne+0x74>)
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = FirstSector;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <FlashWritingOne+0x70>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <FlashWritingOne+0x74>)
 8000992:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = NbOfSectors;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <FlashWritingOne+0x6c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <FlashWritingOne+0x74>)
 800099a:	60d3      	str	r3, [r2, #12]

	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800099c:	490e      	ldr	r1, [pc, #56]	; (80009d8 <FlashWritingOne+0x78>)
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <FlashWritingOne+0x74>)
 80009a0:	f003 f8d8 	bl	8003b54 <HAL_FLASHEx_Erase>
	  {
	  }

	  Address = FLASH_USER_ADDR;
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <FlashWritingOne+0x7c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <FlashWritingOne+0x7c>)
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	461c      	mov	r4, r3
 80009b4:	4615      	mov	r5, r2
 80009b6:	4622      	mov	r2, r4
 80009b8:	462b      	mov	r3, r5
 80009ba:	2002      	movs	r0, #2
 80009bc:	f002 ff04 	bl	80037c8 <HAL_FLASH_Program>

	  HAL_FLASH_Lock();
 80009c0:	f002 ff78 	bl	80038b4 <HAL_FLASH_Lock>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	20000838 	.word	0x20000838
 80009d0:	20000834 	.word	0x20000834
 80009d4:	20000844 	.word	0x20000844
 80009d8:	20000840 	.word	0x20000840
 80009dc:	2000083c 	.word	0x2000083c

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xac>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a6c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0xb0>)
 8000a7e:	f003 f9a9 	bl	8003dd4 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad2:	f003 fb5b 	bl	800418c <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f001 fc60 	bl	80023a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae4:	f004 f8cb 	bl	8004c7e <HAL_I2CEx_ConfigAnalogFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f001 fc57 	bl	80023a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af6:	f004 f8fe 	bl	8004cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f001 fc4e 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000858 	.word	0x20000858
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_I2C_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12c      	bne.n	8000b90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <HAL_I2C_MspInit+0x8c>)
 8000b70:	f003 f930 	bl	8003dd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <I2C_Scan>:
#include "lcd.h"
#include "i2c.h"
HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <I2C_Scan+0xc0>)
 8000bac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	6020      	str	r0, [r4, #0]
 8000bbc:	3404      	adds	r4, #4
 8000bbe:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb1d 	bl	8000204 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <I2C_Scan+0xc4>)
 8000bd8:	f006 fb2b 	bl	8007232 <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000be2:	e030      	b.n	8000c46 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b299      	uxth	r1, r3
 8000bec:	230a      	movs	r3, #10
 8000bee:	2201      	movs	r2, #1
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <I2C_Scan+0xc8>)
 8000bf2:	f003 fd0d 	bl	8004610 <HAL_I2C_IsDeviceReady>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <I2C_Scan+0xcc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <I2C_Scan+0xcc>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d113      	bne.n	8000c2e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8000c06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <I2C_Scan+0xd0>)
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	f007 fbfa 	bl	8008408 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff faf4 	bl	8000204 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4639      	mov	r1, r7
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <I2C_Scan+0xc4>)
 8000c28:	f006 fb03 	bl	8007232 <HAL_UART_Transmit>
 8000c2c:	e006      	b.n	8000c3c <I2C_Scan+0x98>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2201      	movs	r2, #1
 8000c34:	4910      	ldr	r1, [pc, #64]	; (8000c78 <I2C_Scan+0xd4>)
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <I2C_Scan+0xc4>)
 8000c38:	f006 fafb 	bl	8007232 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000c46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4c:	d9ca      	bls.n	8000be4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	2202      	movs	r2, #2
 8000c54:	4909      	ldr	r1, [pc, #36]	; (8000c7c <I2C_Scan+0xd8>)
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <I2C_Scan+0xc4>)
 8000c58:	f006 faeb 	bl	8007232 <HAL_UART_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3758      	adds	r7, #88	; 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	080096d4 	.word	0x080096d4
 8000c68:	20000acc 	.word	0x20000acc
 8000c6c:	20000858 	.word	0x20000858
 8000c70:	200008ac 	.word	0x200008ac
 8000c74:	080096c4 	.word	0x080096c4
 8000c78:	080096cc 	.word	0x080096cc
 8000c7c:	080096d0 	.word	0x080096d0

08000c80 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000c9e:	f003 fcb7 	bl	8004610 <HAL_I2C_IsDeviceReady>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000cac:	e7f1      	b.n	8000c92 <LCD_SendInternal+0x12>
			break;
 8000cae:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f043 030c 	orr.w	r3, r3, #12
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000cce:	7bba      	ldrb	r2, [r7, #14]
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000cde:	7b7a      	ldrb	r2, [r7, #13]
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 030c 	orr.w	r3, r3, #12
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 0208 	add.w	r2, r7, #8
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000d10:	f003 fb80 	bl	8004414 <HAL_I2C_Master_Transmit>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000d18:	2005      	movs	r0, #5
 8000d1a:	f002 f809 	bl	8002d30 <HAL_Delay>
	return res;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000858 	.word	0x20000858

08000d2c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000d3c:	79b9      	ldrb	r1, [r7, #6]
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff9c 	bl	8000c80 <LCD_SendInternal>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000d60:	79b9      	ldrb	r1, [r7, #6]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff8a 	bl	8000c80 <LCD_SendInternal>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2130      	movs	r1, #48	; 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffd2 	bl	8000d2c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffcd 	bl	8000d2c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	210c      	movs	r1, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffc8 	bl	8000d2c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc3 	bl	8000d2c <LCD_SendCommand>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	6039      	str	r1, [r7, #0]
 8000db8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000dba:	e009      	b.n	8000dd0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffc3 	bl	8000d50 <LCD_SendData>
		str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f1      	bne.n	8000dbc <LCD_SendString+0xe>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <init>:

void init() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000de8:	f7ff fedc 	bl	8000ba4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000dec:	204e      	movs	r0, #78	; 0x4e
 8000dee:	f7ff ffc1 	bl	8000d74 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	204e      	movs	r0, #78	; 0x4e
 8000df6:	f7ff ff99 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000dfa:	4907      	ldr	r1, [pc, #28]	; (8000e18 <init+0x34>)
 8000dfc:	204e      	movs	r0, #78	; 0x4e
 8000dfe:	f7ff ffd6 	bl	8000dae <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000e02:	21c0      	movs	r1, #192	; 0xc0
 8000e04:	204e      	movs	r0, #78	; 0x4e
 8000e06:	f7ff ff91 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000e0a:	4904      	ldr	r1, [pc, #16]	; (8000e1c <init+0x38>)
 8000e0c:	204e      	movs	r0, #78	; 0x4e
 8000e0e:	f7ff ffce 	bl	8000dae <LCD_SendString>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	080096ec 	.word	0x080096ec
 8000e1c:	080096fc 	.word	0x080096fc

08000e20 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000e28:	1d39      	adds	r1, r7, #4
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <__io_putchar+0x20>)
 8000e30:	f006 f9ff 	bl	8007232 <HAL_UART_Transmit>
	return ch;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000acc 	.word	0x20000acc

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 ff00 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f86a 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f7ff fdc6 	bl	80009e0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e54:	f001 faaa 	bl	80023ac <MX_RTC_Init>
  MX_I2C1_Init();
 8000e58:	f7ff fe1c 	bl	8000a94 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e5c:	f001 fe26 	bl	8002aac <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e60:	f7ff fbb0 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e64:	f001 fcae 	bl	80027c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e68:	f001 fc5e 	bl	8002728 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e6c:	f001 fd20 	bl	80028b0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000e70:	f001 fdf2 	bl	8002a58 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e74:	f000 f8c8 	bl	8001008 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <main+0xac>)
 8000e7a:	f005 f931 	bl	80060e0 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_Base_Start_IT(&htim4);
 8000e7e:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <main+0xb0>)
 8000e80:	f005 f92e 	bl	80060e0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &rx_2, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	491c      	ldr	r1, [pc, #112]	; (8000ef8 <main+0xb4>)
 8000e88:	481c      	ldr	r0, [pc, #112]	; (8000efc <main+0xb8>)
 8000e8a:	f006 fa64 	bl	8007356 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &rx_3, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	491b      	ldr	r1, [pc, #108]	; (8000f00 <main+0xbc>)
 8000e92:	481c      	ldr	r0, [pc, #112]	; (8000f04 <main+0xc0>)
 8000e94:	f006 fa5f 	bl	8007356 <HAL_UART_Receive_IT>

	song_flag = *((uint32_t*) 0x0800C000);
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <main+0xc4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <main+0xc8>)
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000ea2:	f7ff ff9f 	bl	8000de4 <init>
	LCD_Init(LCD_ADDR);
 8000ea6:	204e      	movs	r0, #78	; 0x4e
 8000ea8:	f7ff ff64 	bl	8000d74 <LCD_Init>
	up = 0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <main+0xcc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <main+0xd0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <main+0xd4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <main+0xd8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <main+0xdc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <main+0xdc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <main+0xdc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <main+0xdc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	70da      	strb	r2, [r3, #3]

		//Main loop
		mode_func_Normal();
 8000edc:	f000 ff46 	bl	8001d6c <mode_func_Normal>
		mode_func_SetTime();
 8000ee0:	f001 f860 	bl	8001fa4 <mode_func_SetTime>
		mode_func_SetAlarm();
 8000ee4:	f001 f8da 	bl	800209c <mode_func_SetAlarm>
		mode_func_SetSong();
 8000ee8:	f001 f960 	bl	80021ac <mode_func_SetSong>
		sTime_temp.Hours = 0;
 8000eec:	e7ea      	b.n	8000ec4 <main+0x80>
 8000eee:	bf00      	nop
 8000ef0:	200009b0 	.word	0x200009b0
 8000ef4:	20000a40 	.word	0x20000a40
 8000ef8:	20000989 	.word	0x20000989
 8000efc:	20000a88 	.word	0x20000a88
 8000f00:	20000988 	.word	0x20000988
 8000f04:	20000acc 	.word	0x20000acc
 8000f08:	0800c000 	.word	0x0800c000
 8000f0c:	200008ad 	.word	0x200008ad
 8000f10:	20000908 	.word	0x20000908
 8000f14:	20000909 	.word	0x20000909
 8000f18:	2000090a 	.word	0x2000090a
 8000f1c:	2000090b 	.word	0x2000090b
 8000f20:	2000094c 	.word	0x2000094c

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f007 f9d2 	bl	80082dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <SystemClock_Config+0xdc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <SystemClock_Config+0xdc>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <SystemClock_Config+0xdc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <SystemClock_Config+0xe0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <SystemClock_Config+0xe0>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SystemClock_Config+0xe0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f80:	2306      	movs	r3, #6
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f9c:	23b4      	movs	r3, #180	; 0xb4
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 ff31 	bl	8004e14 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb8:	f001 f9f2 	bl	80023a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fbc:	f003 feda 	bl	8004d74 <HAL_PWREx_EnableOverDrive>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fc6:	f001 f9eb 	bl	80023a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f98b 	bl	8005304 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ff4:	f001 f9d4 	bl	80023a0 <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	; 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2027      	movs	r0, #39	; 0x27
 8001012:	f002 fb10 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001016:	2027      	movs	r0, #39	; 0x27
 8001018:	f002 fb29 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2028      	movs	r0, #40	; 0x28
 8001022:	f002 fb08 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f002 fb21 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201c      	movs	r0, #28
 8001032:	f002 fb00 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001036:	201c      	movs	r0, #28
 8001038:	f002 fb19 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	201e      	movs	r0, #30
 8001042:	f002 faf8 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001046:	201e      	movs	r0, #30
 8001048:	f002 fb11 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2026      	movs	r0, #38	; 0x26
 8001052:	f002 faf0 	bl	8003636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001056:	2026      	movs	r0, #38	; 0x26
 8001058:	f002 fb09 	bl	800366e <HAL_NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001070:	f003 f85c 	bl	800412c <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d114      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x44>
		rising_edge++;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x88>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001084:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4817      	ldr	r0, [pc, #92]	; (80010ec <HAL_GPIO_EXTI_Callback+0x8c>)
 800108e:	f007 f92d 	bl	80082ec <iprintf>
		if (rising_edge == 1) {
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x44>
			start_tick = HAL_GetTick();
 800109a:	f001 fe3d 	bl	8002d18 <HAL_GetTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x90>)
 80010a2:	6013      	str	r3, [r2, #0]
		}
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x84>)
 80010aa:	f003 f83f 	bl	800412c <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d113      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x7c>
		if (rising_edge == 0) {
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x88>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <HAL_GPIO_EXTI_Callback+0x64>
			falling_edge = 0;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e005      	b.n	80010d0 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			falling_edge++;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80010ce:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x98>)
 80010d8:	f007 f908 	bl	80082ec <iprintf>
	}

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020800 	.word	0x40020800
 80010e8:	200008f1 	.word	0x200008f1
 80010ec:	0800974c 	.word	0x0800974c
 80010f0:	200008f4 	.word	0x200008f4
 80010f4:	200008f2 	.word	0x200008f2
 80010f8:	08009760 	.word	0x08009760

080010fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d157      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0xc2>

//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 800110e:	4838      	ldr	r0, [pc, #224]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001110:	f001 ff7b 	bl	800300a <HAL_ADC_GetValue>
 8001114:	4603      	mov	r3, r0
 8001116:	4a37      	ldr	r2, [pc, #220]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001118:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800111c:	f001 ff42 	bl	8002fa4 <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f8eb 	bl	8001300 <button_status>
 800112a:	4603      	mov	r3, r0
 800112c:	2b02      	cmp	r3, #2
 800112e:	d105      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x40>
			up++;
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800113a:	701a      	strb	r2, [r3, #0]
//			printf("UP : %d\r\n", up);
		}
		if (button_status(ADC_value) == DOWN) {
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f8dd 	bl	8001300 <button_status>
 8001146:	4603      	mov	r3, r0
 8001148:	2b03      	cmp	r3, #3
 800114a:	d105      	bne.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x5c>
			down++;
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x100>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001156:	701a      	strb	r2, [r3, #0]
//			printf("DOWN : %d\r\n", down);
		}
		if (button_status(ADC_value) == LEFT) {
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f8cf 	bl	8001300 <button_status>
 8001162:	4603      	mov	r3, r0
 8001164:	2b04      	cmp	r3, #4
 8001166:	d105      	bne.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x78>
			left++;
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001172:	701a      	strb	r2, [r3, #0]
//			printf("LEFT : %d\r\n", left);
		}
		if (button_status(ADC_value) == RIGHT) {
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f8c1 	bl	8001300 <button_status>
 800117e:	4603      	mov	r3, r0
 8001180:	2b05      	cmp	r3, #5
 8001182:	d105      	bne.n	8001190 <HAL_TIM_PeriodElapsedCallback+0x94>
			right++;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800118e:	701a      	strb	r2, [r3, #0]
//			printf("RIGHT : %d\r\n", right);
		}

		if (apply_flag > 0) {
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			get_time_apply++;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011a0:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0xb8>
			get_time_exit++;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011b2:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80011bc:	6013      	str	r3, [r2, #0]
//		printf("%d\r\n", ADC_value);
	}

	if (htim->Instance == TIM4) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d10f      	bne.n	80011e8 <HAL_TIM_PeriodElapsedCallback+0xec>
		if (flag_alarm > 0) {
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_TIM_PeriodElapsedCallback+0xe0>
			count_bit++;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e002      	b.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0xe6>
		} else {
			count_bit = 0;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
		}
		flag_bit_1ms = 1;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
	}

}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200007ec 	.word	0x200007ec
 80011f4:	20000904 	.word	0x20000904
 80011f8:	20000908 	.word	0x20000908
 80011fc:	20000909 	.word	0x20000909
 8001200:	2000090a 	.word	0x2000090a
 8001204:	2000090b 	.word	0x2000090b
 8001208:	200008d0 	.word	0x200008d0
 800120c:	200008d4 	.word	0x200008d4
 8001210:	200008d8 	.word	0x200008d8
 8001214:	200008dc 	.word	0x200008dc
 8001218:	200008cc 	.word	0x200008cc
 800121c:	40000800 	.word	0x40000800
 8001220:	200008b8 	.word	0x200008b8
 8001224:	200008b0 	.word	0x200008b0
 8001228:	200008b4 	.word	0x200008b4

0800122c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_UART_RxCpltCallback+0x68>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d110      	bne.n	8001260 <HAL_UART_RxCpltCallback+0x34>
		HAL_UART_Transmit(&huart3, &rx_2, 1, 100);
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	2201      	movs	r2, #1
 8001242:	4915      	ldr	r1, [pc, #84]	; (8001298 <HAL_UART_RxCpltCallback+0x6c>)
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <HAL_UART_RxCpltCallback+0x70>)
 8001246:	f005 fff4 	bl	8007232 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &rx_2, 1, 100);
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	2201      	movs	r2, #1
 800124e:	4912      	ldr	r1, [pc, #72]	; (8001298 <HAL_UART_RxCpltCallback+0x6c>)
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <HAL_UART_RxCpltCallback+0x74>)
 8001252:	f005 ffee 	bl	8007232 <HAL_UART_Transmit>



		HAL_UART_Receive_IT(&huart2, &rx_2, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	490f      	ldr	r1, [pc, #60]	; (8001298 <HAL_UART_RxCpltCallback+0x6c>)
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <HAL_UART_RxCpltCallback+0x74>)
 800125c:	f006 f87b 	bl	8007356 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART3) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_UART_RxCpltCallback+0x78>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d110      	bne.n	800128c <HAL_UART_RxCpltCallback+0x60>
		HAL_UART_Transmit(&huart2, &rx_3, 1, 100);
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	2201      	movs	r2, #1
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <HAL_UART_RxCpltCallback+0x74>)
 8001272:	f005 ffde 	bl	8007232 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, &rx_3, 1, 100);
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	2201      	movs	r2, #1
 800127a:	490b      	ldr	r1, [pc, #44]	; (80012a8 <HAL_UART_RxCpltCallback+0x7c>)
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <HAL_UART_RxCpltCallback+0x70>)
 800127e:	f005 ffd8 	bl	8007232 <HAL_UART_Transmit>



		HAL_UART_Receive_IT(&huart3, &rx_3, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	4908      	ldr	r1, [pc, #32]	; (80012a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_RxCpltCallback+0x70>)
 8001288:	f006 f865 	bl	8007356 <HAL_UART_Receive_IT>
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004400 	.word	0x40004400
 8001298:	20000989 	.word	0x20000989
 800129c:	20000acc 	.word	0x20000acc
 80012a0:	20000a88 	.word	0x20000a88
 80012a4:	40004800 	.word	0x40004800
 80012a8:	20000988 	.word	0x20000988

080012ac <InitFlag>:



//init user button & LCD
void InitFlag(int num) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	LCD_Init(LCD_ADDR);
 80012b4:	204e      	movs	r0, #78	; 0x4e
 80012b6:	f7ff fd5d 	bl	8000d74 <LCD_Init>
	apply_flag = 0;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <InitFlag+0x3c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
	get_time_apply = 0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <InitFlag+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	rising_edge = 0;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <InitFlag+0x44>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	falling_edge = 0;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <InitFlag+0x48>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	mode = num;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <InitFlag+0x4c>)
 80012d8:	701a      	strb	r2, [r3, #0]
	strcpy(lcdup, "");
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <InitFlag+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200008d0 	.word	0x200008d0
 80012ec:	200008d4 	.word	0x200008d4
 80012f0:	200008f1 	.word	0x200008f1
 80012f4:	200008f2 	.word	0x200008f2
 80012f8:	200008f3 	.word	0x200008f3
 80012fc:	200008e0 	.word	0x200008e0

08001300 <button_status>:
ADC_StatusTypeDef button_status(uint32_t value) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b63      	cmp	r3, #99	; 0x63
 800130c:	d801      	bhi.n	8001312 <button_status+0x12>
		return UP;
 800130e:	2302      	movs	r3, #2
 8001310:	e029      	b.n	8001366 <button_status+0x66>
	if (800 < value && value < 900)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001318:	d905      	bls.n	8001326 <button_status+0x26>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001320:	d201      	bcs.n	8001326 <button_status+0x26>
		return DOWN;
 8001322:	2303      	movs	r3, #3
 8001324:	e01f      	b.n	8001366 <button_status+0x66>
	if (1800 < value && value < 2000)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800132c:	d905      	bls.n	800133a <button_status+0x3a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001334:	d201      	bcs.n	800133a <button_status+0x3a>
		return LEFT;
 8001336:	2304      	movs	r3, #4
 8001338:	e015      	b.n	8001366 <button_status+0x66>
	if (2800 < value && value < 3200)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001340:	d905      	bls.n	800134e <button_status+0x4e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001348:	d201      	bcs.n	800134e <button_status+0x4e>
		return RIGHT;
 800134a:	2305      	movs	r3, #5
 800134c:	e00b      	b.n	8001366 <button_status+0x66>
	if (4000 < value && value < 5000)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001354:	d906      	bls.n	8001364 <button_status+0x64>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f241 3287 	movw	r2, #4999	; 0x1387
 800135c:	4293      	cmp	r3, r2
 800135e:	d801      	bhi.n	8001364 <button_status+0x64>
		return SELECT;
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <button_status+0x66>

	return NONE;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <screen>:

void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 8001374:	b084      	sub	sp, #16
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af02      	add	r7, sp, #8
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	f107 001c 	add.w	r0, r7, #28
 8001382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	461a      	mov	r2, r3
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <screen+0x78>)
 8001392:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8001394:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001396:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8001398:	7f7b      	ldrb	r3, [r7, #29]
 800139a:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 800139c:	9101      	str	r1, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	4913      	ldr	r1, [pc, #76]	; (80013f0 <screen+0x7c>)
 80013a4:	4813      	ldr	r0, [pc, #76]	; (80013f4 <screen+0x80>)
 80013a6:	f007 f82f 	bl	8008408 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80013aa:	21c0      	movs	r1, #192	; 0xc0
 80013ac:	204e      	movs	r0, #78	; 0x4e
 80013ae:	f7ff fcbd 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 80013b2:	4910      	ldr	r1, [pc, #64]	; (80013f4 <screen+0x80>)
 80013b4:	204e      	movs	r0, #78	; 0x4e
 80013b6:	f7ff fcfa 	bl	8000dae <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e006      	b.n	80013ce <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 80013c0:	2110      	movs	r1, #16
 80013c2:	204e      	movs	r0, #78	; 0x4e
 80013c4:	f7ff fcb2 	bl	8000d2c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f1c3 030b 	rsb	r3, r3, #11
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbf2      	blt.n	80013c0 <screen+0x4c>
	}
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e6:	b004      	add	sp, #16
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000758 	.word	0x20000758
 80013f0:	08009774 	.word	0x08009774
 80013f4:	20000938 	.word	0x20000938

080013f8 <note>:

void note(char pitch_text, char octave_text, char temp_text, int time,
		int volume) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	460b      	mov	r3, r1
 8001406:	71bb      	strb	r3, [r7, #6]
 8001408:	4613      	mov	r3, r2
 800140a:	717b      	strb	r3, [r7, #5]

	if (flag_bit_1ms == 1) {
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <note+0xb8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d148      	bne.n	80014a6 <note+0xae>
		int pitch = pitch_change(pitch_text);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f84e 	bl	80014b8 <pitch_change>
 800141c:	4603      	mov	r3, r0
 800141e:	61fb      	str	r3, [r7, #28]
		int octave = octave_change(octave_text);
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f883 	bl	800152e <octave_change>
 8001428:	4603      	mov	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
		int temp = temp_change(temp_text);
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f88a 	bl	8001548 <temp_change>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]

		// avoid error(ARR == CCR)
		if (volume <= 2) {
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	2b02      	cmp	r3, #2
 800143c:	dc01      	bgt.n	8001442 <note+0x4a>
			volume = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// setting the octave
		if (octave != 4) {
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d022      	beq.n	800148e <note+0x96>
			if (octave < 4) {
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b03      	cmp	r3, #3
 800144c:	dc0f      	bgt.n	800146e <note+0x76>
				for (int i = 0; i < 4 - octave; i++) {
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	e005      	b.n	8001460 <note+0x68>
					pitch *= 2;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < 4 - octave; i++) {
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	3301      	adds	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f1c3 0304 	rsb	r3, r3, #4
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf3      	blt.n	8001454 <note+0x5c>
 800146c:	e00f      	b.n	800148e <note+0x96>
				}
			} else {
				for (int i = 0; i < octave - 4; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e007      	b.n	8001484 <note+0x8c>
					pitch /= 2;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	0fda      	lsrs	r2, r3, #31
 8001478:	4413      	add	r3, r2
 800147a:	105b      	asrs	r3, r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < octave - 4; i++) {
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	3b04      	subs	r3, #4
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf2      	blt.n	8001474 <note+0x7c>
				}
			}
		}

		TIM3->ARR = pitch;
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <note+0xbc>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR3 = pitch / volume;
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	fb92 f2f3 	sdiv	r2, r2, r3
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <note+0xbc>)
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

		flag_bit_1ms = 0;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <note+0xb8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
	}
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200008b4 	.word	0x200008b4
 80014b4:	40000400 	.word	0x40000400

080014b8 <pitch_change>:
uint32_t pitch_change(char pitch_text) {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b4e      	cmp	r3, #78	; 0x4e
 80014c6:	d101      	bne.n	80014cc <pitch_change+0x14>
		return N;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e02a      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'C') {
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b43      	cmp	r3, #67	; 0x43
 80014d0:	d102      	bne.n	80014d8 <pitch_change+0x20>
		return C;
 80014d2:	f642 53f2 	movw	r3, #11762	; 0x2df2
 80014d6:	e024      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'D') {
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b44      	cmp	r3, #68	; 0x44
 80014dc:	d102      	bne.n	80014e4 <pitch_change+0x2c>
		return D;
 80014de:	f642 03e5 	movw	r3, #10469	; 0x28e5
 80014e2:	e01e      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'E') {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b45      	cmp	r3, #69	; 0x45
 80014e8:	d102      	bne.n	80014f0 <pitch_change+0x38>
		return E;
 80014ea:	f242 4366 	movw	r3, #9318	; 0x2466
 80014ee:	e018      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'F') {
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b46      	cmp	r3, #70	; 0x46
 80014f4:	d102      	bne.n	80014fc <pitch_change+0x44>
		return F;
 80014f6:	f242 2357 	movw	r3, #8791	; 0x2257
 80014fa:	e012      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'G') {
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b47      	cmp	r3, #71	; 0x47
 8001500:	d102      	bne.n	8001508 <pitch_change+0x50>
		return G;
 8001502:	f641 6391 	movw	r3, #7825	; 0x1e91
 8001506:	e00c      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'A') {
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b41      	cmp	r3, #65	; 0x41
 800150c:	d102      	bne.n	8001514 <pitch_change+0x5c>
		return A;
 800150e:	f641 3336 	movw	r3, #6966	; 0x1b36
 8001512:	e006      	b.n	8001522 <pitch_change+0x6a>
	} else if (pitch_text == 'B') {
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b42      	cmp	r3, #66	; 0x42
 8001518:	d102      	bne.n	8001520 <pitch_change+0x68>
		return B;
 800151a:	f641 0338 	movw	r3, #6200	; 0x1838
 800151e:	e000      	b.n	8001522 <pitch_change+0x6a>
	} else {
		return N;
 8001520:	2300      	movs	r3, #0
	}
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <octave_change>:
uint32_t octave_change(char octave_text) {
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3b30      	subs	r3, #48	; 0x30
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <temp_change>:
uint32_t temp_change(char temp_text) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b4e      	cmp	r3, #78	; 0x4e
 8001556:	d101      	bne.n	800155c <temp_change+0x14>
		return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e00b      	b.n	8001574 <temp_change+0x2c>
	} else if (temp_text == 'S') {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b53      	cmp	r3, #83	; 0x53
 8001560:	d101      	bne.n	8001566 <temp_change+0x1e>
		return 1;
 8001562:	2301      	movs	r3, #1
 8001564:	e006      	b.n	8001574 <temp_change+0x2c>
	} else if (temp_text == 'F') {
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b46      	cmp	r3, #70	; 0x46
 800156a:	d102      	bne.n	8001572 <temp_change+0x2a>
		return -1;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
 8001570:	e000      	b.n	8001574 <temp_change+0x2c>
	} else {
		return 0;
 8001572:	2300      	movs	r3, #0
	}
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <note_address>:

char* note_address(int song_num, int count_note) {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	char *song_temp_note;

	if (song_num == 1) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <note_address+0x1c>
		song_temp_note = &song_note_1[count_note][0];
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <note_address+0x3c>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e007      	b.n	80015ac <note_address+0x2c>
	} else if (song_num == 2) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d104      	bne.n	80015ac <note_address+0x2c>
		song_temp_note = &song_note_2[count_note][0];
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <note_address+0x40>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	60fb      	str	r3, [r7, #12]
	}

	return song_temp_note;
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000018 	.word	0x20000018
 80015c0:	20000600 	.word	0x20000600

080015c4 <time_value>:

int time_value(int song_num, int count_note) {
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	int song_time;

	if (song_num == 1) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <time_value+0x1c>
		song_time = song_time_1[count_note];
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <time_value+0x3c>)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e007      	b.n	80015f0 <time_value+0x2c>
	}

	else if (song_num == 2) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d104      	bne.n	80015f0 <time_value+0x2c>
		song_time = song_time_2[count_note];
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <time_value+0x40>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	60fb      	str	r3, [r7, #12]
	}
	return song_time;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000030c 	.word	0x2000030c
 8001604:	200006ac 	.word	0x200006ac

08001608 <adc_up>:

void adc_up(int up) {
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af02      	add	r7, sp, #8
 800160e:	6078      	str	r0, [r7, #4]
	if (up > 0) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f340 810d 	ble.w	8001832 <adc_up+0x22a>
		//AM or PM switching
		if (cursor == 0) {
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <adc_up+0x234>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d13c      	bne.n	800169a <adc_up+0x92>
			if (sTime_AL.TimeFormat == 0) {
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <adc_up+0x238>)
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d119      	bne.n	800165c <adc_up+0x54>
				sTime_AL.TimeFormat = 1;
 8001628:	4b85      	ldr	r3, [pc, #532]	; (8001840 <adc_up+0x238>)
 800162a:	2201      	movs	r2, #1
 800162c:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 0) {
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <adc_up+0x238>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <adc_up+0x34>
					sTime_AL.Hours = 12;
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <adc_up+0x238>)
 8001638:	220c      	movs	r2, #12
 800163a:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 800163c:	4b7f      	ldr	r3, [pc, #508]	; (800183c <adc_up+0x234>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461d      	mov	r5, r3
 8001642:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <adc_up+0x238>)
 8001644:	466c      	mov	r4, sp
 8001646:	f103 020c 	add.w	r2, r3, #12
 800164a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001654:	4628      	mov	r0, r5
 8001656:	f7ff fe8d 	bl	8001374 <screen>
 800165a:	e0e8      	b.n	800182e <adc_up+0x226>

			} else if (sTime_AL.TimeFormat == 1) {
 800165c:	4b78      	ldr	r3, [pc, #480]	; (8001840 <adc_up+0x238>)
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	2b01      	cmp	r3, #1
 8001662:	f040 80e4 	bne.w	800182e <adc_up+0x226>
				sTime_AL.TimeFormat = 0;
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <adc_up+0x238>)
 8001668:	2200      	movs	r2, #0
 800166a:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 12) {
 800166c:	4b74      	ldr	r3, [pc, #464]	; (8001840 <adc_up+0x238>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d102      	bne.n	800167a <adc_up+0x72>
					sTime_AL.Hours = 0;
 8001674:	4b72      	ldr	r3, [pc, #456]	; (8001840 <adc_up+0x238>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 800167a:	4b70      	ldr	r3, [pc, #448]	; (800183c <adc_up+0x234>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461d      	mov	r5, r3
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <adc_up+0x238>)
 8001682:	466c      	mov	r4, sp
 8001684:	f103 020c 	add.w	r2, r3, #12
 8001688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001692:	4628      	mov	r0, r5
 8001694:	f7ff fe6e 	bl	8001374 <screen>
 8001698:	e0c9      	b.n	800182e <adc_up+0x226>
			}
		}

		// 10H switching
		else if (cursor == 3) {
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <adc_up+0x234>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d119      	bne.n	80016d6 <adc_up+0xce>

			if (sTime_AL.Hours < 3) {
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <adc_up+0x238>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d805      	bhi.n	80016b6 <adc_up+0xae>
				sTime_AL.Hours += 10;
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <adc_up+0x238>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	330a      	adds	r3, #10
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <adc_up+0x238>)
 80016b4:	701a      	strb	r2, [r3, #0]
			}
			screen(cursor, sTime_AL);
 80016b6:	4b61      	ldr	r3, [pc, #388]	; (800183c <adc_up+0x234>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461d      	mov	r5, r3
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <adc_up+0x238>)
 80016be:	466c      	mov	r4, sp
 80016c0:	f103 020c 	add.w	r2, r3, #12
 80016c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	4628      	mov	r0, r5
 80016d0:	f7ff fe50 	bl	8001374 <screen>
 80016d4:	e0ab      	b.n	800182e <adc_up+0x226>
		}

		// 1H switching
		else if (cursor == 4) {
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <adc_up+0x234>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d130      	bne.n	8001740 <adc_up+0x138>

			//AM
			if (sTime_AL.TimeFormat == 0) {
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <adc_up+0x238>)
 80016e0:	78db      	ldrb	r3, [r3, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <adc_up+0xf4>
				// 0 ~ 11
				if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <adc_up+0x238>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b0a      	cmp	r3, #10
 80016ec:	d818      	bhi.n	8001720 <adc_up+0x118>
					sTime_AL.Hours++;
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <adc_up+0x238>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b52      	ldr	r3, [pc, #328]	; (8001840 <adc_up+0x238>)
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e011      	b.n	8001720 <adc_up+0x118>
				}
			}
			//PM
			else if (sTime_AL.TimeFormat == 1) {
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <adc_up+0x238>)
 80016fe:	78db      	ldrb	r3, [r3, #3]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10d      	bne.n	8001720 <adc_up+0x118>

				// 1 ~ 12
				if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <adc_up+0x238>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <adc_up+0x118>
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <adc_up+0x238>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b0b      	cmp	r3, #11
 8001712:	d805      	bhi.n	8001720 <adc_up+0x118>
					sTime_AL.Hours++;
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <adc_up+0x238>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b48      	ldr	r3, [pc, #288]	; (8001840 <adc_up+0x238>)
 800171e:	701a      	strb	r2, [r3, #0]
				}
			}
			screen(cursor, sTime_AL);
 8001720:	4b46      	ldr	r3, [pc, #280]	; (800183c <adc_up+0x234>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461d      	mov	r5, r3
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <adc_up+0x238>)
 8001728:	466c      	mov	r4, sp
 800172a:	f103 020c 	add.w	r2, r3, #12
 800172e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001732:	e884 0003 	stmia.w	r4, {r0, r1}
 8001736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001738:	4628      	mov	r0, r5
 800173a:	f7ff fe1b 	bl	8001374 <screen>
 800173e:	e076      	b.n	800182e <adc_up+0x226>
		}

		// 10M switching
		else if (cursor == 6) {
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <adc_up+0x234>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b06      	cmp	r3, #6
 8001746:	d119      	bne.n	800177c <adc_up+0x174>
			if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <adc_up+0x238>)
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	2b31      	cmp	r3, #49	; 0x31
 800174e:	d805      	bhi.n	800175c <adc_up+0x154>
				sTime_AL.Minutes += 10;
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <adc_up+0x238>)
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	330a      	adds	r3, #10
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <adc_up+0x238>)
 800175a:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <adc_up+0x234>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461d      	mov	r5, r3
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <adc_up+0x238>)
 8001764:	466c      	mov	r4, sp
 8001766:	f103 020c 	add.w	r2, r3, #12
 800176a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001774:	4628      	mov	r0, r5
 8001776:	f7ff fdfd 	bl	8001374 <screen>
 800177a:	e058      	b.n	800182e <adc_up+0x226>
		}
		// 1M switching
		else if (cursor == 7) {
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <adc_up+0x234>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b07      	cmp	r3, #7
 8001782:	d119      	bne.n	80017b8 <adc_up+0x1b0>
			if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <adc_up+0x238>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b3a      	cmp	r3, #58	; 0x3a
 800178a:	d805      	bhi.n	8001798 <adc_up+0x190>
				sTime_AL.Minutes += 1;
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <adc_up+0x238>)
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	3301      	adds	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <adc_up+0x238>)
 8001796:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <adc_up+0x234>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461d      	mov	r5, r3
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <adc_up+0x238>)
 80017a0:	466c      	mov	r4, sp
 80017a2:	f103 020c 	add.w	r2, r3, #12
 80017a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80017ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff fddf 	bl	8001374 <screen>
 80017b6:	e03a      	b.n	800182e <adc_up+0x226>
		}

		// 10S switching
		else if (cursor == 9) {
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <adc_up+0x234>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	d119      	bne.n	80017f4 <adc_up+0x1ec>
			if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <adc_up+0x238>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b31      	cmp	r3, #49	; 0x31
 80017c6:	d805      	bhi.n	80017d4 <adc_up+0x1cc>
				sTime_AL.Seconds += 10;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <adc_up+0x238>)
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	330a      	adds	r3, #10
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <adc_up+0x238>)
 80017d2:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <adc_up+0x234>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461d      	mov	r5, r3
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <adc_up+0x238>)
 80017dc:	466c      	mov	r4, sp
 80017de:	f103 020c 	add.w	r2, r3, #12
 80017e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80017ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ec:	4628      	mov	r0, r5
 80017ee:	f7ff fdc1 	bl	8001374 <screen>
 80017f2:	e01c      	b.n	800182e <adc_up+0x226>
		}
		// 1S switching
		else if (cursor == 10) {
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <adc_up+0x234>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b0a      	cmp	r3, #10
 80017fa:	d118      	bne.n	800182e <adc_up+0x226>
			if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <adc_up+0x238>)
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	2b3a      	cmp	r3, #58	; 0x3a
 8001802:	d805      	bhi.n	8001810 <adc_up+0x208>
				sTime_AL.Seconds += 1;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <adc_up+0x238>)
 8001806:	789b      	ldrb	r3, [r3, #2]
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <adc_up+0x238>)
 800180e:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <adc_up+0x234>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461d      	mov	r5, r3
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <adc_up+0x238>)
 8001818:	466c      	mov	r4, sp
 800181a:	f103 020c 	add.w	r2, r3, #12
 800181e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001822:	e884 0003 	stmia.w	r4, {r0, r1}
 8001826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001828:	4628      	mov	r0, r5
 800182a:	f7ff fda3 	bl	8001374 <screen>
		}

		// clear the up flag
		up = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
	}
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000900 	.word	0x20000900
 8001840:	20000974 	.word	0x20000974

08001844 <adc_down>:

void adc_down(int down) {
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af02      	add	r7, sp, #8
 800184a:	6078      	str	r0, [r7, #4]
	if (down > 0) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f340 80e8 	ble.w	8001a24 <adc_down+0x1e0>

		//AM or PM switching
		if (cursor == 0) {
 8001854:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <adc_down+0x1e8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13c      	bne.n	80018d6 <adc_down+0x92>
			if (sTime_AL.TimeFormat == 0) {
 800185c:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <adc_down+0x1ec>)
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d119      	bne.n	8001898 <adc_down+0x54>
				sTime_AL.TimeFormat = 1;
 8001864:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <adc_down+0x1ec>)
 8001866:	2201      	movs	r2, #1
 8001868:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 0) {
 800186a:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <adc_down+0x1ec>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <adc_down+0x34>
					sTime_AL.Hours = 12;
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <adc_down+0x1ec>)
 8001874:	220c      	movs	r2, #12
 8001876:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 8001878:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <adc_down+0x1e8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461d      	mov	r5, r3
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <adc_down+0x1ec>)
 8001880:	466c      	mov	r4, sp
 8001882:	f103 020c 	add.w	r2, r3, #12
 8001886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188a:	e884 0003 	stmia.w	r4, {r0, r1}
 800188e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001890:	4628      	mov	r0, r5
 8001892:	f7ff fd6f 	bl	8001374 <screen>
 8001896:	e0c3      	b.n	8001a20 <adc_down+0x1dc>
			} else if (sTime_AL.TimeFormat == 1) {
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <adc_down+0x1ec>)
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 80bf 	bne.w	8001a20 <adc_down+0x1dc>
				sTime_AL.TimeFormat = 0;
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <adc_down+0x1ec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 12) {
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <adc_down+0x1ec>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d102      	bne.n	80018b6 <adc_down+0x72>
					sTime_AL.Hours = 0;
 80018b0:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <adc_down+0x1ec>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <adc_down+0x1e8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461d      	mov	r5, r3
 80018bc:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <adc_down+0x1ec>)
 80018be:	466c      	mov	r4, sp
 80018c0:	f103 020c 	add.w	r2, r3, #12
 80018c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80018cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ce:	4628      	mov	r0, r5
 80018d0:	f7ff fd50 	bl	8001374 <screen>
 80018d4:	e0a4      	b.n	8001a20 <adc_down+0x1dc>
			}
		}

		// 1H switching
		else if (cursor == 4) {
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <adc_down+0x1e8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d119      	bne.n	8001912 <adc_down+0xce>
			if (sTime_AL.Hours > 0) {
 80018de:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <adc_down+0x1ec>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <adc_down+0xae>
				sTime_AL.Hours--;
 80018e6:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <adc_down+0x1ec>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <adc_down+0x1ec>)
 80018f0:	701a      	strb	r2, [r3, #0]
			}
			screen(cursor, sTime_AL);
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <adc_down+0x1e8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461d      	mov	r5, r3
 80018f8:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <adc_down+0x1ec>)
 80018fa:	466c      	mov	r4, sp
 80018fc:	f103 020c 	add.w	r2, r3, #12
 8001900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001904:	e884 0003 	stmia.w	r4, {r0, r1}
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	4628      	mov	r0, r5
 800190c:	f7ff fd32 	bl	8001374 <screen>
 8001910:	e086      	b.n	8001a20 <adc_down+0x1dc>
		}

		// 10M switching
		else if (cursor == 6) {
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <adc_down+0x1e8>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d11d      	bne.n	8001956 <adc_down+0x112>
			if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 800191a:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <adc_down+0x1ec>)
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <adc_down+0xf2>
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <adc_down+0x1ec>)
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	2b32      	cmp	r3, #50	; 0x32
 8001928:	d805      	bhi.n	8001936 <adc_down+0xf2>
				sTime_AL.Minutes -= 10;
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <adc_down+0x1ec>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	3b0a      	subs	r3, #10
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <adc_down+0x1ec>)
 8001934:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <adc_down+0x1e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461d      	mov	r5, r3
 800193c:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <adc_down+0x1ec>)
 800193e:	466c      	mov	r4, sp
 8001940:	f103 020c 	add.w	r2, r3, #12
 8001944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001948:	e884 0003 	stmia.w	r4, {r0, r1}
 800194c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194e:	4628      	mov	r0, r5
 8001950:	f7ff fd10 	bl	8001374 <screen>
 8001954:	e064      	b.n	8001a20 <adc_down+0x1dc>
		}
		// 1M switching
		else if (cursor == 7) {
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <adc_down+0x1e8>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b07      	cmp	r3, #7
 800195c:	d11d      	bne.n	800199a <adc_down+0x156>
			if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <adc_down+0x1ec>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <adc_down+0x136>
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <adc_down+0x1ec>)
 8001968:	785b      	ldrb	r3, [r3, #1]
 800196a:	2b3b      	cmp	r3, #59	; 0x3b
 800196c:	d805      	bhi.n	800197a <adc_down+0x136>
				sTime_AL.Minutes -= 1;
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <adc_down+0x1ec>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	3b01      	subs	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <adc_down+0x1ec>)
 8001978:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <adc_down+0x1e8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461d      	mov	r5, r3
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <adc_down+0x1ec>)
 8001982:	466c      	mov	r4, sp
 8001984:	f103 020c 	add.w	r2, r3, #12
 8001988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800198c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001992:	4628      	mov	r0, r5
 8001994:	f7ff fcee 	bl	8001374 <screen>
 8001998:	e042      	b.n	8001a20 <adc_down+0x1dc>
		}

		// 10S switching
		else if (cursor == 9) {
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <adc_down+0x1e8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d11d      	bne.n	80019de <adc_down+0x19a>
			if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <adc_down+0x1ec>)
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <adc_down+0x17a>
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <adc_down+0x1ec>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	2b32      	cmp	r3, #50	; 0x32
 80019b0:	d805      	bhi.n	80019be <adc_down+0x17a>
				sTime_AL.Seconds -= 10;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <adc_down+0x1ec>)
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	3b0a      	subs	r3, #10
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <adc_down+0x1ec>)
 80019bc:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <adc_down+0x1e8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461d      	mov	r5, r3
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <adc_down+0x1ec>)
 80019c6:	466c      	mov	r4, sp
 80019c8:	f103 020c 	add.w	r2, r3, #12
 80019cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80019d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d6:	4628      	mov	r0, r5
 80019d8:	f7ff fccc 	bl	8001374 <screen>
 80019dc:	e020      	b.n	8001a20 <adc_down+0x1dc>
		}
		// 1S switching
		else if (cursor == 10) {
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <adc_down+0x1e8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	d11c      	bne.n	8001a20 <adc_down+0x1dc>
			if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <adc_down+0x1ec>)
 80019e8:	789b      	ldrb	r3, [r3, #2]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <adc_down+0x1be>
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <adc_down+0x1ec>)
 80019f0:	789b      	ldrb	r3, [r3, #2]
 80019f2:	2b3b      	cmp	r3, #59	; 0x3b
 80019f4:	d805      	bhi.n	8001a02 <adc_down+0x1be>
				sTime_AL.Seconds -= 1;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <adc_down+0x1ec>)
 80019f8:	789b      	ldrb	r3, [r3, #2]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <adc_down+0x1ec>)
 8001a00:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <adc_down+0x1e8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461d      	mov	r5, r3
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <adc_down+0x1ec>)
 8001a0a:	466c      	mov	r4, sp
 8001a0c:	f103 020c 	add.w	r2, r3, #12
 8001a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff fcaa 	bl	8001374 <screen>
		}

		// clear the down flag
		down = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2c:	20000900 	.word	0x20000900
 8001a30:	20000974 	.word	0x20000974

08001a34 <adc_left>:

void adc_left(int left) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if (left > 0) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dd3d      	ble.n	8001abe <adc_left+0x8a>
		if (cursor > 0) {
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <adc_left+0x94>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d037      	beq.n	8001aba <adc_left+0x86>
			cursor--;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <adc_left+0x94>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <adc_left+0x94>)
 8001a54:	701a      	strb	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001a56:	2110      	movs	r1, #16
 8001a58:	204e      	movs	r0, #78	; 0x4e
 8001a5a:	f7ff f967 	bl	8000d2c <LCD_SendCommand>

			if (cursor == 8) {
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <adc_left+0x94>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d109      	bne.n	8001a7a <adc_left+0x46>
				cursor--;
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <adc_left+0x94>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <adc_left+0x94>)
 8001a70:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001a72:	2110      	movs	r1, #16
 8001a74:	204e      	movs	r0, #78	; 0x4e
 8001a76:	f7ff f959 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 5) {
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <adc_left+0x94>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d109      	bne.n	8001a96 <adc_left+0x62>
				cursor--;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <adc_left+0x94>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <adc_left+0x94>)
 8001a8c:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001a8e:	2110      	movs	r1, #16
 8001a90:	204e      	movs	r0, #78	; 0x4e
 8001a92:	f7ff f94b 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 2) {
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <adc_left+0x94>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d10d      	bne.n	8001aba <adc_left+0x86>
				cursor -= 2;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <adc_left+0x94>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b02      	subs	r3, #2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <adc_left+0x94>)
 8001aa8:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001aaa:	2110      	movs	r1, #16
 8001aac:	204e      	movs	r0, #78	; 0x4e
 8001aae:	f7ff f93d 	bl	8000d2c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	204e      	movs	r0, #78	; 0x4e
 8001ab6:	f7ff f939 	bl	8000d2c <LCD_SendCommand>
			}
		}

		// clear the left flag
		left = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000900 	.word	0x20000900

08001acc <adc_right>:

void adc_right(int right) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	if (right > 0) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dd3d      	ble.n	8001b56 <adc_right+0x8a>

		if (cursor < 10) {
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <adc_right+0x94>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	d837      	bhi.n	8001b52 <adc_right+0x86>
			cursor++;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <adc_right+0x94>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <adc_right+0x94>)
 8001aec:	701a      	strb	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001aee:	2114      	movs	r1, #20
 8001af0:	204e      	movs	r0, #78	; 0x4e
 8001af2:	f7ff f91b 	bl	8000d2c <LCD_SendCommand>

			if (cursor == 8) {
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <adc_right+0x94>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d109      	bne.n	8001b12 <adc_right+0x46>
				cursor++;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <adc_right+0x94>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <adc_right+0x94>)
 8001b08:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b0a:	2114      	movs	r1, #20
 8001b0c:	204e      	movs	r0, #78	; 0x4e
 8001b0e:	f7ff f90d 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 5) {
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <adc_right+0x94>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d109      	bne.n	8001b2e <adc_right+0x62>
				cursor++;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <adc_right+0x94>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <adc_right+0x94>)
 8001b24:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b26:	2114      	movs	r1, #20
 8001b28:	204e      	movs	r0, #78	; 0x4e
 8001b2a:	f7ff f8ff 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 1) {
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <adc_right+0x94>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d10d      	bne.n	8001b52 <adc_right+0x86>
				cursor += 2;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <adc_right+0x94>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <adc_right+0x94>)
 8001b40:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b42:	2114      	movs	r1, #20
 8001b44:	204e      	movs	r0, #78	; 0x4e
 8001b46:	f7ff f8f1 	bl	8000d2c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	204e      	movs	r0, #78	; 0x4e
 8001b4e:	f7ff f8ed 	bl	8000d2c <LCD_SendCommand>
			}
		}

		//clear the right flag
		right = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
	}
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000900 	.word	0x20000900

08001b64 <mode_choice>:
	else if (DATA_32 == 0x00000002) {
		song_choice_flag = 1;
	}
}

void mode_choice() {
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af02      	add	r7, sp, #8
	//mode choose while loop
	while (rising_edge >= 1) {
 8001b6a:	e0d4      	b.n	8001d16 <mode_choice+0x1b2>
		cur_tick = HAL_GetTick();
 8001b6c:	f001 f8d4 	bl	8002d18 <HAL_GetTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a6d      	ldr	r2, [pc, #436]	; (8001d28 <mode_choice+0x1c4>)
 8001b74:	6013      	str	r3, [r2, #0]
		tick_gap = cur_tick - start_tick;
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <mode_choice+0x1c4>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <mode_choice+0x1c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <mode_choice+0x1cc>)
 8001b82:	6013      	str	r3, [r2, #0]

		//remove bounce effect
		if (tick_gap < 100 && rising_edge > 1) {
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <mode_choice+0x1cc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b63      	cmp	r3, #99	; 0x63
 8001b8a:	d806      	bhi.n	8001b9a <mode_choice+0x36>
 8001b8c:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <mode_choice+0x1d0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d902      	bls.n	8001b9a <mode_choice+0x36>
			rising_edge = 1;
 8001b94:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <mode_choice+0x1d0>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
		}

		if (tick_gap >= 300) {
 8001b9a:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <mode_choice+0x1cc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ba2:	f0c0 80b8 	bcc.w	8001d16 <mode_choice+0x1b2>

			if (rising_edge == 1 && falling_edge >= 1) {
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <mode_choice+0x1d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d142      	bne.n	8001c34 <mode_choice+0xd0>
 8001bae:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <mode_choice+0x1d4>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03e      	beq.n	8001c34 <mode_choice+0xd0>

				// init the temp
				sTime_temp.Hours = 0;
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <mode_choice+0x1d8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
				sTime_temp.Minutes = 0;
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <mode_choice+0x1d8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]
				sTime_temp.Seconds = 0;
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <mode_choice+0x1d8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	709a      	strb	r2, [r3, #2]
				sTime_temp.TimeFormat = 0;
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <mode_choice+0x1d8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	70da      	strb	r2, [r3, #3]
				cursor = 0;
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <mode_choice+0x1dc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

				// LCD up
				LCD_Init(LCD_ADDR);
 8001bd4:	204e      	movs	r0, #78	; 0x4e
 8001bd6:	f7ff f8cd 	bl	8000d74 <LCD_Init>
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	204e      	movs	r0, #78	; 0x4e
 8001bde:	f7ff f8a5 	bl	8000d2c <LCD_SendCommand>
				strcpy(lcdup, "Set Time Mode");
 8001be2:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <mode_choice+0x1e0>)
 8001be4:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <mode_choice+0x1e4>)
 8001be6:	4614      	mov	r4, r2
 8001be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bea:	c407      	stmia	r4!, {r0, r1, r2}
 8001bec:	8023      	strh	r3, [r4, #0]
				LCD_SendString(LCD_ADDR, lcdup);
 8001bee:	4955      	ldr	r1, [pc, #340]	; (8001d44 <mode_choice+0x1e0>)
 8001bf0:	204e      	movs	r0, #78	; 0x4e
 8001bf2:	f7ff f8dc 	bl	8000dae <LCD_SendString>
				// LCD down
				screen(cursor, sTime_temp);
 8001bf6:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <mode_choice+0x1dc>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <mode_choice+0x1d8>)
 8001bfe:	466c      	mov	r4, sp
 8001c00:	f103 020c 	add.w	r2, r3, #12
 8001c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c08:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f7ff fbb0 	bl	8001374 <screen>

				LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001c14:	210f      	movs	r1, #15
 8001c16:	204e      	movs	r0, #78	; 0x4e
 8001c18:	f7ff f888 	bl	8000d2c <LCD_SendCommand>

				//init the user button
				rising_edge = 0;
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <mode_choice+0x1d0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <mode_choice+0x1d4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
				mode = 1;
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <mode_choice+0x1e8>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
				printf("one click==========================\r\n");
 8001c2e:	4848      	ldr	r0, [pc, #288]	; (8001d50 <mode_choice+0x1ec>)
 8001c30:	f006 fbe2 	bl	80083f8 <puts>
			}

			if (rising_edge >= 2 && falling_edge >= 1) {
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <mode_choice+0x1d0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d944      	bls.n	8001cc6 <mode_choice+0x162>
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <mode_choice+0x1d4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d040      	beq.n	8001cc6 <mode_choice+0x162>
				// init the temp
				sTime_AL.Hours = 0;
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <mode_choice+0x1f0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				sTime_AL.Minutes = 0;
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <mode_choice+0x1f0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	705a      	strb	r2, [r3, #1]
				sTime_AL.Seconds = 0;
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <mode_choice+0x1f0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	709a      	strb	r2, [r3, #2]
				sTime_AL.TimeFormat = 0;
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <mode_choice+0x1f0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	70da      	strb	r2, [r3, #3]
				cursor = 0;
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <mode_choice+0x1dc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]

				// LCD up
				LCD_Init(LCD_ADDR);
 8001c62:	204e      	movs	r0, #78	; 0x4e
 8001c64:	f7ff f886 	bl	8000d74 <LCD_Init>
				//blink on
				LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001c68:	210f      	movs	r1, #15
 8001c6a:	204e      	movs	r0, #78	; 0x4e
 8001c6c:	f7ff f85e 	bl	8000d2c <LCD_SendCommand>

				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	204e      	movs	r0, #78	; 0x4e
 8001c74:	f7ff f85a 	bl	8000d2c <LCD_SendCommand>
				strcpy(lcdup, "Alarm Mode");
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <mode_choice+0x1e0>)
 8001c7a:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <mode_choice+0x1f4>)
 8001c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c7e:	c303      	stmia	r3!, {r0, r1}
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	3302      	adds	r3, #2
 8001c84:	0c12      	lsrs	r2, r2, #16
 8001c86:	701a      	strb	r2, [r3, #0]
				LCD_SendString(LCD_ADDR, lcdup);
 8001c88:	492e      	ldr	r1, [pc, #184]	; (8001d44 <mode_choice+0x1e0>)
 8001c8a:	204e      	movs	r0, #78	; 0x4e
 8001c8c:	f7ff f88f 	bl	8000dae <LCD_SendString>
				// LCD down
				screen(cursor, sTime_AL);
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <mode_choice+0x1dc>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461d      	mov	r5, r3
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <mode_choice+0x1f0>)
 8001c98:	466c      	mov	r4, sp
 8001c9a:	f103 020c 	add.w	r2, r3, #12
 8001c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ca2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f7ff fb63 	bl	8001374 <screen>

				//init the user button
				rising_edge = 0;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <mode_choice+0x1d0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <mode_choice+0x1d4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
				mode = 2;
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <mode_choice+0x1e8>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]

				printf("two click++++++++++++++++++++++++++\r\n");
 8001cc0:	4826      	ldr	r0, [pc, #152]	; (8001d5c <mode_choice+0x1f8>)
 8001cc2:	f006 fb99 	bl	80083f8 <puts>
			}

			if (tick_gap >= 2000 && falling_edge == 0) {
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <mode_choice+0x1cc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cce:	d322      	bcc.n	8001d16 <mode_choice+0x1b2>
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <mode_choice+0x1d4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11e      	bne.n	8001d16 <mode_choice+0x1b2>

				LCD_Init(LCD_ADDR);
 8001cd8:	204e      	movs	r0, #78	; 0x4e
 8001cda:	f7ff f84b 	bl	8000d74 <LCD_Init>

				// set address to 0x00
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	204e      	movs	r0, #78	; 0x4e
 8001ce2:	f7ff f823 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, "Music Setting");
 8001ce6:	491e      	ldr	r1, [pc, #120]	; (8001d60 <mode_choice+0x1fc>)
 8001ce8:	204e      	movs	r0, #78	; 0x4e
 8001cea:	f7ff f860 	bl	8000dae <LCD_SendString>

				// set address to 0x40
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001cee:	21c0      	movs	r1, #192	; 0xc0
 8001cf0:	204e      	movs	r0, #78	; 0x4e
 8001cf2:	f7ff f81b 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, "1.Traffic Light");
 8001cf6:	491b      	ldr	r1, [pc, #108]	; (8001d64 <mode_choice+0x200>)
 8001cf8:	204e      	movs	r0, #78	; 0x4e
 8001cfa:	f7ff f858 	bl	8000dae <LCD_SendString>

				rising_edge = 0;
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <mode_choice+0x1d0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <mode_choice+0x1d4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
				mode = 3;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <mode_choice+0x1e8>)
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	701a      	strb	r2, [r3, #0]
				printf("long click//////////////////////////\r\n");
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <mode_choice+0x204>)
 8001d12:	f006 fb71 	bl	80083f8 <puts>
	while (rising_edge >= 1) {
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <mode_choice+0x1d0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f af26 	bne.w	8001b6c <mode_choice+0x8>
			}
		}
	}
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdb0      	pop	{r4, r5, r7, pc}
 8001d28:	200008f8 	.word	0x200008f8
 8001d2c:	200008f4 	.word	0x200008f4
 8001d30:	200008fc 	.word	0x200008fc
 8001d34:	200008f1 	.word	0x200008f1
 8001d38:	200008f2 	.word	0x200008f2
 8001d3c:	2000094c 	.word	0x2000094c
 8001d40:	20000900 	.word	0x20000900
 8001d44:	200008e0 	.word	0x200008e0
 8001d48:	08009788 	.word	0x08009788
 8001d4c:	200008f3 	.word	0x200008f3
 8001d50:	08009798 	.word	0x08009798
 8001d54:	20000974 	.word	0x20000974
 8001d58:	080097c0 	.word	0x080097c0
 8001d5c:	080097cc 	.word	0x080097cc
 8001d60:	080097f4 	.word	0x080097f4
 8001d64:	08009804 	.word	0x08009804
 8001d68:	08009814 	.word	0x08009814

08001d6c <mode_func_Normal>:

void mode_func_Normal() {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af02      	add	r7, sp, #8
	while (mode == 0) {
 8001d72:	e0e5      	b.n	8001f40 <mode_func_Normal+0x1d4>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d74:	2200      	movs	r2, #0
 8001d76:	4977      	ldr	r1, [pc, #476]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001d78:	4877      	ldr	r0, [pc, #476]	; (8001f58 <mode_func_Normal+0x1ec>)
 8001d7a:	f003 ff73 	bl	8005c64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4976      	ldr	r1, [pc, #472]	; (8001f5c <mode_func_Normal+0x1f0>)
 8001d82:	4875      	ldr	r0, [pc, #468]	; (8001f58 <mode_func_Normal+0x1ec>)
 8001d84:	f004 f850 	bl	8005e28 <HAL_RTC_GetDate>
		HAL_ADC_Start(&hadc1);
 8001d88:	4875      	ldr	r0, [pc, #468]	; (8001f60 <mode_func_Normal+0x1f4>)
 8001d8a:	f001 f839 	bl	8002e00 <HAL_ADC_Start>

		sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours,
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <mode_func_Normal+0x1f8>)
 8001d9c:	441a      	add	r2, r3
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
				sTime.Minutes, sTime.Seconds);
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
		sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours,
 8001da8:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 8001daa:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001dac:	789b      	ldrb	r3, [r3, #2]
		sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours,
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	9100      	str	r1, [sp, #0]
 8001db2:	4603      	mov	r3, r0
 8001db4:	496c      	ldr	r1, [pc, #432]	; (8001f68 <mode_func_Normal+0x1fc>)
 8001db6:	486d      	ldr	r0, [pc, #436]	; (8001f6c <mode_func_Normal+0x200>)
 8001db8:	f006 fb26 	bl	8008408 <siprintf>

		if (strcmp(lcdup, "Park Jung Hwan") != 0) {
 8001dbc:	496c      	ldr	r1, [pc, #432]	; (8001f70 <mode_func_Normal+0x204>)
 8001dbe:	486d      	ldr	r0, [pc, #436]	; (8001f74 <mode_func_Normal+0x208>)
 8001dc0:	f7fe fa16 	bl	80001f0 <strcmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d032      	beq.n	8001e30 <mode_func_Normal+0xc4>
			LCD_Init(LCD_ADDR);
 8001dca:	204e      	movs	r0, #78	; 0x4e
 8001dcc:	f7fe ffd2 	bl	8000d74 <LCD_Init>
			strcpy(lcdup, "Park Jung Hwan");
 8001dd0:	4a68      	ldr	r2, [pc, #416]	; (8001f74 <mode_func_Normal+0x208>)
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <mode_func_Normal+0x204>)
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd8:	c407      	stmia	r4!, {r0, r1, r2}
 8001dda:	8023      	strh	r3, [r4, #0]
 8001ddc:	3402      	adds	r4, #2
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	7023      	strb	r3, [r4, #0]
			// LCD up
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	204e      	movs	r0, #78	; 0x4e
 8001de6:	f7fe ffa1 	bl	8000d2c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, lcdup);
 8001dea:	4962      	ldr	r1, [pc, #392]	; (8001f74 <mode_func_Normal+0x208>)
 8001dec:	204e      	movs	r0, #78	; 0x4e
 8001dee:	f7fe ffde 	bl	8000dae <LCD_SendString>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001df2:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a59      	ldr	r2, [pc, #356]	; (8001f64 <mode_func_Normal+0x1f8>)
 8001e00:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001e02:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001e06:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001e08:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001e0a:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001e0c:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	9100      	str	r1, [sp, #0]
 8001e16:	4603      	mov	r3, r0
 8001e18:	4953      	ldr	r1, [pc, #332]	; (8001f68 <mode_func_Normal+0x1fc>)
 8001e1a:	4854      	ldr	r0, [pc, #336]	; (8001f6c <mode_func_Normal+0x200>)
 8001e1c:	f006 faf4 	bl	8008408 <siprintf>

			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001e20:	21c0      	movs	r1, #192	; 0xc0
 8001e22:	204e      	movs	r0, #78	; 0x4e
 8001e24:	f7fe ff82 	bl	8000d2c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 8001e28:	4950      	ldr	r1, [pc, #320]	; (8001f6c <mode_func_Normal+0x200>)
 8001e2a:	204e      	movs	r0, #78	; 0x4e
 8001e2c:	f7fe ffbf 	bl	8000dae <LCD_SendString>
		}

		sTimestart = sTimecur;
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <mode_func_Normal+0x20c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <mode_func_Normal+0x210>)
 8001e36:	6013      	str	r3, [r2, #0]
		sTimecur = sTime.Seconds;
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <mode_func_Normal+0x1e8>)
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <mode_func_Normal+0x20c>)
 8001e40:	601a      	str	r2, [r3, #0]

		if (sTimecur != sTimestart) {
 8001e42:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <mode_func_Normal+0x20c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <mode_func_Normal+0x210>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d007      	beq.n	8001e5e <mode_func_Normal+0xf2>
			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001e4e:	21c0      	movs	r1, #192	; 0xc0
 8001e50:	204e      	movs	r0, #78	; 0x4e
 8001e52:	f7fe ff6b 	bl	8000d2c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 8001e56:	4945      	ldr	r1, [pc, #276]	; (8001f6c <mode_func_Normal+0x200>)
 8001e58:	204e      	movs	r0, #78	; 0x4e
 8001e5a:	f7fe ffa8 	bl	8000dae <LCD_SendString>
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////
		if (strcmp(Time, Time_AL) == 0) {
 8001e5e:	4948      	ldr	r1, [pc, #288]	; (8001f80 <mode_func_Normal+0x214>)
 8001e60:	4842      	ldr	r0, [pc, #264]	; (8001f6c <mode_func_Normal+0x200>)
 8001e62:	f7fe f9c5 	bl	80001f0 <strcmp>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d108      	bne.n	8001e7e <mode_func_Normal+0x112>
			flag_alarm++;
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <mode_func_Normal+0x218>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a44      	ldr	r2, [pc, #272]	; (8001f84 <mode_func_Normal+0x218>)
 8001e74:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001e76:	2108      	movs	r1, #8
 8001e78:	4843      	ldr	r0, [pc, #268]	; (8001f88 <mode_func_Normal+0x21c>)
 8001e7a:	f004 f9fb 	bl	8006274 <HAL_TIM_PWM_Start>

		}
		if (flag_alarm > 0) {
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <mode_func_Normal+0x218>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d05a      	beq.n	8001f3c <mode_func_Normal+0x1d0>
			int song_temp_time = time_value(song_flag, count_note);
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <mode_func_Normal+0x220>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <mode_func_Normal+0x224>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fb96 	bl	80015c4 <time_value>
 8001e98:	60f8      	str	r0, [r7, #12]
			char *song_temp_note = note_address(song_flag, count_note);
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <mode_func_Normal+0x220>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <mode_func_Normal+0x224>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7ff fb6a 	bl	8001580 <note_address>
 8001eac:	60b8      	str	r0, [r7, #8]

			if (song_temp_note[0] == '0') {
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b30      	cmp	r3, #48	; 0x30
 8001eb4:	d10c      	bne.n	8001ed0 <mode_func_Normal+0x164>
				TIM3->CCR3 = 0;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <mode_func_Normal+0x228>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	63da      	str	r2, [r3, #60]	; 0x3c
				count_note = 0;
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <mode_func_Normal+0x224>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
				flag_alarm = 0;
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <mode_func_Normal+0x218>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ec8:	2108      	movs	r1, #8
 8001eca:	482f      	ldr	r0, [pc, #188]	; (8001f88 <mode_func_Normal+0x21c>)
 8001ecc:	f004 fa9a 	bl	8006404 <HAL_TIM_PWM_Stop>
			}


			song_time_division = 2000 / song_temp_time;
 8001ed0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <mode_func_Normal+0x22c>)
 8001ede:	601a      	str	r2, [r3, #0]

			if (song_time_division >= count_bit) {
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <mode_func_Normal+0x22c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <mode_func_Normal+0x230>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d319      	bcc.n	8001f20 <mode_func_Normal+0x1b4>

				char tempP;
				char tempO;
				char tempT;

				tempP = song_temp_note[0];
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	71fb      	strb	r3, [r7, #7]
				tempO = song_temp_note[1];
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	71bb      	strb	r3, [r7, #6]
				tempT = song_temp_note[2];
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	789b      	ldrb	r3, [r3, #2]
 8001efc:	717b      	strb	r3, [r7, #5]

				note(tempP, tempO, tempT, 2000 / song_time_division,
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <mode_func_Normal+0x22c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	461c      	mov	r4, r3
						2 + (count_bit));
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <mode_func_Normal+0x230>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3302      	adds	r3, #2
				note(tempP, tempO, tempT, 2000 / song_time_division,
 8001f12:	797a      	ldrb	r2, [r7, #5]
 8001f14:	79b9      	ldrb	r1, [r7, #6]
 8001f16:	79f8      	ldrb	r0, [r7, #7]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	f7ff fa6c 	bl	80013f8 <note>

			}

			if (song_time_division < count_bit) {
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <mode_func_Normal+0x22c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <mode_func_Normal+0x230>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <mode_func_Normal+0x1d0>
				count_note++;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <mode_func_Normal+0x224>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <mode_func_Normal+0x224>)
 8001f34:	6013      	str	r3, [r2, #0]
				count_bit = 0;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <mode_func_Normal+0x230>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

			////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		//==========================================================================================================
		mode_choice();
 8001f3c:	f7ff fe12 	bl	8001b64 <mode_choice>
	while (mode == 0) {
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <mode_func_Normal+0x234>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f43f af15 	beq.w	8001d74 <mode_func_Normal+0x8>
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}
 8001f54:	20000920 	.word	0x20000920
 8001f58:	2000098c 	.word	0x2000098c
 8001f5c:	20000934 	.word	0x20000934
 8001f60:	200007ec 	.word	0x200007ec
 8001f64:	20000758 	.word	0x20000758
 8001f68:	08009774 	.word	0x08009774
 8001f6c:	2000090c 	.word	0x2000090c
 8001f70:	0800983c 	.word	0x0800983c
 8001f74:	200008e0 	.word	0x200008e0
 8001f78:	200008c8 	.word	0x200008c8
 8001f7c:	200008c4 	.word	0x200008c4
 8001f80:	20000960 	.word	0x20000960
 8001f84:	200008b8 	.word	0x200008b8
 8001f88:	200009f8 	.word	0x200009f8
 8001f8c:	200008ad 	.word	0x200008ad
 8001f90:	200008bc 	.word	0x200008bc
 8001f94:	40000400 	.word	0x40000400
 8001f98:	200008c0 	.word	0x200008c0
 8001f9c:	200008b0 	.word	0x200008b0
 8001fa0:	200008f3 	.word	0x200008f3

08001fa4 <mode_func_SetTime>:

void mode_func_SetTime() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8001fa8:	e051      	b.n	800204e <mode_func_SetTime+0xaa>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8001faa:	482c      	ldr	r0, [pc, #176]	; (800205c <mode_func_SetTime+0xb8>)
 8001fac:	f000 ff28 	bl	8002e00 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <mode_func_SetTime+0xbc>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02f      	beq.n	8002018 <mode_func_SetTime+0x74>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <mode_func_SetTime+0xc0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <mode_func_SetTime+0xc4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <mode_func_SetTime+0x2e>
					InitFlag(0);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff f970 	bl	80012ac <InitFlag>
					printf("MODE1 exit\r\n");
 8001fcc:	4827      	ldr	r0, [pc, #156]	; (800206c <mode_func_SetTime+0xc8>)
 8001fce:	f006 fa13 	bl	80083f8 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <mode_func_SetTime+0xc4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11e      	bne.n	8002018 <mode_func_SetTime+0x74>
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <mode_func_SetTime+0xcc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d91a      	bls.n	8002018 <mode_func_SetTime+0x74>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <mode_func_SetTime+0xd0>)
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <mode_func_SetTime+0xd4>)
 8001fe8:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <mode_func_SetTime+0xd0>)
 8001fec:	785a      	ldrb	r2, [r3, #1]
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <mode_func_SetTime+0xd4>)
 8001ff0:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <mode_func_SetTime+0xd0>)
 8001ff4:	789a      	ldrb	r2, [r3, #2]
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <mode_func_SetTime+0xd4>)
 8001ff8:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <mode_func_SetTime+0xd0>)
 8001ffc:	78da      	ldrb	r2, [r3, #3]
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <mode_func_SetTime+0xd4>)
 8002000:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002002:	2200      	movs	r2, #0
 8002004:	491c      	ldr	r1, [pc, #112]	; (8002078 <mode_func_SetTime+0xd4>)
 8002006:	481d      	ldr	r0, [pc, #116]	; (800207c <mode_func_SetTime+0xd8>)
 8002008:	f003 fd92 	bl	8005b30 <HAL_RTC_SetTime>

					InitFlag(0);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff f94d 	bl	80012ac <InitFlag>
					printf("MODE1 APPLY\r\n");
 8002012:	481b      	ldr	r0, [pc, #108]	; (8002080 <mode_func_SetTime+0xdc>)
 8002014:	f006 f9f0 	bl	80083f8 <puts>
				}
			}

			if (get_time > 0) {
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <mode_func_SetTime+0xe0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d016      	beq.n	800204e <mode_func_SetTime+0xaa>

				adc_up(up);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <mode_func_SetTime+0xe4>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff faef 	bl	8001608 <adc_up>
				adc_down(down);
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <mode_func_SetTime+0xe8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc08 	bl	8001844 <adc_down>
				adc_left(left);
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <mode_func_SetTime+0xec>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fcfb 	bl	8001a34 <adc_left>
				adc_right(right);
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <mode_func_SetTime+0xf0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fd42 	bl	8001acc <adc_right>

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <mode_func_SetTime+0xe0>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <mode_func_SetTime+0xf4>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d0a9      	beq.n	8001faa <mode_func_SetTime+0x6>

			}
		}

		//==========================================================================================================
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200007ec 	.word	0x200007ec
 8002060:	200008f1 	.word	0x200008f1
 8002064:	200008d0 	.word	0x200008d0
 8002068:	200008f2 	.word	0x200008f2
 800206c:	0800984c 	.word	0x0800984c
 8002070:	200008d4 	.word	0x200008d4
 8002074:	2000094c 	.word	0x2000094c
 8002078:	20000920 	.word	0x20000920
 800207c:	2000098c 	.word	0x2000098c
 8002080:	08009858 	.word	0x08009858
 8002084:	200008cc 	.word	0x200008cc
 8002088:	20000908 	.word	0x20000908
 800208c:	20000909 	.word	0x20000909
 8002090:	2000090a 	.word	0x2000090a
 8002094:	2000090b 	.word	0x2000090b
 8002098:	200008f3 	.word	0x200008f3

0800209c <mode_func_SetAlarm>:
void mode_func_SetAlarm() {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af02      	add	r7, sp, #8
		//AL loop
		while (mode == 2) {
 80020a2:	e057      	b.n	8002154 <mode_func_SetAlarm+0xb8>
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 80020a4:	482f      	ldr	r0, [pc, #188]	; (8002164 <mode_func_SetAlarm+0xc8>)
 80020a6:	f000 feab 	bl	8002e00 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <mode_func_SetAlarm+0xcc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d035      	beq.n	800211e <mode_func_SetAlarm+0x82>

				// Alarm init
				sprintf(Time_AL, "");
 80020b2:	492e      	ldr	r1, [pc, #184]	; (800216c <mode_func_SetAlarm+0xd0>)
 80020b4:	482e      	ldr	r0, [pc, #184]	; (8002170 <mode_func_SetAlarm+0xd4>)
 80020b6:	f006 f9a7 	bl	8008408 <siprintf>

				// this flag is check the exit or apply
				apply_flag = 1;
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <mode_func_SetAlarm+0xd8>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <mode_func_SetAlarm+0xdc>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <mode_func_SetAlarm+0x38>
					// ===========================================init func

					InitFlag(0);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff f8ef 	bl	80012ac <InitFlag>
					printf("MODE exit\r\n");
 80020ce:	482b      	ldr	r0, [pc, #172]	; (800217c <mode_func_SetAlarm+0xe0>)
 80020d0:	f006 f992 	bl	80083f8 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <mode_func_SetAlarm+0xdc>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d120      	bne.n	800211e <mode_func_SetAlarm+0x82>
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <mode_func_SetAlarm+0xe4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d91c      	bls.n	800211e <mode_func_SetAlarm+0x82>

					sprintf(Time_AL, "%s %02d:%02d:%02d",
							ampm[sTime_AL.TimeFormat], sTime_AL.Hours,
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <mode_func_SetAlarm+0xe8>)
 80020e6:	78db      	ldrb	r3, [r3, #3]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <mode_func_SetAlarm+0xec>)
 80020f2:	441a      	add	r2, r3
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <mode_func_SetAlarm+0xe8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 80020f8:	4618      	mov	r0, r3
							sTime_AL.Minutes, sTime_AL.Seconds);
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <mode_func_SetAlarm+0xe8>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 80020fe:	4619      	mov	r1, r3
							sTime_AL.Minutes, sTime_AL.Seconds);
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <mode_func_SetAlarm+0xe8>)
 8002102:	789b      	ldrb	r3, [r3, #2]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	9100      	str	r1, [sp, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	4920      	ldr	r1, [pc, #128]	; (800218c <mode_func_SetAlarm+0xf0>)
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <mode_func_SetAlarm+0xd4>)
 800210e:	f006 f97b 	bl	8008408 <siprintf>

					// ===========================================init func
					InitFlag(0);
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff f8ca 	bl	80012ac <InitFlag>
					printf("MODE APPLY\r\n");
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <mode_func_SetAlarm+0xf4>)
 800211a:	f006 f96d 	bl	80083f8 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <mode_func_SetAlarm+0xf8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <mode_func_SetAlarm+0xb8>

				adc_up(up);
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <mode_func_SetAlarm+0xfc>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fa6c 	bl	8001608 <adc_up>
				adc_down(down);
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <mode_func_SetAlarm+0x100>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fb85 	bl	8001844 <adc_down>
				adc_left(left);
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <mode_func_SetAlarm+0x104>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc78 	bl	8001a34 <adc_left>
				adc_right(right);
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <mode_func_SetAlarm+0x108>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fcbf 	bl	8001acc <adc_right>

				// clear the get_time flag (to measure the time)
				get_time = 0;
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <mode_func_SetAlarm+0xf8>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <mode_func_SetAlarm+0x10c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d0a3      	beq.n	80020a4 <mode_func_SetAlarm+0x8>

			}
		}
		//==========================================================================================================
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200007ec 	.word	0x200007ec
 8002168:	200008f1 	.word	0x200008f1
 800216c:	08009868 	.word	0x08009868
 8002170:	20000960 	.word	0x20000960
 8002174:	200008d0 	.word	0x200008d0
 8002178:	200008f2 	.word	0x200008f2
 800217c:	0800986c 	.word	0x0800986c
 8002180:	200008d4 	.word	0x200008d4
 8002184:	20000974 	.word	0x20000974
 8002188:	20000758 	.word	0x20000758
 800218c:	08009774 	.word	0x08009774
 8002190:	08009878 	.word	0x08009878
 8002194:	200008cc 	.word	0x200008cc
 8002198:	20000908 	.word	0x20000908
 800219c:	20000909 	.word	0x20000909
 80021a0:	2000090a 	.word	0x2000090a
 80021a4:	2000090b 	.word	0x2000090b
 80021a8:	200008f3 	.word	0x200008f3

080021ac <mode_func_SetSong>:
void mode_func_SetSong() {
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
		//Song choice loop
		while (mode == 3) {
 80021b2:	e08a      	b.n	80022ca <mode_func_SetSong+0x11e>

			HAL_ADC_Start(&hadc1);
 80021b4:	484a      	ldr	r0, [pc, #296]	; (80022e0 <mode_func_SetSong+0x134>)
 80021b6:	f000 fe23 	bl	8002e00 <HAL_ADC_Start>
			uint32_t DATA_32;
			if (get_time > 0) {
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <mode_func_SetSong+0x138>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <mode_func_SetSong+0x98>
//				HAL_ADC_Start(&hadc1);

				if (up > 0) {
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <mode_func_SetSong+0x13c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01a      	beq.n	8002200 <mode_func_SetSong+0x54>
					song_flag++;
 80021ca:	4b48      	ldr	r3, [pc, #288]	; (80022ec <mode_func_SetSong+0x140>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <mode_func_SetSong+0x140>)
 80021d4:	701a      	strb	r2, [r3, #0]

					if (song_flag <= 0) {
 80021d6:	4b45      	ldr	r3, [pc, #276]	; (80022ec <mode_func_SetSong+0x140>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <mode_func_SetSong+0x3a>
						song_flag = 2;
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <mode_func_SetSong+0x140>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e006      	b.n	80021f4 <mode_func_SetSong+0x48>
					}
					else if (song_flag > 2) {
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <mode_func_SetSong+0x140>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d902      	bls.n	80021f4 <mode_func_SetSong+0x48>
						song_flag = 1;
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <mode_func_SetSong+0x140>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
					}
					DATA_32 = song_Set();
 80021f4:	f000 f894 	bl	8002320 <song_Set>
 80021f8:	6078      	str	r0, [r7, #4]
					up = 0;
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <mode_func_SetSong+0x13c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8002200:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <mode_func_SetSong+0x144>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01a      	beq.n	800223e <mode_func_SetSong+0x92>
					song_flag--;
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <mode_func_SetSong+0x140>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <mode_func_SetSong+0x140>)
 8002212:	701a      	strb	r2, [r3, #0]
					if (song_flag <= 0) {
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <mode_func_SetSong+0x140>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <mode_func_SetSong+0x78>
						song_flag = 2;
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <mode_func_SetSong+0x140>)
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e006      	b.n	8002232 <mode_func_SetSong+0x86>
					}
					else if (song_flag > 2) {
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <mode_func_SetSong+0x140>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d902      	bls.n	8002232 <mode_func_SetSong+0x86>
						song_flag = 1;
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <mode_func_SetSong+0x140>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
					}
					DATA_32 = song_Set();
 8002232:	f000 f875 	bl	8002320 <song_Set>
 8002236:	6078      	str	r0, [r7, #4]
					down = 0;
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <mode_func_SetSong+0x144>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <mode_func_SetSong+0x138>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
			}


			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <mode_func_SetSong+0x148>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03e      	beq.n	80022ca <mode_func_SetSong+0x11e>

				// this flag is check the exit or apply
				apply_flag = 1;
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <mode_func_SetSong+0x14c>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <mode_func_SetSong+0x150>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <mode_func_SetSong+0xba>
					InitFlag(0);
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff f826 	bl	80012ac <InitFlag>
					printf("MODE3 exit\r\n");
 8002260:	4827      	ldr	r0, [pc, #156]	; (8002300 <mode_func_SetSong+0x154>)
 8002262:	f006 f8c9 	bl	80083f8 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <mode_func_SetSong+0x150>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12d      	bne.n	80022ca <mode_func_SetSong+0x11e>
 800226e:	4b25      	ldr	r3, [pc, #148]	; (8002304 <mode_func_SetSong+0x158>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d929      	bls.n	80022ca <mode_func_SetSong+0x11e>

					LCD_Init(LCD_ADDR);
 8002276:	204e      	movs	r0, #78	; 0x4e
 8002278:	f7fe fd7c 	bl	8000d74 <LCD_Init>

					// set address to 0x00
					LCD_SendCommand(LCD_ADDR, 0b10000000);
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	204e      	movs	r0, #78	; 0x4e
 8002280:	f7fe fd54 	bl	8000d2c <LCD_SendCommand>
					strcpy(lcdup, "Flash Writing");
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <mode_func_SetSong+0x15c>)
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <mode_func_SetSong+0x160>)
 8002288:	4614      	mov	r4, r2
 800228a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228c:	c407      	stmia	r4!, {r0, r1, r2}
 800228e:	8023      	strh	r3, [r4, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8002290:	491d      	ldr	r1, [pc, #116]	; (8002308 <mode_func_SetSong+0x15c>)
 8002292:	204e      	movs	r0, #78	; 0x4e
 8002294:	f7fe fd8b 	bl	8000dae <LCD_SendString>

					// set address to 0x40
					LCD_SendCommand(LCD_ADDR, 0b11000000);
 8002298:	21c0      	movs	r1, #192	; 0xc0
 800229a:	204e      	movs	r0, #78	; 0x4e
 800229c:	f7fe fd46 	bl	8000d2c <LCD_SendCommand>
					LCD_SendString(LCD_ADDR, "Wait for a Sec");
 80022a0:	491b      	ldr	r1, [pc, #108]	; (8002310 <mode_func_SetSong+0x164>)
 80022a2:	204e      	movs	r0, #78	; 0x4e
 80022a4:	f7fe fd83 	bl	8000dae <LCD_SendString>

					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					uint32_t ADDR_FLASH_SECTOR = ADDR_FLASH_SECTOR_3;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <mode_func_SetSong+0x168>)
 80022aa:	603b      	str	r3, [r7, #0]
					FlashWritingOne(ADDR_FLASH_SECTOR, DATA_32);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6838      	ldr	r0, [r7, #0]
 80022b0:	f7fe fb56 	bl	8000960 <FlashWritingOne>
					song_flag = *((uint32_t*) 0x0800C000);
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <mode_func_SetSong+0x168>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <mode_func_SetSong+0x140>)
 80022bc:	701a      	strb	r2, [r3, #0]

					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					InitFlag(0);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fff4 	bl	80012ac <InitFlag>
					printf("MODE3 APPLY\r\n");
 80022c4:	4814      	ldr	r0, [pc, #80]	; (8002318 <mode_func_SetSong+0x16c>)
 80022c6:	f006 f897 	bl	80083f8 <puts>
		while (mode == 3) {
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <mode_func_SetSong+0x170>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	f43f af70 	beq.w	80021b4 <mode_func_SetSong+0x8>
				}
			}
		}
		//==========================================================================================================
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	bf00      	nop
 80022e0:	200007ec 	.word	0x200007ec
 80022e4:	200008cc 	.word	0x200008cc
 80022e8:	20000908 	.word	0x20000908
 80022ec:	200008ad 	.word	0x200008ad
 80022f0:	20000909 	.word	0x20000909
 80022f4:	200008f1 	.word	0x200008f1
 80022f8:	200008d0 	.word	0x200008d0
 80022fc:	200008f2 	.word	0x200008f2
 8002300:	08009884 	.word	0x08009884
 8002304:	200008d4 	.word	0x200008d4
 8002308:	200008e0 	.word	0x200008e0
 800230c:	08009890 	.word	0x08009890
 8002310:	080098a0 	.word	0x080098a0
 8002314:	0800c000 	.word	0x0800c000
 8002318:	080098b0 	.word	0x080098b0
 800231c:	200008f3 	.word	0x200008f3

08002320 <song_Set>:

uint32_t song_Set() {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
	uint32_t DATA_32;

	LCD_Init(LCD_ADDR);
 8002326:	204e      	movs	r0, #78	; 0x4e
 8002328:	f7fe fd24 	bl	8000d74 <LCD_Init>

	if (song_flag == 1) {
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <song_Set+0x70>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d111      	bne.n	8002358 <song_Set+0x38>
		DATA_32 = 0x00000001;
 8002334:	2301      	movs	r3, #1
 8002336:	607b      	str	r3, [r7, #4]
		// set address to 0x00
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	204e      	movs	r0, #78	; 0x4e
 800233c:	f7fe fcf6 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Music Setting");
 8002340:	4914      	ldr	r1, [pc, #80]	; (8002394 <song_Set+0x74>)
 8002342:	204e      	movs	r0, #78	; 0x4e
 8002344:	f7fe fd33 	bl	8000dae <LCD_SendString>

		// set address to 0x40
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8002348:	21c0      	movs	r1, #192	; 0xc0
 800234a:	204e      	movs	r0, #78	; 0x4e
 800234c:	f7fe fcee 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, song_title_1);
 8002350:	4911      	ldr	r1, [pc, #68]	; (8002398 <song_Set+0x78>)
 8002352:	204e      	movs	r0, #78	; 0x4e
 8002354:	f7fe fd2b 	bl	8000dae <LCD_SendString>
	}
	if (song_flag == 2) {
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <song_Set+0x70>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d111      	bne.n	8002384 <song_Set+0x64>
		DATA_32 = 0x00000002;
 8002360:	2302      	movs	r3, #2
 8002362:	607b      	str	r3, [r7, #4]
		// set address to 0x00
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	204e      	movs	r0, #78	; 0x4e
 8002368:	f7fe fce0 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Music Setting");
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <song_Set+0x74>)
 800236e:	204e      	movs	r0, #78	; 0x4e
 8002370:	f7fe fd1d 	bl	8000dae <LCD_SendString>

		// set address to 0x40
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8002374:	21c0      	movs	r1, #192	; 0xc0
 8002376:	204e      	movs	r0, #78	; 0x4e
 8002378:	f7fe fcd8 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, song_title_2);
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <song_Set+0x7c>)
 800237e:	204e      	movs	r0, #78	; 0x4e
 8002380:	f7fe fd15 	bl	8000dae <LCD_SendString>
	}

	return DATA_32;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200008ad 	.word	0x200008ad
 8002394:	080097f4 	.word	0x080097f4
 8002398:	20000000 	.word	0x20000000
 800239c:	20000010 	.word	0x20000010

080023a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023a8:	e7fe      	b.n	80023a8 <Error_Handler+0x8>
	...

080023ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023c0:	2300      	movs	r3, #0
 80023c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <MX_RTC_Init+0xb0>)
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <MX_RTC_Init+0xb4>)
 80023c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <MX_RTC_Init+0xb0>)
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <MX_RTC_Init+0xb0>)
 80023d2:	227f      	movs	r2, #127	; 0x7f
 80023d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <MX_RTC_Init+0xb0>)
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <MX_RTC_Init+0xb0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_RTC_Init+0xb0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <MX_RTC_Init+0xb0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023ee:	481b      	ldr	r0, [pc, #108]	; (800245c <MX_RTC_Init+0xb0>)
 80023f0:	f003 fb28 	bl	8005a44 <HAL_RTC_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80023fa:	f7ff ffd1 	bl	80023a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800240a:	2301      	movs	r3, #1
 800240c:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	480f      	ldr	r0, [pc, #60]	; (800245c <MX_RTC_Init+0xb0>)
 800241e:	f003 fb87 	bl	8005b30 <HAL_RTC_SetTime>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002428:	f7ff ffba 	bl	80023a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800242c:	2301      	movs	r3, #1
 800242e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002430:	2301      	movs	r3, #1
 8002432:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002434:	2301      	movs	r3, #1
 8002436:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <MX_RTC_Init+0xb0>)
 8002444:	f003 fc6c 	bl	8005d20 <HAL_RTC_SetDate>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800244e:	f7ff ffa7 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000098c 	.word	0x2000098c
 8002460:	40002800 	.word	0x40002800

08002464 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	; 0x38
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	2230      	movs	r2, #48	; 0x30
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f005 ff31 	bl	80082dc <memset>
  if(rtcHandle->Instance==RTC)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_RTC_MspInit+0x4c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d111      	bne.n	80024a8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002484:	2320      	movs	r3, #32
 8002486:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f916 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800249e:	f7ff ff7f 	bl	80023a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_RTC_MspInit+0x50>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3738      	adds	r7, #56	; 0x38
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40002800 	.word	0x40002800
 80024b4:	42470e3c 	.word	0x42470e3c

080024b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_MspInit+0x4c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_MspInit+0x4c>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 fbcc 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM2_IRQHandler+0x10>)
 8002562:	f003 ffbf 	bl	80064e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200009b0 	.word	0x200009b0

08002570 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM4_IRQHandler+0x10>)
 8002576:	f003 ffb5 	bl	80064e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000a40 	.word	0x20000a40

08002584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <USART2_IRQHandler+0x10>)
 800258a:	f004 ff15 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000a88 	.word	0x20000a88

08002598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <USART3_IRQHandler+0x10>)
 800259e:	f004 ff0b 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000acc 	.word	0x20000acc

080025ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025b4:	f001 fdd2 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e00a      	b.n	80025e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ce:	f3af 8000 	nop.w
 80025d2:	4601      	mov	r1, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbf0      	blt.n	80025ce <_read+0x12>
	}

return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e009      	b.n	800261c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fc05 	bl	8000e20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf1      	blt.n	8002608 <_write+0x12>
	}
	return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_close>:

int _close(int file)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	return -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002656:	605a      	str	r2, [r3, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_isatty>:

int _isatty(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return 1;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f005 fdde 	bl	8008288 <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20030000 	.word	0x20030000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	200009ac 	.word	0x200009ac
 8002700:	20000b48 	.word	0x20000b48

08002704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <SystemInit+0x20>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <SystemInit+0x20>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_TIM2_Init+0x98>)
 8002746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800274a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <MX_TIM2_Init+0x98>)
 800274e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_TIM2_Init+0x98>)
 8002756:	2210      	movs	r2, #16
 8002758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_TIM2_Init+0x98>)
 800275c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002760:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <MX_TIM2_Init+0x98>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_TIM2_Init+0x98>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800276e:	4814      	ldr	r0, [pc, #80]	; (80027c0 <MX_TIM2_Init+0x98>)
 8002770:	f003 fc66 	bl	8006040 <HAL_TIM_Base_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800277a:	f7ff fe11 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002782:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	4619      	mov	r1, r3
 800278a:	480d      	ldr	r0, [pc, #52]	; (80027c0 <MX_TIM2_Init+0x98>)
 800278c:	f004 f874 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002796:	f7ff fe03 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800279a:	2320      	movs	r3, #32
 800279c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027a2:	463b      	mov	r3, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	4806      	ldr	r0, [pc, #24]	; (80027c0 <MX_TIM2_Init+0x98>)
 80027a8:	f004 fc66 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027b2:	f7ff fdf5 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200009b0 	.word	0x200009b0

080027c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08e      	sub	sp, #56	; 0x38
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d8:	f107 0320 	add.w	r3, r7, #32
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
 80027f0:	615a      	str	r2, [r3, #20]
 80027f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <MX_TIM3_Init+0xe4>)
 80027f6:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <MX_TIM3_Init+0xe8>)
 80027f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <MX_TIM3_Init+0xe4>)
 80027fc:	221d      	movs	r2, #29
 80027fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002802:	2210      	movs	r2, #16
 8002804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002808:	f641 0238 	movw	r2, #6200	; 0x1838
 800280c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800281a:	4823      	ldr	r0, [pc, #140]	; (80028a8 <MX_TIM3_Init+0xe4>)
 800281c:	f003 fc10 	bl	8006040 <HAL_TIM_Base_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002826:	f7ff fdbb 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002834:	4619      	mov	r1, r3
 8002836:	481c      	ldr	r0, [pc, #112]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002838:	f004 f81e 	bl	8006878 <HAL_TIM_ConfigClockSource>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002842:	f7ff fdad 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002846:	4818      	ldr	r0, [pc, #96]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002848:	f003 fcba 	bl	80061c0 <HAL_TIM_PWM_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002852:	f7ff fda5 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	4619      	mov	r1, r3
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <MX_TIM3_Init+0xe4>)
 8002866:	f004 fc07 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002870:	f7ff fd96 	bl	80023a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002874:	2360      	movs	r3, #96	; 0x60
 8002876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2208      	movs	r2, #8
 8002888:	4619      	mov	r1, r3
 800288a:	4807      	ldr	r0, [pc, #28]	; (80028a8 <MX_TIM3_Init+0xe4>)
 800288c:	f003 ff32 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002896:	f7ff fd83 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <MX_TIM3_Init+0xe4>)
 800289c:	f000 f8a2 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80028a0:	bf00      	nop
 80028a2:	3738      	adds	r7, #56	; 0x38
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200009f8 	.word	0x200009f8
 80028ac:	40000400 	.word	0x40000400

080028b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c4:	463b      	mov	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <MX_TIM4_Init+0x94>)
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <MX_TIM4_Init+0x98>)
 80028d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <MX_TIM4_Init+0x94>)
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_TIM4_Init+0x94>)
 80028da:	2210      	movs	r2, #16
 80028dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <MX_TIM4_Init+0x94>)
 80028e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80028e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_TIM4_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <MX_TIM4_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028f2:	4814      	ldr	r0, [pc, #80]	; (8002944 <MX_TIM4_Init+0x94>)
 80028f4:	f003 fba4 	bl	8006040 <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80028fe:	f7ff fd4f 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	4619      	mov	r1, r3
 800290e:	480d      	ldr	r0, [pc, #52]	; (8002944 <MX_TIM4_Init+0x94>)
 8002910:	f003 ffb2 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800291a:	f7ff fd41 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002926:	463b      	mov	r3, r7
 8002928:	4619      	mov	r1, r3
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <MX_TIM4_Init+0x94>)
 800292c:	f004 fba4 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002936:	f7ff fd33 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000a40 	.word	0x20000a40
 8002948:	40000800 	.word	0x40000800

0800294c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d10e      	bne.n	800297c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800297a:	e026      	b.n	80029ca <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_TIM_Base_MspInit+0x90>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
}
 80029a2:	e012      	b.n	80029ca <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_TIM_Base_MspInit+0x94>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10d      	bne.n	80029ca <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_TIM_Base_MspInit+0x8c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800

080029e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_TIM_MspPostInit+0x68>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11d      	bne.n	8002a42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a22:	2301      	movs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <HAL_TIM_MspPostInit+0x70>)
 8002a3e:	f001 f9c9 	bl	8003dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400

08002a58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <MX_USART2_UART_Init+0x50>)
 8002a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_USART2_UART_Init+0x4c>)
 8002a90:	f004 fb82 	bl	8007198 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a9a:	f7ff fc81 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000a88 	.word	0x20000a88
 8002aa8:	40004400 	.word	0x40004400

08002aac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <MX_USART3_UART_Init+0x50>)
 8002ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_USART3_UART_Init+0x4c>)
 8002ae4:	f004 fb58 	bl	8007198 <HAL_UART_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002aee:	f7ff fc57 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000acc 	.word	0x20000acc
 8002afc:	40004800 	.word	0x40004800

08002b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <HAL_UART_MspInit+0xe8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12c      	bne.n	8002b7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a30      	ldr	r2, [pc, #192]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b5a:	2360      	movs	r3, #96	; 0x60
 8002b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	4619      	mov	r1, r3
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <HAL_UART_MspInit+0xf0>)
 8002b76:	f001 f92d 	bl	8003dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b7a:	e031      	b.n	8002be0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_UART_MspInit+0xf4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12c      	bne.n	8002be0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <HAL_UART_MspInit+0xf0>)
 8002bdc:	f001 f8fa 	bl	8003dd4 <HAL_GPIO_Init>
}
 8002be0:	bf00      	nop
 8002be2:	3730      	adds	r7, #48	; 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40004800 	.word	0x40004800

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c22:	f7ff fd6f 	bl	8002704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f005 fb35 	bl	8008294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe f90b 	bl	8000e44 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	200007d0 	.word	0x200007d0
  ldr r2, =_sidata
 8002c3c:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 8002c40:	200007d0 	.word	0x200007d0
  ldr r4, =_ebss
 8002c44:	20000b44 	.word	0x20000b44

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 fcd3 	bl	8003620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	200f      	movs	r0, #15
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fc1a 	bl	80024b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fceb 	bl	800368a <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 fcb3 	bl	8003636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000760 	.word	0x20000760
 8002ce8:	20000768 	.word	0x20000768
 8002cec:	20000764 	.word	0x20000764

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000768 	.word	0x20000768
 8002d14:	20000b10 	.word	0x20000b10

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000b10 	.word	0x20000b10

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000768 	.word	0x20000768

08002d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e033      	b.n	8002df6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fc66 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa5c 	bl	8003288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
 8002de6:	e001      	b.n	8002dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start+0x1a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0b2      	b.n	8002f80 <HAL_ADC_Start+0x180>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d018      	beq.n	8002e62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <HAL_ADC_Start+0x18c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_ADC_Start+0x190>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9a      	lsrs	r2, r3, #18
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d17a      	bne.n	8002f66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f023 0206 	bic.w	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12a      	bne.n	8002f3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_ADC_Start+0x198>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d015      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <HAL_ADC_Start+0x19c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_Start+0x106>
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <HAL_ADC_Start+0x1a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d136      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d130      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d129      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e020      	b.n	8002f7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_ADC_Start+0x198>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e00b      	b.n	8002f7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000760 	.word	0x20000760
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	40012100 	.word	0x40012100
 8002fa0:	40012200 	.word	0x40012200

08002fa4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Stop+0x16>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e021      	b.n	8002ffe <HAL_ADC_Stop+0x5a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e113      	b.n	8003268 <HAL_ADC_ConfigChannel+0x244>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d925      	bls.n	800309c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	4603      	mov	r3, r0
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4403      	add	r3, r0
 800308e:	3b1e      	subs	r3, #30
 8003090:	409a      	lsls	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e022      	b.n	80030e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	2207      	movs	r2, #7
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4403      	add	r3, r0
 80030d8:	409a      	lsls	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d824      	bhi.n	8003134 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	221f      	movs	r2, #31
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b05      	subs	r3, #5
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	; 0x34
 8003132:	e04c      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d824      	bhi.n	8003186 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	3b23      	subs	r3, #35	; 0x23
 800314e:	221f      	movs	r2, #31
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43da      	mvns	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	400a      	ands	r2, r1
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b23      	subs	r3, #35	; 0x23
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
 8003184:	e023      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b41      	subs	r3, #65	; 0x41
 8003198:	221f      	movs	r2, #31
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	400a      	ands	r2, r1
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b41      	subs	r3, #65	; 0x41
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_ADC_ConfigChannel+0x250>)
 80031d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_ADC_ConfigChannel+0x254>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10f      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d8>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d10b      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_ADC_ConfigChannel+0x254>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12b      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_ADC_ConfigChannel+0x258>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x1f4>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b11      	cmp	r3, #17
 8003216:	d122      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x258>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d111      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_ADC_ConfigChannel+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_ADC_ConfigChannel+0x260>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012300 	.word	0x40012300
 8003278:	40012000 	.word	0x40012000
 800327c:	10000012 	.word	0x10000012
 8003280:	20000760 	.word	0x20000760
 8003284:	431bde83 	.word	0x431bde83

08003288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <ADC_Init+0x1f0>)
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	021a      	lsls	r2, r3, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	4a58      	ldr	r2, [pc, #352]	; (800347c <ADC_Init+0x1f4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800332e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	e00f      	b.n	8003386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0202 	bic.w	r2, r2, #2
 8003394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
 80033a0:	005a      	lsls	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	3b01      	subs	r3, #1
 80033e0:	035a      	lsls	r2, r3, #13
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	e007      	b.n	80033fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	3b01      	subs	r3, #1
 8003418:	051a      	lsls	r2, r3, #20
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800343e:	025a      	lsls	r2, r3, #9
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	029a      	lsls	r2, r3, #10
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40012300 	.word	0x40012300
 800347c:	0f000001 	.word	0x0f000001

08003480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60d3      	str	r3, [r2, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 0307 	and.w	r3, r3, #7
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db0b      	blt.n	800350e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4907      	ldr	r1, [pc, #28]	; (800351c <__NVIC_EnableIRQ+0x38>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2001      	movs	r0, #1
 8003506:	fa00 f202 	lsl.w	r2, r0, r2
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e100 	.word	0xe000e100

08003520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0a      	blt.n	800354a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <__NVIC_SetPriority+0x4c>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	440b      	add	r3, r1
 8003544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003548:	e00a      	b.n	8003560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4908      	ldr	r1, [pc, #32]	; (8003570 <__NVIC_SetPriority+0x50>)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	3b04      	subs	r3, #4
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	440b      	add	r3, r1
 800355e:	761a      	strb	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	bf28      	it	cs
 8003592:	2304      	movcs	r3, #4
 8003594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	2b06      	cmp	r3, #6
 800359c:	d902      	bls.n	80035a4 <NVIC_EncodePriority+0x30>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	e000      	b.n	80035a6 <NVIC_EncodePriority+0x32>
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	4313      	orrs	r3, r2
         );
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ec:	d301      	bcc.n	80035f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00f      	b.n	8003612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <SysTick_Config+0x40>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fa:	210f      	movs	r1, #15
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	f7ff ff8e 	bl	8003520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <SysTick_Config+0x40>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360a:	4b04      	ldr	r3, [pc, #16]	; (800361c <SysTick_Config+0x40>)
 800360c:	2207      	movs	r2, #7
 800360e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000e010 	.word	0xe000e010

08003620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff29 	bl	8003480 <__NVIC_SetPriorityGrouping>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003648:	f7ff ff3e 	bl	80034c8 <__NVIC_GetPriorityGrouping>
 800364c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7ff ff8e 	bl	8003574 <NVIC_EncodePriority>
 8003658:	4602      	mov	r2, r0
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff5d 	bl	8003520 <__NVIC_SetPriority>
}
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff31 	bl	80034e4 <__NVIC_EnableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffa2 	bl	80035dc <SysTick_Config>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b0:	f7ff fb32 	bl	8002d18 <HAL_GetTick>
 80036b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d008      	beq.n	80036d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e052      	b.n	800377a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0216 	bic.w	r2, r2, #22
 80036e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <HAL_DMA_Abort+0x62>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0208 	bic.w	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003724:	e013      	b.n	800374e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003726:	f7ff faf7 	bl	8002d18 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b05      	cmp	r3, #5
 8003732:	d90c      	bls.n	800374e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e015      	b.n	800377a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e4      	bne.n	8003726 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e00c      	b.n	80037ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2205      	movs	r2, #5
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_FLASH_Program+0xa0>)
 80037dc:	7e1b      	ldrb	r3, [r3, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_FLASH_Program+0x1e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e03b      	b.n	800385e <HAL_FLASH_Program+0x96>
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_FLASH_Program+0xa0>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037f0:	f000 f870 	bl	80038d4 <FLASH_WaitForLastOperation>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d12b      	bne.n	8003856 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003804:	783b      	ldrb	r3, [r7, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	68b8      	ldr	r0, [r7, #8]
 800380a:	f000 f91b 	bl	8003a44 <FLASH_Program_Byte>
 800380e:	e016      	b.n	800383e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003816:	883b      	ldrh	r3, [r7, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f000 f8ee 	bl	80039fc <FLASH_Program_HalfWord>
 8003820:	e00d      	b.n	800383e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d105      	bne.n	8003834 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	68b8      	ldr	r0, [r7, #8]
 800382e:	f000 f8c3 	bl	80039b8 <FLASH_Program_Word>
 8003832:	e004      	b.n	800383e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003838:	68b8      	ldr	r0, [r7, #8]
 800383a:	f000 f88b 	bl	8003954 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800383e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003842:	f000 f847 	bl	80038d4 <FLASH_WaitForLastOperation>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_FLASH_Program+0xa4>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	4a07      	ldr	r2, [pc, #28]	; (800386c <HAL_FLASH_Program+0xa4>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_FLASH_Program+0xa0>)
 8003858:	2200      	movs	r2, #0
 800385a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000b14 	.word	0x20000b14
 800386c:	40023c00 	.word	0x40023c00

08003870 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_FLASH_Unlock+0x38>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	da0b      	bge.n	800389a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_FLASH_Unlock+0x38>)
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_FLASH_Unlock+0x3c>)
 8003886:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <HAL_FLASH_Unlock+0x38>)
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_FLASH_Unlock+0x40>)
 800388c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_FLASH_Unlock+0x38>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	da01      	bge.n	800389a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800389a:	79fb      	ldrb	r3, [r7, #7]
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40023c00 	.word	0x40023c00
 80038ac:	45670123 	.word	0x45670123
 80038b0:	cdef89ab 	.word	0xcdef89ab

080038b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_FLASH_Lock+0x1c>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_FLASH_Lock+0x1c>)
 80038be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <FLASH_WaitForLastOperation+0x78>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80038e6:	f7ff fa17 	bl	8002d18 <HAL_GetTick>
 80038ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80038ec:	e010      	b.n	8003910 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d00c      	beq.n	8003910 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <FLASH_WaitForLastOperation+0x38>
 80038fc:	f7ff fa0c 	bl	8002d18 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d201      	bcs.n	8003910 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e019      	b.n	8003944 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <FLASH_WaitForLastOperation+0x7c>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e8      	bne.n	80038ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <FLASH_WaitForLastOperation+0x7c>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <FLASH_WaitForLastOperation+0x7c>)
 800392a:	2201      	movs	r2, #1
 800392c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <FLASH_WaitForLastOperation+0x7c>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800393a:	f000 f8a5 	bl	8003a88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
  
}  
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000b14 	.word	0x20000b14
 8003950:	40023c00 	.word	0x40023c00

08003954 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 8003972:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <FLASH_Program_DoubleWord+0x60>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800398a:	f3bf 8f6f 	isb	sy
}
 800398e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	000a      	movs	r2, r1
 800399e:	2300      	movs	r3, #0
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	3104      	adds	r1, #4
 80039a4:	4613      	mov	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40023c00 	.word	0x40023c00

080039b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <FLASH_Program_Word+0x40>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	601a      	str	r2, [r3, #0]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40023c00 	.word	0x40023c00

080039fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4a06      	ldr	r2, [pc, #24]	; (8003a40 <FLASH_Program_HalfWord+0x44>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	801a      	strh	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00

08003a44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <FLASH_Program_Byte+0x40>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	701a      	strb	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40023c00 	.word	0x40023c00

08003a88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a8c:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003aa2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003aa4:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003ac0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003ade:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003afc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003b1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f043 0320 	orr.w	r3, r3, #32
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <FLASH_SetErrorCode+0xc8>)
 8003b3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <FLASH_SetErrorCode+0xc4>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	60da      	str	r2, [r3, #12]
  }
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	20000b14 	.word	0x20000b14

08003b54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b66:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <HAL_FLASHEx_Erase+0xdc>)
 8003b68:	7e1b      	ldrb	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_FLASHEx_Erase+0x1e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e05a      	b.n	8003c28 <HAL_FLASHEx_Erase+0xd4>
 8003b72:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_FLASHEx_Erase+0xdc>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b7c:	f7ff feaa 	bl	80038d4 <FLASH_WaitForLastOperation>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d14a      	bne.n	8003c20 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d117      	bne.n	8003bca <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f000 f846 	bl	8003c38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bb0:	f7ff fe90 	bl	80038d4 <FLASH_WaitForLastOperation>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_FLASHEx_Erase+0xe0>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_FLASHEx_Erase+0xe0>)
 8003bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6113      	str	r3, [r2, #16]
 8003bc8:	e028      	b.n	8003c1c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e01c      	b.n	8003c0c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f000 f866 	bl	8003cac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003be4:	f7ff fe76 	bl	80038d4 <FLASH_WaitForLastOperation>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_FLASHEx_Erase+0xe0>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <HAL_FLASHEx_Erase+0xe0>)
 8003bf2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003bf6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	601a      	str	r2, [r3, #0]
          break;
 8003c04:	e00a      	b.n	8003c1c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4413      	add	r3, r2
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3da      	bcc.n	8003bd2 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003c1c:	f000 f894 	bl	8003d48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_FLASHEx_Erase+0xdc>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	761a      	strb	r2, [r3, #24]

  return status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000b14 	.word	0x20000b14
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d108      	bne.n	8003c68 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6113      	str	r3, [r2, #16]
 8003c66:	e00f      	b.n	8003c88 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d106      	bne.n	8003c7c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6113      	str	r3, [r2, #16]
 8003c7a:	e005      	b.n	8003c88 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c86:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	4313      	orrs	r3, r2
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <FLASH_MassErase+0x70>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6113      	str	r3, [r2, #16]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40023c00 	.word	0x40023c00

08003cac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e010      	b.n	8003cea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d103      	bne.n	8003cd6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e009      	b.n	8003cea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d103      	bne.n	8003ce4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e002      	b.n	8003cea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ce8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b0b      	cmp	r3, #11
 8003cee:	d902      	bls.n	8003cf6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	490f      	ldr	r1, [pc, #60]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003d18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <FLASH_Erase_Sector+0x98>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6113      	str	r3, [r2, #16]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40023c00 	.word	0x40023c00

08003d48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d017      	beq.n	8003dc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <FLASH_FlushCaches+0x88>)
 8003dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc2:	6013      	str	r3, [r2, #0]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e177      	b.n	80040e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df0:	2201      	movs	r2, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8166 	bne.w	80040da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d005      	beq.n	8003e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d130      	bne.n	8003e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0201 	and.w	r2, r3, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d017      	beq.n	8003ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d123      	bne.n	8003f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80c0 	beq.w	80040da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b66      	ldr	r3, [pc, #408]	; (80040f8 <HAL_GPIO_Init+0x324>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_GPIO_Init+0x324>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6a:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_GPIO_Init+0x324>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f76:	4a61      	ldr	r2, [pc, #388]	; (80040fc <HAL_GPIO_Init+0x328>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	; (8004100 <HAL_GPIO_Init+0x32c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d037      	beq.n	8004012 <HAL_GPIO_Init+0x23e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_GPIO_Init+0x330>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_GPIO_Init+0x23a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a56      	ldr	r2, [pc, #344]	; (8004108 <HAL_GPIO_Init+0x334>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d02b      	beq.n	800400a <HAL_GPIO_Init+0x236>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a55      	ldr	r2, [pc, #340]	; (800410c <HAL_GPIO_Init+0x338>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d025      	beq.n	8004006 <HAL_GPIO_Init+0x232>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a54      	ldr	r2, [pc, #336]	; (8004110 <HAL_GPIO_Init+0x33c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <HAL_GPIO_Init+0x22e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a53      	ldr	r2, [pc, #332]	; (8004114 <HAL_GPIO_Init+0x340>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d019      	beq.n	8003ffe <HAL_GPIO_Init+0x22a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	; (8004118 <HAL_GPIO_Init+0x344>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_GPIO_Init+0x226>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_GPIO_Init+0x348>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_GPIO_Init+0x222>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_GPIO_Init+0x34c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <HAL_GPIO_Init+0x21e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4f      	ldr	r2, [pc, #316]	; (8004124 <HAL_GPIO_Init+0x350>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_GPIO_Init+0x21a>
 8003fea:	2309      	movs	r3, #9
 8003fec:	e012      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8003fee:	230a      	movs	r3, #10
 8003ff0:	e010      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	e00e      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8003ff6:	2307      	movs	r3, #7
 8003ff8:	e00c      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8003ffa:	2306      	movs	r3, #6
 8003ffc:	e00a      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8003ffe:	2305      	movs	r3, #5
 8004000:	e008      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8004002:	2304      	movs	r3, #4
 8004004:	e006      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8004006:	2303      	movs	r3, #3
 8004008:	e004      	b.n	8004014 <HAL_GPIO_Init+0x240>
 800400a:	2302      	movs	r3, #2
 800400c:	e002      	b.n	8004014 <HAL_GPIO_Init+0x240>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_GPIO_Init+0x240>
 8004012:	2300      	movs	r3, #0
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f002 0203 	and.w	r2, r2, #3
 800401a:	0092      	lsls	r2, r2, #2
 800401c:	4093      	lsls	r3, r2
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004024:	4935      	ldr	r1, [pc, #212]	; (80040fc <HAL_GPIO_Init+0x328>)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	3302      	adds	r3, #2
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_GPIO_Init+0x354>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004056:	4a34      	ldr	r2, [pc, #208]	; (8004128 <HAL_GPIO_Init+0x354>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_GPIO_Init+0x354>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004080:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_GPIO_Init+0x354>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004086:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_GPIO_Init+0x354>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_GPIO_Init+0x354>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_GPIO_Init+0x354>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_GPIO_Init+0x354>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3301      	adds	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	f67f ae84 	bls.w	8003df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40013800 	.word	0x40013800
 8004100:	40020000 	.word	0x40020000
 8004104:	40020400 	.word	0x40020400
 8004108:	40020800 	.word	0x40020800
 800410c:	40020c00 	.word	0x40020c00
 8004110:	40021000 	.word	0x40021000
 8004114:	40021400 	.word	0x40021400
 8004118:	40021800 	.word	0x40021800
 800411c:	40021c00 	.word	0x40021c00
 8004120:	40022000 	.word	0x40022000
 8004124:	40022400 	.word	0x40022400
 8004128:	40013c00 	.word	0x40013c00

0800412c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	e001      	b.n	800414e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ff70 	bl	8001060 <HAL_GPIO_EXTI_Callback>
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40013c00 	.word	0x40013c00

0800418c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e12b      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fcae 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f0:	f001 fa40 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_I2C_Init+0x274>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d807      	bhi.n	8004210 <HAL_I2C_Init+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_I2C_Init+0x278>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x92>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <HAL_I2C_Init+0x27c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0e7      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a78      	ldr	r2, [pc, #480]	; (800440c <HAL_I2C_Init+0x280>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a6a      	ldr	r2, [pc, #424]	; (8004400 <HAL_I2C_Init+0x274>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <HAL_I2C_Init+0xd4>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	e009      	b.n	8004274 <HAL_I2C_Init+0xe8>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_I2C_Init+0x284>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	495c      	ldr	r1, [pc, #368]	; (8004400 <HAL_I2C_Init+0x274>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d819      	bhi.n	80042c8 <HAL_I2C_Init+0x13c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e59      	subs	r1, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a8:	400b      	ands	r3, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_I2C_Init+0x138>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e59      	subs	r1, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	e051      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e04f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d111      	bne.n	80042f4 <HAL_I2C_Init+0x168>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e012      	b.n	800431a <HAL_I2C_Init+0x18e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Init+0x196>
 800431e:	2301      	movs	r3, #1
 8004320:	e022      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10e      	bne.n	8004348 <HAL_I2C_Init+0x1bc>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1e58      	subs	r0, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	440b      	add	r3, r1
 8004338:	fbb0 f3f3 	udiv	r3, r0, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6809      	ldr	r1, [r1, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6911      	ldr	r1, [r2, #16]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	000186a0 	.word	0x000186a0
 8004404:	001e847f 	.word	0x001e847f
 8004408:	003d08ff 	.word	0x003d08ff
 800440c:	431bde83 	.word	0x431bde83
 8004410:	10624dd3 	.word	0x10624dd3

08004414 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	460b      	mov	r3, r1
 8004422:	817b      	strh	r3, [r7, #10]
 8004424:	4613      	mov	r3, r2
 8004426:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004428:	f7fe fc76 	bl	8002d18 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	f040 80e0 	bne.w	80045fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2319      	movs	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	4970      	ldr	r1, [pc, #448]	; (8004608 <HAL_I2C_Master_Transmit+0x1f4>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa92 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	e0d3      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_I2C_Master_Transmit+0x50>
 8004460:	2302      	movs	r3, #2
 8004462:	e0cc      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d007      	beq.n	800448a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004498:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2221      	movs	r2, #33	; 0x21
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2210      	movs	r2, #16
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	893a      	ldrh	r2, [r7, #8]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a50      	ldr	r2, [pc, #320]	; (800460c <HAL_I2C_Master_Transmit+0x1f8>)
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044cc:	8979      	ldrh	r1, [r7, #10]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f9ca 	bl	800486c <I2C_MasterRequestWrite>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e08d      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044f8:	e066      	b.n	80045c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	6a39      	ldr	r1, [r7, #32]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fb0c 	bl	8004b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b04      	cmp	r3, #4
 8004510:	d107      	bne.n	8004522 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06b      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d11b      	bne.n	800459c <HAL_I2C_Master_Transmit+0x188>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6a39      	ldr	r1, [r7, #32]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fafc 	bl	8004b9e <I2C_WaitOnBTFFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e01a      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d194      	bne.n	80044fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	00100002 	.word	0x00100002
 800460c:	ffff0000 	.word	0xffff0000

08004610 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	460b      	mov	r3, r1
 800461e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7fe fb7a 	bl	8002d18 <HAL_GetTick>
 8004624:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	f040 8111 	bne.w	800485a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2319      	movs	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	4988      	ldr	r1, [pc, #544]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f994 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	e104      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_I2C_IsDeviceReady+0x50>
 800465c:	2302      	movs	r3, #2
 800465e:	e0fd      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d007      	beq.n	8004686 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2224      	movs	r2, #36	; 0x24
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a70      	ldr	r2, [pc, #448]	; (8004868 <HAL_I2C_IsDeviceReady+0x258>)
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f952 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d103      	bne.n	80046ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0b6      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fe fb0b 	bl	8002d18 <HAL_GetTick>
 8004702:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004732:	e025      	b.n	8004780 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fe faf0 	bl	8002d18 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <HAL_I2C_IsDeviceReady+0x13a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22a0      	movs	r2, #160	; 0xa0
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2ba0      	cmp	r3, #160	; 0xa0
 800478a:	d005      	beq.n	8004798 <HAL_I2C_IsDeviceReady+0x188>
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <HAL_I2C_IsDeviceReady+0x188>
 8004792:	7dbb      	ldrb	r3, [r7, #22]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0cd      	beq.n	8004734 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d129      	bne.n	8004802 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	4921      	ldr	r1, [pc, #132]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f8c6 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e036      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e02c      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2319      	movs	r3, #25
 8004822:	2201      	movs	r2, #1
 8004824:	490f      	ldr	r1, [pc, #60]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f8a2 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e012      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3301      	adds	r3, #1
 800483a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	f4ff af32 	bcc.w	80046aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	00100002 	.word	0x00100002
 8004868:	ffff0000 	.word	0xffff0000

0800486c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d006      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d003      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004894:	d108      	bne.n	80048a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e00b      	b.n	80048c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d107      	bne.n	80048c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f84f 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d103      	bne.n	80048f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e035      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048fc:	d108      	bne.n	8004910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800490c:	611a      	str	r2, [r3, #16]
 800490e:	e01b      	b.n	8004948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004910:	897b      	ldrh	r3, [r7, #10]
 8004912:	11db      	asrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f063 030f 	orn	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <I2C_MasterRequestWrite+0xfc>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f875 	bl	8004a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e010      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <I2C_MasterRequestWrite+0x100>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f865 	bl	8004a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	00010008 	.word	0x00010008
 800496c:	00010002 	.word	0x00010002

08004970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004980:	e025      	b.n	80049ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d021      	beq.n	80049ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fe f9c5 	bl	8002d18 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e023      	b.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10d      	bne.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	e00c      	b.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d0b6      	beq.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2c:	e051      	b.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3c:	d123      	bne.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f043 0204 	orr.w	r2, r3, #4
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e046      	b.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d021      	beq.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fe f943 	bl	8002d18 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e020      	b.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10c      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e00b      	b.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	43da      	mvns	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d18d      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b28:	e02d      	b.n	8004b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f878 	bl	8004c20 <I2C_IsAcknowledgeFailed>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e02d      	b.n	8004b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d021      	beq.n	8004b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7fe f8e9 	bl	8002d18 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d116      	bne.n	8004b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e007      	b.n	8004b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d1ca      	bne.n	8004b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004baa:	e02d      	b.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f837 	bl	8004c20 <I2C_IsAcknowledgeFailed>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e02d      	b.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d021      	beq.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fe f8a8 	bl	8002d18 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d116      	bne.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e007      	b.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d1ca      	bne.n	8004bac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d11b      	bne.n	8004c70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0204 	orr.w	r2, r3, #4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d129      	bne.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0210 	bic.w	r2, r2, #16
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d12a      	bne.n	8004d66 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	f023 030f 	bic.w	r3, r3, #15
 8004d36:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	89fa      	ldrh	r2, [r7, #14]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7fd ffba 	bl	8002d18 <HAL_GetTick>
 8004da4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004da6:	e009      	b.n	8004dbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004da8:	f7fd ffb6 	bl	8002d18 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db6:	d901      	bls.n	8004dbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e01f      	b.n	8004dfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd0:	f7fd ffa2 	bl	8002d18 <HAL_GetTick>
 8004dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dd6:	e009      	b.n	8004dec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dd8:	f7fd ff9e 	bl	8002d18 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de6:	d901      	bls.n	8004dec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e007      	b.n	8004dfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	420e0040 	.word	0x420e0040
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	420e0044 	.word	0x420e0044

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e267      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d075      	beq.n	8004f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e32:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d00c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b85      	ldr	r3, [pc, #532]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d112      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <HAL_RCC_OscConfig+0x108>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d157      	bne.n	8004f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e242      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x74>
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a75      	ldr	r2, [pc, #468]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e01d      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x98>
 8004e92:	4b70      	ldr	r3, [pc, #448]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6f      	ldr	r2, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6c      	ldr	r2, [pc, #432]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004eac:	4b69      	ldr	r3, [pc, #420]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a68      	ldr	r2, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b66      	ldr	r3, [pc, #408]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a65      	ldr	r2, [pc, #404]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd ff24 	bl	8002d18 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fd ff20 	bl	8002d18 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e207      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0xc0>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fd ff10 	bl	8002d18 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fd ff0c 	bl	8002d18 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1f3      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0xe8>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b44      	ldr	r3, [pc, #272]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e1c7      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4937      	ldr	r1, [pc, #220]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e03a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f84:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fec5 	bl	8002d18 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd fec1 	bl	8002d18 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e1a8      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4925      	ldr	r1, [pc, #148]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fea4 	bl	8002d18 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fea0 	bl	8002d18 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e187      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_RCC_OscConfig+0x248>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd fe84 	bl	8002d18 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fe80 	bl	8002d18 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e167      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x200>
 8005032:	e01b      	b.n	800506c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCC_OscConfig+0x248>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fd fe6d 	bl	8002d18 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	e00e      	b.n	8005060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005042:	f7fd fe69 	bl	8002d18 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d907      	bls.n	8005060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e150      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
 8005054:	40023800 	.word	0x40023800
 8005058:	42470000 	.word	0x42470000
 800505c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ea      	bne.n	8005042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8097 	beq.w	80051a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b81      	ldr	r3, [pc, #516]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a7c      	ldr	r2, [pc, #496]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b7a      	ldr	r3, [pc, #488]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	4b77      	ldr	r3, [pc, #476]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b6:	4b74      	ldr	r3, [pc, #464]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fd fe29 	bl	8002d18 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd fe25 	bl	8002d18 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e10c      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x2ea>
 80050f0:	4b64      	ldr	r3, [pc, #400]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a63      	ldr	r2, [pc, #396]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e01c      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b05      	cmp	r3, #5
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x30c>
 8005106:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 8005120:	4b58      	ldr	r3, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a57      	ldr	r2, [pc, #348]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	4b55      	ldr	r3, [pc, #340]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a54      	ldr	r2, [pc, #336]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fd fdea 	bl	8002d18 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fd fde6 	bl	8002d18 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0cb      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	4b49      	ldr	r3, [pc, #292]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ee      	beq.n	8005148 <HAL_RCC_OscConfig+0x334>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fd fdd4 	bl	8002d18 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fd fdd0 	bl	8002d18 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0b5      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ee      	bne.n	8005174 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	4a38      	ldr	r2, [pc, #224]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a1 	beq.w	80052f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b2:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d05c      	beq.n	8005278 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d141      	bne.n	800524a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_RCC_OscConfig+0x478>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd fda4 	bl	8002d18 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fda0 	bl	8002d18 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e087      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	3b01      	subs	r3, #1
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	491b      	ldr	r1, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x478>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd fd79 	bl	8002d18 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fd fd75 	bl	8002d18 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e05c      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x416>
 8005248:	e054      	b.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_RCC_OscConfig+0x478>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd fd62 	bl	8002d18 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd fd5e 	bl	8002d18 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e045      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x444>
 8005276:	e03d      	b.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e038      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000
 800528c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4ec>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d028      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d121      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d111      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	3b01      	subs	r3, #1
 80052da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800

08005304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0cc      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b68      	ldr	r3, [pc, #416]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d90c      	bls.n	8005340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b65      	ldr	r3, [pc, #404]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b63      	ldr	r3, [pc, #396]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0b8      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005358:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a58      	ldr	r2, [pc, #352]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005370:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800537a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b50      	ldr	r3, [pc, #320]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	494d      	ldr	r1, [pc, #308]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d044      	beq.n	8005424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	4b47      	ldr	r3, [pc, #284]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d119      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e07f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d003      	beq.n	80053c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e06f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e067      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4934      	ldr	r1, [pc, #208]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fd fc90 	bl	8002d18 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fd fc8c 	bl	8002d18 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e04f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d20c      	bcs.n	800544c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e032      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4916      	ldr	r1, [pc, #88]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	490e      	ldr	r1, [pc, #56]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800548a:	f000 f821 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 800548e:	4602      	mov	r2, r0
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	490a      	ldr	r1, [pc, #40]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	5ccb      	ldrb	r3, [r1, r3]
 800549e:	fa22 f303 	lsr.w	r3, r2, r3
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_RCC_ClockConfig+0x1c8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fd fbf0 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40023c00 	.word	0x40023c00
 80054c0:	40023800 	.word	0x40023800
 80054c4:	080098c0 	.word	0x080098c0
 80054c8:	20000760 	.word	0x20000760
 80054cc:	20000764 	.word	0x20000764

080054d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b090      	sub	sp, #64	; 0x40
 80054d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	2300      	movs	r3, #0
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 030c 	and.w	r3, r3, #12
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d00d      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x40>
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	f200 80a1 	bhi.w	800563c <HAL_RCC_GetSysClockFreq+0x16c>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x34>
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d003      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0x3a>
 8005502:	e09b      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b53      	ldr	r3, [pc, #332]	; (8005654 <HAL_RCC_GetSysClockFreq+0x184>)
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005508:	e09b      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800550a:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800550e:	e098      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800551a:	4b4d      	ldr	r3, [pc, #308]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d028      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	2200      	movs	r2, #0
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	627a      	str	r2, [r7, #36]	; 0x24
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005538:	2100      	movs	r1, #0
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800553c:	fb03 f201 	mul.w	r2, r3, r1
 8005540:	2300      	movs	r3, #0
 8005542:	fb00 f303 	mul.w	r3, r0, r3
 8005546:	4413      	add	r3, r2
 8005548:	4a43      	ldr	r2, [pc, #268]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800554a:	fba0 1202 	umull	r1, r2, r0, r2
 800554e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005550:	460a      	mov	r2, r1
 8005552:	62ba      	str	r2, [r7, #40]	; 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	4413      	add	r3, r2
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2200      	movs	r2, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800556a:	f7fa fea9 	bl	80002c0 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4613      	mov	r3, r2
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	e053      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005578:	4b35      	ldr	r3, [pc, #212]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	099b      	lsrs	r3, r3, #6
 800557e:	2200      	movs	r2, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	617a      	str	r2, [r7, #20]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800558a:	f04f 0b00 	mov.w	fp, #0
 800558e:	4652      	mov	r2, sl
 8005590:	465b      	mov	r3, fp
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	0159      	lsls	r1, r3, #5
 800559c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a0:	0150      	lsls	r0, r2, #5
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	ebb2 080a 	subs.w	r8, r2, sl
 80055aa:	eb63 090b 	sbc.w	r9, r3, fp
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055c2:	ebb2 0408 	subs.w	r4, r2, r8
 80055c6:	eb63 0509 	sbc.w	r5, r3, r9
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	00eb      	lsls	r3, r5, #3
 80055d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d8:	00e2      	lsls	r2, r4, #3
 80055da:	4614      	mov	r4, r2
 80055dc:	461d      	mov	r5, r3
 80055de:	eb14 030a 	adds.w	r3, r4, sl
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	eb45 030b 	adc.w	r3, r5, fp
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f6:	4629      	mov	r1, r5
 80055f8:	028b      	lsls	r3, r1, #10
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005600:	4621      	mov	r1, r4
 8005602:	028a      	lsls	r2, r1, #10
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	2200      	movs	r2, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	60fa      	str	r2, [r7, #12]
 8005610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005614:	f7fa fe54 	bl	80002c0 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	3301      	adds	r3, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800563a:	e002      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetSysClockFreq+0x184>)
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005644:	4618      	mov	r0, r3
 8005646:	3740      	adds	r7, #64	; 0x40
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	00f42400 	.word	0x00f42400
 8005658:	017d7840 	.word	0x017d7840

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000760 	.word	0x20000760

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a9b      	lsrs	r3, r3, #10
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4903      	ldr	r1, [pc, #12]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40023800 	.word	0x40023800
 8005698:	080098d0 	.word	0x080098d0

0800569c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a0:	f7ff ffdc 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0b5b      	lsrs	r3, r3, #13
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40023800 	.word	0x40023800
 80056c0:	080098d0 	.word	0x080098d0

080056c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d075      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056f8:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056fe:	f7fd fb0b 	bl	8002d18 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005706:	f7fd fb07 	bl	8002d18 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e189      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005718:	4b8a      	ldr	r3, [pc, #552]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	019a      	lsls	r2, r3, #6
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	4981      	ldr	r1, [pc, #516]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01f      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005750:	4b7c      	ldr	r3, [pc, #496]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005756:	0f1b      	lsrs	r3, r3, #28
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	019a      	lsls	r2, r3, #6
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	061b      	lsls	r3, r3, #24
 800576a:	431a      	orrs	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	071b      	lsls	r3, r3, #28
 8005770:	4974      	ldr	r1, [pc, #464]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005778:	4b72      	ldr	r3, [pc, #456]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577e:	f023 021f 	bic.w	r2, r3, #31
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	3b01      	subs	r3, #1
 8005788:	496e      	ldr	r1, [pc, #440]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	019a      	lsls	r2, r3, #6
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	071b      	lsls	r3, r3, #28
 80057b0:	4964      	ldr	r1, [pc, #400]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057b8:	4b61      	ldr	r3, [pc, #388]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057be:	f7fd faab 	bl	8002d18 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057c6:	f7fd faa7 	bl	8002d18 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e129      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057d8:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d079      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057fc:	4b52      	ldr	r3, [pc, #328]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005802:	f7fd fa89 	bl	8002d18 <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005808:	e008      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800580a:	f7fd fa85 	bl	8002d18 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e107      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800581c:	4b49      	ldr	r3, [pc, #292]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005828:	d0ef      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d020      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005836:	4b43      	ldr	r3, [pc, #268]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	0f1b      	lsrs	r3, r3, #28
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	019a      	lsls	r2, r3, #6
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	061b      	lsls	r3, r3, #24
 8005850:	431a      	orrs	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	493b      	ldr	r1, [pc, #236]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800585e:	4b39      	ldr	r3, [pc, #228]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005864:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	3b01      	subs	r3, #1
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	4934      	ldr	r1, [pc, #208]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005884:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	0e1b      	lsrs	r3, r3, #24
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	019a      	lsls	r2, r3, #6
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	071b      	lsls	r3, r3, #28
 80058a4:	4927      	ldr	r1, [pc, #156]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	4922      	ldr	r1, [pc, #136]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058c8:	f7fd fa26 	bl	8002d18 <HAL_GetTick>
 80058cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058d0:	f7fd fa22 	bl	8002d18 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e0a4      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058e2:	4b18      	ldr	r3, [pc, #96]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d1ef      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 808b 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	6413      	str	r3, [r2, #64]	; 0x40
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0b      	ldr	r2, [pc, #44]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005926:	f7fd f9f7 	bl	8002d18 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800592c:	e010      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800592e:	f7fd f9f3 	bl	8002d18 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d909      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e075      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005940:	42470068 	.word	0x42470068
 8005944:	40023800 	.word	0x40023800
 8005948:	42470070 	.word	0x42470070
 800594c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005950:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0e8      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005964:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02f      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d028      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597a:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005984:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005990:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005996:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d114      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fd f9b9 	bl	8002d18 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fd f9b5 	bl	8002d18 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e035      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ee      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d8:	d10d      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ee:	4912      	ldr	r1, [pc, #72]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]
 80059f4:	e005      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	4a0f      	ldr	r2, [pc, #60]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a00:	6093      	str	r3, [r2, #8]
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0e:	490a      	ldr	r1, [pc, #40]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40007000 	.word	0x40007000
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	42470e40 	.word	0x42470e40
 8005a40:	424711e0 	.word	0x424711e0

08005a44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e066      	b.n	8005b28 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7f5b      	ldrb	r3, [r3, #29]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc fcfa 	bl	8002464 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	22ca      	movs	r2, #202	; 0xca
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2253      	movs	r2, #83	; 0x53
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa45 	bl	8005f16 <RTC_EnterInitMode>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d12c      	bne.n	8005af0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6899      	ldr	r1, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6919      	ldr	r1, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	041a      	lsls	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa4c 	bl	8005f84 <RTC_ExitInitMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d113      	bne.n	8005b1e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	22ff      	movs	r2, #255	; 0xff
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	7f1b      	ldrb	r3, [r3, #28]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_RTC_SetTime+0x1c>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e087      	b.n	8005c5c <HAL_RTC_SetTime+0x12c>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2202      	movs	r2, #2
 8005b56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d126      	bne.n	8005bac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fa29 	bl	8005fce <RTC_ByteToBcd2>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fa22 	bl	8005fce <RTC_ByteToBcd2>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	789b      	ldrb	r3, [r3, #2]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fa1a 	bl	8005fce <RTC_ByteToBcd2>
 8005b9a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	78db      	ldrb	r3, [r3, #3]
 8005ba4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e018      	b.n	8005bde <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bcc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005bd2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	78db      	ldrb	r3, [r3, #3]
 8005bd8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	22ca      	movs	r2, #202	; 0xca
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2253      	movs	r2, #83	; 0x53
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f991 	bl	8005f16 <RTC_EnterInitMode>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d120      	bne.n	8005c40 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6899      	ldr	r1, [r3, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f9a4 	bl	8005f84 <RTC_ExitInitMode>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	22ff      	movs	r2, #255	; 0xff
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	771a      	strb	r2, [r3, #28]

  return status;
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}

08005c64 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0d9b      	lsrs	r3, r3, #22
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d11a      	bne.n	8005d16 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f98f 	bl	8006008 <RTC_Bcd2ToByte>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f986 	bl	8006008 <RTC_Bcd2ToByte>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	789b      	ldrb	r3, [r3, #2]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f97d 	bl	8006008 <RTC_Bcd2ToByte>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	7f1b      	ldrb	r3, [r3, #28]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_RTC_SetDate+0x1c>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e071      	b.n	8005e20 <HAL_RTC_SetDate+0x100>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2202      	movs	r2, #2
 8005d46:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10e      	bne.n	8005d6c <HAL_RTC_SetDate+0x4c>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	330a      	adds	r3, #10
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	78db      	ldrb	r3, [r3, #3]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f929 	bl	8005fce <RTC_ByteToBcd2>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f922 	bl	8005fce <RTC_ByteToBcd2>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	789b      	ldrb	r3, [r3, #2]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f91a 	bl	8005fce <RTC_ByteToBcd2>
 8005d9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e00e      	b.n	8005dca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005db8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	22ca      	movs	r2, #202	; 0xca
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2253      	movs	r2, #83	; 0x53
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f89b 	bl	8005f16 <RTC_EnterInitMode>
 8005de0:	4603      	mov	r3, r0
 8005de2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005df8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f8c2 	bl	8005f84 <RTC_ExitInitMode>
 8005e00:	4603      	mov	r3, r0
 8005e02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]

  return status;
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd90      	pop	{r4, r7, pc}

08005e28 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	0b5b      	lsrs	r3, r3, #13
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11a      	bne.n	8005ebc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f8bc 	bl	8006008 <RTC_Bcd2ToByte>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f8b3 	bl	8006008 <RTC_Bcd2ToByte>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	789b      	ldrb	r3, [r3, #2]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f8aa 	bl	8006008 <RTC_Bcd2ToByte>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ee2:	f7fc ff19 	bl	8002d18 <HAL_GetTick>
 8005ee6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ee8:	e009      	b.n	8005efe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005eea:	f7fc ff15 	bl	8002d18 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ef8:	d901      	bls.n	8005efe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e007      	b.n	8005f0e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ee      	beq.n	8005eea <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d122      	bne.n	8005f7a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f44:	f7fc fee8 	bl	8002d18 <HAL_GetTick>
 8005f48:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f4a:	e00c      	b.n	8005f66 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f4c:	f7fc fee4 	bl	8002d18 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5a:	d904      	bls.n	8005f66 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <RTC_EnterInitMode+0x64>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d1e8      	bne.n	8005f4c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ff89 	bl	8005ec6 <HAL_RTC_WaitForSynchro>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005fdc:	e005      	b.n	8005fea <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	3b0a      	subs	r3, #10
 8005fe8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	2b09      	cmp	r3, #9
 8005fee:	d8f6      	bhi.n	8005fde <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	b2db      	uxtb	r3, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	4413      	add	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	b2da      	uxtb	r2, r3
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	4413      	add	r3, r2
 8006032:	b2db      	uxtb	r3, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e041      	b.n	80060d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fc fc70 	bl	800294c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f000 fcea 	bl	8006a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e04e      	b.n	8006196 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d022      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d01d      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d018      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d013      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00e      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d009      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0x80>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_TIM_Base_Start_IT+0xdc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d111      	bne.n	8006184 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b06      	cmp	r3, #6
 8006170:	d010      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006182:	e007      	b.n	8006194 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00
 80061b4:	40010400 	.word	0x40010400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40001800 	.word	0x40001800

080061c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e041      	b.n	8006256 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f839 	bl	800625e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f000 fc2a 	bl	8006a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <HAL_TIM_PWM_Start+0x24>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e022      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b04      	cmp	r3, #4
 800629c:	d109      	bne.n	80062b2 <HAL_TIM_PWM_Start+0x3e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	e015      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d109      	bne.n	80062cc <HAL_TIM_PWM_Start+0x58>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e008      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e07c      	b.n	80063e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Start+0x82>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f4:	e013      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Start+0x92>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	e00b      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start+0xa2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006314:	e003      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2201      	movs	r2, #1
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fe80 	bl	800702c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2d      	ldr	r2, [pc, #180]	; (80063e8 <HAL_TIM_PWM_Start+0x174>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIM_PWM_Start+0xcc>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2c      	ldr	r2, [pc, #176]	; (80063ec <HAL_TIM_PWM_Start+0x178>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Start+0xd0>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_TIM_PWM_Start+0xd2>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <HAL_TIM_PWM_Start+0x174>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d01d      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <HAL_TIM_PWM_Start+0x17c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <HAL_TIM_PWM_Start+0x180>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <HAL_TIM_PWM_Start+0x184>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIM_PWM_Start+0x178>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_TIM_PWM_Start+0x188>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIM_PWM_Start+0x136>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_TIM_PWM_Start+0x18c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d111      	bne.n	80063ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d010      	beq.n	80063de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	e007      	b.n	80063de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40001800 	.word	0x40001800

08006404 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fe08 	bl	800702c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <HAL_TIM_PWM_Stop+0xd8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_TIM_PWM_Stop+0x2c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2d      	ldr	r2, [pc, #180]	; (80064e0 <HAL_TIM_PWM_Stop+0xdc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <HAL_TIM_PWM_Stop+0x30>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_TIM_PWM_Stop+0x32>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d017      	beq.n	800646a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	f241 1311 	movw	r3, #4369	; 0x1111
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_TIM_PWM_Stop+0x66>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	f240 4344 	movw	r3, #1092	; 0x444
 8006454:	4013      	ands	r3, r2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <HAL_TIM_PWM_Stop+0x66>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	f241 1311 	movw	r3, #4369	; 0x1111
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <HAL_TIM_PWM_Stop+0x96>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	f240 4344 	movw	r3, #1092	; 0x444
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <HAL_TIM_PWM_Stop+0x96>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Stop+0xa6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	e013      	b.n	80064d2 <HAL_TIM_PWM_Stop+0xce>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Stop+0xb6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b8:	e00b      	b.n	80064d2 <HAL_TIM_PWM_Stop+0xce>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Stop+0xc6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c8:	e003      	b.n	80064d2 <HAL_TIM_PWM_Stop+0xce>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400

080064e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d122      	bne.n	8006540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d11b      	bne.n	8006540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0202 	mvn.w	r2, #2
 8006510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa77 	bl	8006a1a <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa69 	bl	8006a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa7a 	bl	8006a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d122      	bne.n	8006594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d11b      	bne.n	8006594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0204 	mvn.w	r2, #4
 8006564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa4d 	bl	8006a1a <HAL_TIM_IC_CaptureCallback>
 8006580:	e005      	b.n	800658e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa3f 	bl	8006a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa50 	bl	8006a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d122      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0208 	mvn.w	r2, #8
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2204      	movs	r2, #4
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa23 	bl	8006a1a <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa15 	bl	8006a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fa26 	bl	8006a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d122      	bne.n	800663c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b10      	cmp	r3, #16
 8006602:	d11b      	bne.n	800663c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0210 	mvn.w	r2, #16
 800660c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2208      	movs	r2, #8
 8006612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9f9 	bl	8006a1a <HAL_TIM_IC_CaptureCallback>
 8006628:	e005      	b.n	8006636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9eb 	bl	8006a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f9fc 	bl	8006a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10e      	bne.n	8006668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0201 	mvn.w	r2, #1
 8006660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fa fd4a 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b80      	cmp	r3, #128	; 0x80
 8006674:	d10e      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d107      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fd78 	bl	8007184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d10e      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d107      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9c1 	bl	8006a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0220 	mvn.w	r2, #32
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fd42 	bl	8007170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0ae      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	f200 809f 	bhi.w	8006860 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800675d 	.word	0x0800675d
 800672c:	08006861 	.word	0x08006861
 8006730:	08006861 	.word	0x08006861
 8006734:	08006861 	.word	0x08006861
 8006738:	0800679d 	.word	0x0800679d
 800673c:	08006861 	.word	0x08006861
 8006740:	08006861 	.word	0x08006861
 8006744:	08006861 	.word	0x08006861
 8006748:	080067df 	.word	0x080067df
 800674c:	08006861 	.word	0x08006861
 8006750:	08006861 	.word	0x08006861
 8006754:	08006861 	.word	0x08006861
 8006758:	0800681f 	.word	0x0800681f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fa18 	bl	8006b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6999      	ldr	r1, [r3, #24]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	619a      	str	r2, [r3, #24]
      break;
 800679a:	e064      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fa68 	bl	8006c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	619a      	str	r2, [r3, #24]
      break;
 80067dc:	e043      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fabd 	bl	8006d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0208 	orr.w	r2, r2, #8
 80067f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0204 	bic.w	r2, r2, #4
 8006808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	61da      	str	r2, [r3, #28]
      break;
 800681c:	e023      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fb11 	bl	8006e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69d9      	ldr	r1, [r3, #28]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	61da      	str	r2, [r3, #28]
      break;
 800685e:	e002      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
      break;
 8006864:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0b4      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x186>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068cc:	d03e      	beq.n	800694c <HAL_TIM_ConfigClockSource+0xd4>
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	f200 8087 	bhi.w	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	f000 8086 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x172>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d87f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b70      	cmp	r3, #112	; 0x70
 80068e6:	d01a      	beq.n	800691e <HAL_TIM_ConfigClockSource+0xa6>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d87b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d050      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x11a>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d877      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b50      	cmp	r3, #80	; 0x50
 80068f6:	d03c      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0xfa>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d873      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d058      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d86f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d064      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d86b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d060      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d867      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d05c      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	2b10      	cmp	r3, #16
 800691a:	d05a      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 800691c:	e062      	b.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6899      	ldr	r1, [r3, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f000 fb5d 	bl	8006fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]
      break;
 800694a:	e04f      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6899      	ldr	r1, [r3, #8]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f000 fb46 	bl	8006fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696e:	609a      	str	r2, [r3, #8]
      break;
 8006970:	e03c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	461a      	mov	r2, r3
 8006980:	f000 faba 	bl	8006ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2150      	movs	r1, #80	; 0x50
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb13 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 8006990:	e02c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 fad9 	bl	8006f56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2160      	movs	r1, #96	; 0x60
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fb03 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 80069b0:	e01c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 fa9a 	bl	8006ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 faf3 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 80069d0:	e00c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f000 faea 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 80069e2:	e003      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e000      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
	...

08006a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a40      	ldr	r2, [pc, #256]	; (8006b6c <TIM_Base_SetConfig+0x114>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d013      	beq.n	8006a98 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d00f      	beq.n	8006a98 <TIM_Base_SetConfig+0x40>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a3d      	ldr	r2, [pc, #244]	; (8006b70 <TIM_Base_SetConfig+0x118>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a3c      	ldr	r2, [pc, #240]	; (8006b74 <TIM_Base_SetConfig+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a3b      	ldr	r2, [pc, #236]	; (8006b78 <TIM_Base_SetConfig+0x120>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a3a      	ldr	r2, [pc, #232]	; (8006b7c <TIM_Base_SetConfig+0x124>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d108      	bne.n	8006aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2f      	ldr	r2, [pc, #188]	; (8006b6c <TIM_Base_SetConfig+0x114>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02b      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab8:	d027      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2c      	ldr	r2, [pc, #176]	; (8006b70 <TIM_Base_SetConfig+0x118>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d023      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <TIM_Base_SetConfig+0x11c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01f      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2a      	ldr	r2, [pc, #168]	; (8006b78 <TIM_Base_SetConfig+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01b      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a29      	ldr	r2, [pc, #164]	; (8006b7c <TIM_Base_SetConfig+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d017      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <TIM_Base_SetConfig+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a27      	ldr	r2, [pc, #156]	; (8006b84 <TIM_Base_SetConfig+0x12c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a26      	ldr	r2, [pc, #152]	; (8006b88 <TIM_Base_SetConfig+0x130>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <TIM_Base_SetConfig+0x134>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <TIM_Base_SetConfig+0x138>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <TIM_Base_SetConfig+0x13c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <TIM_Base_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_Base_SetConfig+0xf8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <TIM_Base_SetConfig+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d103      	bne.n	8006b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	615a      	str	r2, [r3, #20]
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40010400 	.word	0x40010400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800
 8006b8c:	40001800 	.word	0x40001800
 8006b90:	40001c00 	.word	0x40001c00
 8006b94:	40002000 	.word	0x40002000

08006b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0302 	bic.w	r3, r3, #2
 8006be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <TIM_OC1_SetConfig+0xd8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC1_SetConfig+0x64>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <TIM_OC1_SetConfig+0xdc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d10c      	bne.n	8006c16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 0308 	bic.w	r3, r3, #8
 8006c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 0304 	bic.w	r3, r3, #4
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <TIM_OC1_SetConfig+0xd8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC1_SetConfig+0x8e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <TIM_OC1_SetConfig+0xdc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0320 	bic.w	r3, r3, #32
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a22      	ldr	r2, [pc, #136]	; (8006d5c <TIM_OC2_SetConfig+0xe4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_OC2_SetConfig+0x68>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a21      	ldr	r2, [pc, #132]	; (8006d60 <TIM_OC2_SetConfig+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10d      	bne.n	8006cfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a17      	ldr	r2, [pc, #92]	; (8006d5c <TIM_OC2_SetConfig+0xe4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC2_SetConfig+0x94>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a16      	ldr	r2, [pc, #88]	; (8006d60 <TIM_OC2_SetConfig+0xe8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d113      	bne.n	8006d34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40010400 	.word	0x40010400

08006d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <TIM_OC3_SetConfig+0xe0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC3_SetConfig+0x66>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <TIM_OC3_SetConfig+0xe4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10d      	bne.n	8006de6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <TIM_OC3_SetConfig+0xe0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_OC3_SetConfig+0x92>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <TIM_OC3_SetConfig+0xe4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d113      	bne.n	8006e1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400

08006e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	031b      	lsls	r3, r3, #12
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <TIM_OC4_SetConfig+0xa4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x68>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <TIM_OC4_SetConfig+0xa8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d109      	bne.n	8006ec8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	019b      	lsls	r3, r3, #6
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40010400 	.word	0x40010400

08006ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 030a 	bic.w	r3, r3, #10
 8006f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	621a      	str	r2, [r3, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f023 0210 	bic.w	r2, r3, #16
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f043 0307 	orr.w	r3, r3, #7
 8006fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	609a      	str	r2, [r3, #8]
}
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	021a      	lsls	r2, r3, #8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	431a      	orrs	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4313      	orrs	r3, r2
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	609a      	str	r2, [r3, #8]
}
 8007020:	bf00      	nop
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2201      	movs	r2, #1
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1a      	ldr	r2, [r3, #32]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	43db      	mvns	r3, r3
 800704e:	401a      	ands	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1a      	ldr	r2, [r3, #32]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	fa01 f303 	lsl.w	r3, r1, r3
 8007064:	431a      	orrs	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800708c:	2302      	movs	r3, #2
 800708e:	e05a      	b.n	8007146 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d022      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d01d      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d018      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00e      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a18      	ldr	r2, [pc, #96]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a15      	ldr	r2, [pc, #84]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d10c      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	4313      	orrs	r3, r2
 800712a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40010000 	.word	0x40010000
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	40000c00 	.word	0x40000c00
 8007164:	40010400 	.word	0x40010400
 8007168:	40014000 	.word	0x40014000
 800716c:	40001800 	.word	0x40001800

08007170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e03f      	b.n	800722a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fb fc9e 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	; 0x24
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fddf 	bl	8007da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695a      	ldr	r2, [r3, #20]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b08a      	sub	sp, #40	; 0x28
 8007236:	af02      	add	r7, sp, #8
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b20      	cmp	r3, #32
 8007250:	d17c      	bne.n	800734c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_UART_Transmit+0x2c>
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e075      	b.n	800734e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_UART_Transmit+0x3e>
 800726c:	2302      	movs	r3, #2
 800726e:	e06e      	b.n	800734e <HAL_UART_Transmit+0x11c>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2221      	movs	r2, #33	; 0x21
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007286:	f7fb fd47 	bl	8002d18 <HAL_GetTick>
 800728a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a0:	d108      	bne.n	80072b4 <HAL_UART_Transmit+0x82>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	e003      	b.n	80072bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072c4:	e02a      	b.n	800731c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fb1f 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e036      	b.n	800734e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3302      	adds	r3, #2
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	e007      	b.n	800730e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	781a      	ldrb	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	3301      	adds	r3, #1
 800730c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1cf      	bne.n	80072c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	2140      	movs	r1, #64	; 0x40
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 faef 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e006      	b.n	800734e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e000      	b.n	800734e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	4613      	mov	r3, r2
 8007362:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b20      	cmp	r3, #32
 800736e:	d11d      	bne.n	80073ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_UART_Receive_IT+0x26>
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e016      	b.n	80073ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_UART_Receive_IT+0x38>
 800738a:	2302      	movs	r3, #2
 800738c:	e00f      	b.n	80073ae <HAL_UART_Receive_IT+0x58>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	461a      	mov	r2, r3
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fb24 	bl	80079f0 <UART_Start_Receive_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	e000      	b.n	80073ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b0ba      	sub	sp, #232	; 0xe8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073de:	2300      	movs	r3, #0
 80073e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fc07 	bl	8007c2a <UART_Receive_IT>
      return;
 800741c:	e256      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800741e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80de 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
 8007428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007438:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80d1 	beq.w	80075e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f043 0201 	orr.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
 8007472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
 8007496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d011      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
 80074ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f043 0208 	orr.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 81ed 	beq.w	80078c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb92 	bl	8007c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	bf0c      	ite	eq
 8007514:	2301      	moveq	r3, #1
 8007516:	2300      	movne	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <HAL_UART_IRQHandler+0x17a>
 800752a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04f      	beq.n	80075d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa9a 	bl	8007a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007542:	2b40      	cmp	r3, #64	; 0x40
 8007544:	d141      	bne.n	80075ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800755c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800757e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1d9      	bne.n	8007546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	2b00      	cmp	r3, #0
 8007598:	d013      	beq.n	80075c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	4a7d      	ldr	r2, [pc, #500]	; (8007794 <HAL_UART_IRQHandler+0x3dc>)
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fc f8eb 	bl	8003782 <HAL_DMA_Abort_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e00e      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f990 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	e00a      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f98c 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	e006      	b.n	80075e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f988 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075de:	e170      	b.n	80078c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	bf00      	nop
    return;
 80075e2:	e16e      	b.n	80078c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 814a 	bne.w	8007882 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8143 	beq.w	8007882 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 813c 	beq.w	8007882 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	f040 80b4 	bne.w	8007798 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8140 	beq.w	80078c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800764a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764e:	429a      	cmp	r2, r3
 8007650:	f080 8139 	bcs.w	80078c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800765a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	f000 8088 	beq.w	800777a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d9      	bne.n	800766a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3314      	adds	r3, #20
 80076d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e1      	bne.n	80076b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3314      	adds	r3, #20
 80076f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3314      	adds	r3, #20
 8007712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800771c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e3      	bne.n	80076f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800775c:	65ba      	str	r2, [r7, #88]	; 0x58
 800775e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800776a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e3      	bne.n	8007738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	4618      	mov	r0, r3
 8007776:	f7fb ff94 	bl	80036a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007782:	b29b      	uxth	r3, r3
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	b29b      	uxth	r3, r3
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8b6 	bl	80078fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007790:	e099      	b.n	80078c6 <HAL_UART_IRQHandler+0x50e>
 8007792:	bf00      	nop
 8007794:	08007b33 	.word	0x08007b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 808b 	beq.w	80078ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8086 	beq.w	80078ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077e2:	647a      	str	r2, [r7, #68]	; 0x44
 80077e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e3      	bne.n	80077be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3314      	adds	r3, #20
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	623b      	str	r3, [r7, #32]
   return(result);
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3314      	adds	r3, #20
 8007816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800781a:	633a      	str	r2, [r7, #48]	; 0x30
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e3      	bne.n	80077f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60fb      	str	r3, [r7, #12]
   return(result);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007860:	61fa      	str	r2, [r7, #28]
 8007862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	69b9      	ldr	r1, [r7, #24]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	617b      	str	r3, [r7, #20]
   return(result);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e3      	bne.n	800783c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f83e 	bl	80078fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007880:	e023      	b.n	80078ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <HAL_UART_IRQHandler+0x4ea>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f95d 	bl	8007b5a <UART_Transmit_IT>
    return;
 80078a0:	e014      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00e      	beq.n	80078cc <HAL_UART_IRQHandler+0x514>
 80078ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d008      	beq.n	80078cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f99d 	bl	8007bfa <UART_EndTransmit_IT>
    return;
 80078c0:	e004      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
    return;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
      return;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <HAL_UART_IRQHandler+0x514>
      return;
 80078ca:	bf00      	nop
  }
}
 80078cc:	37e8      	adds	r7, #232	; 0xe8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop

080078d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b090      	sub	sp, #64	; 0x40
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007924:	e050      	b.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d04c      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800792e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <UART_WaitOnFlagUntilTimeout+0x30>
 8007934:	f7fb f9f0 	bl	8002d18 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007940:	429a      	cmp	r2, r3
 8007942:	d241      	bcs.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330c      	adds	r3, #12
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007964:	637a      	str	r2, [r7, #52]	; 0x34
 8007966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3314      	adds	r3, #20
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3314      	adds	r3, #20
 8007996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007998:	623a      	str	r2, [r7, #32]
 800799a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e00f      	b.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4013      	ands	r3, r2
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d09f      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3740      	adds	r7, #64	; 0x40
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	88fa      	ldrh	r2, [r7, #6]
 8007a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2222      	movs	r2, #34	; 0x22
 8007a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695a      	ldr	r2, [r3, #20]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0201 	orr.w	r2, r2, #1
 8007a4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0220 	orr.w	r2, r2, #32
 8007a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b095      	sub	sp, #84	; 0x54
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a94:	643a      	str	r2, [r7, #64]	; 0x40
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f023 0301 	bic.w	r3, r3, #1
 8007abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e5      	bne.n	8007aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d119      	bne.n	8007b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f023 0310 	bic.w	r3, r3, #16
 8007afa:	647b      	str	r3, [r7, #68]	; 0x44
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b04:	61ba      	str	r2, [r7, #24]
 8007b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6979      	ldr	r1, [r7, #20]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	613b      	str	r3, [r7, #16]
   return(result);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b26:	bf00      	nop
 8007b28:	3754      	adds	r7, #84	; 0x54
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f7ff fecb 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b21      	cmp	r3, #33	; 0x21
 8007b6c:	d13e      	bne.n	8007bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d114      	bne.n	8007ba2 <UART_Transmit_IT+0x48>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d110      	bne.n	8007ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	1c9a      	adds	r2, r3, #2
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	621a      	str	r2, [r3, #32]
 8007ba0:	e008      	b.n	8007bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	1c59      	adds	r1, r3, #1
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6211      	str	r1, [r2, #32]
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10f      	bne.n	8007be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fe5a 	bl	80078d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08c      	sub	sp, #48	; 0x30
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b22      	cmp	r3, #34	; 0x22
 8007c3c:	f040 80ab 	bne.w	8007d96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c48:	d117      	bne.n	8007c7a <UART_Receive_IT+0x50>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d113      	bne.n	8007c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
 8007c78:	e026      	b.n	8007cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d007      	beq.n	8007c9e <UART_Receive_IT+0x74>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <UART_Receive_IT+0x82>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e008      	b.n	8007cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d15a      	bne.n	8007d92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0220 	bic.w	r2, r2, #32
 8007cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695a      	ldr	r2, [r3, #20]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d135      	bne.n	8007d88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	613b      	str	r3, [r7, #16]
   return(result);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f023 0310 	bic.w	r3, r3, #16
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	623a      	str	r2, [r7, #32]
 8007d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	69f9      	ldr	r1, [r7, #28]
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e5      	bne.n	8007d22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d10a      	bne.n	8007d7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fdbb 	bl	80078fc <HAL_UARTEx_RxEventCallback>
 8007d86:	e002      	b.n	8007d8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7f9 fa4f 	bl	800122c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e002      	b.n	8007d98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e000      	b.n	8007d98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d96:	2302      	movs	r3, #2
  }
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3730      	adds	r7, #48	; 0x30
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b0c0      	sub	sp, #256	; 0x100
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbc:	68d9      	ldr	r1, [r3, #12]
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	ea40 0301 	orr.w	r3, r0, r1
 8007dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	431a      	orrs	r2, r3
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007df8:	f021 010c 	bic.w	r1, r1, #12
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e06:	430b      	orrs	r3, r1
 8007e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1a:	6999      	ldr	r1, [r3, #24]
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	ea40 0301 	orr.w	r3, r0, r1
 8007e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4b8f      	ldr	r3, [pc, #572]	; (800806c <UART_SetConfig+0x2cc>)
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d005      	beq.n	8007e40 <UART_SetConfig+0xa0>
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b8d      	ldr	r3, [pc, #564]	; (8008070 <UART_SetConfig+0x2d0>)
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d104      	bne.n	8007e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e40:	f7fd fc2c 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 8007e44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e48:	e003      	b.n	8007e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e4a:	f7fd fc13 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8007e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5c:	f040 810c 	bne.w	8008078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e72:	4622      	mov	r2, r4
 8007e74:	462b      	mov	r3, r5
 8007e76:	1891      	adds	r1, r2, r2
 8007e78:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e7a:	415b      	adcs	r3, r3
 8007e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e82:	4621      	mov	r1, r4
 8007e84:	eb12 0801 	adds.w	r8, r2, r1
 8007e88:	4629      	mov	r1, r5
 8007e8a:	eb43 0901 	adc.w	r9, r3, r1
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ea2:	4690      	mov	r8, r2
 8007ea4:	4699      	mov	r9, r3
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	eb18 0303 	adds.w	r3, r8, r3
 8007eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007eb0:	462b      	mov	r3, r5
 8007eb2:	eb49 0303 	adc.w	r3, r9, r3
 8007eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ece:	460b      	mov	r3, r1
 8007ed0:	18db      	adds	r3, r3, r3
 8007ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	eb42 0303 	adc.w	r3, r2, r3
 8007eda:	657b      	str	r3, [r7, #84]	; 0x54
 8007edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ee4:	f7f8 f9ec 	bl	80002c0 <__aeabi_uldivmod>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4b61      	ldr	r3, [pc, #388]	; (8008074 <UART_SetConfig+0x2d4>)
 8007eee:	fba3 2302 	umull	r2, r3, r3, r2
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	011c      	lsls	r4, r3, #4
 8007ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f08:	4642      	mov	r2, r8
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	1891      	adds	r1, r2, r2
 8007f0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f10:	415b      	adcs	r3, r3
 8007f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f18:	4641      	mov	r1, r8
 8007f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f1e:	4649      	mov	r1, r9
 8007f20:	eb43 0b01 	adc.w	fp, r3, r1
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f38:	4692      	mov	sl, r2
 8007f3a:	469b      	mov	fp, r3
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f46:	464b      	mov	r3, r9
 8007f48:	eb4b 0303 	adc.w	r3, fp, r3
 8007f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f64:	460b      	mov	r3, r1
 8007f66:	18db      	adds	r3, r3, r3
 8007f68:	643b      	str	r3, [r7, #64]	; 0x40
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	eb42 0303 	adc.w	r3, r2, r3
 8007f70:	647b      	str	r3, [r7, #68]	; 0x44
 8007f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f7a:	f7f8 f9a1 	bl	80002c0 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	4b3b      	ldr	r3, [pc, #236]	; (8008074 <UART_SetConfig+0x2d4>)
 8007f86:	fba3 2301 	umull	r2, r3, r3, r1
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2264      	movs	r2, #100	; 0x64
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	1acb      	subs	r3, r1, r3
 8007f94:	00db      	lsls	r3, r3, #3
 8007f96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f9a:	4b36      	ldr	r3, [pc, #216]	; (8008074 <UART_SetConfig+0x2d4>)
 8007f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fa8:	441c      	add	r4, r3
 8007faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	1891      	adds	r1, r2, r2
 8007fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fc4:	415b      	adcs	r3, r3
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fcc:	4641      	mov	r1, r8
 8007fce:	1851      	adds	r1, r2, r1
 8007fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	414b      	adcs	r3, r1
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	00cb      	lsls	r3, r1, #3
 8007fe8:	4651      	mov	r1, sl
 8007fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fee:	4651      	mov	r1, sl
 8007ff0:	00ca      	lsls	r2, r1, #3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008000:	464b      	mov	r3, r9
 8008002:	460a      	mov	r2, r1
 8008004:	eb42 0303 	adc.w	r3, r2, r3
 8008008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008018:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800801c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008020:	460b      	mov	r3, r1
 8008022:	18db      	adds	r3, r3, r3
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
 8008026:	4613      	mov	r3, r2
 8008028:	eb42 0303 	adc.w	r3, r2, r3
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008036:	f7f8 f943 	bl	80002c0 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <UART_SetConfig+0x2d4>)
 8008040:	fba3 1302 	umull	r1, r3, r3, r2
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	2164      	movs	r1, #100	; 0x64
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	3332      	adds	r3, #50	; 0x32
 8008052:	4a08      	ldr	r2, [pc, #32]	; (8008074 <UART_SetConfig+0x2d4>)
 8008054:	fba2 2303 	umull	r2, r3, r2, r3
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	f003 0207 	and.w	r2, r3, #7
 800805e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4422      	add	r2, r4
 8008066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008068:	e105      	b.n	8008276 <UART_SetConfig+0x4d6>
 800806a:	bf00      	nop
 800806c:	40011000 	.word	0x40011000
 8008070:	40011400 	.word	0x40011400
 8008074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800807c:	2200      	movs	r2, #0
 800807e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800808a:	4642      	mov	r2, r8
 800808c:	464b      	mov	r3, r9
 800808e:	1891      	adds	r1, r2, r2
 8008090:	6239      	str	r1, [r7, #32]
 8008092:	415b      	adcs	r3, r3
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
 8008096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800809a:	4641      	mov	r1, r8
 800809c:	1854      	adds	r4, r2, r1
 800809e:	4649      	mov	r1, r9
 80080a0:	eb43 0501 	adc.w	r5, r3, r1
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	00eb      	lsls	r3, r5, #3
 80080ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080b2:	00e2      	lsls	r2, r4, #3
 80080b4:	4614      	mov	r4, r2
 80080b6:	461d      	mov	r5, r3
 80080b8:	4643      	mov	r3, r8
 80080ba:	18e3      	adds	r3, r4, r3
 80080bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080c0:	464b      	mov	r3, r9
 80080c2:	eb45 0303 	adc.w	r3, r5, r3
 80080c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080e6:	4629      	mov	r1, r5
 80080e8:	008b      	lsls	r3, r1, #2
 80080ea:	4621      	mov	r1, r4
 80080ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080f0:	4621      	mov	r1, r4
 80080f2:	008a      	lsls	r2, r1, #2
 80080f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080f8:	f7f8 f8e2 	bl	80002c0 <__aeabi_uldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4b60      	ldr	r3, [pc, #384]	; (8008284 <UART_SetConfig+0x4e4>)
 8008102:	fba3 2302 	umull	r2, r3, r3, r2
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	011c      	lsls	r4, r3, #4
 800810a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810e:	2200      	movs	r2, #0
 8008110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008114:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800811c:	4642      	mov	r2, r8
 800811e:	464b      	mov	r3, r9
 8008120:	1891      	adds	r1, r2, r2
 8008122:	61b9      	str	r1, [r7, #24]
 8008124:	415b      	adcs	r3, r3
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800812c:	4641      	mov	r1, r8
 800812e:	1851      	adds	r1, r2, r1
 8008130:	6139      	str	r1, [r7, #16]
 8008132:	4649      	mov	r1, r9
 8008134:	414b      	adcs	r3, r1
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008144:	4659      	mov	r1, fp
 8008146:	00cb      	lsls	r3, r1, #3
 8008148:	4651      	mov	r1, sl
 800814a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800814e:	4651      	mov	r1, sl
 8008150:	00ca      	lsls	r2, r1, #3
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	4603      	mov	r3, r0
 8008158:	4642      	mov	r2, r8
 800815a:	189b      	adds	r3, r3, r2
 800815c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008160:	464b      	mov	r3, r9
 8008162:	460a      	mov	r2, r1
 8008164:	eb42 0303 	adc.w	r3, r2, r3
 8008168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	67bb      	str	r3, [r7, #120]	; 0x78
 8008176:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	f04f 0300 	mov.w	r3, #0
 8008180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008184:	4649      	mov	r1, r9
 8008186:	008b      	lsls	r3, r1, #2
 8008188:	4641      	mov	r1, r8
 800818a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800818e:	4641      	mov	r1, r8
 8008190:	008a      	lsls	r2, r1, #2
 8008192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008196:	f7f8 f893 	bl	80002c0 <__aeabi_uldivmod>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4b39      	ldr	r3, [pc, #228]	; (8008284 <UART_SetConfig+0x4e4>)
 80081a0:	fba3 1302 	umull	r1, r3, r3, r2
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	2164      	movs	r1, #100	; 0x64
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	3332      	adds	r3, #50	; 0x32
 80081b2:	4a34      	ldr	r2, [pc, #208]	; (8008284 <UART_SetConfig+0x4e4>)
 80081b4:	fba2 2303 	umull	r2, r3, r2, r3
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081be:	441c      	add	r4, r3
 80081c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c4:	2200      	movs	r2, #0
 80081c6:	673b      	str	r3, [r7, #112]	; 0x70
 80081c8:	677a      	str	r2, [r7, #116]	; 0x74
 80081ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081ce:	4642      	mov	r2, r8
 80081d0:	464b      	mov	r3, r9
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	415b      	adcs	r3, r3
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081de:	4641      	mov	r1, r8
 80081e0:	1851      	adds	r1, r2, r1
 80081e2:	6039      	str	r1, [r7, #0]
 80081e4:	4649      	mov	r1, r9
 80081e6:	414b      	adcs	r3, r1
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081f6:	4659      	mov	r1, fp
 80081f8:	00cb      	lsls	r3, r1, #3
 80081fa:	4651      	mov	r1, sl
 80081fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008200:	4651      	mov	r1, sl
 8008202:	00ca      	lsls	r2, r1, #3
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
 8008208:	4603      	mov	r3, r0
 800820a:	4642      	mov	r2, r8
 800820c:	189b      	adds	r3, r3, r2
 800820e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008210:	464b      	mov	r3, r9
 8008212:	460a      	mov	r2, r1
 8008214:	eb42 0303 	adc.w	r3, r2, r3
 8008218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	663b      	str	r3, [r7, #96]	; 0x60
 8008224:	667a      	str	r2, [r7, #100]	; 0x64
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008232:	4649      	mov	r1, r9
 8008234:	008b      	lsls	r3, r1, #2
 8008236:	4641      	mov	r1, r8
 8008238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800823c:	4641      	mov	r1, r8
 800823e:	008a      	lsls	r2, r1, #2
 8008240:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008244:	f7f8 f83c 	bl	80002c0 <__aeabi_uldivmod>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <UART_SetConfig+0x4e4>)
 800824e:	fba3 1302 	umull	r1, r3, r3, r2
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	2164      	movs	r1, #100	; 0x64
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	3332      	adds	r3, #50	; 0x32
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <UART_SetConfig+0x4e4>)
 8008262:	fba2 2303 	umull	r2, r3, r2, r3
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	f003 020f 	and.w	r2, r3, #15
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4422      	add	r2, r4
 8008274:	609a      	str	r2, [r3, #8]
}
 8008276:	bf00      	nop
 8008278:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800827c:	46bd      	mov	sp, r7
 800827e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008282:	bf00      	nop
 8008284:	51eb851f 	.word	0x51eb851f

08008288 <__errno>:
 8008288:	4b01      	ldr	r3, [pc, #4]	; (8008290 <__errno+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2000076c 	.word	0x2000076c

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4d0d      	ldr	r5, [pc, #52]	; (80082cc <__libc_init_array+0x38>)
 8008298:	4c0d      	ldr	r4, [pc, #52]	; (80082d0 <__libc_init_array+0x3c>)
 800829a:	1b64      	subs	r4, r4, r5
 800829c:	10a4      	asrs	r4, r4, #2
 800829e:	2600      	movs	r6, #0
 80082a0:	42a6      	cmp	r6, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	4d0b      	ldr	r5, [pc, #44]	; (80082d4 <__libc_init_array+0x40>)
 80082a6:	4c0c      	ldr	r4, [pc, #48]	; (80082d8 <__libc_init_array+0x44>)
 80082a8:	f001 fa00 	bl	80096ac <_init>
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	2600      	movs	r6, #0
 80082b2:	42a6      	cmp	r6, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082bc:	4798      	blx	r3
 80082be:	3601      	adds	r6, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c6:	4798      	blx	r3
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	08009978 	.word	0x08009978
 80082d0:	08009978 	.word	0x08009978
 80082d4:	08009978 	.word	0x08009978
 80082d8:	0800997c 	.word	0x0800997c

080082dc <memset>:
 80082dc:	4402      	add	r2, r0
 80082de:	4603      	mov	r3, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <memset+0xa>
 80082e4:	4770      	bx	lr
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <memset+0x4>

080082ec <iprintf>:
 80082ec:	b40f      	push	{r0, r1, r2, r3}
 80082ee:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <iprintf+0x2c>)
 80082f0:	b513      	push	{r0, r1, r4, lr}
 80082f2:	681c      	ldr	r4, [r3, #0]
 80082f4:	b124      	cbz	r4, 8008300 <iprintf+0x14>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	b913      	cbnz	r3, 8008300 <iprintf+0x14>
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fa7e 	bl	80087fc <__sinit>
 8008300:	ab05      	add	r3, sp, #20
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	68a1      	ldr	r1, [r4, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fde3 	bl	8008ed4 <_vfiprintf_r>
 800830e:	b002      	add	sp, #8
 8008310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008314:	b004      	add	sp, #16
 8008316:	4770      	bx	lr
 8008318:	2000076c 	.word	0x2000076c

0800831c <_puts_r>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	460e      	mov	r6, r1
 8008320:	4605      	mov	r5, r0
 8008322:	b118      	cbz	r0, 800832c <_puts_r+0x10>
 8008324:	6983      	ldr	r3, [r0, #24]
 8008326:	b90b      	cbnz	r3, 800832c <_puts_r+0x10>
 8008328:	f000 fa68 	bl	80087fc <__sinit>
 800832c:	69ab      	ldr	r3, [r5, #24]
 800832e:	68ac      	ldr	r4, [r5, #8]
 8008330:	b913      	cbnz	r3, 8008338 <_puts_r+0x1c>
 8008332:	4628      	mov	r0, r5
 8008334:	f000 fa62 	bl	80087fc <__sinit>
 8008338:	4b2c      	ldr	r3, [pc, #176]	; (80083ec <_puts_r+0xd0>)
 800833a:	429c      	cmp	r4, r3
 800833c:	d120      	bne.n	8008380 <_puts_r+0x64>
 800833e:	686c      	ldr	r4, [r5, #4]
 8008340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008342:	07db      	lsls	r3, r3, #31
 8008344:	d405      	bmi.n	8008352 <_puts_r+0x36>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d402      	bmi.n	8008352 <_puts_r+0x36>
 800834c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834e:	f000 faf3 	bl	8008938 <__retarget_lock_acquire_recursive>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	0719      	lsls	r1, r3, #28
 8008356:	d51d      	bpl.n	8008394 <_puts_r+0x78>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	b1db      	cbz	r3, 8008394 <_puts_r+0x78>
 800835c:	3e01      	subs	r6, #1
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008364:	3b01      	subs	r3, #1
 8008366:	60a3      	str	r3, [r4, #8]
 8008368:	bb39      	cbnz	r1, 80083ba <_puts_r+0x9e>
 800836a:	2b00      	cmp	r3, #0
 800836c:	da38      	bge.n	80083e0 <_puts_r+0xc4>
 800836e:	4622      	mov	r2, r4
 8008370:	210a      	movs	r1, #10
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f868 	bl	8008448 <__swbuf_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d011      	beq.n	80083a0 <_puts_r+0x84>
 800837c:	250a      	movs	r5, #10
 800837e:	e011      	b.n	80083a4 <_puts_r+0x88>
 8008380:	4b1b      	ldr	r3, [pc, #108]	; (80083f0 <_puts_r+0xd4>)
 8008382:	429c      	cmp	r4, r3
 8008384:	d101      	bne.n	800838a <_puts_r+0x6e>
 8008386:	68ac      	ldr	r4, [r5, #8]
 8008388:	e7da      	b.n	8008340 <_puts_r+0x24>
 800838a:	4b1a      	ldr	r3, [pc, #104]	; (80083f4 <_puts_r+0xd8>)
 800838c:	429c      	cmp	r4, r3
 800838e:	bf08      	it	eq
 8008390:	68ec      	ldreq	r4, [r5, #12]
 8008392:	e7d5      	b.n	8008340 <_puts_r+0x24>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f000 f8a8 	bl	80084ec <__swsetup_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	d0dd      	beq.n	800835c <_puts_r+0x40>
 80083a0:	f04f 35ff 	mov.w	r5, #4294967295
 80083a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083a6:	07da      	lsls	r2, r3, #31
 80083a8:	d405      	bmi.n	80083b6 <_puts_r+0x9a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	059b      	lsls	r3, r3, #22
 80083ae:	d402      	bmi.n	80083b6 <_puts_r+0x9a>
 80083b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083b2:	f000 fac2 	bl	800893a <__retarget_lock_release_recursive>
 80083b6:	4628      	mov	r0, r5
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da04      	bge.n	80083c8 <_puts_r+0xac>
 80083be:	69a2      	ldr	r2, [r4, #24]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	dc06      	bgt.n	80083d2 <_puts_r+0xb6>
 80083c4:	290a      	cmp	r1, #10
 80083c6:	d004      	beq.n	80083d2 <_puts_r+0xb6>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	7019      	strb	r1, [r3, #0]
 80083d0:	e7c5      	b.n	800835e <_puts_r+0x42>
 80083d2:	4622      	mov	r2, r4
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 f837 	bl	8008448 <__swbuf_r>
 80083da:	3001      	adds	r0, #1
 80083dc:	d1bf      	bne.n	800835e <_puts_r+0x42>
 80083de:	e7df      	b.n	80083a0 <_puts_r+0x84>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	250a      	movs	r5, #10
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	701d      	strb	r5, [r3, #0]
 80083ea:	e7db      	b.n	80083a4 <_puts_r+0x88>
 80083ec:	080098fc 	.word	0x080098fc
 80083f0:	0800991c 	.word	0x0800991c
 80083f4:	080098dc 	.word	0x080098dc

080083f8 <puts>:
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <puts+0xc>)
 80083fa:	4601      	mov	r1, r0
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f7ff bf8d 	b.w	800831c <_puts_r>
 8008402:	bf00      	nop
 8008404:	2000076c 	.word	0x2000076c

08008408 <siprintf>:
 8008408:	b40e      	push	{r1, r2, r3}
 800840a:	b500      	push	{lr}
 800840c:	b09c      	sub	sp, #112	; 0x70
 800840e:	ab1d      	add	r3, sp, #116	; 0x74
 8008410:	9002      	str	r0, [sp, #8]
 8008412:	9006      	str	r0, [sp, #24]
 8008414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008418:	4809      	ldr	r0, [pc, #36]	; (8008440 <siprintf+0x38>)
 800841a:	9107      	str	r1, [sp, #28]
 800841c:	9104      	str	r1, [sp, #16]
 800841e:	4909      	ldr	r1, [pc, #36]	; (8008444 <siprintf+0x3c>)
 8008420:	f853 2b04 	ldr.w	r2, [r3], #4
 8008424:	9105      	str	r1, [sp, #20]
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	a902      	add	r1, sp, #8
 800842c:	f000 fc28 	bl	8008c80 <_svfiprintf_r>
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	b01c      	add	sp, #112	; 0x70
 8008438:	f85d eb04 	ldr.w	lr, [sp], #4
 800843c:	b003      	add	sp, #12
 800843e:	4770      	bx	lr
 8008440:	2000076c 	.word	0x2000076c
 8008444:	ffff0208 	.word	0xffff0208

08008448 <__swbuf_r>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	460e      	mov	r6, r1
 800844c:	4614      	mov	r4, r2
 800844e:	4605      	mov	r5, r0
 8008450:	b118      	cbz	r0, 800845a <__swbuf_r+0x12>
 8008452:	6983      	ldr	r3, [r0, #24]
 8008454:	b90b      	cbnz	r3, 800845a <__swbuf_r+0x12>
 8008456:	f000 f9d1 	bl	80087fc <__sinit>
 800845a:	4b21      	ldr	r3, [pc, #132]	; (80084e0 <__swbuf_r+0x98>)
 800845c:	429c      	cmp	r4, r3
 800845e:	d12b      	bne.n	80084b8 <__swbuf_r+0x70>
 8008460:	686c      	ldr	r4, [r5, #4]
 8008462:	69a3      	ldr	r3, [r4, #24]
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	071a      	lsls	r2, r3, #28
 800846a:	d52f      	bpl.n	80084cc <__swbuf_r+0x84>
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	b36b      	cbz	r3, 80084cc <__swbuf_r+0x84>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	6820      	ldr	r0, [r4, #0]
 8008474:	1ac0      	subs	r0, r0, r3
 8008476:	6963      	ldr	r3, [r4, #20]
 8008478:	b2f6      	uxtb	r6, r6
 800847a:	4283      	cmp	r3, r0
 800847c:	4637      	mov	r7, r6
 800847e:	dc04      	bgt.n	800848a <__swbuf_r+0x42>
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f926 	bl	80086d4 <_fflush_r>
 8008488:	bb30      	cbnz	r0, 80084d8 <__swbuf_r+0x90>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	3b01      	subs	r3, #1
 800848e:	60a3      	str	r3, [r4, #8]
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	6022      	str	r2, [r4, #0]
 8008496:	701e      	strb	r6, [r3, #0]
 8008498:	6963      	ldr	r3, [r4, #20]
 800849a:	3001      	adds	r0, #1
 800849c:	4283      	cmp	r3, r0
 800849e:	d004      	beq.n	80084aa <__swbuf_r+0x62>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	07db      	lsls	r3, r3, #31
 80084a4:	d506      	bpl.n	80084b4 <__swbuf_r+0x6c>
 80084a6:	2e0a      	cmp	r6, #10
 80084a8:	d104      	bne.n	80084b4 <__swbuf_r+0x6c>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	f000 f911 	bl	80086d4 <_fflush_r>
 80084b2:	b988      	cbnz	r0, 80084d8 <__swbuf_r+0x90>
 80084b4:	4638      	mov	r0, r7
 80084b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <__swbuf_r+0x9c>)
 80084ba:	429c      	cmp	r4, r3
 80084bc:	d101      	bne.n	80084c2 <__swbuf_r+0x7a>
 80084be:	68ac      	ldr	r4, [r5, #8]
 80084c0:	e7cf      	b.n	8008462 <__swbuf_r+0x1a>
 80084c2:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <__swbuf_r+0xa0>)
 80084c4:	429c      	cmp	r4, r3
 80084c6:	bf08      	it	eq
 80084c8:	68ec      	ldreq	r4, [r5, #12]
 80084ca:	e7ca      	b.n	8008462 <__swbuf_r+0x1a>
 80084cc:	4621      	mov	r1, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f80c 	bl	80084ec <__swsetup_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d0cb      	beq.n	8008470 <__swbuf_r+0x28>
 80084d8:	f04f 37ff 	mov.w	r7, #4294967295
 80084dc:	e7ea      	b.n	80084b4 <__swbuf_r+0x6c>
 80084de:	bf00      	nop
 80084e0:	080098fc 	.word	0x080098fc
 80084e4:	0800991c 	.word	0x0800991c
 80084e8:	080098dc 	.word	0x080098dc

080084ec <__swsetup_r>:
 80084ec:	4b32      	ldr	r3, [pc, #200]	; (80085b8 <__swsetup_r+0xcc>)
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	681d      	ldr	r5, [r3, #0]
 80084f2:	4606      	mov	r6, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	b125      	cbz	r5, 8008502 <__swsetup_r+0x16>
 80084f8:	69ab      	ldr	r3, [r5, #24]
 80084fa:	b913      	cbnz	r3, 8008502 <__swsetup_r+0x16>
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 f97d 	bl	80087fc <__sinit>
 8008502:	4b2e      	ldr	r3, [pc, #184]	; (80085bc <__swsetup_r+0xd0>)
 8008504:	429c      	cmp	r4, r3
 8008506:	d10f      	bne.n	8008528 <__swsetup_r+0x3c>
 8008508:	686c      	ldr	r4, [r5, #4]
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008510:	0719      	lsls	r1, r3, #28
 8008512:	d42c      	bmi.n	800856e <__swsetup_r+0x82>
 8008514:	06dd      	lsls	r5, r3, #27
 8008516:	d411      	bmi.n	800853c <__swsetup_r+0x50>
 8008518:	2309      	movs	r3, #9
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	e03e      	b.n	80085a6 <__swsetup_r+0xba>
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <__swsetup_r+0xd4>)
 800852a:	429c      	cmp	r4, r3
 800852c:	d101      	bne.n	8008532 <__swsetup_r+0x46>
 800852e:	68ac      	ldr	r4, [r5, #8]
 8008530:	e7eb      	b.n	800850a <__swsetup_r+0x1e>
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <__swsetup_r+0xd8>)
 8008534:	429c      	cmp	r4, r3
 8008536:	bf08      	it	eq
 8008538:	68ec      	ldreq	r4, [r5, #12]
 800853a:	e7e6      	b.n	800850a <__swsetup_r+0x1e>
 800853c:	0758      	lsls	r0, r3, #29
 800853e:	d512      	bpl.n	8008566 <__swsetup_r+0x7a>
 8008540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008542:	b141      	cbz	r1, 8008556 <__swsetup_r+0x6a>
 8008544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008548:	4299      	cmp	r1, r3
 800854a:	d002      	beq.n	8008552 <__swsetup_r+0x66>
 800854c:	4630      	mov	r0, r6
 800854e:	f000 fa5b 	bl	8008a08 <_free_r>
 8008552:	2300      	movs	r3, #0
 8008554:	6363      	str	r3, [r4, #52]	; 0x34
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	2300      	movs	r3, #0
 8008560:	6063      	str	r3, [r4, #4]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f043 0308 	orr.w	r3, r3, #8
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	b94b      	cbnz	r3, 8008586 <__swsetup_r+0x9a>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857c:	d003      	beq.n	8008586 <__swsetup_r+0x9a>
 800857e:	4621      	mov	r1, r4
 8008580:	4630      	mov	r0, r6
 8008582:	f000 fa01 	bl	8008988 <__smakebuf_r>
 8008586:	89a0      	ldrh	r0, [r4, #12]
 8008588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800858c:	f010 0301 	ands.w	r3, r0, #1
 8008590:	d00a      	beq.n	80085a8 <__swsetup_r+0xbc>
 8008592:	2300      	movs	r3, #0
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	6963      	ldr	r3, [r4, #20]
 8008598:	425b      	negs	r3, r3
 800859a:	61a3      	str	r3, [r4, #24]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	b943      	cbnz	r3, 80085b2 <__swsetup_r+0xc6>
 80085a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085a4:	d1ba      	bne.n	800851c <__swsetup_r+0x30>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	0781      	lsls	r1, r0, #30
 80085aa:	bf58      	it	pl
 80085ac:	6963      	ldrpl	r3, [r4, #20]
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	e7f4      	b.n	800859c <__swsetup_r+0xb0>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e7f7      	b.n	80085a6 <__swsetup_r+0xba>
 80085b6:	bf00      	nop
 80085b8:	2000076c 	.word	0x2000076c
 80085bc:	080098fc 	.word	0x080098fc
 80085c0:	0800991c 	.word	0x0800991c
 80085c4:	080098dc 	.word	0x080098dc

080085c8 <__sflush_r>:
 80085c8:	898a      	ldrh	r2, [r1, #12]
 80085ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ce:	4605      	mov	r5, r0
 80085d0:	0710      	lsls	r0, r2, #28
 80085d2:	460c      	mov	r4, r1
 80085d4:	d458      	bmi.n	8008688 <__sflush_r+0xc0>
 80085d6:	684b      	ldr	r3, [r1, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dc05      	bgt.n	80085e8 <__sflush_r+0x20>
 80085dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dc02      	bgt.n	80085e8 <__sflush_r+0x20>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	d0f9      	beq.n	80085e2 <__sflush_r+0x1a>
 80085ee:	2300      	movs	r3, #0
 80085f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085f4:	682f      	ldr	r7, [r5, #0]
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	d032      	beq.n	8008660 <__sflush_r+0x98>
 80085fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	075a      	lsls	r2, r3, #29
 8008600:	d505      	bpl.n	800860e <__sflush_r+0x46>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	1ac0      	subs	r0, r0, r3
 8008606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008608:	b10b      	cbz	r3, 800860e <__sflush_r+0x46>
 800860a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800860c:	1ac0      	subs	r0, r0, r3
 800860e:	2300      	movs	r3, #0
 8008610:	4602      	mov	r2, r0
 8008612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008614:	6a21      	ldr	r1, [r4, #32]
 8008616:	4628      	mov	r0, r5
 8008618:	47b0      	blx	r6
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	d106      	bne.n	800862e <__sflush_r+0x66>
 8008620:	6829      	ldr	r1, [r5, #0]
 8008622:	291d      	cmp	r1, #29
 8008624:	d82c      	bhi.n	8008680 <__sflush_r+0xb8>
 8008626:	4a2a      	ldr	r2, [pc, #168]	; (80086d0 <__sflush_r+0x108>)
 8008628:	40ca      	lsrs	r2, r1
 800862a:	07d6      	lsls	r6, r2, #31
 800862c:	d528      	bpl.n	8008680 <__sflush_r+0xb8>
 800862e:	2200      	movs	r2, #0
 8008630:	6062      	str	r2, [r4, #4]
 8008632:	04d9      	lsls	r1, r3, #19
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	6022      	str	r2, [r4, #0]
 8008638:	d504      	bpl.n	8008644 <__sflush_r+0x7c>
 800863a:	1c42      	adds	r2, r0, #1
 800863c:	d101      	bne.n	8008642 <__sflush_r+0x7a>
 800863e:	682b      	ldr	r3, [r5, #0]
 8008640:	b903      	cbnz	r3, 8008644 <__sflush_r+0x7c>
 8008642:	6560      	str	r0, [r4, #84]	; 0x54
 8008644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008646:	602f      	str	r7, [r5, #0]
 8008648:	2900      	cmp	r1, #0
 800864a:	d0ca      	beq.n	80085e2 <__sflush_r+0x1a>
 800864c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008650:	4299      	cmp	r1, r3
 8008652:	d002      	beq.n	800865a <__sflush_r+0x92>
 8008654:	4628      	mov	r0, r5
 8008656:	f000 f9d7 	bl	8008a08 <_free_r>
 800865a:	2000      	movs	r0, #0
 800865c:	6360      	str	r0, [r4, #52]	; 0x34
 800865e:	e7c1      	b.n	80085e4 <__sflush_r+0x1c>
 8008660:	6a21      	ldr	r1, [r4, #32]
 8008662:	2301      	movs	r3, #1
 8008664:	4628      	mov	r0, r5
 8008666:	47b0      	blx	r6
 8008668:	1c41      	adds	r1, r0, #1
 800866a:	d1c7      	bne.n	80085fc <__sflush_r+0x34>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0c4      	beq.n	80085fc <__sflush_r+0x34>
 8008672:	2b1d      	cmp	r3, #29
 8008674:	d001      	beq.n	800867a <__sflush_r+0xb2>
 8008676:	2b16      	cmp	r3, #22
 8008678:	d101      	bne.n	800867e <__sflush_r+0xb6>
 800867a:	602f      	str	r7, [r5, #0]
 800867c:	e7b1      	b.n	80085e2 <__sflush_r+0x1a>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	e7ad      	b.n	80085e4 <__sflush_r+0x1c>
 8008688:	690f      	ldr	r7, [r1, #16]
 800868a:	2f00      	cmp	r7, #0
 800868c:	d0a9      	beq.n	80085e2 <__sflush_r+0x1a>
 800868e:	0793      	lsls	r3, r2, #30
 8008690:	680e      	ldr	r6, [r1, #0]
 8008692:	bf08      	it	eq
 8008694:	694b      	ldreq	r3, [r1, #20]
 8008696:	600f      	str	r7, [r1, #0]
 8008698:	bf18      	it	ne
 800869a:	2300      	movne	r3, #0
 800869c:	eba6 0807 	sub.w	r8, r6, r7
 80086a0:	608b      	str	r3, [r1, #8]
 80086a2:	f1b8 0f00 	cmp.w	r8, #0
 80086a6:	dd9c      	ble.n	80085e2 <__sflush_r+0x1a>
 80086a8:	6a21      	ldr	r1, [r4, #32]
 80086aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086ac:	4643      	mov	r3, r8
 80086ae:	463a      	mov	r2, r7
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b0      	blx	r6
 80086b4:	2800      	cmp	r0, #0
 80086b6:	dc06      	bgt.n	80086c6 <__sflush_r+0xfe>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e78e      	b.n	80085e4 <__sflush_r+0x1c>
 80086c6:	4407      	add	r7, r0
 80086c8:	eba8 0800 	sub.w	r8, r8, r0
 80086cc:	e7e9      	b.n	80086a2 <__sflush_r+0xda>
 80086ce:	bf00      	nop
 80086d0:	20400001 	.word	0x20400001

080086d4 <_fflush_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	690b      	ldr	r3, [r1, #16]
 80086d8:	4605      	mov	r5, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	b913      	cbnz	r3, 80086e4 <_fflush_r+0x10>
 80086de:	2500      	movs	r5, #0
 80086e0:	4628      	mov	r0, r5
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	b118      	cbz	r0, 80086ee <_fflush_r+0x1a>
 80086e6:	6983      	ldr	r3, [r0, #24]
 80086e8:	b90b      	cbnz	r3, 80086ee <_fflush_r+0x1a>
 80086ea:	f000 f887 	bl	80087fc <__sinit>
 80086ee:	4b14      	ldr	r3, [pc, #80]	; (8008740 <_fflush_r+0x6c>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d11b      	bne.n	800872c <_fflush_r+0x58>
 80086f4:	686c      	ldr	r4, [r5, #4]
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0ef      	beq.n	80086de <_fflush_r+0xa>
 80086fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008700:	07d0      	lsls	r0, r2, #31
 8008702:	d404      	bmi.n	800870e <_fflush_r+0x3a>
 8008704:	0599      	lsls	r1, r3, #22
 8008706:	d402      	bmi.n	800870e <_fflush_r+0x3a>
 8008708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870a:	f000 f915 	bl	8008938 <__retarget_lock_acquire_recursive>
 800870e:	4628      	mov	r0, r5
 8008710:	4621      	mov	r1, r4
 8008712:	f7ff ff59 	bl	80085c8 <__sflush_r>
 8008716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008718:	07da      	lsls	r2, r3, #31
 800871a:	4605      	mov	r5, r0
 800871c:	d4e0      	bmi.n	80086e0 <_fflush_r+0xc>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	d4dd      	bmi.n	80086e0 <_fflush_r+0xc>
 8008724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008726:	f000 f908 	bl	800893a <__retarget_lock_release_recursive>
 800872a:	e7d9      	b.n	80086e0 <_fflush_r+0xc>
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <_fflush_r+0x70>)
 800872e:	429c      	cmp	r4, r3
 8008730:	d101      	bne.n	8008736 <_fflush_r+0x62>
 8008732:	68ac      	ldr	r4, [r5, #8]
 8008734:	e7df      	b.n	80086f6 <_fflush_r+0x22>
 8008736:	4b04      	ldr	r3, [pc, #16]	; (8008748 <_fflush_r+0x74>)
 8008738:	429c      	cmp	r4, r3
 800873a:	bf08      	it	eq
 800873c:	68ec      	ldreq	r4, [r5, #12]
 800873e:	e7da      	b.n	80086f6 <_fflush_r+0x22>
 8008740:	080098fc 	.word	0x080098fc
 8008744:	0800991c 	.word	0x0800991c
 8008748:	080098dc 	.word	0x080098dc

0800874c <std>:
 800874c:	2300      	movs	r3, #0
 800874e:	b510      	push	{r4, lr}
 8008750:	4604      	mov	r4, r0
 8008752:	e9c0 3300 	strd	r3, r3, [r0]
 8008756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800875a:	6083      	str	r3, [r0, #8]
 800875c:	8181      	strh	r1, [r0, #12]
 800875e:	6643      	str	r3, [r0, #100]	; 0x64
 8008760:	81c2      	strh	r2, [r0, #14]
 8008762:	6183      	str	r3, [r0, #24]
 8008764:	4619      	mov	r1, r3
 8008766:	2208      	movs	r2, #8
 8008768:	305c      	adds	r0, #92	; 0x5c
 800876a:	f7ff fdb7 	bl	80082dc <memset>
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <std+0x38>)
 8008770:	6263      	str	r3, [r4, #36]	; 0x24
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x3c>)
 8008774:	62a3      	str	r3, [r4, #40]	; 0x28
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x40>)
 8008778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <std+0x44>)
 800877c:	6224      	str	r4, [r4, #32]
 800877e:	6323      	str	r3, [r4, #48]	; 0x30
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop
 8008784:	0800947d 	.word	0x0800947d
 8008788:	0800949f 	.word	0x0800949f
 800878c:	080094d7 	.word	0x080094d7
 8008790:	080094fb 	.word	0x080094fb

08008794 <_cleanup_r>:
 8008794:	4901      	ldr	r1, [pc, #4]	; (800879c <_cleanup_r+0x8>)
 8008796:	f000 b8af 	b.w	80088f8 <_fwalk_reent>
 800879a:	bf00      	nop
 800879c:	080086d5 	.word	0x080086d5

080087a0 <__sfmoreglue>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	2268      	movs	r2, #104	; 0x68
 80087a4:	1e4d      	subs	r5, r1, #1
 80087a6:	4355      	muls	r5, r2
 80087a8:	460e      	mov	r6, r1
 80087aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087ae:	f000 f997 	bl	8008ae0 <_malloc_r>
 80087b2:	4604      	mov	r4, r0
 80087b4:	b140      	cbz	r0, 80087c8 <__sfmoreglue+0x28>
 80087b6:	2100      	movs	r1, #0
 80087b8:	e9c0 1600 	strd	r1, r6, [r0]
 80087bc:	300c      	adds	r0, #12
 80087be:	60a0      	str	r0, [r4, #8]
 80087c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087c4:	f7ff fd8a 	bl	80082dc <memset>
 80087c8:	4620      	mov	r0, r4
 80087ca:	bd70      	pop	{r4, r5, r6, pc}

080087cc <__sfp_lock_acquire>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__sfp_lock_acquire+0x8>)
 80087ce:	f000 b8b3 	b.w	8008938 <__retarget_lock_acquire_recursive>
 80087d2:	bf00      	nop
 80087d4:	20000b35 	.word	0x20000b35

080087d8 <__sfp_lock_release>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__sfp_lock_release+0x8>)
 80087da:	f000 b8ae 	b.w	800893a <__retarget_lock_release_recursive>
 80087de:	bf00      	nop
 80087e0:	20000b35 	.word	0x20000b35

080087e4 <__sinit_lock_acquire>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__sinit_lock_acquire+0x8>)
 80087e6:	f000 b8a7 	b.w	8008938 <__retarget_lock_acquire_recursive>
 80087ea:	bf00      	nop
 80087ec:	20000b36 	.word	0x20000b36

080087f0 <__sinit_lock_release>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sinit_lock_release+0x8>)
 80087f2:	f000 b8a2 	b.w	800893a <__retarget_lock_release_recursive>
 80087f6:	bf00      	nop
 80087f8:	20000b36 	.word	0x20000b36

080087fc <__sinit>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	4604      	mov	r4, r0
 8008800:	f7ff fff0 	bl	80087e4 <__sinit_lock_acquire>
 8008804:	69a3      	ldr	r3, [r4, #24]
 8008806:	b11b      	cbz	r3, 8008810 <__sinit+0x14>
 8008808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880c:	f7ff bff0 	b.w	80087f0 <__sinit_lock_release>
 8008810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008814:	6523      	str	r3, [r4, #80]	; 0x50
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <__sinit+0x68>)
 8008818:	4a13      	ldr	r2, [pc, #76]	; (8008868 <__sinit+0x6c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	62a2      	str	r2, [r4, #40]	; 0x28
 800881e:	42a3      	cmp	r3, r4
 8008820:	bf04      	itt	eq
 8008822:	2301      	moveq	r3, #1
 8008824:	61a3      	streq	r3, [r4, #24]
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f820 	bl	800886c <__sfp>
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f81c 	bl	800886c <__sfp>
 8008834:	60a0      	str	r0, [r4, #8]
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f818 	bl	800886c <__sfp>
 800883c:	2200      	movs	r2, #0
 800883e:	60e0      	str	r0, [r4, #12]
 8008840:	2104      	movs	r1, #4
 8008842:	6860      	ldr	r0, [r4, #4]
 8008844:	f7ff ff82 	bl	800874c <std>
 8008848:	68a0      	ldr	r0, [r4, #8]
 800884a:	2201      	movs	r2, #1
 800884c:	2109      	movs	r1, #9
 800884e:	f7ff ff7d 	bl	800874c <std>
 8008852:	68e0      	ldr	r0, [r4, #12]
 8008854:	2202      	movs	r2, #2
 8008856:	2112      	movs	r1, #18
 8008858:	f7ff ff78 	bl	800874c <std>
 800885c:	2301      	movs	r3, #1
 800885e:	61a3      	str	r3, [r4, #24]
 8008860:	e7d2      	b.n	8008808 <__sinit+0xc>
 8008862:	bf00      	nop
 8008864:	080098d8 	.word	0x080098d8
 8008868:	08008795 	.word	0x08008795

0800886c <__sfp>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	4607      	mov	r7, r0
 8008870:	f7ff ffac 	bl	80087cc <__sfp_lock_acquire>
 8008874:	4b1e      	ldr	r3, [pc, #120]	; (80088f0 <__sfp+0x84>)
 8008876:	681e      	ldr	r6, [r3, #0]
 8008878:	69b3      	ldr	r3, [r6, #24]
 800887a:	b913      	cbnz	r3, 8008882 <__sfp+0x16>
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff ffbd 	bl	80087fc <__sinit>
 8008882:	3648      	adds	r6, #72	; 0x48
 8008884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008888:	3b01      	subs	r3, #1
 800888a:	d503      	bpl.n	8008894 <__sfp+0x28>
 800888c:	6833      	ldr	r3, [r6, #0]
 800888e:	b30b      	cbz	r3, 80088d4 <__sfp+0x68>
 8008890:	6836      	ldr	r6, [r6, #0]
 8008892:	e7f7      	b.n	8008884 <__sfp+0x18>
 8008894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008898:	b9d5      	cbnz	r5, 80088d0 <__sfp+0x64>
 800889a:	4b16      	ldr	r3, [pc, #88]	; (80088f4 <__sfp+0x88>)
 800889c:	60e3      	str	r3, [r4, #12]
 800889e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088a2:	6665      	str	r5, [r4, #100]	; 0x64
 80088a4:	f000 f847 	bl	8008936 <__retarget_lock_init_recursive>
 80088a8:	f7ff ff96 	bl	80087d8 <__sfp_lock_release>
 80088ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088b4:	6025      	str	r5, [r4, #0]
 80088b6:	61a5      	str	r5, [r4, #24]
 80088b8:	2208      	movs	r2, #8
 80088ba:	4629      	mov	r1, r5
 80088bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088c0:	f7ff fd0c 	bl	80082dc <memset>
 80088c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088cc:	4620      	mov	r0, r4
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d0:	3468      	adds	r4, #104	; 0x68
 80088d2:	e7d9      	b.n	8008888 <__sfp+0x1c>
 80088d4:	2104      	movs	r1, #4
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7ff ff62 	bl	80087a0 <__sfmoreglue>
 80088dc:	4604      	mov	r4, r0
 80088de:	6030      	str	r0, [r6, #0]
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d1d5      	bne.n	8008890 <__sfp+0x24>
 80088e4:	f7ff ff78 	bl	80087d8 <__sfp_lock_release>
 80088e8:	230c      	movs	r3, #12
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	e7ee      	b.n	80088cc <__sfp+0x60>
 80088ee:	bf00      	nop
 80088f0:	080098d8 	.word	0x080098d8
 80088f4:	ffff0001 	.word	0xffff0001

080088f8 <_fwalk_reent>:
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4606      	mov	r6, r0
 80088fe:	4688      	mov	r8, r1
 8008900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008904:	2700      	movs	r7, #0
 8008906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800890a:	f1b9 0901 	subs.w	r9, r9, #1
 800890e:	d505      	bpl.n	800891c <_fwalk_reent+0x24>
 8008910:	6824      	ldr	r4, [r4, #0]
 8008912:	2c00      	cmp	r4, #0
 8008914:	d1f7      	bne.n	8008906 <_fwalk_reent+0xe>
 8008916:	4638      	mov	r0, r7
 8008918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800891c:	89ab      	ldrh	r3, [r5, #12]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d907      	bls.n	8008932 <_fwalk_reent+0x3a>
 8008922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008926:	3301      	adds	r3, #1
 8008928:	d003      	beq.n	8008932 <_fwalk_reent+0x3a>
 800892a:	4629      	mov	r1, r5
 800892c:	4630      	mov	r0, r6
 800892e:	47c0      	blx	r8
 8008930:	4307      	orrs	r7, r0
 8008932:	3568      	adds	r5, #104	; 0x68
 8008934:	e7e9      	b.n	800890a <_fwalk_reent+0x12>

08008936 <__retarget_lock_init_recursive>:
 8008936:	4770      	bx	lr

08008938 <__retarget_lock_acquire_recursive>:
 8008938:	4770      	bx	lr

0800893a <__retarget_lock_release_recursive>:
 800893a:	4770      	bx	lr

0800893c <__swhatbuf_r>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	460e      	mov	r6, r1
 8008940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008944:	2900      	cmp	r1, #0
 8008946:	b096      	sub	sp, #88	; 0x58
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	da08      	bge.n	8008960 <__swhatbuf_r+0x24>
 800894e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	061a      	lsls	r2, r3, #24
 8008958:	d410      	bmi.n	800897c <__swhatbuf_r+0x40>
 800895a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895e:	e00e      	b.n	800897e <__swhatbuf_r+0x42>
 8008960:	466a      	mov	r2, sp
 8008962:	f000 fdf1 	bl	8009548 <_fstat_r>
 8008966:	2800      	cmp	r0, #0
 8008968:	dbf1      	blt.n	800894e <__swhatbuf_r+0x12>
 800896a:	9a01      	ldr	r2, [sp, #4]
 800896c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008974:	425a      	negs	r2, r3
 8008976:	415a      	adcs	r2, r3
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	e7ee      	b.n	800895a <__swhatbuf_r+0x1e>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	2000      	movs	r0, #0
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	b016      	add	sp, #88	; 0x58
 8008984:	bd70      	pop	{r4, r5, r6, pc}
	...

08008988 <__smakebuf_r>:
 8008988:	898b      	ldrh	r3, [r1, #12]
 800898a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800898c:	079d      	lsls	r5, r3, #30
 800898e:	4606      	mov	r6, r0
 8008990:	460c      	mov	r4, r1
 8008992:	d507      	bpl.n	80089a4 <__smakebuf_r+0x1c>
 8008994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	2301      	movs	r3, #1
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	b002      	add	sp, #8
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	ab01      	add	r3, sp, #4
 80089a6:	466a      	mov	r2, sp
 80089a8:	f7ff ffc8 	bl	800893c <__swhatbuf_r>
 80089ac:	9900      	ldr	r1, [sp, #0]
 80089ae:	4605      	mov	r5, r0
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 f895 	bl	8008ae0 <_malloc_r>
 80089b6:	b948      	cbnz	r0, 80089cc <__smakebuf_r+0x44>
 80089b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d4ef      	bmi.n	80089a0 <__smakebuf_r+0x18>
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	e7e3      	b.n	8008994 <__smakebuf_r+0xc>
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <__smakebuf_r+0x7c>)
 80089ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	9b00      	ldr	r3, [sp, #0]
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	6120      	str	r0, [r4, #16]
 80089e2:	b15b      	cbz	r3, 80089fc <__smakebuf_r+0x74>
 80089e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 fdbf 	bl	800956c <_isatty_r>
 80089ee:	b128      	cbz	r0, 80089fc <__smakebuf_r+0x74>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	89a0      	ldrh	r0, [r4, #12]
 80089fe:	4305      	orrs	r5, r0
 8008a00:	81a5      	strh	r5, [r4, #12]
 8008a02:	e7cd      	b.n	80089a0 <__smakebuf_r+0x18>
 8008a04:	08008795 	.word	0x08008795

08008a08 <_free_r>:
 8008a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a0a:	2900      	cmp	r1, #0
 8008a0c:	d044      	beq.n	8008a98 <_free_r+0x90>
 8008a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a12:	9001      	str	r0, [sp, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f1a1 0404 	sub.w	r4, r1, #4
 8008a1a:	bfb8      	it	lt
 8008a1c:	18e4      	addlt	r4, r4, r3
 8008a1e:	f000 fdef 	bl	8009600 <__malloc_lock>
 8008a22:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <_free_r+0x94>)
 8008a24:	9801      	ldr	r0, [sp, #4]
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	b933      	cbnz	r3, 8008a38 <_free_r+0x30>
 8008a2a:	6063      	str	r3, [r4, #4]
 8008a2c:	6014      	str	r4, [r2, #0]
 8008a2e:	b003      	add	sp, #12
 8008a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a34:	f000 bdea 	b.w	800960c <__malloc_unlock>
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	d908      	bls.n	8008a4e <_free_r+0x46>
 8008a3c:	6825      	ldr	r5, [r4, #0]
 8008a3e:	1961      	adds	r1, r4, r5
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf01      	itttt	eq
 8008a44:	6819      	ldreq	r1, [r3, #0]
 8008a46:	685b      	ldreq	r3, [r3, #4]
 8008a48:	1949      	addeq	r1, r1, r5
 8008a4a:	6021      	streq	r1, [r4, #0]
 8008a4c:	e7ed      	b.n	8008a2a <_free_r+0x22>
 8008a4e:	461a      	mov	r2, r3
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	b10b      	cbz	r3, 8008a58 <_free_r+0x50>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d9fa      	bls.n	8008a4e <_free_r+0x46>
 8008a58:	6811      	ldr	r1, [r2, #0]
 8008a5a:	1855      	adds	r5, r2, r1
 8008a5c:	42a5      	cmp	r5, r4
 8008a5e:	d10b      	bne.n	8008a78 <_free_r+0x70>
 8008a60:	6824      	ldr	r4, [r4, #0]
 8008a62:	4421      	add	r1, r4
 8008a64:	1854      	adds	r4, r2, r1
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	6011      	str	r1, [r2, #0]
 8008a6a:	d1e0      	bne.n	8008a2e <_free_r+0x26>
 8008a6c:	681c      	ldr	r4, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	6053      	str	r3, [r2, #4]
 8008a72:	4421      	add	r1, r4
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	e7da      	b.n	8008a2e <_free_r+0x26>
 8008a78:	d902      	bls.n	8008a80 <_free_r+0x78>
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	e7d6      	b.n	8008a2e <_free_r+0x26>
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	1961      	adds	r1, r4, r5
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf04      	itt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	bf04      	itt	eq
 8008a90:	1949      	addeq	r1, r1, r5
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	6054      	str	r4, [r2, #4]
 8008a96:	e7ca      	b.n	8008a2e <_free_r+0x26>
 8008a98:	b003      	add	sp, #12
 8008a9a:	bd30      	pop	{r4, r5, pc}
 8008a9c:	20000b38 	.word	0x20000b38

08008aa0 <sbrk_aligned>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4e0e      	ldr	r6, [pc, #56]	; (8008adc <sbrk_aligned+0x3c>)
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	6831      	ldr	r1, [r6, #0]
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	b911      	cbnz	r1, 8008ab2 <sbrk_aligned+0x12>
 8008aac:	f000 fcd6 	bl	800945c <_sbrk_r>
 8008ab0:	6030      	str	r0, [r6, #0]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 fcd1 	bl	800945c <_sbrk_r>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	d00a      	beq.n	8008ad4 <sbrk_aligned+0x34>
 8008abe:	1cc4      	adds	r4, r0, #3
 8008ac0:	f024 0403 	bic.w	r4, r4, #3
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d007      	beq.n	8008ad8 <sbrk_aligned+0x38>
 8008ac8:	1a21      	subs	r1, r4, r0
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 fcc6 	bl	800945c <_sbrk_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d101      	bne.n	8008ad8 <sbrk_aligned+0x38>
 8008ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ad8:	4620      	mov	r0, r4
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	20000b3c 	.word	0x20000b3c

08008ae0 <_malloc_r>:
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae4:	1ccd      	adds	r5, r1, #3
 8008ae6:	f025 0503 	bic.w	r5, r5, #3
 8008aea:	3508      	adds	r5, #8
 8008aec:	2d0c      	cmp	r5, #12
 8008aee:	bf38      	it	cc
 8008af0:	250c      	movcc	r5, #12
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	4607      	mov	r7, r0
 8008af6:	db01      	blt.n	8008afc <_malloc_r+0x1c>
 8008af8:	42a9      	cmp	r1, r5
 8008afa:	d905      	bls.n	8008b08 <_malloc_r+0x28>
 8008afc:	230c      	movs	r3, #12
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	2600      	movs	r6, #0
 8008b02:	4630      	mov	r0, r6
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	4e2e      	ldr	r6, [pc, #184]	; (8008bc4 <_malloc_r+0xe4>)
 8008b0a:	f000 fd79 	bl	8009600 <__malloc_lock>
 8008b0e:	6833      	ldr	r3, [r6, #0]
 8008b10:	461c      	mov	r4, r3
 8008b12:	bb34      	cbnz	r4, 8008b62 <_malloc_r+0x82>
 8008b14:	4629      	mov	r1, r5
 8008b16:	4638      	mov	r0, r7
 8008b18:	f7ff ffc2 	bl	8008aa0 <sbrk_aligned>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	4604      	mov	r4, r0
 8008b20:	d14d      	bne.n	8008bbe <_malloc_r+0xde>
 8008b22:	6834      	ldr	r4, [r6, #0]
 8008b24:	4626      	mov	r6, r4
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	d140      	bne.n	8008bac <_malloc_r+0xcc>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4638      	mov	r0, r7
 8008b30:	eb04 0803 	add.w	r8, r4, r3
 8008b34:	f000 fc92 	bl	800945c <_sbrk_r>
 8008b38:	4580      	cmp	r8, r0
 8008b3a:	d13a      	bne.n	8008bb2 <_malloc_r+0xd2>
 8008b3c:	6821      	ldr	r1, [r4, #0]
 8008b3e:	3503      	adds	r5, #3
 8008b40:	1a6d      	subs	r5, r5, r1
 8008b42:	f025 0503 	bic.w	r5, r5, #3
 8008b46:	3508      	adds	r5, #8
 8008b48:	2d0c      	cmp	r5, #12
 8008b4a:	bf38      	it	cc
 8008b4c:	250c      	movcc	r5, #12
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff ffa5 	bl	8008aa0 <sbrk_aligned>
 8008b56:	3001      	adds	r0, #1
 8008b58:	d02b      	beq.n	8008bb2 <_malloc_r+0xd2>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	442b      	add	r3, r5
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	e00e      	b.n	8008b80 <_malloc_r+0xa0>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	1b52      	subs	r2, r2, r5
 8008b66:	d41e      	bmi.n	8008ba6 <_malloc_r+0xc6>
 8008b68:	2a0b      	cmp	r2, #11
 8008b6a:	d916      	bls.n	8008b9a <_malloc_r+0xba>
 8008b6c:	1961      	adds	r1, r4, r5
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	6025      	str	r5, [r4, #0]
 8008b72:	bf18      	it	ne
 8008b74:	6059      	strne	r1, [r3, #4]
 8008b76:	6863      	ldr	r3, [r4, #4]
 8008b78:	bf08      	it	eq
 8008b7a:	6031      	streq	r1, [r6, #0]
 8008b7c:	5162      	str	r2, [r4, r5]
 8008b7e:	604b      	str	r3, [r1, #4]
 8008b80:	4638      	mov	r0, r7
 8008b82:	f104 060b 	add.w	r6, r4, #11
 8008b86:	f000 fd41 	bl	800960c <__malloc_unlock>
 8008b8a:	f026 0607 	bic.w	r6, r6, #7
 8008b8e:	1d23      	adds	r3, r4, #4
 8008b90:	1af2      	subs	r2, r6, r3
 8008b92:	d0b6      	beq.n	8008b02 <_malloc_r+0x22>
 8008b94:	1b9b      	subs	r3, r3, r6
 8008b96:	50a3      	str	r3, [r4, r2]
 8008b98:	e7b3      	b.n	8008b02 <_malloc_r+0x22>
 8008b9a:	6862      	ldr	r2, [r4, #4]
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	bf0c      	ite	eq
 8008ba0:	6032      	streq	r2, [r6, #0]
 8008ba2:	605a      	strne	r2, [r3, #4]
 8008ba4:	e7ec      	b.n	8008b80 <_malloc_r+0xa0>
 8008ba6:	4623      	mov	r3, r4
 8008ba8:	6864      	ldr	r4, [r4, #4]
 8008baa:	e7b2      	b.n	8008b12 <_malloc_r+0x32>
 8008bac:	4634      	mov	r4, r6
 8008bae:	6876      	ldr	r6, [r6, #4]
 8008bb0:	e7b9      	b.n	8008b26 <_malloc_r+0x46>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f000 fd28 	bl	800960c <__malloc_unlock>
 8008bbc:	e7a1      	b.n	8008b02 <_malloc_r+0x22>
 8008bbe:	6025      	str	r5, [r4, #0]
 8008bc0:	e7de      	b.n	8008b80 <_malloc_r+0xa0>
 8008bc2:	bf00      	nop
 8008bc4:	20000b38 	.word	0x20000b38

08008bc8 <__ssputs_r>:
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	688e      	ldr	r6, [r1, #8]
 8008bce:	429e      	cmp	r6, r3
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	4690      	mov	r8, r2
 8008bd6:	461f      	mov	r7, r3
 8008bd8:	d838      	bhi.n	8008c4c <__ssputs_r+0x84>
 8008bda:	898a      	ldrh	r2, [r1, #12]
 8008bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be0:	d032      	beq.n	8008c48 <__ssputs_r+0x80>
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	6909      	ldr	r1, [r1, #16]
 8008be6:	eba5 0901 	sub.w	r9, r5, r1
 8008bea:	6965      	ldr	r5, [r4, #20]
 8008bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	444b      	add	r3, r9
 8008bf8:	106d      	asrs	r5, r5, #1
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	bf38      	it	cc
 8008bfe:	461d      	movcc	r5, r3
 8008c00:	0553      	lsls	r3, r2, #21
 8008c02:	d531      	bpl.n	8008c68 <__ssputs_r+0xa0>
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7ff ff6b 	bl	8008ae0 <_malloc_r>
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	b950      	cbnz	r0, 8008c24 <__ssputs_r+0x5c>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	f8ca 3000 	str.w	r3, [sl]
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c24:	6921      	ldr	r1, [r4, #16]
 8008c26:	464a      	mov	r2, r9
 8008c28:	f000 fcc2 	bl	80095b0 <memcpy>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	6126      	str	r6, [r4, #16]
 8008c3a:	6165      	str	r5, [r4, #20]
 8008c3c:	444e      	add	r6, r9
 8008c3e:	eba5 0509 	sub.w	r5, r5, r9
 8008c42:	6026      	str	r6, [r4, #0]
 8008c44:	60a5      	str	r5, [r4, #8]
 8008c46:	463e      	mov	r6, r7
 8008c48:	42be      	cmp	r6, r7
 8008c4a:	d900      	bls.n	8008c4e <__ssputs_r+0x86>
 8008c4c:	463e      	mov	r6, r7
 8008c4e:	6820      	ldr	r0, [r4, #0]
 8008c50:	4632      	mov	r2, r6
 8008c52:	4641      	mov	r1, r8
 8008c54:	f000 fcba 	bl	80095cc <memmove>
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	1b9b      	subs	r3, r3, r6
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	4433      	add	r3, r6
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	2000      	movs	r0, #0
 8008c66:	e7db      	b.n	8008c20 <__ssputs_r+0x58>
 8008c68:	462a      	mov	r2, r5
 8008c6a:	f000 fcd5 	bl	8009618 <_realloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1e1      	bne.n	8008c38 <__ssputs_r+0x70>
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	4650      	mov	r0, sl
 8008c78:	f7ff fec6 	bl	8008a08 <_free_r>
 8008c7c:	e7c7      	b.n	8008c0e <__ssputs_r+0x46>
	...

08008c80 <_svfiprintf_r>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	4698      	mov	r8, r3
 8008c86:	898b      	ldrh	r3, [r1, #12]
 8008c88:	061b      	lsls	r3, r3, #24
 8008c8a:	b09d      	sub	sp, #116	; 0x74
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	d50e      	bpl.n	8008cb2 <_svfiprintf_r+0x32>
 8008c94:	690b      	ldr	r3, [r1, #16]
 8008c96:	b963      	cbnz	r3, 8008cb2 <_svfiprintf_r+0x32>
 8008c98:	2140      	movs	r1, #64	; 0x40
 8008c9a:	f7ff ff21 	bl	8008ae0 <_malloc_r>
 8008c9e:	6028      	str	r0, [r5, #0]
 8008ca0:	6128      	str	r0, [r5, #16]
 8008ca2:	b920      	cbnz	r0, 8008cae <_svfiprintf_r+0x2e>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e0d1      	b.n	8008e52 <_svfiprintf_r+0x1d2>
 8008cae:	2340      	movs	r3, #64	; 0x40
 8008cb0:	616b      	str	r3, [r5, #20]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	2320      	movs	r3, #32
 8008cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc0:	2330      	movs	r3, #48	; 0x30
 8008cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e6c <_svfiprintf_r+0x1ec>
 8008cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cca:	f04f 0901 	mov.w	r9, #1
 8008cce:	4623      	mov	r3, r4
 8008cd0:	469a      	mov	sl, r3
 8008cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd6:	b10a      	cbz	r2, 8008cdc <_svfiprintf_r+0x5c>
 8008cd8:	2a25      	cmp	r2, #37	; 0x25
 8008cda:	d1f9      	bne.n	8008cd0 <_svfiprintf_r+0x50>
 8008cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce0:	d00b      	beq.n	8008cfa <_svfiprintf_r+0x7a>
 8008ce2:	465b      	mov	r3, fp
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ff6d 	bl	8008bc8 <__ssputs_r>
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f000 80aa 	beq.w	8008e48 <_svfiprintf_r+0x1c8>
 8008cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf6:	445a      	add	r2, fp
 8008cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80a2 	beq.w	8008e48 <_svfiprintf_r+0x1c8>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0e:	f10a 0a01 	add.w	sl, sl, #1
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d1c:	4654      	mov	r4, sl
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d24:	4851      	ldr	r0, [pc, #324]	; (8008e6c <_svfiprintf_r+0x1ec>)
 8008d26:	f7f7 fa7b 	bl	8000220 <memchr>
 8008d2a:	9a04      	ldr	r2, [sp, #16]
 8008d2c:	b9d8      	cbnz	r0, 8008d66 <_svfiprintf_r+0xe6>
 8008d2e:	06d0      	lsls	r0, r2, #27
 8008d30:	bf44      	itt	mi
 8008d32:	2320      	movmi	r3, #32
 8008d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d38:	0711      	lsls	r1, r2, #28
 8008d3a:	bf44      	itt	mi
 8008d3c:	232b      	movmi	r3, #43	; 0x2b
 8008d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d42:	f89a 3000 	ldrb.w	r3, [sl]
 8008d46:	2b2a      	cmp	r3, #42	; 0x2a
 8008d48:	d015      	beq.n	8008d76 <_svfiprintf_r+0xf6>
 8008d4a:	9a07      	ldr	r2, [sp, #28]
 8008d4c:	4654      	mov	r4, sl
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f04f 0c0a 	mov.w	ip, #10
 8008d54:	4621      	mov	r1, r4
 8008d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d5a:	3b30      	subs	r3, #48	; 0x30
 8008d5c:	2b09      	cmp	r3, #9
 8008d5e:	d94e      	bls.n	8008dfe <_svfiprintf_r+0x17e>
 8008d60:	b1b0      	cbz	r0, 8008d90 <_svfiprintf_r+0x110>
 8008d62:	9207      	str	r2, [sp, #28]
 8008d64:	e014      	b.n	8008d90 <_svfiprintf_r+0x110>
 8008d66:	eba0 0308 	sub.w	r3, r0, r8
 8008d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	46a2      	mov	sl, r4
 8008d74:	e7d2      	b.n	8008d1c <_svfiprintf_r+0x9c>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	1d19      	adds	r1, r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9103      	str	r1, [sp, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfbb      	ittet	lt
 8008d82:	425b      	neglt	r3, r3
 8008d84:	f042 0202 	orrlt.w	r2, r2, #2
 8008d88:	9307      	strge	r3, [sp, #28]
 8008d8a:	9307      	strlt	r3, [sp, #28]
 8008d8c:	bfb8      	it	lt
 8008d8e:	9204      	strlt	r2, [sp, #16]
 8008d90:	7823      	ldrb	r3, [r4, #0]
 8008d92:	2b2e      	cmp	r3, #46	; 0x2e
 8008d94:	d10c      	bne.n	8008db0 <_svfiprintf_r+0x130>
 8008d96:	7863      	ldrb	r3, [r4, #1]
 8008d98:	2b2a      	cmp	r3, #42	; 0x2a
 8008d9a:	d135      	bne.n	8008e08 <_svfiprintf_r+0x188>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	9203      	str	r2, [sp, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfb8      	it	lt
 8008da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dac:	3402      	adds	r4, #2
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e7c <_svfiprintf_r+0x1fc>
 8008db4:	7821      	ldrb	r1, [r4, #0]
 8008db6:	2203      	movs	r2, #3
 8008db8:	4650      	mov	r0, sl
 8008dba:	f7f7 fa31 	bl	8000220 <memchr>
 8008dbe:	b140      	cbz	r0, 8008dd2 <_svfiprintf_r+0x152>
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	eba0 000a 	sub.w	r0, r0, sl
 8008dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	4303      	orrs	r3, r0
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd6:	4826      	ldr	r0, [pc, #152]	; (8008e70 <_svfiprintf_r+0x1f0>)
 8008dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ddc:	2206      	movs	r2, #6
 8008dde:	f7f7 fa1f 	bl	8000220 <memchr>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d038      	beq.n	8008e58 <_svfiprintf_r+0x1d8>
 8008de6:	4b23      	ldr	r3, [pc, #140]	; (8008e74 <_svfiprintf_r+0x1f4>)
 8008de8:	bb1b      	cbnz	r3, 8008e32 <_svfiprintf_r+0x1b2>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	3307      	adds	r3, #7
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	3308      	adds	r3, #8
 8008df4:	9303      	str	r3, [sp, #12]
 8008df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df8:	4433      	add	r3, r6
 8008dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfc:	e767      	b.n	8008cce <_svfiprintf_r+0x4e>
 8008dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e02:	460c      	mov	r4, r1
 8008e04:	2001      	movs	r0, #1
 8008e06:	e7a5      	b.n	8008d54 <_svfiprintf_r+0xd4>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	3401      	adds	r4, #1
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f04f 0c0a 	mov.w	ip, #10
 8008e14:	4620      	mov	r0, r4
 8008e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1a:	3a30      	subs	r2, #48	; 0x30
 8008e1c:	2a09      	cmp	r2, #9
 8008e1e:	d903      	bls.n	8008e28 <_svfiprintf_r+0x1a8>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0c5      	beq.n	8008db0 <_svfiprintf_r+0x130>
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	e7c3      	b.n	8008db0 <_svfiprintf_r+0x130>
 8008e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e7f0      	b.n	8008e14 <_svfiprintf_r+0x194>
 8008e32:	ab03      	add	r3, sp, #12
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	462a      	mov	r2, r5
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <_svfiprintf_r+0x1f8>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f3af 8000 	nop.w
 8008e42:	1c42      	adds	r2, r0, #1
 8008e44:	4606      	mov	r6, r0
 8008e46:	d1d6      	bne.n	8008df6 <_svfiprintf_r+0x176>
 8008e48:	89ab      	ldrh	r3, [r5, #12]
 8008e4a:	065b      	lsls	r3, r3, #25
 8008e4c:	f53f af2c 	bmi.w	8008ca8 <_svfiprintf_r+0x28>
 8008e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e52:	b01d      	add	sp, #116	; 0x74
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <_svfiprintf_r+0x1f8>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4638      	mov	r0, r7
 8008e64:	f000 f9d4 	bl	8009210 <_printf_i>
 8008e68:	e7eb      	b.n	8008e42 <_svfiprintf_r+0x1c2>
 8008e6a:	bf00      	nop
 8008e6c:	0800993c 	.word	0x0800993c
 8008e70:	08009946 	.word	0x08009946
 8008e74:	00000000 	.word	0x00000000
 8008e78:	08008bc9 	.word	0x08008bc9
 8008e7c:	08009942 	.word	0x08009942

08008e80 <__sfputc_r>:
 8008e80:	6893      	ldr	r3, [r2, #8]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	b410      	push	{r4}
 8008e88:	6093      	str	r3, [r2, #8]
 8008e8a:	da08      	bge.n	8008e9e <__sfputc_r+0x1e>
 8008e8c:	6994      	ldr	r4, [r2, #24]
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	db01      	blt.n	8008e96 <__sfputc_r+0x16>
 8008e92:	290a      	cmp	r1, #10
 8008e94:	d103      	bne.n	8008e9e <__sfputc_r+0x1e>
 8008e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e9a:	f7ff bad5 	b.w	8008448 <__swbuf_r>
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	1c58      	adds	r0, r3, #1
 8008ea2:	6010      	str	r0, [r2, #0]
 8008ea4:	7019      	strb	r1, [r3, #0]
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <__sfputs_r>:
 8008eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	460f      	mov	r7, r1
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	18d5      	adds	r5, r2, r3
 8008eb8:	42ac      	cmp	r4, r5
 8008eba:	d101      	bne.n	8008ec0 <__sfputs_r+0x12>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e007      	b.n	8008ed0 <__sfputs_r+0x22>
 8008ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f7ff ffda 	bl	8008e80 <__sfputc_r>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d1f3      	bne.n	8008eb8 <__sfputs_r+0xa>
 8008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ed4 <_vfiprintf_r>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	460d      	mov	r5, r1
 8008eda:	b09d      	sub	sp, #116	; 0x74
 8008edc:	4614      	mov	r4, r2
 8008ede:	4698      	mov	r8, r3
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	b118      	cbz	r0, 8008eec <_vfiprintf_r+0x18>
 8008ee4:	6983      	ldr	r3, [r0, #24]
 8008ee6:	b90b      	cbnz	r3, 8008eec <_vfiprintf_r+0x18>
 8008ee8:	f7ff fc88 	bl	80087fc <__sinit>
 8008eec:	4b89      	ldr	r3, [pc, #548]	; (8009114 <_vfiprintf_r+0x240>)
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	d11b      	bne.n	8008f2a <_vfiprintf_r+0x56>
 8008ef2:	6875      	ldr	r5, [r6, #4]
 8008ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef6:	07d9      	lsls	r1, r3, #31
 8008ef8:	d405      	bmi.n	8008f06 <_vfiprintf_r+0x32>
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	059a      	lsls	r2, r3, #22
 8008efe:	d402      	bmi.n	8008f06 <_vfiprintf_r+0x32>
 8008f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f02:	f7ff fd19 	bl	8008938 <__retarget_lock_acquire_recursive>
 8008f06:	89ab      	ldrh	r3, [r5, #12]
 8008f08:	071b      	lsls	r3, r3, #28
 8008f0a:	d501      	bpl.n	8008f10 <_vfiprintf_r+0x3c>
 8008f0c:	692b      	ldr	r3, [r5, #16]
 8008f0e:	b9eb      	cbnz	r3, 8008f4c <_vfiprintf_r+0x78>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff faea 	bl	80084ec <__swsetup_r>
 8008f18:	b1c0      	cbz	r0, 8008f4c <_vfiprintf_r+0x78>
 8008f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f1c:	07dc      	lsls	r4, r3, #31
 8008f1e:	d50e      	bpl.n	8008f3e <_vfiprintf_r+0x6a>
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295
 8008f24:	b01d      	add	sp, #116	; 0x74
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2a:	4b7b      	ldr	r3, [pc, #492]	; (8009118 <_vfiprintf_r+0x244>)
 8008f2c:	429d      	cmp	r5, r3
 8008f2e:	d101      	bne.n	8008f34 <_vfiprintf_r+0x60>
 8008f30:	68b5      	ldr	r5, [r6, #8]
 8008f32:	e7df      	b.n	8008ef4 <_vfiprintf_r+0x20>
 8008f34:	4b79      	ldr	r3, [pc, #484]	; (800911c <_vfiprintf_r+0x248>)
 8008f36:	429d      	cmp	r5, r3
 8008f38:	bf08      	it	eq
 8008f3a:	68f5      	ldreq	r5, [r6, #12]
 8008f3c:	e7da      	b.n	8008ef4 <_vfiprintf_r+0x20>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	0598      	lsls	r0, r3, #22
 8008f42:	d4ed      	bmi.n	8008f20 <_vfiprintf_r+0x4c>
 8008f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f46:	f7ff fcf8 	bl	800893a <__retarget_lock_release_recursive>
 8008f4a:	e7e9      	b.n	8008f20 <_vfiprintf_r+0x4c>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f50:	2320      	movs	r3, #32
 8008f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5a:	2330      	movs	r3, #48	; 0x30
 8008f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009120 <_vfiprintf_r+0x24c>
 8008f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f64:	f04f 0901 	mov.w	r9, #1
 8008f68:	4623      	mov	r3, r4
 8008f6a:	469a      	mov	sl, r3
 8008f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f70:	b10a      	cbz	r2, 8008f76 <_vfiprintf_r+0xa2>
 8008f72:	2a25      	cmp	r2, #37	; 0x25
 8008f74:	d1f9      	bne.n	8008f6a <_vfiprintf_r+0x96>
 8008f76:	ebba 0b04 	subs.w	fp, sl, r4
 8008f7a:	d00b      	beq.n	8008f94 <_vfiprintf_r+0xc0>
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7ff ff93 	bl	8008eae <__sfputs_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f000 80aa 	beq.w	80090e2 <_vfiprintf_r+0x20e>
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	445a      	add	r2, fp
 8008f92:	9209      	str	r2, [sp, #36]	; 0x24
 8008f94:	f89a 3000 	ldrb.w	r3, [sl]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80a2 	beq.w	80090e2 <_vfiprintf_r+0x20e>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa8:	f10a 0a01 	add.w	sl, sl, #1
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb6:	4654      	mov	r4, sl
 8008fb8:	2205      	movs	r2, #5
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4858      	ldr	r0, [pc, #352]	; (8009120 <_vfiprintf_r+0x24c>)
 8008fc0:	f7f7 f92e 	bl	8000220 <memchr>
 8008fc4:	9a04      	ldr	r2, [sp, #16]
 8008fc6:	b9d8      	cbnz	r0, 8009000 <_vfiprintf_r+0x12c>
 8008fc8:	06d1      	lsls	r1, r2, #27
 8008fca:	bf44      	itt	mi
 8008fcc:	2320      	movmi	r3, #32
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd2:	0713      	lsls	r3, r2, #28
 8008fd4:	bf44      	itt	mi
 8008fd6:	232b      	movmi	r3, #43	; 0x2b
 8008fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe2:	d015      	beq.n	8009010 <_vfiprintf_r+0x13c>
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f04f 0c0a 	mov.w	ip, #10
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff4:	3b30      	subs	r3, #48	; 0x30
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d94e      	bls.n	8009098 <_vfiprintf_r+0x1c4>
 8008ffa:	b1b0      	cbz	r0, 800902a <_vfiprintf_r+0x156>
 8008ffc:	9207      	str	r2, [sp, #28]
 8008ffe:	e014      	b.n	800902a <_vfiprintf_r+0x156>
 8009000:	eba0 0308 	sub.w	r3, r0, r8
 8009004:	fa09 f303 	lsl.w	r3, r9, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	46a2      	mov	sl, r4
 800900e:	e7d2      	b.n	8008fb6 <_vfiprintf_r+0xe2>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	1d19      	adds	r1, r3, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	9103      	str	r1, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfbb      	ittet	lt
 800901c:	425b      	neglt	r3, r3
 800901e:	f042 0202 	orrlt.w	r2, r2, #2
 8009022:	9307      	strge	r3, [sp, #28]
 8009024:	9307      	strlt	r3, [sp, #28]
 8009026:	bfb8      	it	lt
 8009028:	9204      	strlt	r2, [sp, #16]
 800902a:	7823      	ldrb	r3, [r4, #0]
 800902c:	2b2e      	cmp	r3, #46	; 0x2e
 800902e:	d10c      	bne.n	800904a <_vfiprintf_r+0x176>
 8009030:	7863      	ldrb	r3, [r4, #1]
 8009032:	2b2a      	cmp	r3, #42	; 0x2a
 8009034:	d135      	bne.n	80090a2 <_vfiprintf_r+0x1ce>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9203      	str	r2, [sp, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfb8      	it	lt
 8009042:	f04f 33ff 	movlt.w	r3, #4294967295
 8009046:	3402      	adds	r4, #2
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009130 <_vfiprintf_r+0x25c>
 800904e:	7821      	ldrb	r1, [r4, #0]
 8009050:	2203      	movs	r2, #3
 8009052:	4650      	mov	r0, sl
 8009054:	f7f7 f8e4 	bl	8000220 <memchr>
 8009058:	b140      	cbz	r0, 800906c <_vfiprintf_r+0x198>
 800905a:	2340      	movs	r3, #64	; 0x40
 800905c:	eba0 000a 	sub.w	r0, r0, sl
 8009060:	fa03 f000 	lsl.w	r0, r3, r0
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	4303      	orrs	r3, r0
 8009068:	3401      	adds	r4, #1
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	482c      	ldr	r0, [pc, #176]	; (8009124 <_vfiprintf_r+0x250>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009076:	2206      	movs	r2, #6
 8009078:	f7f7 f8d2 	bl	8000220 <memchr>
 800907c:	2800      	cmp	r0, #0
 800907e:	d03f      	beq.n	8009100 <_vfiprintf_r+0x22c>
 8009080:	4b29      	ldr	r3, [pc, #164]	; (8009128 <_vfiprintf_r+0x254>)
 8009082:	bb1b      	cbnz	r3, 80090cc <_vfiprintf_r+0x1f8>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	3307      	adds	r3, #7
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	3308      	adds	r3, #8
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009092:	443b      	add	r3, r7
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	e767      	b.n	8008f68 <_vfiprintf_r+0x94>
 8009098:	fb0c 3202 	mla	r2, ip, r2, r3
 800909c:	460c      	mov	r4, r1
 800909e:	2001      	movs	r0, #1
 80090a0:	e7a5      	b.n	8008fee <_vfiprintf_r+0x11a>
 80090a2:	2300      	movs	r3, #0
 80090a4:	3401      	adds	r4, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b4:	3a30      	subs	r2, #48	; 0x30
 80090b6:	2a09      	cmp	r2, #9
 80090b8:	d903      	bls.n	80090c2 <_vfiprintf_r+0x1ee>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0c5      	beq.n	800904a <_vfiprintf_r+0x176>
 80090be:	9105      	str	r1, [sp, #20]
 80090c0:	e7c3      	b.n	800904a <_vfiprintf_r+0x176>
 80090c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c6:	4604      	mov	r4, r0
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7f0      	b.n	80090ae <_vfiprintf_r+0x1da>
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b16      	ldr	r3, [pc, #88]	; (800912c <_vfiprintf_r+0x258>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4630      	mov	r0, r6
 80090d8:	f3af 8000 	nop.w
 80090dc:	4607      	mov	r7, r0
 80090de:	1c78      	adds	r0, r7, #1
 80090e0:	d1d6      	bne.n	8009090 <_vfiprintf_r+0x1bc>
 80090e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e4:	07d9      	lsls	r1, r3, #31
 80090e6:	d405      	bmi.n	80090f4 <_vfiprintf_r+0x220>
 80090e8:	89ab      	ldrh	r3, [r5, #12]
 80090ea:	059a      	lsls	r2, r3, #22
 80090ec:	d402      	bmi.n	80090f4 <_vfiprintf_r+0x220>
 80090ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f0:	f7ff fc23 	bl	800893a <__retarget_lock_release_recursive>
 80090f4:	89ab      	ldrh	r3, [r5, #12]
 80090f6:	065b      	lsls	r3, r3, #25
 80090f8:	f53f af12 	bmi.w	8008f20 <_vfiprintf_r+0x4c>
 80090fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090fe:	e711      	b.n	8008f24 <_vfiprintf_r+0x50>
 8009100:	ab03      	add	r3, sp, #12
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	462a      	mov	r2, r5
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <_vfiprintf_r+0x258>)
 8009108:	a904      	add	r1, sp, #16
 800910a:	4630      	mov	r0, r6
 800910c:	f000 f880 	bl	8009210 <_printf_i>
 8009110:	e7e4      	b.n	80090dc <_vfiprintf_r+0x208>
 8009112:	bf00      	nop
 8009114:	080098fc 	.word	0x080098fc
 8009118:	0800991c 	.word	0x0800991c
 800911c:	080098dc 	.word	0x080098dc
 8009120:	0800993c 	.word	0x0800993c
 8009124:	08009946 	.word	0x08009946
 8009128:	00000000 	.word	0x00000000
 800912c:	08008eaf 	.word	0x08008eaf
 8009130:	08009942 	.word	0x08009942

08009134 <_printf_common>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	4616      	mov	r6, r2
 800913a:	4699      	mov	r9, r3
 800913c:	688a      	ldr	r2, [r1, #8]
 800913e:	690b      	ldr	r3, [r1, #16]
 8009140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009144:	4293      	cmp	r3, r2
 8009146:	bfb8      	it	lt
 8009148:	4613      	movlt	r3, r2
 800914a:	6033      	str	r3, [r6, #0]
 800914c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009150:	4607      	mov	r7, r0
 8009152:	460c      	mov	r4, r1
 8009154:	b10a      	cbz	r2, 800915a <_printf_common+0x26>
 8009156:	3301      	adds	r3, #1
 8009158:	6033      	str	r3, [r6, #0]
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	0699      	lsls	r1, r3, #26
 800915e:	bf42      	ittt	mi
 8009160:	6833      	ldrmi	r3, [r6, #0]
 8009162:	3302      	addmi	r3, #2
 8009164:	6033      	strmi	r3, [r6, #0]
 8009166:	6825      	ldr	r5, [r4, #0]
 8009168:	f015 0506 	ands.w	r5, r5, #6
 800916c:	d106      	bne.n	800917c <_printf_common+0x48>
 800916e:	f104 0a19 	add.w	sl, r4, #25
 8009172:	68e3      	ldr	r3, [r4, #12]
 8009174:	6832      	ldr	r2, [r6, #0]
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	42ab      	cmp	r3, r5
 800917a:	dc26      	bgt.n	80091ca <_printf_common+0x96>
 800917c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009180:	1e13      	subs	r3, r2, #0
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	bf18      	it	ne
 8009186:	2301      	movne	r3, #1
 8009188:	0692      	lsls	r2, r2, #26
 800918a:	d42b      	bmi.n	80091e4 <_printf_common+0xb0>
 800918c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009190:	4649      	mov	r1, r9
 8009192:	4638      	mov	r0, r7
 8009194:	47c0      	blx	r8
 8009196:	3001      	adds	r0, #1
 8009198:	d01e      	beq.n	80091d8 <_printf_common+0xa4>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	68e5      	ldr	r5, [r4, #12]
 800919e:	6832      	ldr	r2, [r6, #0]
 80091a0:	f003 0306 	and.w	r3, r3, #6
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	bf08      	it	eq
 80091a8:	1aad      	subeq	r5, r5, r2
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	6922      	ldr	r2, [r4, #16]
 80091ae:	bf0c      	ite	eq
 80091b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091b4:	2500      	movne	r5, #0
 80091b6:	4293      	cmp	r3, r2
 80091b8:	bfc4      	itt	gt
 80091ba:	1a9b      	subgt	r3, r3, r2
 80091bc:	18ed      	addgt	r5, r5, r3
 80091be:	2600      	movs	r6, #0
 80091c0:	341a      	adds	r4, #26
 80091c2:	42b5      	cmp	r5, r6
 80091c4:	d11a      	bne.n	80091fc <_printf_common+0xc8>
 80091c6:	2000      	movs	r0, #0
 80091c8:	e008      	b.n	80091dc <_printf_common+0xa8>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4652      	mov	r2, sl
 80091ce:	4649      	mov	r1, r9
 80091d0:	4638      	mov	r0, r7
 80091d2:	47c0      	blx	r8
 80091d4:	3001      	adds	r0, #1
 80091d6:	d103      	bne.n	80091e0 <_printf_common+0xac>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e0:	3501      	adds	r5, #1
 80091e2:	e7c6      	b.n	8009172 <_printf_common+0x3e>
 80091e4:	18e1      	adds	r1, r4, r3
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	2030      	movs	r0, #48	; 0x30
 80091ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ee:	4422      	add	r2, r4
 80091f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f8:	3302      	adds	r3, #2
 80091fa:	e7c7      	b.n	800918c <_printf_common+0x58>
 80091fc:	2301      	movs	r3, #1
 80091fe:	4622      	mov	r2, r4
 8009200:	4649      	mov	r1, r9
 8009202:	4638      	mov	r0, r7
 8009204:	47c0      	blx	r8
 8009206:	3001      	adds	r0, #1
 8009208:	d0e6      	beq.n	80091d8 <_printf_common+0xa4>
 800920a:	3601      	adds	r6, #1
 800920c:	e7d9      	b.n	80091c2 <_printf_common+0x8e>
	...

08009210 <_printf_i>:
 8009210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009214:	7e0f      	ldrb	r7, [r1, #24]
 8009216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009218:	2f78      	cmp	r7, #120	; 0x78
 800921a:	4691      	mov	r9, r2
 800921c:	4680      	mov	r8, r0
 800921e:	460c      	mov	r4, r1
 8009220:	469a      	mov	sl, r3
 8009222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009226:	d807      	bhi.n	8009238 <_printf_i+0x28>
 8009228:	2f62      	cmp	r7, #98	; 0x62
 800922a:	d80a      	bhi.n	8009242 <_printf_i+0x32>
 800922c:	2f00      	cmp	r7, #0
 800922e:	f000 80d8 	beq.w	80093e2 <_printf_i+0x1d2>
 8009232:	2f58      	cmp	r7, #88	; 0x58
 8009234:	f000 80a3 	beq.w	800937e <_printf_i+0x16e>
 8009238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800923c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009240:	e03a      	b.n	80092b8 <_printf_i+0xa8>
 8009242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009246:	2b15      	cmp	r3, #21
 8009248:	d8f6      	bhi.n	8009238 <_printf_i+0x28>
 800924a:	a101      	add	r1, pc, #4	; (adr r1, 8009250 <_printf_i+0x40>)
 800924c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009250:	080092a9 	.word	0x080092a9
 8009254:	080092bd 	.word	0x080092bd
 8009258:	08009239 	.word	0x08009239
 800925c:	08009239 	.word	0x08009239
 8009260:	08009239 	.word	0x08009239
 8009264:	08009239 	.word	0x08009239
 8009268:	080092bd 	.word	0x080092bd
 800926c:	08009239 	.word	0x08009239
 8009270:	08009239 	.word	0x08009239
 8009274:	08009239 	.word	0x08009239
 8009278:	08009239 	.word	0x08009239
 800927c:	080093c9 	.word	0x080093c9
 8009280:	080092ed 	.word	0x080092ed
 8009284:	080093ab 	.word	0x080093ab
 8009288:	08009239 	.word	0x08009239
 800928c:	08009239 	.word	0x08009239
 8009290:	080093eb 	.word	0x080093eb
 8009294:	08009239 	.word	0x08009239
 8009298:	080092ed 	.word	0x080092ed
 800929c:	08009239 	.word	0x08009239
 80092a0:	08009239 	.word	0x08009239
 80092a4:	080093b3 	.word	0x080093b3
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	1d1a      	adds	r2, r3, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	602a      	str	r2, [r5, #0]
 80092b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b8:	2301      	movs	r3, #1
 80092ba:	e0a3      	b.n	8009404 <_printf_i+0x1f4>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	6829      	ldr	r1, [r5, #0]
 80092c0:	0606      	lsls	r6, r0, #24
 80092c2:	f101 0304 	add.w	r3, r1, #4
 80092c6:	d50a      	bpl.n	80092de <_printf_i+0xce>
 80092c8:	680e      	ldr	r6, [r1, #0]
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	da03      	bge.n	80092d8 <_printf_i+0xc8>
 80092d0:	232d      	movs	r3, #45	; 0x2d
 80092d2:	4276      	negs	r6, r6
 80092d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d8:	485e      	ldr	r0, [pc, #376]	; (8009454 <_printf_i+0x244>)
 80092da:	230a      	movs	r3, #10
 80092dc:	e019      	b.n	8009312 <_printf_i+0x102>
 80092de:	680e      	ldr	r6, [r1, #0]
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092e6:	bf18      	it	ne
 80092e8:	b236      	sxthne	r6, r6
 80092ea:	e7ef      	b.n	80092cc <_printf_i+0xbc>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	6820      	ldr	r0, [r4, #0]
 80092f0:	1d19      	adds	r1, r3, #4
 80092f2:	6029      	str	r1, [r5, #0]
 80092f4:	0601      	lsls	r1, r0, #24
 80092f6:	d501      	bpl.n	80092fc <_printf_i+0xec>
 80092f8:	681e      	ldr	r6, [r3, #0]
 80092fa:	e002      	b.n	8009302 <_printf_i+0xf2>
 80092fc:	0646      	lsls	r6, r0, #25
 80092fe:	d5fb      	bpl.n	80092f8 <_printf_i+0xe8>
 8009300:	881e      	ldrh	r6, [r3, #0]
 8009302:	4854      	ldr	r0, [pc, #336]	; (8009454 <_printf_i+0x244>)
 8009304:	2f6f      	cmp	r7, #111	; 0x6f
 8009306:	bf0c      	ite	eq
 8009308:	2308      	moveq	r3, #8
 800930a:	230a      	movne	r3, #10
 800930c:	2100      	movs	r1, #0
 800930e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009312:	6865      	ldr	r5, [r4, #4]
 8009314:	60a5      	str	r5, [r4, #8]
 8009316:	2d00      	cmp	r5, #0
 8009318:	bfa2      	ittt	ge
 800931a:	6821      	ldrge	r1, [r4, #0]
 800931c:	f021 0104 	bicge.w	r1, r1, #4
 8009320:	6021      	strge	r1, [r4, #0]
 8009322:	b90e      	cbnz	r6, 8009328 <_printf_i+0x118>
 8009324:	2d00      	cmp	r5, #0
 8009326:	d04d      	beq.n	80093c4 <_printf_i+0x1b4>
 8009328:	4615      	mov	r5, r2
 800932a:	fbb6 f1f3 	udiv	r1, r6, r3
 800932e:	fb03 6711 	mls	r7, r3, r1, r6
 8009332:	5dc7      	ldrb	r7, [r0, r7]
 8009334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009338:	4637      	mov	r7, r6
 800933a:	42bb      	cmp	r3, r7
 800933c:	460e      	mov	r6, r1
 800933e:	d9f4      	bls.n	800932a <_printf_i+0x11a>
 8009340:	2b08      	cmp	r3, #8
 8009342:	d10b      	bne.n	800935c <_printf_i+0x14c>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	07de      	lsls	r6, r3, #31
 8009348:	d508      	bpl.n	800935c <_printf_i+0x14c>
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	6861      	ldr	r1, [r4, #4]
 800934e:	4299      	cmp	r1, r3
 8009350:	bfde      	ittt	le
 8009352:	2330      	movle	r3, #48	; 0x30
 8009354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800935c:	1b52      	subs	r2, r2, r5
 800935e:	6122      	str	r2, [r4, #16]
 8009360:	f8cd a000 	str.w	sl, [sp]
 8009364:	464b      	mov	r3, r9
 8009366:	aa03      	add	r2, sp, #12
 8009368:	4621      	mov	r1, r4
 800936a:	4640      	mov	r0, r8
 800936c:	f7ff fee2 	bl	8009134 <_printf_common>
 8009370:	3001      	adds	r0, #1
 8009372:	d14c      	bne.n	800940e <_printf_i+0x1fe>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	b004      	add	sp, #16
 800937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937e:	4835      	ldr	r0, [pc, #212]	; (8009454 <_printf_i+0x244>)
 8009380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009384:	6829      	ldr	r1, [r5, #0]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f851 6b04 	ldr.w	r6, [r1], #4
 800938c:	6029      	str	r1, [r5, #0]
 800938e:	061d      	lsls	r5, r3, #24
 8009390:	d514      	bpl.n	80093bc <_printf_i+0x1ac>
 8009392:	07df      	lsls	r7, r3, #31
 8009394:	bf44      	itt	mi
 8009396:	f043 0320 	orrmi.w	r3, r3, #32
 800939a:	6023      	strmi	r3, [r4, #0]
 800939c:	b91e      	cbnz	r6, 80093a6 <_printf_i+0x196>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f023 0320 	bic.w	r3, r3, #32
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	2310      	movs	r3, #16
 80093a8:	e7b0      	b.n	800930c <_printf_i+0xfc>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	f043 0320 	orr.w	r3, r3, #32
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	2378      	movs	r3, #120	; 0x78
 80093b4:	4828      	ldr	r0, [pc, #160]	; (8009458 <_printf_i+0x248>)
 80093b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ba:	e7e3      	b.n	8009384 <_printf_i+0x174>
 80093bc:	0659      	lsls	r1, r3, #25
 80093be:	bf48      	it	mi
 80093c0:	b2b6      	uxthmi	r6, r6
 80093c2:	e7e6      	b.n	8009392 <_printf_i+0x182>
 80093c4:	4615      	mov	r5, r2
 80093c6:	e7bb      	b.n	8009340 <_printf_i+0x130>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	6826      	ldr	r6, [r4, #0]
 80093cc:	6961      	ldr	r1, [r4, #20]
 80093ce:	1d18      	adds	r0, r3, #4
 80093d0:	6028      	str	r0, [r5, #0]
 80093d2:	0635      	lsls	r5, r6, #24
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0x1cc>
 80093d8:	6019      	str	r1, [r3, #0]
 80093da:	e002      	b.n	80093e2 <_printf_i+0x1d2>
 80093dc:	0670      	lsls	r0, r6, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0x1c8>
 80093e0:	8019      	strh	r1, [r3, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	6123      	str	r3, [r4, #16]
 80093e6:	4615      	mov	r5, r2
 80093e8:	e7ba      	b.n	8009360 <_printf_i+0x150>
 80093ea:	682b      	ldr	r3, [r5, #0]
 80093ec:	1d1a      	adds	r2, r3, #4
 80093ee:	602a      	str	r2, [r5, #0]
 80093f0:	681d      	ldr	r5, [r3, #0]
 80093f2:	6862      	ldr	r2, [r4, #4]
 80093f4:	2100      	movs	r1, #0
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7f6 ff12 	bl	8000220 <memchr>
 80093fc:	b108      	cbz	r0, 8009402 <_printf_i+0x1f2>
 80093fe:	1b40      	subs	r0, r0, r5
 8009400:	6060      	str	r0, [r4, #4]
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	6123      	str	r3, [r4, #16]
 8009406:	2300      	movs	r3, #0
 8009408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800940c:	e7a8      	b.n	8009360 <_printf_i+0x150>
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	462a      	mov	r2, r5
 8009412:	4649      	mov	r1, r9
 8009414:	4640      	mov	r0, r8
 8009416:	47d0      	blx	sl
 8009418:	3001      	adds	r0, #1
 800941a:	d0ab      	beq.n	8009374 <_printf_i+0x164>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	079b      	lsls	r3, r3, #30
 8009420:	d413      	bmi.n	800944a <_printf_i+0x23a>
 8009422:	68e0      	ldr	r0, [r4, #12]
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	4298      	cmp	r0, r3
 8009428:	bfb8      	it	lt
 800942a:	4618      	movlt	r0, r3
 800942c:	e7a4      	b.n	8009378 <_printf_i+0x168>
 800942e:	2301      	movs	r3, #1
 8009430:	4632      	mov	r2, r6
 8009432:	4649      	mov	r1, r9
 8009434:	4640      	mov	r0, r8
 8009436:	47d0      	blx	sl
 8009438:	3001      	adds	r0, #1
 800943a:	d09b      	beq.n	8009374 <_printf_i+0x164>
 800943c:	3501      	adds	r5, #1
 800943e:	68e3      	ldr	r3, [r4, #12]
 8009440:	9903      	ldr	r1, [sp, #12]
 8009442:	1a5b      	subs	r3, r3, r1
 8009444:	42ab      	cmp	r3, r5
 8009446:	dcf2      	bgt.n	800942e <_printf_i+0x21e>
 8009448:	e7eb      	b.n	8009422 <_printf_i+0x212>
 800944a:	2500      	movs	r5, #0
 800944c:	f104 0619 	add.w	r6, r4, #25
 8009450:	e7f5      	b.n	800943e <_printf_i+0x22e>
 8009452:	bf00      	nop
 8009454:	0800994d 	.word	0x0800994d
 8009458:	0800995e 	.word	0x0800995e

0800945c <_sbrk_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d06      	ldr	r5, [pc, #24]	; (8009478 <_sbrk_r+0x1c>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f7f9 f916 	bl	8002698 <_sbrk>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_sbrk_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_sbrk_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20000b40 	.word	0x20000b40

0800947c <__sread>:
 800947c:	b510      	push	{r4, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	f000 f8f8 	bl	8009678 <_read_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	bfab      	itete	ge
 800948c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800948e:	89a3      	ldrhlt	r3, [r4, #12]
 8009490:	181b      	addge	r3, r3, r0
 8009492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009496:	bfac      	ite	ge
 8009498:	6563      	strge	r3, [r4, #84]	; 0x54
 800949a:	81a3      	strhlt	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}

0800949e <__swrite>:
 800949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	461f      	mov	r7, r3
 80094a4:	898b      	ldrh	r3, [r1, #12]
 80094a6:	05db      	lsls	r3, r3, #23
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	4616      	mov	r6, r2
 80094ae:	d505      	bpl.n	80094bc <__swrite+0x1e>
 80094b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2200      	movs	r2, #0
 80094b8:	f000 f868 	bl	800958c <_lseek_r>
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	4632      	mov	r2, r6
 80094ca:	463b      	mov	r3, r7
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	f000 b817 	b.w	8009504 <_write_r>

080094d6 <__sseek>:
 80094d6:	b510      	push	{r4, lr}
 80094d8:	460c      	mov	r4, r1
 80094da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094de:	f000 f855 	bl	800958c <_lseek_r>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	bf15      	itete	ne
 80094e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094f2:	81a3      	strheq	r3, [r4, #12]
 80094f4:	bf18      	it	ne
 80094f6:	81a3      	strhne	r3, [r4, #12]
 80094f8:	bd10      	pop	{r4, pc}

080094fa <__sclose>:
 80094fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fe:	f000 b813 	b.w	8009528 <_close_r>
	...

08009504 <_write_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_write_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f9 f86f 	bl	80025f6 <_write>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_write_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_write_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20000b40 	.word	0x20000b40

08009528 <_close_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d06      	ldr	r5, [pc, #24]	; (8009544 <_close_r+0x1c>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	602b      	str	r3, [r5, #0]
 8009534:	f7f9 f87b 	bl	800262e <_close>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_close_r+0x1a>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_close_r+0x1a>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20000b40 	.word	0x20000b40

08009548 <_fstat_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	; (8009568 <_fstat_r+0x20>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	4611      	mov	r1, r2
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	f7f9 f876 	bl	8002646 <_fstat>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d102      	bne.n	8009564 <_fstat_r+0x1c>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	b103      	cbz	r3, 8009564 <_fstat_r+0x1c>
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	bd38      	pop	{r3, r4, r5, pc}
 8009566:	bf00      	nop
 8009568:	20000b40 	.word	0x20000b40

0800956c <_isatty_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d06      	ldr	r5, [pc, #24]	; (8009588 <_isatty_r+0x1c>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	f7f9 f875 	bl	8002666 <_isatty>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_isatty_r+0x1a>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_isatty_r+0x1a>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	20000b40 	.word	0x20000b40

0800958c <_lseek_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	; (80095ac <_lseek_r+0x20>)
 8009590:	4604      	mov	r4, r0
 8009592:	4608      	mov	r0, r1
 8009594:	4611      	mov	r1, r2
 8009596:	2200      	movs	r2, #0
 8009598:	602a      	str	r2, [r5, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	f7f9 f86e 	bl	800267c <_lseek>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_lseek_r+0x1e>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_lseek_r+0x1e>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20000b40 	.word	0x20000b40

080095b0 <memcpy>:
 80095b0:	440a      	add	r2, r1
 80095b2:	4291      	cmp	r1, r2
 80095b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b8:	d100      	bne.n	80095bc <memcpy+0xc>
 80095ba:	4770      	bx	lr
 80095bc:	b510      	push	{r4, lr}
 80095be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c6:	4291      	cmp	r1, r2
 80095c8:	d1f9      	bne.n	80095be <memcpy+0xe>
 80095ca:	bd10      	pop	{r4, pc}

080095cc <memmove>:
 80095cc:	4288      	cmp	r0, r1
 80095ce:	b510      	push	{r4, lr}
 80095d0:	eb01 0402 	add.w	r4, r1, r2
 80095d4:	d902      	bls.n	80095dc <memmove+0x10>
 80095d6:	4284      	cmp	r4, r0
 80095d8:	4623      	mov	r3, r4
 80095da:	d807      	bhi.n	80095ec <memmove+0x20>
 80095dc:	1e43      	subs	r3, r0, #1
 80095de:	42a1      	cmp	r1, r4
 80095e0:	d008      	beq.n	80095f4 <memmove+0x28>
 80095e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ea:	e7f8      	b.n	80095de <memmove+0x12>
 80095ec:	4402      	add	r2, r0
 80095ee:	4601      	mov	r1, r0
 80095f0:	428a      	cmp	r2, r1
 80095f2:	d100      	bne.n	80095f6 <memmove+0x2a>
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095fe:	e7f7      	b.n	80095f0 <memmove+0x24>

08009600 <__malloc_lock>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__malloc_lock+0x8>)
 8009602:	f7ff b999 	b.w	8008938 <__retarget_lock_acquire_recursive>
 8009606:	bf00      	nop
 8009608:	20000b34 	.word	0x20000b34

0800960c <__malloc_unlock>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__malloc_unlock+0x8>)
 800960e:	f7ff b994 	b.w	800893a <__retarget_lock_release_recursive>
 8009612:	bf00      	nop
 8009614:	20000b34 	.word	0x20000b34

08009618 <_realloc_r>:
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	4680      	mov	r8, r0
 800961e:	4614      	mov	r4, r2
 8009620:	460e      	mov	r6, r1
 8009622:	b921      	cbnz	r1, 800962e <_realloc_r+0x16>
 8009624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009628:	4611      	mov	r1, r2
 800962a:	f7ff ba59 	b.w	8008ae0 <_malloc_r>
 800962e:	b92a      	cbnz	r2, 800963c <_realloc_r+0x24>
 8009630:	f7ff f9ea 	bl	8008a08 <_free_r>
 8009634:	4625      	mov	r5, r4
 8009636:	4628      	mov	r0, r5
 8009638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800963c:	f000 f82e 	bl	800969c <_malloc_usable_size_r>
 8009640:	4284      	cmp	r4, r0
 8009642:	4607      	mov	r7, r0
 8009644:	d802      	bhi.n	800964c <_realloc_r+0x34>
 8009646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800964a:	d812      	bhi.n	8009672 <_realloc_r+0x5a>
 800964c:	4621      	mov	r1, r4
 800964e:	4640      	mov	r0, r8
 8009650:	f7ff fa46 	bl	8008ae0 <_malloc_r>
 8009654:	4605      	mov	r5, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d0ed      	beq.n	8009636 <_realloc_r+0x1e>
 800965a:	42bc      	cmp	r4, r7
 800965c:	4622      	mov	r2, r4
 800965e:	4631      	mov	r1, r6
 8009660:	bf28      	it	cs
 8009662:	463a      	movcs	r2, r7
 8009664:	f7ff ffa4 	bl	80095b0 <memcpy>
 8009668:	4631      	mov	r1, r6
 800966a:	4640      	mov	r0, r8
 800966c:	f7ff f9cc 	bl	8008a08 <_free_r>
 8009670:	e7e1      	b.n	8009636 <_realloc_r+0x1e>
 8009672:	4635      	mov	r5, r6
 8009674:	e7df      	b.n	8009636 <_realloc_r+0x1e>
	...

08009678 <_read_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	; (8009698 <_read_r+0x20>)
 800967c:	4604      	mov	r4, r0
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	2200      	movs	r2, #0
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f8 ff98 	bl	80025bc <_read>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_read_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_read_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20000b40 	.word	0x20000b40

0800969c <_malloc_usable_size_r>:
 800969c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a0:	1f18      	subs	r0, r3, #4
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bfbc      	itt	lt
 80096a6:	580b      	ldrlt	r3, [r1, r0]
 80096a8:	18c0      	addlt	r0, r0, r3
 80096aa:	4770      	bx	lr

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
