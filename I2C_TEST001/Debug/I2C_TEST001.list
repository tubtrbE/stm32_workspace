
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000384  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001926c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c20  00000000  00000000  00039314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d8  00000000  00000000  0003e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287c7  00000000  00000000  0003f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf57  00000000  00000000  0006804f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1557  00000000  00000000  00084fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001764fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006264  00000000  00000000  00176550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009708 	.word	0x08009708

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08009708 	.word	0x08009708

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f002 fca7 	bl	8002f7c <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f002 f81e 	bl	8002674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f002 fded 	bl	8003228 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f002 f80e 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000094 	.word	0x20000094
 8000664:	40012000 	.word	0x40012000

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d127      	bne.n	80006da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0x84>)
 80006d6:	f003 fc7f 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <GetSector>:
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetSector(uint32_t Address)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a82      	ldr	r2, [pc, #520]	; (8000908 <GetSector+0x218>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d206      	bcs.n	8000712 <GetSector+0x22>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800070a:	d302      	bcc.n	8000712 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e0f3      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a7d      	ldr	r2, [pc, #500]	; (800090c <GetSector+0x21c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d206      	bcs.n	8000728 <GetSector+0x38>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a7a      	ldr	r2, [pc, #488]	; (8000908 <GetSector+0x218>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d302      	bcc.n	8000728 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e0e8      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a79      	ldr	r2, [pc, #484]	; (8000910 <GetSector+0x220>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d206      	bcs.n	800073e <GetSector+0x4e>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a76      	ldr	r2, [pc, #472]	; (800090c <GetSector+0x21c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d302      	bcc.n	800073e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e0dd      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a74      	ldr	r2, [pc, #464]	; (8000914 <GetSector+0x224>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d806      	bhi.n	8000754 <GetSector+0x64>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a71      	ldr	r2, [pc, #452]	; (8000910 <GetSector+0x220>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d302      	bcc.n	8000754 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800074e:	2303      	movs	r3, #3
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e0d2      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a70      	ldr	r2, [pc, #448]	; (8000918 <GetSector+0x228>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d806      	bhi.n	800076a <GetSector+0x7a>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <GetSector+0x224>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000764:	2304      	movs	r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e0c7      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a6b      	ldr	r2, [pc, #428]	; (800091c <GetSector+0x22c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d806      	bhi.n	8000780 <GetSector+0x90>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a68      	ldr	r2, [pc, #416]	; (8000918 <GetSector+0x228>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d902      	bls.n	8000780 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800077a:	2305      	movs	r3, #5
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e0bc      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a67      	ldr	r2, [pc, #412]	; (8000920 <GetSector+0x230>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d806      	bhi.n	8000796 <GetSector+0xa6>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a64      	ldr	r2, [pc, #400]	; (800091c <GetSector+0x22c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d902      	bls.n	8000796 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000790:	2306      	movs	r3, #6
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e0b1      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a62      	ldr	r2, [pc, #392]	; (8000924 <GetSector+0x234>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d806      	bhi.n	80007ac <GetSector+0xbc>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a5f      	ldr	r2, [pc, #380]	; (8000920 <GetSector+0x230>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d902      	bls.n	80007ac <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e0a6      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <GetSector+0x238>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d806      	bhi.n	80007c2 <GetSector+0xd2>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a5b      	ldr	r2, [pc, #364]	; (8000924 <GetSector+0x234>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80007bc:	2308      	movs	r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e09b      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a59      	ldr	r2, [pc, #356]	; (800092c <GetSector+0x23c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d806      	bhi.n	80007d8 <GetSector+0xe8>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <GetSector+0x238>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d902      	bls.n	80007d8 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80007d2:	2309      	movs	r3, #9
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e090      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <GetSector+0x240>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d806      	bhi.n	80007ee <GetSector+0xfe>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a52      	ldr	r2, [pc, #328]	; (800092c <GetSector+0x23c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d902      	bls.n	80007ee <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80007e8:	230a      	movs	r3, #10
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e085      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80007f4:	d206      	bcs.n	8000804 <GetSector+0x114>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a4d      	ldr	r2, [pc, #308]	; (8000930 <GetSector+0x240>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d902      	bls.n	8000804 <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;
 80007fe:	230b      	movs	r3, #11
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e07a      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a4b      	ldr	r2, [pc, #300]	; (8000934 <GetSector+0x244>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d206      	bcs.n	800081a <GetSector+0x12a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000812:	d302      	bcc.n	800081a <GetSector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000814:	230c      	movs	r3, #12
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e06f      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a46      	ldr	r2, [pc, #280]	; (8000938 <GetSector+0x248>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d206      	bcs.n	8000830 <GetSector+0x140>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a43      	ldr	r2, [pc, #268]	; (8000934 <GetSector+0x244>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d302      	bcc.n	8000830 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_13;
 800082a:	230d      	movs	r3, #13
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e064      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a42      	ldr	r2, [pc, #264]	; (800093c <GetSector+0x24c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d206      	bcs.n	8000846 <GetSector+0x156>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <GetSector+0x248>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d302      	bcc.n	8000846 <GetSector+0x156>
  {
    sector = FLASH_SECTOR_14;
 8000840:	230e      	movs	r3, #14
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e059      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <GetSector+0x250>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d806      	bhi.n	800085c <GetSector+0x16c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a3a      	ldr	r2, [pc, #232]	; (800093c <GetSector+0x24c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d302      	bcc.n	800085c <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000856:	230f      	movs	r3, #15
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e04e      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a39      	ldr	r2, [pc, #228]	; (8000944 <GetSector+0x254>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d806      	bhi.n	8000872 <GetSector+0x182>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <GetSector+0x250>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d902      	bls.n	8000872 <GetSector+0x182>
  {
    sector = FLASH_SECTOR_16;
 800086c:	2310      	movs	r3, #16
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e043      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a34      	ldr	r2, [pc, #208]	; (8000948 <GetSector+0x258>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d806      	bhi.n	8000888 <GetSector+0x198>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a31      	ldr	r2, [pc, #196]	; (8000944 <GetSector+0x254>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d902      	bls.n	8000888 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_17;
 8000882:	2311      	movs	r3, #17
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e038      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <GetSector+0x25c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d806      	bhi.n	800089e <GetSector+0x1ae>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <GetSector+0x258>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d902      	bls.n	800089e <GetSector+0x1ae>
  {
    sector = FLASH_SECTOR_18;
 8000898:	2312      	movs	r3, #18
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e02d      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <GetSector+0x260>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d806      	bhi.n	80008b4 <GetSector+0x1c4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <GetSector+0x25c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d902      	bls.n	80008b4 <GetSector+0x1c4>
  {
    sector = FLASH_SECTOR_19;
 80008ae:	2313      	movs	r3, #19
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e022      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <GetSector+0x264>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d806      	bhi.n	80008ca <GetSector+0x1da>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <GetSector+0x260>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d902      	bls.n	80008ca <GetSector+0x1da>
  {
    sector = FLASH_SECTOR_20;
 80008c4:	2314      	movs	r3, #20
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e017      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <GetSector+0x268>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d806      	bhi.n	80008e0 <GetSector+0x1f0>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <GetSector+0x264>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d902      	bls.n	80008e0 <GetSector+0x1f0>
  {
    sector = FLASH_SECTOR_21;
 80008da:	2315      	movs	r3, #21
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00c      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <GetSector+0x26c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d806      	bhi.n	80008f6 <GetSector+0x206>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <GetSector+0x268>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <GetSector+0x206>
  {
    sector = FLASH_SECTOR_22;
 80008f0:	2316      	movs	r3, #22
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e001      	b.n	80008fa <GetSector+0x20a>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
  {
    sector = FLASH_SECTOR_23;
 80008f6:	2317      	movs	r3, #23
 80008f8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	08004000 	.word	0x08004000
 800090c:	08008000 	.word	0x08008000
 8000910:	0800c000 	.word	0x0800c000
 8000914:	0800ffff 	.word	0x0800ffff
 8000918:	0801ffff 	.word	0x0801ffff
 800091c:	0803ffff 	.word	0x0803ffff
 8000920:	0805ffff 	.word	0x0805ffff
 8000924:	0807ffff 	.word	0x0807ffff
 8000928:	0809ffff 	.word	0x0809ffff
 800092c:	080bffff 	.word	0x080bffff
 8000930:	080dffff 	.word	0x080dffff
 8000934:	08104000 	.word	0x08104000
 8000938:	08108000 	.word	0x08108000
 800093c:	0810c000 	.word	0x0810c000
 8000940:	0810ffff 	.word	0x0810ffff
 8000944:	0811ffff 	.word	0x0811ffff
 8000948:	0813ffff 	.word	0x0813ffff
 800094c:	0815ffff 	.word	0x0815ffff
 8000950:	0817ffff 	.word	0x0817ffff
 8000954:	0819ffff 	.word	0x0819ffff
 8000958:	081bffff 	.word	0x081bffff
 800095c:	081dffff 	.word	0x081dffff

08000960 <FlashWritingOne>:
    sectorsize = 128 * 1024;
  }
  return sectorsize;
}

void FlashWritingOne (uint32_t FLASH_USER_ADDR, uint32_t DATA_32)  {
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]

	  HAL_FLASH_Unlock();
 800096a:	f003 f883 	bl	8003a74 <HAL_FLASH_Unlock>

	  NbOfSectors = 1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <FlashWritingOne+0x6c>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
	  FirstSector = GetSector(FLASH_USER_ADDR);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff febb 	bl	80006f0 <GetSector>
 800097a:	4603      	mov	r3, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <FlashWritingOne+0x70>)
 800097e:	6013      	str	r3, [r2, #0]
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <FlashWritingOne+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <FlashWritingOne+0x74>)
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = FirstSector;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <FlashWritingOne+0x70>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <FlashWritingOne+0x74>)
 8000992:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = NbOfSectors;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <FlashWritingOne+0x6c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <FlashWritingOne+0x74>)
 800099a:	60d3      	str	r3, [r2, #12]

	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800099c:	490e      	ldr	r1, [pc, #56]	; (80009d8 <FlashWritingOne+0x78>)
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <FlashWritingOne+0x74>)
 80009a0:	f003 f9da 	bl	8003d58 <HAL_FLASHEx_Erase>
	  {
	  }

	  Address = FLASH_USER_ADDR;
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <FlashWritingOne+0x7c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <FlashWritingOne+0x7c>)
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	461c      	mov	r4, r3
 80009b4:	4615      	mov	r5, r2
 80009b6:	4622      	mov	r2, r4
 80009b8:	462b      	mov	r3, r5
 80009ba:	2002      	movs	r0, #2
 80009bc:	f003 f806 	bl	80039cc <HAL_FLASH_Program>

	  HAL_FLASH_Lock();
 80009c0:	f003 f87a 	bl	8003ab8 <HAL_FLASH_Lock>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	200000e0 	.word	0x200000e0
 80009d0:	200000dc 	.word	0x200000dc
 80009d4:	200000ec 	.word	0x200000ec
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	200000e4 	.word	0x200000e4

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xac>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a6c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0xb0>)
 8000a7e:	f003 faab 	bl	8003fd8 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad2:	f003 fc5d 	bl	8004390 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f001 fdca 	bl	8002674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae4:	f004 f9cd 	bl	8004e82 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f001 fdc1 	bl	8002674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af6:	f004 fa00 	bl	8004efa <HAL_I2CEx_ConfigDigitalFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f001 fdb8 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000100 	.word	0x20000100
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_I2C_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12c      	bne.n	8000b90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <HAL_I2C_MspInit+0x8c>)
 8000b70:	f003 fa32 	bl	8003fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <I2C_Scan>:
#include "lcd.h"

HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <I2C_Scan+0xc0>)
 8000bac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	6020      	str	r0, [r4, #0]
 8000bbc:	3404      	adds	r4, #4
 8000bbe:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb1d 	bl	8000204 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <I2C_Scan+0xc4>)
 8000bd8:	f006 fbbd 	bl	8007356 <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000be2:	e030      	b.n	8000c46 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b299      	uxth	r1, r3
 8000bec:	230a      	movs	r3, #10
 8000bee:	2201      	movs	r2, #1
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <I2C_Scan+0xc8>)
 8000bf2:	f003 fe0f 	bl	8004814 <HAL_I2C_IsDeviceReady>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <I2C_Scan+0xcc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <I2C_Scan+0xcc>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d113      	bne.n	8000c2e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8000c06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <I2C_Scan+0xd0>)
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	f007 fc36 	bl	8008480 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000c14:	463b      	mov	r3, r7
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff faf4 	bl	8000204 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4639      	mov	r1, r7
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <I2C_Scan+0xc4>)
 8000c28:	f006 fb95 	bl	8007356 <HAL_UART_Transmit>
 8000c2c:	e006      	b.n	8000c3c <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2201      	movs	r2, #1
 8000c34:	4910      	ldr	r1, [pc, #64]	; (8000c78 <I2C_Scan+0xd4>)
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <I2C_Scan+0xc4>)
 8000c38:	f006 fb8d 	bl	8007356 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000c46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4c:	d9ca      	bls.n	8000be4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	2202      	movs	r2, #2
 8000c54:	4909      	ldr	r1, [pc, #36]	; (8000c7c <I2C_Scan+0xd8>)
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <I2C_Scan+0xc4>)
 8000c58:	f006 fb7d 	bl	8007356 <HAL_UART_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3758      	adds	r7, #88	; 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	08009730 	.word	0x08009730
 8000c68:	20000384 	.word	0x20000384
 8000c6c:	20000100 	.word	0x20000100
 8000c70:	20000154 	.word	0x20000154
 8000c74:	08009720 	.word	0x08009720
 8000c78:	08009728 	.word	0x08009728
 8000c7c:	0800972c 	.word	0x0800972c

08000c80 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000c9e:	f003 fdb9 	bl	8004814 <HAL_I2C_IsDeviceReady>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000cac:	e7f1      	b.n	8000c92 <LCD_SendInternal+0x12>
			break;
 8000cae:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f043 030c 	orr.w	r3, r3, #12
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000cce:	7bba      	ldrb	r2, [r7, #14]
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000cde:	7b7a      	ldrb	r2, [r7, #13]
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 030c 	orr.w	r3, r3, #12
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 0208 	add.w	r2, r7, #8
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000d10:	f003 fc82 	bl	8004618 <HAL_I2C_Master_Transmit>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000d18:	2005      	movs	r0, #5
 8000d1a:	f002 f90b 	bl	8002f34 <HAL_Delay>
	return res;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000100 	.word	0x20000100

08000d2c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000d3c:	79b9      	ldrb	r1, [r7, #6]
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff9c 	bl	8000c80 <LCD_SendInternal>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000d60:	79b9      	ldrb	r1, [r7, #6]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff8a 	bl	8000c80 <LCD_SendInternal>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2130      	movs	r1, #48	; 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffd2 	bl	8000d2c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffcd 	bl	8000d2c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	210c      	movs	r1, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffc8 	bl	8000d2c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc3 	bl	8000d2c <LCD_SendCommand>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	6039      	str	r1, [r7, #0]
 8000db8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000dba:	e009      	b.n	8000dd0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffc3 	bl	8000d50 <LCD_SendData>
		str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f1      	bne.n	8000dbc <LCD_SendString+0xe>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <init>:

void init() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000de8:	f7ff fedc 	bl	8000ba4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000dec:	204e      	movs	r0, #78	; 0x4e
 8000dee:	f7ff ffc1 	bl	8000d74 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	204e      	movs	r0, #78	; 0x4e
 8000df6:	f7ff ff99 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000dfa:	4907      	ldr	r1, [pc, #28]	; (8000e18 <init+0x34>)
 8000dfc:	204e      	movs	r0, #78	; 0x4e
 8000dfe:	f7ff ffd6 	bl	8000dae <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000e02:	21c0      	movs	r1, #192	; 0xc0
 8000e04:	204e      	movs	r0, #78	; 0x4e
 8000e06:	f7ff ff91 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000e0a:	4904      	ldr	r1, [pc, #16]	; (8000e1c <init+0x38>)
 8000e0c:	204e      	movs	r0, #78	; 0x4e
 8000e0e:	f7ff ffce 	bl	8000dae <LCD_SendString>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08009748 	.word	0x08009748
 8000e1c:	08009758 	.word	0x08009758

08000e20 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000e28:	1d39      	adds	r1, r7, #4
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <__io_putchar+0x20>)
 8000e30:	f006 fa91 	bl	8007356 <HAL_UART_Transmit>
	return ch;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000384 	.word	0x20000384

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	f5ad 6dc0 	sub.w	sp, sp, #1536	; 0x600
 8000e4a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f002 f800 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f001 f906 	bl	8002060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f7ff fdc4 	bl	80009e0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e58:	f001 fc12 	bl	8002680 <MX_RTC_Init>
  MX_I2C1_Init();
 8000e5c:	f7ff fe1a 	bl	8000a94 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e60:	f001 ff5a 	bl	8002d18 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e64:	f7ff fbae 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e68:	f001 fe0c 	bl	8002a84 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e6c:	f001 fdbc 	bl	80029e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e70:	f001 fe7e 	bl	8002b70 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e74:	f001 f966 	bl	8002144 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e78:	48a5      	ldr	r0, [pc, #660]	; (8001110 <main+0x2cc>)
 8000e7a:	f005 fa33 	bl	80062e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e7e:	2108      	movs	r1, #8
 8000e80:	48a4      	ldr	r0, [pc, #656]	; (8001114 <main+0x2d0>)
 8000e82:	f005 faf9 	bl	8006478 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e86:	48a4      	ldr	r0, [pc, #656]	; (8001118 <main+0x2d4>)
 8000e88:	f005 fa2c 	bl	80062e4 <HAL_TIM_Base_Start_IT>

  // Song_Traffic_Light_Note
  char *verse1[] = {
 8000e8c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000e90:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8000e94:	4aa1      	ldr	r2, [pc, #644]	; (800111c <main+0x2d8>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	4611      	mov	r1, r2
 8000e9a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f007 fa4a 	bl	8008338 <memcpy>

			"0",
			};

	// Song_Traffic Light_time
	int verse1_time[] = {
 8000ea4:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000ea8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8000eac:	4a9c      	ldr	r2, [pc, #624]	; (8001120 <main+0x2dc>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f007 fa3e 	bl	8008338 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000ebc:	f7ff ff92 	bl	8000de4 <init>
	LCD_Init(LCD_ADDR);
 8000ec0:	204e      	movs	r0, #78	; 0x4e
 8000ec2:	f7ff ff57 	bl	8000d74 <LCD_Init>
	up = 0;
 8000ec6:	4b97      	ldr	r3, [pc, #604]	; (8001124 <main+0x2e0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000ecc:	4b96      	ldr	r3, [pc, #600]	; (8001128 <main+0x2e4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000ed2:	4b96      	ldr	r3, [pc, #600]	; (800112c <main+0x2e8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000ed8:	4b95      	ldr	r3, [pc, #596]	; (8001130 <main+0x2ec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	TIM3->CCR3 = 0;
 8000ede:	4b95      	ldr	r3, [pc, #596]	; (8001134 <main+0x2f0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000ee4:	4b94      	ldr	r3, [pc, #592]	; (8001138 <main+0x2f4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000eea:	4b93      	ldr	r3, [pc, #588]	; (8001138 <main+0x2f4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000ef0:	4b91      	ldr	r3, [pc, #580]	; (8001138 <main+0x2f4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000ef6:	4b90      	ldr	r3, [pc, #576]	; (8001138 <main+0x2f4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	70da      	strb	r2, [r3, #3]

		//Main loop
		while (mode == 0) {
 8000efc:	e218      	b.n	8001330 <main+0x4ec>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000efe:	2200      	movs	r2, #0
 8000f00:	498e      	ldr	r1, [pc, #568]	; (800113c <main+0x2f8>)
 8000f02:	488f      	ldr	r0, [pc, #572]	; (8001140 <main+0x2fc>)
 8000f04:	f004 ffb0 	bl	8005e68 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	498e      	ldr	r1, [pc, #568]	; (8001144 <main+0x300>)
 8000f0c:	488c      	ldr	r0, [pc, #560]	; (8001140 <main+0x2fc>)
 8000f0e:	f005 f88d 	bl	800602c <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000f12:	488d      	ldr	r0, [pc, #564]	; (8001148 <main+0x304>)
 8000f14:	f002 f876 	bl	8003004 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f18:	4b88      	ldr	r3, [pc, #544]	; (800113c <main+0x2f8>)
 8000f1a:	78db      	ldrb	r3, [r3, #3]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	4a89      	ldr	r2, [pc, #548]	; (800114c <main+0x308>)
 8000f26:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f28:	4b84      	ldr	r3, [pc, #528]	; (800113c <main+0x2f8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f2c:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f2e:	4b83      	ldr	r3, [pc, #524]	; (800113c <main+0x2f8>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f32:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f34:	4b81      	ldr	r3, [pc, #516]	; (800113c <main+0x2f8>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9100      	str	r1, [sp, #0]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4984      	ldr	r1, [pc, #528]	; (8001150 <main+0x30c>)
 8000f40:	4884      	ldr	r0, [pc, #528]	; (8001154 <main+0x310>)
 8000f42:	f007 fa9d 	bl	8008480 <siprintf>

			if (strcmp(lcdup, "Park Jung Hwan") != 0) {
 8000f46:	4984      	ldr	r1, [pc, #528]	; (8001158 <main+0x314>)
 8000f48:	4884      	ldr	r0, [pc, #528]	; (800115c <main+0x318>)
 8000f4a:	f7ff f951 	bl	80001f0 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d032      	beq.n	8000fba <main+0x176>
				LCD_Init(LCD_ADDR);
 8000f54:	204e      	movs	r0, #78	; 0x4e
 8000f56:	f7ff ff0d 	bl	8000d74 <LCD_Init>
				strcpy(lcdup, "Park Jung Hwan");
 8000f5a:	4a80      	ldr	r2, [pc, #512]	; (800115c <main+0x318>)
 8000f5c:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <main+0x314>)
 8000f5e:	4614      	mov	r4, r2
 8000f60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f62:	c407      	stmia	r4!, {r0, r1, r2}
 8000f64:	8023      	strh	r3, [r4, #0]
 8000f66:	3402      	adds	r4, #2
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	7023      	strb	r3, [r4, #0]
				// LCD up
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	204e      	movs	r0, #78	; 0x4e
 8000f70:	f7ff fedc 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, lcdup);
 8000f74:	4979      	ldr	r1, [pc, #484]	; (800115c <main+0x318>)
 8000f76:	204e      	movs	r0, #78	; 0x4e
 8000f78:	f7ff ff19 	bl	8000dae <LCD_SendString>

				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f7c:	4b6f      	ldr	r3, [pc, #444]	; (800113c <main+0x2f8>)
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	4a70      	ldr	r2, [pc, #448]	; (800114c <main+0x308>)
 8000f8a:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	; (800113c <main+0x2f8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f90:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f92:	4b6a      	ldr	r3, [pc, #424]	; (800113c <main+0x2f8>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f96:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f98:	4b68      	ldr	r3, [pc, #416]	; (800113c <main+0x2f8>)
 8000f9a:	789b      	ldrb	r3, [r3, #2]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	9100      	str	r1, [sp, #0]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	496b      	ldr	r1, [pc, #428]	; (8001150 <main+0x30c>)
 8000fa4:	486b      	ldr	r0, [pc, #428]	; (8001154 <main+0x310>)
 8000fa6:	f007 fa6b 	bl	8008480 <siprintf>

				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000faa:	21c0      	movs	r1, #192	; 0xc0
 8000fac:	204e      	movs	r0, #78	; 0x4e
 8000fae:	f7ff febd 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000fb2:	4968      	ldr	r1, [pc, #416]	; (8001154 <main+0x310>)
 8000fb4:	204e      	movs	r0, #78	; 0x4e
 8000fb6:	f7ff fefa 	bl	8000dae <LCD_SendString>
			}

			sTimestart = sTimecur;
 8000fba:	4b69      	ldr	r3, [pc, #420]	; (8001160 <main+0x31c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a69      	ldr	r2, [pc, #420]	; (8001164 <main+0x320>)
 8000fc0:	6013      	str	r3, [r2, #0]
			sTimecur = sTime.Seconds;
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	; (800113c <main+0x2f8>)
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b65      	ldr	r3, [pc, #404]	; (8001160 <main+0x31c>)
 8000fca:	601a      	str	r2, [r3, #0]

			if (sTimecur != sTimestart) {
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <main+0x31c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b64      	ldr	r3, [pc, #400]	; (8001164 <main+0x320>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d007      	beq.n	8000fe8 <main+0x1a4>
				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000fd8:	21c0      	movs	r1, #192	; 0xc0
 8000fda:	204e      	movs	r0, #78	; 0x4e
 8000fdc:	f7ff fea6 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000fe0:	495c      	ldr	r1, [pc, #368]	; (8001154 <main+0x310>)
 8000fe2:	204e      	movs	r0, #78	; 0x4e
 8000fe4:	f7ff fee3 	bl	8000dae <LCD_SendString>
			}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			if (strcmp(Time, Time_AL) == 0) {
 8000fe8:	495f      	ldr	r1, [pc, #380]	; (8001168 <main+0x324>)
 8000fea:	485a      	ldr	r0, [pc, #360]	; (8001154 <main+0x310>)
 8000fec:	f7ff f900 	bl	80001f0 <strcmp>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d104      	bne.n	8001000 <main+0x1bc>
				flag_alarm++;
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <main+0x328>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a5b      	ldr	r2, [pc, #364]	; (800116c <main+0x328>)
 8000ffe:	6013      	str	r3, [r2, #0]
			}
			if (flag_alarm > 0) {
 8001000:	4b5a      	ldr	r3, [pc, #360]	; (800116c <main+0x328>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 818e 	beq.w	8001326 <main+0x4e2>

				song_time_division = 2000/verse1_time[count_note];
 800100a:	4b59      	ldr	r3, [pc, #356]	; (8001170 <main+0x32c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8001012:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800101e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001022:	461a      	mov	r2, r3
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <main+0x330>)
 8001026:	601a      	str	r2, [r3, #0]

				if (strlen(verse1[count_note]) == 3 && song_time_division >= count_bit) {
 8001028:	4b51      	ldr	r3, [pc, #324]	; (8001170 <main+0x32c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8001030:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8e3 	bl	8000204 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	2b03      	cmp	r3, #3
 8001042:	d13d      	bne.n	80010c0 <main+0x27c>
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <main+0x330>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <main+0x334>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d337      	bcc.n	80010c0 <main+0x27c>

					int time = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
					char tempP = verse1[count_note][0];
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <main+0x32c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800105e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
					char tempO = verse1[count_note][1];
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <main+0x32c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8001074:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	f887 35ea 	strb.w	r3, [r7, #1514]	; 0x5ea
					char tempT = verse1[count_note][2];
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <main+0x32c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800108a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	f887 35e9 	strb.w	r3, [r7, #1513]	; 0x5e9
					note(tempP, tempO, tempT, 2000 / time, 2 + (count_bit));
 8001098:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800109c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80010a0:	fb92 f4f3 	sdiv	r4, r2, r3
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <main+0x334>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3302      	adds	r3, #2
 80010aa:	f897 25e9 	ldrb.w	r2, [r7, #1513]	; 0x5e9
 80010ae:	f897 15ea 	ldrb.w	r1, [r7, #1514]	; 0x5ea
 80010b2:	f897 05eb 	ldrb.w	r0, [r7, #1515]	; 0x5eb
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	4623      	mov	r3, r4
 80010ba:	f001 fa0d 	bl	80024d8 <note>
				if (strlen(verse1[count_note]) == 3 && song_time_division >= count_bit) {
 80010be:	e016      	b.n	80010ee <main+0x2aa>

				} else if (strlen(verse1[count_note]) == 1) {
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <main+0x32c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80010c8:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f897 	bl	8000204 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d108      	bne.n	80010ee <main+0x2aa>
					TIM3->CCR3 = 0;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <main+0x2f0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c
					count_note = 0;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <main+0x32c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
					flag_alarm = 0;
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <main+0x328>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
				}

				if (song_time_division < count_bit) {
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <main+0x330>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <main+0x334>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	f080 8115 	bcs.w	8001326 <main+0x4e2>
					count_note++;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <main+0x32c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <main+0x32c>)
 8001104:	6013      	str	r3, [r2, #0]
					count_bit = 0;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <main+0x334>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

			////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			//==========================================================================================================
			//mode choose while loop
			while (rising_edge >= 1) {
 800110c:	e10b      	b.n	8001326 <main+0x4e2>
 800110e:	bf00      	nop
 8001110:	200002ac 	.word	0x200002ac
 8001114:	200002f4 	.word	0x200002f4
 8001118:	2000033c 	.word	0x2000033c
 800111c:	080098f4 	.word	0x080098f4
 8001120:	08009be8 	.word	0x08009be8
 8001124:	200001b8 	.word	0x200001b8
 8001128:	200001b9 	.word	0x200001b9
 800112c:	200001ba 	.word	0x200001ba
 8001130:	200001bb 	.word	0x200001bb
 8001134:	40000400 	.word	0x40000400
 8001138:	200001fc 	.word	0x200001fc
 800113c:	200001d0 	.word	0x200001d0
 8001140:	20000288 	.word	0x20000288
 8001144:	200001e4 	.word	0x200001e4
 8001148:	20000094 	.word	0x20000094
 800114c:	20000000 	.word	0x20000000
 8001150:	080097a0 	.word	0x080097a0
 8001154:	200001bc 	.word	0x200001bc
 8001158:	080097b4 	.word	0x080097b4
 800115c:	20000190 	.word	0x20000190
 8001160:	20000178 	.word	0x20000178
 8001164:	20000174 	.word	0x20000174
 8001168:	20000210 	.word	0x20000210
 800116c:	20000168 	.word	0x20000168
 8001170:	2000016c 	.word	0x2000016c
 8001174:	20000170 	.word	0x20000170
 8001178:	20000160 	.word	0x20000160
				cur_tick = HAL_GetTick();
 800117c:	f001 fece 	bl	8002f1c <HAL_GetTick>
 8001180:	4603      	mov	r3, r0
 8001182:	4aa0      	ldr	r2, [pc, #640]	; (8001404 <main+0x5c0>)
 8001184:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8001186:	4b9f      	ldr	r3, [pc, #636]	; (8001404 <main+0x5c0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <main+0x5c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4a9e      	ldr	r2, [pc, #632]	; (800140c <main+0x5c8>)
 8001192:	6013      	str	r3, [r2, #0]

				//remove bounce effect
				if (tick_gap < 100 && rising_edge > 1) {
 8001194:	4b9d      	ldr	r3, [pc, #628]	; (800140c <main+0x5c8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b63      	cmp	r3, #99	; 0x63
 800119a:	d806      	bhi.n	80011aa <main+0x366>
 800119c:	4b9c      	ldr	r3, [pc, #624]	; (8001410 <main+0x5cc>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d902      	bls.n	80011aa <main+0x366>
					rising_edge = 1;
 80011a4:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <main+0x5cc>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
				}

				if (tick_gap >= 300) {
 80011aa:	4b98      	ldr	r3, [pc, #608]	; (800140c <main+0x5c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011b2:	f0c0 80b8 	bcc.w	8001326 <main+0x4e2>

					if (rising_edge == 1 && falling_edge >= 1) {
 80011b6:	4b96      	ldr	r3, [pc, #600]	; (8001410 <main+0x5cc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d142      	bne.n	8001244 <main+0x400>
 80011be:	4b95      	ldr	r3, [pc, #596]	; (8001414 <main+0x5d0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03e      	beq.n	8001244 <main+0x400>

						// init the temp
						sTime_temp.Hours = 0;
 80011c6:	4b94      	ldr	r3, [pc, #592]	; (8001418 <main+0x5d4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 80011cc:	4b92      	ldr	r3, [pc, #584]	; (8001418 <main+0x5d4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <main+0x5d4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 80011d8:	4b8f      	ldr	r3, [pc, #572]	; (8001418 <main+0x5d4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 80011de:	4b8f      	ldr	r3, [pc, #572]	; (800141c <main+0x5d8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 80011e4:	204e      	movs	r0, #78	; 0x4e
 80011e6:	f7ff fdc5 	bl	8000d74 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	204e      	movs	r0, #78	; 0x4e
 80011ee:	f7ff fd9d 	bl	8000d2c <LCD_SendCommand>
						strcpy(lcdup, "Set Time Mode");
 80011f2:	4a8b      	ldr	r2, [pc, #556]	; (8001420 <main+0x5dc>)
 80011f4:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <main+0x5e0>)
 80011f6:	4614      	mov	r4, r2
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	c407      	stmia	r4!, {r0, r1, r2}
 80011fc:	8023      	strh	r3, [r4, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 80011fe:	4988      	ldr	r1, [pc, #544]	; (8001420 <main+0x5dc>)
 8001200:	204e      	movs	r0, #78	; 0x4e
 8001202:	f7ff fdd4 	bl	8000dae <LCD_SendString>
						// LCD down
						screen(cursor, sTime_temp);
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <main+0x5d8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461d      	mov	r5, r3
 800120c:	4b82      	ldr	r3, [pc, #520]	; (8001418 <main+0x5d4>)
 800120e:	466c      	mov	r4, sp
 8001210:	f103 020c 	add.w	r2, r3, #12
 8001214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001218:	e884 0003 	stmia.w	r4, {r0, r1}
 800121c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121e:	4628      	mov	r0, r5
 8001220:	f001 f814 	bl	800224c <screen>

						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001224:	210f      	movs	r1, #15
 8001226:	204e      	movs	r0, #78	; 0x4e
 8001228:	f7ff fd80 	bl	8000d2c <LCD_SendCommand>

						//init the user button
						rising_edge = 0;
 800122c:	4b78      	ldr	r3, [pc, #480]	; (8001410 <main+0x5cc>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8001232:	4b78      	ldr	r3, [pc, #480]	; (8001414 <main+0x5d0>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
						mode = 1;
 8001238:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <main+0x5e4>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
						printf("one click==========================\r\n");
 800123e:	487b      	ldr	r0, [pc, #492]	; (800142c <main+0x5e8>)
 8001240:	f007 f916 	bl	8008470 <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8001244:	4b72      	ldr	r3, [pc, #456]	; (8001410 <main+0x5cc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d944      	bls.n	80012d6 <main+0x492>
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <main+0x5d0>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d040      	beq.n	80012d6 <main+0x492>
						// init the temp
						sTime_AL.Hours = 0;
 8001254:	4b76      	ldr	r3, [pc, #472]	; (8001430 <main+0x5ec>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
						sTime_AL.Minutes = 0;
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <main+0x5ec>)
 800125c:	2200      	movs	r2, #0
 800125e:	705a      	strb	r2, [r3, #1]
						sTime_AL.Seconds = 0;
 8001260:	4b73      	ldr	r3, [pc, #460]	; (8001430 <main+0x5ec>)
 8001262:	2200      	movs	r2, #0
 8001264:	709a      	strb	r2, [r3, #2]
						sTime_AL.TimeFormat = 0;
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <main+0x5ec>)
 8001268:	2200      	movs	r2, #0
 800126a:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 800126c:	4b6b      	ldr	r3, [pc, #428]	; (800141c <main+0x5d8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8001272:	204e      	movs	r0, #78	; 0x4e
 8001274:	f7ff fd7e 	bl	8000d74 <LCD_Init>
						//blink on
						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001278:	210f      	movs	r1, #15
 800127a:	204e      	movs	r0, #78	; 0x4e
 800127c:	f7ff fd56 	bl	8000d2c <LCD_SendCommand>

						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	204e      	movs	r0, #78	; 0x4e
 8001284:	f7ff fd52 	bl	8000d2c <LCD_SendCommand>
						strcpy(lcdup, "Alarm Mode");
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <main+0x5dc>)
 800128a:	4a6a      	ldr	r2, [pc, #424]	; (8001434 <main+0x5f0>)
 800128c:	ca07      	ldmia	r2, {r0, r1, r2}
 800128e:	c303      	stmia	r3!, {r0, r1}
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	3302      	adds	r3, #2
 8001294:	0c12      	lsrs	r2, r2, #16
 8001296:	701a      	strb	r2, [r3, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 8001298:	4961      	ldr	r1, [pc, #388]	; (8001420 <main+0x5dc>)
 800129a:	204e      	movs	r0, #78	; 0x4e
 800129c:	f7ff fd87 	bl	8000dae <LCD_SendString>
						// LCD down
						screen(cursor, sTime_AL);
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <main+0x5d8>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b62      	ldr	r3, [pc, #392]	; (8001430 <main+0x5ec>)
 80012a8:	466c      	mov	r4, sp
 80012aa:	f103 020c 	add.w	r2, r3, #12
 80012ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80012b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b8:	4628      	mov	r0, r5
 80012ba:	f000 ffc7 	bl	800224c <screen>

						//init the user button
						rising_edge = 0;
 80012be:	4b54      	ldr	r3, [pc, #336]	; (8001410 <main+0x5cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <main+0x5d0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
						mode = 2;
 80012ca:	4b57      	ldr	r3, [pc, #348]	; (8001428 <main+0x5e4>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]

						printf("two click++++++++++++++++++++++++++\r\n");
 80012d0:	4859      	ldr	r0, [pc, #356]	; (8001438 <main+0x5f4>)
 80012d2:	f007 f8cd 	bl	8008470 <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <main+0x5c8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012de:	d322      	bcc.n	8001326 <main+0x4e2>
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <main+0x5d0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11e      	bne.n	8001326 <main+0x4e2>

						LCD_Init(LCD_ADDR);
 80012e8:	204e      	movs	r0, #78	; 0x4e
 80012ea:	f7ff fd43 	bl	8000d74 <LCD_Init>

						// set address to 0x00
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	204e      	movs	r0, #78	; 0x4e
 80012f2:	f7ff fd1b 	bl	8000d2c <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Music Setting");
 80012f6:	4951      	ldr	r1, [pc, #324]	; (800143c <main+0x5f8>)
 80012f8:	204e      	movs	r0, #78	; 0x4e
 80012fa:	f7ff fd58 	bl	8000dae <LCD_SendString>

						// set address to 0x40
						LCD_SendCommand(LCD_ADDR, 0b11000000);
 80012fe:	21c0      	movs	r1, #192	; 0xc0
 8001300:	204e      	movs	r0, #78	; 0x4e
 8001302:	f7ff fd13 	bl	8000d2c <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "1.Traffic Light");
 8001306:	494e      	ldr	r1, [pc, #312]	; (8001440 <main+0x5fc>)
 8001308:	204e      	movs	r0, #78	; 0x4e
 800130a:	f7ff fd50 	bl	8000dae <LCD_SendString>

						rising_edge = 0;
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <main+0x5cc>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <main+0x5d0>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
						mode = 3;
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <main+0x5e4>)
 800131c:	2203      	movs	r2, #3
 800131e:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8001320:	4848      	ldr	r0, [pc, #288]	; (8001444 <main+0x600>)
 8001322:	f007 f8a5 	bl	8008470 <puts>
			while (rising_edge >= 1) {
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <main+0x5cc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f af26 	bne.w	800117c <main+0x338>
		while (mode == 0) {
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <main+0x5e4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f43f ade2 	beq.w	8000efe <main+0xba>
				}
			}
		}
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 800133a:	e302      	b.n	8001942 <main+0xafe>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 800133c:	4842      	ldr	r0, [pc, #264]	; (8001448 <main+0x604>)
 800133e:	f001 fe61 	bl	8003004 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <main+0x5cc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d02f      	beq.n	80013aa <main+0x566>

				// this flag is check the exit or apply
				apply_flag = 1;
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <main+0x608>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <main+0x5d0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <main+0x520>
					InitFlag(0);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 ff17 	bl	800218c <InitFlag>
					printf("MODE1 exit\r\n");
 800135e:	483c      	ldr	r0, [pc, #240]	; (8001450 <main+0x60c>)
 8001360:	f007 f886 	bl	8008470 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <main+0x5d0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11e      	bne.n	80013aa <main+0x566>
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <main+0x610>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d91a      	bls.n	80013aa <main+0x566>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <main+0x5d4>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b37      	ldr	r3, [pc, #220]	; (8001458 <main+0x614>)
 800137a:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <main+0x5d4>)
 800137e:	785a      	ldrb	r2, [r3, #1]
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <main+0x614>)
 8001382:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <main+0x5d4>)
 8001386:	789a      	ldrb	r2, [r3, #2]
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <main+0x614>)
 800138a:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <main+0x5d4>)
 800138e:	78da      	ldrb	r2, [r3, #3]
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <main+0x614>)
 8001392:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001394:	2200      	movs	r2, #0
 8001396:	4930      	ldr	r1, [pc, #192]	; (8001458 <main+0x614>)
 8001398:	4830      	ldr	r0, [pc, #192]	; (800145c <main+0x618>)
 800139a:	f004 fccb 	bl	8005d34 <HAL_RTC_SetTime>

					InitFlag(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 fef4 	bl	800218c <InitFlag>
					printf("MODE1 APPLY\r\n");
 80013a4:	482e      	ldr	r0, [pc, #184]	; (8001460 <main+0x61c>)
 80013a6:	f007 f863 	bl	8008470 <puts>
				}
			}

			if (get_time > 0) {
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <main+0x620>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 82c7 	beq.w	8001942 <main+0xafe>

				if (up > 0) {
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <main+0x624>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8143 	beq.w	8001644 <main+0x800>
					//AM or PM switching
					if (cursor == 0) {
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <main+0x5d8>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d171      	bne.n	80014aa <main+0x666>
						if (sTime_temp.TimeFormat == 0) {
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <main+0x5d4>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d14e      	bne.n	800146c <main+0x628>
							sTime_temp.TimeFormat = 1;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <main+0x5d4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <main+0x5d4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <main+0x59e>
								sTime_temp.Hours = 12;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <main+0x5d4>)
 80013de:	220c      	movs	r2, #12
 80013e0:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <main+0x5d8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461d      	mov	r5, r3
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <main+0x5d4>)
 80013ea:	466c      	mov	r4, sp
 80013ec:	f103 020c 	add.w	r2, r3, #12
 80013f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80013f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013fa:	4628      	mov	r0, r5
 80013fc:	f000 ff26 	bl	800224c <screen>
 8001400:	e11d      	b.n	800163e <main+0x7fa>
 8001402:	bf00      	nop
 8001404:	200001a8 	.word	0x200001a8
 8001408:	200001a4 	.word	0x200001a4
 800140c:	200001ac 	.word	0x200001ac
 8001410:	200001a1 	.word	0x200001a1
 8001414:	200001a2 	.word	0x200001a2
 8001418:	200001fc 	.word	0x200001fc
 800141c:	200001b0 	.word	0x200001b0
 8001420:	20000190 	.word	0x20000190
 8001424:	080097c4 	.word	0x080097c4
 8001428:	200001a3 	.word	0x200001a3
 800142c:	080097d4 	.word	0x080097d4
 8001430:	20000224 	.word	0x20000224
 8001434:	080097fc 	.word	0x080097fc
 8001438:	08009808 	.word	0x08009808
 800143c:	08009830 	.word	0x08009830
 8001440:	08009840 	.word	0x08009840
 8001444:	08009850 	.word	0x08009850
 8001448:	20000094 	.word	0x20000094
 800144c:	20000180 	.word	0x20000180
 8001450:	08009878 	.word	0x08009878
 8001454:	20000184 	.word	0x20000184
 8001458:	200001d0 	.word	0x200001d0
 800145c:	20000288 	.word	0x20000288
 8001460:	08009884 	.word	0x08009884
 8001464:	2000017c 	.word	0x2000017c
 8001468:	200001b8 	.word	0x200001b8

						} else if (sTime_temp.TimeFormat == 1) {
 800146c:	4b98      	ldr	r3, [pc, #608]	; (80016d0 <main+0x88c>)
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 80e4 	bne.w	800163e <main+0x7fa>
							sTime_temp.TimeFormat = 0;
 8001476:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <main+0x88c>)
 8001478:	2200      	movs	r2, #0
 800147a:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 800147c:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <main+0x88c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d102      	bne.n	800148a <main+0x646>
								sTime_temp.Hours = 0;
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <main+0x88c>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <main+0x890>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461d      	mov	r5, r3
 8001490:	4b8f      	ldr	r3, [pc, #572]	; (80016d0 <main+0x88c>)
 8001492:	466c      	mov	r4, sp
 8001494:	f103 020c 	add.w	r2, r3, #12
 8001498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149c:	e884 0003 	stmia.w	r4, {r0, r1}
 80014a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a2:	4628      	mov	r0, r5
 80014a4:	f000 fed2 	bl	800224c <screen>
 80014a8:	e0c9      	b.n	800163e <main+0x7fa>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 80014aa:	4b8a      	ldr	r3, [pc, #552]	; (80016d4 <main+0x890>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d119      	bne.n	80014e6 <main+0x6a2>

						if (sTime_temp.Hours < 3) {
 80014b2:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <main+0x88c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d805      	bhi.n	80014c6 <main+0x682>
							sTime_temp.Hours += 10;
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <main+0x88c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	330a      	adds	r3, #10
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b83      	ldr	r3, [pc, #524]	; (80016d0 <main+0x88c>)
 80014c4:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <main+0x890>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461d      	mov	r5, r3
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <main+0x88c>)
 80014ce:	466c      	mov	r4, sp
 80014d0:	f103 020c 	add.w	r2, r3, #12
 80014d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	4628      	mov	r0, r5
 80014e0:	f000 feb4 	bl	800224c <screen>
 80014e4:	e0ab      	b.n	800163e <main+0x7fa>
					}

					// 1H switching
					else if (cursor == 4) {
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <main+0x890>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d130      	bne.n	8001550 <main+0x70c>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <main+0x88c>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10a      	bne.n	800150c <main+0x6c8>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours
									&& sTime_temp.Hours < 11) {
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <main+0x88c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
							if (0 <= sTime_temp.Hours
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d818      	bhi.n	8001530 <main+0x6ec>
								sTime_temp.Hours++;
 80014fe:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <main+0x88c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <main+0x88c>)
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e011      	b.n	8001530 <main+0x6ec>
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <main+0x88c>)
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10d      	bne.n	8001530 <main+0x6ec>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours
 8001514:	4b6e      	ldr	r3, [pc, #440]	; (80016d0 <main+0x88c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <main+0x6ec>
									&& sTime_temp.Hours < 12) {
 800151c:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <main+0x88c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b0b      	cmp	r3, #11
 8001522:	d805      	bhi.n	8001530 <main+0x6ec>
								sTime_temp.Hours++;
 8001524:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <main+0x88c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <main+0x88c>)
 800152e:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_temp);
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <main+0x890>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461d      	mov	r5, r3
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <main+0x88c>)
 8001538:	466c      	mov	r4, sp
 800153a:	f103 020c 	add.w	r2, r3, #12
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	e884 0003 	stmia.w	r4, {r0, r1}
 8001546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001548:	4628      	mov	r0, r5
 800154a:	f000 fe7f 	bl	800224c <screen>
 800154e:	e076      	b.n	800163e <main+0x7fa>
					}

					// 10M switching
					else if (cursor == 6) {
 8001550:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <main+0x890>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d119      	bne.n	800158c <main+0x748>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 50) {
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <main+0x88c>)
 800155a:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 800155c:	2b31      	cmp	r3, #49	; 0x31
 800155e:	d805      	bhi.n	800156c <main+0x728>
							sTime_temp.Minutes += 10;
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <main+0x88c>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	330a      	adds	r3, #10
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <main+0x88c>)
 800156a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <main+0x890>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461d      	mov	r5, r3
 8001572:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <main+0x88c>)
 8001574:	466c      	mov	r4, sp
 8001576:	f103 020c 	add.w	r2, r3, #12
 800157a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001584:	4628      	mov	r0, r5
 8001586:	f000 fe61 	bl	800224c <screen>
 800158a:	e058      	b.n	800163e <main+0x7fa>
					}
					// 1M switching
					else if (cursor == 7) {
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <main+0x890>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b07      	cmp	r3, #7
 8001592:	d119      	bne.n	80015c8 <main+0x784>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 59) {
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <main+0x88c>)
 8001596:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8001598:	2b3a      	cmp	r3, #58	; 0x3a
 800159a:	d805      	bhi.n	80015a8 <main+0x764>
							sTime_temp.Minutes += 1;
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <main+0x88c>)
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <main+0x88c>)
 80015a6:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 80015a8:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <main+0x890>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461d      	mov	r5, r3
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <main+0x88c>)
 80015b0:	466c      	mov	r4, sp
 80015b2:	f103 020c 	add.w	r2, r3, #12
 80015b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80015be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c0:	4628      	mov	r0, r5
 80015c2:	f000 fe43 	bl	800224c <screen>
 80015c6:	e03a      	b.n	800163e <main+0x7fa>
					}

					// 10S switching
					else if (cursor == 9) {
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <main+0x890>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d119      	bne.n	8001604 <main+0x7c0>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 50) {
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <main+0x88c>)
 80015d2:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 80015d4:	2b31      	cmp	r3, #49	; 0x31
 80015d6:	d805      	bhi.n	80015e4 <main+0x7a0>
							sTime_temp.Seconds += 10;
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <main+0x88c>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	330a      	adds	r3, #10
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <main+0x88c>)
 80015e2:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <main+0x890>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461d      	mov	r5, r3
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <main+0x88c>)
 80015ec:	466c      	mov	r4, sp
 80015ee:	f103 020c 	add.w	r2, r3, #12
 80015f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	4628      	mov	r0, r5
 80015fe:	f000 fe25 	bl	800224c <screen>
 8001602:	e01c      	b.n	800163e <main+0x7fa>
					}
					// 1S switching
					else if (cursor == 10) {
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <main+0x890>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b0a      	cmp	r3, #10
 800160a:	d118      	bne.n	800163e <main+0x7fa>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 59) {
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <main+0x88c>)
 800160e:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 8001610:	2b3a      	cmp	r3, #58	; 0x3a
 8001612:	d805      	bhi.n	8001620 <main+0x7dc>
							sTime_temp.Seconds += 1;
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <main+0x88c>)
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	3301      	adds	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <main+0x88c>)
 800161e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <main+0x890>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <main+0x88c>)
 8001628:	466c      	mov	r4, sp
 800162a:	f103 020c 	add.w	r2, r3, #12
 800162e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001632:	e884 0003 	stmia.w	r4, {r0, r1}
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	4628      	mov	r0, r5
 800163a:	f000 fe07 	bl	800224c <screen>
					}

					// clear the up flag
					up = 0;
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <main+0x894>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <main+0x898>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80f1 	beq.w	8001830 <main+0x9ec>

					//AM or PM switching
					if (cursor == 0) {
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <main+0x890>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d144      	bne.n	80016e0 <main+0x89c>
						if (sTime_temp.TimeFormat == 0) {
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <main+0x88c>)
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d119      	bne.n	8001692 <main+0x84e>
							sTime_temp.TimeFormat = 1;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <main+0x88c>)
 8001660:	2201      	movs	r2, #1
 8001662:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <main+0x88c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <main+0x82e>
								sTime_temp.Hours = 12;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <main+0x88c>)
 800166e:	220c      	movs	r2, #12
 8001670:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <main+0x890>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461d      	mov	r5, r3
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <main+0x88c>)
 800167a:	466c      	mov	r4, sp
 800167c:	f103 020c 	add.w	r2, r3, #12
 8001680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001684:	e884 0003 	stmia.w	r4, {r0, r1}
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	4628      	mov	r0, r5
 800168c:	f000 fdde 	bl	800224c <screen>
 8001690:	e0cb      	b.n	800182a <main+0x9e6>
						} else if (sTime_temp.TimeFormat == 1) {
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <main+0x88c>)
 8001694:	78db      	ldrb	r3, [r3, #3]
 8001696:	2b01      	cmp	r3, #1
 8001698:	f040 80c7 	bne.w	800182a <main+0x9e6>
							sTime_temp.TimeFormat = 0;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <main+0x88c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <main+0x88c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d102      	bne.n	80016b0 <main+0x86c>
								sTime_temp.Hours = 0;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <main+0x88c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <main+0x890>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461d      	mov	r5, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <main+0x88c>)
 80016b8:	466c      	mov	r4, sp
 80016ba:	f103 020c 	add.w	r2, r3, #12
 80016be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	4628      	mov	r0, r5
 80016ca:	f000 fdbf 	bl	800224c <screen>
 80016ce:	e0ac      	b.n	800182a <main+0x9e6>
 80016d0:	200001fc 	.word	0x200001fc
 80016d4:	200001b0 	.word	0x200001b0
 80016d8:	200001b8 	.word	0x200001b8
 80016dc:	200001b9 	.word	0x200001b9
						}
					}

					// 1H switching
					else if (cursor == 4) {
 80016e0:	4b9b      	ldr	r3, [pc, #620]	; (8001950 <main+0xb0c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d119      	bne.n	800171c <main+0x8d8>
						if (sTime_temp.Hours > 0) {
 80016e8:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <main+0xb10>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <main+0x8b8>
							sTime_temp.Hours--;
 80016f0:	4b98      	ldr	r3, [pc, #608]	; (8001954 <main+0xb10>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b96      	ldr	r3, [pc, #600]	; (8001954 <main+0xb10>)
 80016fa:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 80016fc:	4b94      	ldr	r3, [pc, #592]	; (8001950 <main+0xb0c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461d      	mov	r5, r3
 8001702:	4b94      	ldr	r3, [pc, #592]	; (8001954 <main+0xb10>)
 8001704:	466c      	mov	r4, sp
 8001706:	f103 020c 	add.w	r2, r3, #12
 800170a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	4628      	mov	r0, r5
 8001716:	f000 fd99 	bl	800224c <screen>
 800171a:	e086      	b.n	800182a <main+0x9e6>
					}

					// 10M switching
					else if (cursor == 6) {
 800171c:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <main+0xb0c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b06      	cmp	r3, #6
 8001722:	d11d      	bne.n	8001760 <main+0x91c>
						if (0 < sTime_temp.Minutes
 8001724:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <main+0xb10>)
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <main+0x8fc>
								&& sTime_temp.Minutes <= 50) {
 800172c:	4b89      	ldr	r3, [pc, #548]	; (8001954 <main+0xb10>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b32      	cmp	r3, #50	; 0x32
 8001732:	d805      	bhi.n	8001740 <main+0x8fc>
							sTime_temp.Minutes -= 10;
 8001734:	4b87      	ldr	r3, [pc, #540]	; (8001954 <main+0xb10>)
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	3b0a      	subs	r3, #10
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <main+0xb10>)
 800173e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001740:	4b83      	ldr	r3, [pc, #524]	; (8001950 <main+0xb0c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461d      	mov	r5, r3
 8001746:	4b83      	ldr	r3, [pc, #524]	; (8001954 <main+0xb10>)
 8001748:	466c      	mov	r4, sp
 800174a:	f103 020c 	add.w	r2, r3, #12
 800174e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001752:	e884 0003 	stmia.w	r4, {r0, r1}
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	4628      	mov	r0, r5
 800175a:	f000 fd77 	bl	800224c <screen>
 800175e:	e064      	b.n	800182a <main+0x9e6>
					}
					// 1M switching
					else if (cursor == 7) {
 8001760:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <main+0xb0c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b07      	cmp	r3, #7
 8001766:	d11d      	bne.n	80017a4 <main+0x960>
						if (0 < sTime_temp.Minutes
 8001768:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <main+0xb10>)
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <main+0x940>
								&& sTime_temp.Minutes <= 59) {
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <main+0xb10>)
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	2b3b      	cmp	r3, #59	; 0x3b
 8001776:	d805      	bhi.n	8001784 <main+0x940>
							sTime_temp.Minutes -= 1;
 8001778:	4b76      	ldr	r3, [pc, #472]	; (8001954 <main+0xb10>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b74      	ldr	r3, [pc, #464]	; (8001954 <main+0xb10>)
 8001782:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001784:	4b72      	ldr	r3, [pc, #456]	; (8001950 <main+0xb0c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461d      	mov	r5, r3
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <main+0xb10>)
 800178c:	466c      	mov	r4, sp
 800178e:	f103 020c 	add.w	r2, r3, #12
 8001792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001796:	e884 0003 	stmia.w	r4, {r0, r1}
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	4628      	mov	r0, r5
 800179e:	f000 fd55 	bl	800224c <screen>
 80017a2:	e042      	b.n	800182a <main+0x9e6>
					}

					// 10S switching
					else if (cursor == 9) {
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <main+0xb0c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	d11d      	bne.n	80017e8 <main+0x9a4>
						if (0 < sTime_temp.Seconds
 80017ac:	4b69      	ldr	r3, [pc, #420]	; (8001954 <main+0xb10>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <main+0x984>
								&& sTime_temp.Seconds <= 50) {
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <main+0xb10>)
 80017b6:	789b      	ldrb	r3, [r3, #2]
 80017b8:	2b32      	cmp	r3, #50	; 0x32
 80017ba:	d805      	bhi.n	80017c8 <main+0x984>
							sTime_temp.Seconds -= 10;
 80017bc:	4b65      	ldr	r3, [pc, #404]	; (8001954 <main+0xb10>)
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	3b0a      	subs	r3, #10
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b63      	ldr	r3, [pc, #396]	; (8001954 <main+0xb10>)
 80017c6:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80017c8:	4b61      	ldr	r3, [pc, #388]	; (8001950 <main+0xb0c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461d      	mov	r5, r3
 80017ce:	4b61      	ldr	r3, [pc, #388]	; (8001954 <main+0xb10>)
 80017d0:	466c      	mov	r4, sp
 80017d2:	f103 020c 	add.w	r2, r3, #12
 80017d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017da:	e884 0003 	stmia.w	r4, {r0, r1}
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	4628      	mov	r0, r5
 80017e2:	f000 fd33 	bl	800224c <screen>
 80017e6:	e020      	b.n	800182a <main+0x9e6>
					}
					// 1S switching
					else if (cursor == 10) {
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <main+0xb0c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b0a      	cmp	r3, #10
 80017ee:	d11c      	bne.n	800182a <main+0x9e6>
						if (0 < sTime_temp.Seconds
 80017f0:	4b58      	ldr	r3, [pc, #352]	; (8001954 <main+0xb10>)
 80017f2:	789b      	ldrb	r3, [r3, #2]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <main+0x9c8>
								&& sTime_temp.Seconds <= 59) {
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <main+0xb10>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	2b3b      	cmp	r3, #59	; 0x3b
 80017fe:	d805      	bhi.n	800180c <main+0x9c8>
							sTime_temp.Seconds -= 1;
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <main+0xb10>)
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	3b01      	subs	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b52      	ldr	r3, [pc, #328]	; (8001954 <main+0xb10>)
 800180a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <main+0xb0c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461d      	mov	r5, r3
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <main+0xb10>)
 8001814:	466c      	mov	r4, sp
 8001816:	f103 020c 	add.w	r2, r3, #12
 800181a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800181e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	4628      	mov	r0, r5
 8001826:	f000 fd11 	bl	800224c <screen>
					}

					// clear the down flag
					down = 0;
 800182a:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <main+0xb14>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <main+0xb18>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d03e      	beq.n	80018b6 <main+0xa72>
					if (cursor > 0) {
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <main+0xb0c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d037      	beq.n	80018b0 <main+0xa6c>
						cursor--;
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <main+0xb0c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <main+0xb0c>)
 800184a:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 800184c:	2110      	movs	r1, #16
 800184e:	204e      	movs	r0, #78	; 0x4e
 8001850:	f7ff fa6c 	bl	8000d2c <LCD_SendCommand>

						if (cursor == 8) {
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <main+0xb0c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b08      	cmp	r3, #8
 800185a:	d109      	bne.n	8001870 <main+0xa2c>
							cursor--;
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <main+0xb0c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <main+0xb0c>)
 8001866:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001868:	2110      	movs	r1, #16
 800186a:	204e      	movs	r0, #78	; 0x4e
 800186c:	f7ff fa5e 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001870:	4b37      	ldr	r3, [pc, #220]	; (8001950 <main+0xb0c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d109      	bne.n	800188c <main+0xa48>
							cursor--;
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <main+0xb0c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <main+0xb0c>)
 8001882:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001884:	2110      	movs	r1, #16
 8001886:	204e      	movs	r0, #78	; 0x4e
 8001888:	f7ff fa50 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 2) {
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <main+0xb0c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d10d      	bne.n	80018b0 <main+0xa6c>
							cursor -= 2;
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <main+0xb0c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3b02      	subs	r3, #2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <main+0xb0c>)
 800189e:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80018a0:	2110      	movs	r1, #16
 80018a2:	204e      	movs	r0, #78	; 0x4e
 80018a4:	f7ff fa42 	bl	8000d2c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80018a8:	2110      	movs	r1, #16
 80018aa:	204e      	movs	r0, #78	; 0x4e
 80018ac:	f7ff fa3e 	bl	8000d2c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <main+0xb18>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <main+0xb1c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03e      	beq.n	800193c <main+0xaf8>

					if (cursor < 10) {
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <main+0xb0c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d837      	bhi.n	8001936 <main+0xaf2>
						cursor++;
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <main+0xb0c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <main+0xb0c>)
 80018d0:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 80018d2:	2114      	movs	r1, #20
 80018d4:	204e      	movs	r0, #78	; 0x4e
 80018d6:	f7ff fa29 	bl	8000d2c <LCD_SendCommand>

						if (cursor == 8) {
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <main+0xb0c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d109      	bne.n	80018f6 <main+0xab2>
							cursor++;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <main+0xb0c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <main+0xb0c>)
 80018ec:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 80018ee:	2114      	movs	r1, #20
 80018f0:	204e      	movs	r0, #78	; 0x4e
 80018f2:	f7ff fa1b 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 5) {
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <main+0xb0c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d109      	bne.n	8001912 <main+0xace>
							cursor++;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <main+0xb0c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <main+0xb0c>)
 8001908:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800190a:	2114      	movs	r1, #20
 800190c:	204e      	movs	r0, #78	; 0x4e
 800190e:	f7ff fa0d 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <main+0xb0c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10d      	bne.n	8001936 <main+0xaf2>
							cursor += 2;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <main+0xb0c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3302      	adds	r3, #2
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <main+0xb0c>)
 8001924:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001926:	2114      	movs	r1, #20
 8001928:	204e      	movs	r0, #78	; 0x4e
 800192a:	f7ff f9ff 	bl	8000d2c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800192e:	2114      	movs	r1, #20
 8001930:	204e      	movs	r0, #78	; 0x4e
 8001932:	f7ff f9fb 	bl	8000d2c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <main+0xb1c>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <main+0xb20>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <main+0xb24>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	f43f acf8 	beq.w	800133c <main+0x4f8>
			}
		}

		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 800194c:	e301      	b.n	8001f52 <main+0x110e>
 800194e:	bf00      	nop
 8001950:	200001b0 	.word	0x200001b0
 8001954:	200001fc 	.word	0x200001fc
 8001958:	200001b9 	.word	0x200001b9
 800195c:	200001ba 	.word	0x200001ba
 8001960:	200001bb 	.word	0x200001bb
 8001964:	2000017c 	.word	0x2000017c
 8001968:	200001a3 	.word	0x200001a3
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 800196c:	489a      	ldr	r0, [pc, #616]	; (8001bd8 <main+0xd94>)
 800196e:	f001 fb49 	bl	8003004 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <main+0xd98>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d035      	beq.n	80019e6 <main+0xba2>

				// Alarm init
				sprintf(Time_AL, "");
 800197a:	4999      	ldr	r1, [pc, #612]	; (8001be0 <main+0xd9c>)
 800197c:	4899      	ldr	r0, [pc, #612]	; (8001be4 <main+0xda0>)
 800197e:	f006 fd7f 	bl	8008480 <siprintf>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001982:	4b99      	ldr	r3, [pc, #612]	; (8001be8 <main+0xda4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001988:	4b98      	ldr	r3, [pc, #608]	; (8001bec <main+0xda8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <main+0xb58>
					// ===========================================init func

					InitFlag(0);
 8001990:	2000      	movs	r0, #0
 8001992:	f000 fbfb 	bl	800218c <InitFlag>
					printf("MODE exit\r\n");
 8001996:	4896      	ldr	r0, [pc, #600]	; (8001bf0 <main+0xdac>)
 8001998:	f006 fd6a 	bl	8008470 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 800199c:	4b93      	ldr	r3, [pc, #588]	; (8001bec <main+0xda8>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d120      	bne.n	80019e6 <main+0xba2>
 80019a4:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <main+0xdb0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d91c      	bls.n	80019e6 <main+0xba2>

					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <main+0xdb4>)
 80019ae:	78db      	ldrb	r3, [r3, #3]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <main+0xdb8>)
 80019ba:	441a      	add	r2, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80019bc:	4b8e      	ldr	r3, [pc, #568]	; (8001bf8 <main+0xdb4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80019c0:	4618      	mov	r0, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80019c2:	4b8d      	ldr	r3, [pc, #564]	; (8001bf8 <main+0xdb4>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80019c6:	4619      	mov	r1, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80019c8:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <main+0xdb4>)
 80019ca:	789b      	ldrb	r3, [r3, #2]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	9100      	str	r1, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	498b      	ldr	r1, [pc, #556]	; (8001c00 <main+0xdbc>)
 80019d4:	4883      	ldr	r0, [pc, #524]	; (8001be4 <main+0xda0>)
 80019d6:	f006 fd53 	bl	8008480 <siprintf>

					// ===========================================init func
					InitFlag(0);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 fbd6 	bl	800218c <InitFlag>
					printf("MODE APPLY\r\n");
 80019e0:	4888      	ldr	r0, [pc, #544]	; (8001c04 <main+0xdc0>)
 80019e2:	f006 fd45 	bl	8008470 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <main+0xdc4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 82b1 	beq.w	8001f52 <main+0x110e>

				if (up > 0) {
 80019f0:	4b86      	ldr	r3, [pc, #536]	; (8001c0c <main+0xdc8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 812d 	beq.w	8001c54 <main+0xe10>
					//AM or PM switching
					if (cursor == 0) {
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <main+0xdcc>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13c      	bne.n	8001a7c <main+0xc38>
						if (sTime_AL.TimeFormat == 0) {
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <main+0xdb4>)
 8001a04:	78db      	ldrb	r3, [r3, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <main+0xbfa>
							sTime_AL.TimeFormat = 1;
 8001a0a:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <main+0xdb4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <main+0xdb4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <main+0xbda>
								sTime_AL.Hours = 12;
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <main+0xdb4>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <main+0xdcc>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461d      	mov	r5, r3
 8001a24:	4b74      	ldr	r3, [pc, #464]	; (8001bf8 <main+0xdb4>)
 8001a26:	466c      	mov	r4, sp
 8001a28:	f103 020c 	add.w	r2, r3, #12
 8001a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a30:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 fc08 	bl	800224c <screen>
 8001a3c:	e107      	b.n	8001c4e <main+0xe0a>

						} else if (sTime_AL.TimeFormat == 1) {
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <main+0xdb4>)
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 8103 	bne.w	8001c4e <main+0xe0a>
							sTime_AL.TimeFormat = 0;
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <main+0xdb4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <main+0xdb4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d102      	bne.n	8001a5c <main+0xc18>
								sTime_AL.Hours = 0;
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <main+0xdb4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <main+0xdcc>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461d      	mov	r5, r3
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <main+0xdb4>)
 8001a64:	466c      	mov	r4, sp
 8001a66:	f103 020c 	add.w	r2, r3, #12
 8001a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a6e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a74:	4628      	mov	r0, r5
 8001a76:	f000 fbe9 	bl	800224c <screen>
 8001a7a:	e0e8      	b.n	8001c4e <main+0xe0a>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 8001a7c:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <main+0xdcc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d119      	bne.n	8001ab8 <main+0xc74>

						if (sTime_AL.Hours < 3) {
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <main+0xdb4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d805      	bhi.n	8001a98 <main+0xc54>
							sTime_AL.Hours += 10;
 8001a8c:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <main+0xdb4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	330a      	adds	r3, #10
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <main+0xdb4>)
 8001a96:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001a98:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <main+0xdcc>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <main+0xdb4>)
 8001aa0:	466c      	mov	r4, sp
 8001aa2:	f103 020c 	add.w	r2, r3, #12
 8001aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f000 fbcb 	bl	800224c <screen>
 8001ab6:	e0ca      	b.n	8001c4e <main+0xe0a>
					}

					// 1H switching
					else if (cursor == 4) {
 8001ab8:	4b55      	ldr	r3, [pc, #340]	; (8001c10 <main+0xdcc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d130      	bne.n	8001b22 <main+0xcde>

						//AM
						if (sTime_AL.TimeFormat == 0) {
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <main+0xdb4>)
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <main+0xc9a>
							// 0 ~ 11
							if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <main+0xdb4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d818      	bhi.n	8001b02 <main+0xcbe>
								sTime_AL.Hours++;
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <main+0xdb4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <main+0xdb4>)
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e011      	b.n	8001b02 <main+0xcbe>
							}
						}
						//PM
						else if (sTime_AL.TimeFormat == 1) {
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <main+0xdb4>)
 8001ae0:	78db      	ldrb	r3, [r3, #3]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10d      	bne.n	8001b02 <main+0xcbe>

							// 1 ~ 12
							if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <main+0xdb4>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <main+0xcbe>
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <main+0xdb4>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b0b      	cmp	r3, #11
 8001af4:	d805      	bhi.n	8001b02 <main+0xcbe>
								sTime_AL.Hours++;
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <main+0xdb4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <main+0xdb4>)
 8001b00:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_AL);
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <main+0xdcc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461d      	mov	r5, r3
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <main+0xdb4>)
 8001b0a:	466c      	mov	r4, sp
 8001b0c:	f103 020c 	add.w	r2, r3, #12
 8001b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f000 fb96 	bl	800224c <screen>
 8001b20:	e095      	b.n	8001c4e <main+0xe0a>
					}

					// 10M switching
					else if (cursor == 6) {
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <main+0xdcc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d119      	bne.n	8001b5e <main+0xd1a>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <main+0xdb4>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	2b31      	cmp	r3, #49	; 0x31
 8001b30:	d805      	bhi.n	8001b3e <main+0xcfa>
							sTime_AL.Minutes += 10;
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <main+0xdb4>)
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	330a      	adds	r3, #10
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <main+0xdb4>)
 8001b3c:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <main+0xdcc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461d      	mov	r5, r3
 8001b44:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <main+0xdb4>)
 8001b46:	466c      	mov	r4, sp
 8001b48:	f103 020c 	add.w	r2, r3, #12
 8001b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b50:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b56:	4628      	mov	r0, r5
 8001b58:	f000 fb78 	bl	800224c <screen>
 8001b5c:	e077      	b.n	8001c4e <main+0xe0a>
					}
					// 1M switching
					else if (cursor == 7) {
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <main+0xdcc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b07      	cmp	r3, #7
 8001b64:	d119      	bne.n	8001b9a <main+0xd56>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <main+0xdb4>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	2b3a      	cmp	r3, #58	; 0x3a
 8001b6c:	d805      	bhi.n	8001b7a <main+0xd36>
							sTime_AL.Minutes += 1;
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <main+0xdb4>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <main+0xdb4>)
 8001b78:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <main+0xdcc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <main+0xdb4>)
 8001b82:	466c      	mov	r4, sp
 8001b84:	f103 020c 	add.w	r2, r3, #12
 8001b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b92:	4628      	mov	r0, r5
 8001b94:	f000 fb5a 	bl	800224c <screen>
 8001b98:	e059      	b.n	8001c4e <main+0xe0a>
					}

					// 10S switching
					else if (cursor == 9) {
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <main+0xdcc>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	d138      	bne.n	8001c14 <main+0xdd0>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <main+0xdb4>)
 8001ba4:	789b      	ldrb	r3, [r3, #2]
 8001ba6:	2b31      	cmp	r3, #49	; 0x31
 8001ba8:	d805      	bhi.n	8001bb6 <main+0xd72>
							sTime_AL.Seconds += 10;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <main+0xdb4>)
 8001bac:	789b      	ldrb	r3, [r3, #2]
 8001bae:	330a      	adds	r3, #10
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <main+0xdb4>)
 8001bb4:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <main+0xdcc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <main+0xdb4>)
 8001bbe:	466c      	mov	r4, sp
 8001bc0:	f103 020c 	add.w	r2, r3, #12
 8001bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f000 fb3c 	bl	800224c <screen>
 8001bd4:	e03b      	b.n	8001c4e <main+0xe0a>
 8001bd6:	bf00      	nop
 8001bd8:	20000094 	.word	0x20000094
 8001bdc:	200001a1 	.word	0x200001a1
 8001be0:	08009894 	.word	0x08009894
 8001be4:	20000210 	.word	0x20000210
 8001be8:	20000180 	.word	0x20000180
 8001bec:	200001a2 	.word	0x200001a2
 8001bf0:	08009898 	.word	0x08009898
 8001bf4:	20000184 	.word	0x20000184
 8001bf8:	20000224 	.word	0x20000224
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	080097a0 	.word	0x080097a0
 8001c04:	080098a4 	.word	0x080098a4
 8001c08:	2000017c 	.word	0x2000017c
 8001c0c:	200001b8 	.word	0x200001b8
 8001c10:	200001b0 	.word	0x200001b0
					}
					// 1S switching
					else if (cursor == 10) {
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <main+0xfa4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b0a      	cmp	r3, #10
 8001c1a:	d118      	bne.n	8001c4e <main+0xe0a>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <main+0xfa8>)
 8001c1e:	789b      	ldrb	r3, [r3, #2]
 8001c20:	2b3a      	cmp	r3, #58	; 0x3a
 8001c22:	d805      	bhi.n	8001c30 <main+0xdec>
							sTime_AL.Seconds += 1;
 8001c24:	4b71      	ldr	r3, [pc, #452]	; (8001dec <main+0xfa8>)
 8001c26:	789b      	ldrb	r3, [r3, #2]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <main+0xfa8>)
 8001c2e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001c30:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <main+0xfa4>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461d      	mov	r5, r3
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <main+0xfa8>)
 8001c38:	466c      	mov	r4, sp
 8001c3a:	f103 020c 	add.w	r2, r3, #12
 8001c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c42:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f000 faff 	bl	800224c <screen>
					}

					// clear the up flag
					up = 0;
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <main+0xfac>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8001c54:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <main+0xfb0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80f1 	beq.w	8001e40 <main+0xffc>

					//AM or PM switching
					if (cursor == 0) {
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <main+0xfa4>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d13c      	bne.n	8001ce0 <main+0xe9c>
						if (sTime_AL.TimeFormat == 0) {
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <main+0xfa8>)
 8001c68:	78db      	ldrb	r3, [r3, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d119      	bne.n	8001ca2 <main+0xe5e>
							sTime_AL.TimeFormat = 1;
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <main+0xfa8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <main+0xfa8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <main+0xe3e>
								sTime_AL.Hours = 12;
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <main+0xfa8>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001c82:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <main+0xfa4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461d      	mov	r5, r3
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <main+0xfa8>)
 8001c8a:	466c      	mov	r4, sp
 8001c8c:	f103 020c 	add.w	r2, r3, #12
 8001c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c94:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f000 fad6 	bl	800224c <screen>
 8001ca0:	e0cb      	b.n	8001e3a <main+0xff6>
						} else if (sTime_AL.TimeFormat == 1) {
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <main+0xfa8>)
 8001ca4:	78db      	ldrb	r3, [r3, #3]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 80c7 	bne.w	8001e3a <main+0xff6>
							sTime_AL.TimeFormat = 0;
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <main+0xfa8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <main+0xfa8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d102      	bne.n	8001cc0 <main+0xe7c>
								sTime_AL.Hours = 0;
 8001cba:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <main+0xfa8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <main+0xfa4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <main+0xfa8>)
 8001cc8:	466c      	mov	r4, sp
 8001cca:	f103 020c 	add.w	r2, r3, #12
 8001cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f000 fab7 	bl	800224c <screen>
 8001cde:	e0ac      	b.n	8001e3a <main+0xff6>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <main+0xfa4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d119      	bne.n	8001d1c <main+0xed8>
						if (sTime_AL.Hours > 0) {
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <main+0xfa8>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <main+0xeb8>
							sTime_AL.Hours--;
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <main+0xfa8>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <main+0xfa8>)
 8001cfa:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <main+0xfa4>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461d      	mov	r5, r3
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <main+0xfa8>)
 8001d04:	466c      	mov	r4, sp
 8001d06:	f103 020c 	add.w	r2, r3, #12
 8001d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d14:	4628      	mov	r0, r5
 8001d16:	f000 fa99 	bl	800224c <screen>
 8001d1a:	e08e      	b.n	8001e3a <main+0xff6>
					}

					// 10M switching
					else if (cursor == 6) {
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <main+0xfa4>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d11d      	bne.n	8001d60 <main+0xf1c>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <main+0xfa8>)
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d009      	beq.n	8001d40 <main+0xefc>
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <main+0xfa8>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	2b32      	cmp	r3, #50	; 0x32
 8001d32:	d805      	bhi.n	8001d40 <main+0xefc>
							sTime_AL.Minutes -= 10;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <main+0xfa8>)
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	3b0a      	subs	r3, #10
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <main+0xfa8>)
 8001d3e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <main+0xfa4>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461d      	mov	r5, r3
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <main+0xfa8>)
 8001d48:	466c      	mov	r4, sp
 8001d4a:	f103 020c 	add.w	r2, r3, #12
 8001d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d52:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f000 fa77 	bl	800224c <screen>
 8001d5e:	e06c      	b.n	8001e3a <main+0xff6>
					}
					// 1M switching
					else if (cursor == 7) {
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <main+0xfa4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b07      	cmp	r3, #7
 8001d66:	d11d      	bne.n	8001da4 <main+0xf60>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <main+0xfa8>)
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <main+0xf40>
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <main+0xfa8>)
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b3b      	cmp	r3, #59	; 0x3b
 8001d76:	d805      	bhi.n	8001d84 <main+0xf40>
							sTime_AL.Minutes -= 1;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <main+0xfa8>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <main+0xfa8>)
 8001d82:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <main+0xfa4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461d      	mov	r5, r3
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <main+0xfa8>)
 8001d8c:	466c      	mov	r4, sp
 8001d8e:	f103 020c 	add.w	r2, r3, #12
 8001d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d96:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f000 fa55 	bl	800224c <screen>
 8001da2:	e04a      	b.n	8001e3a <main+0xff6>
					}

					// 10S switching
					else if (cursor == 9) {
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <main+0xfa4>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d125      	bne.n	8001df8 <main+0xfb4>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <main+0xfa8>)
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <main+0xf84>
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <main+0xfa8>)
 8001db6:	789b      	ldrb	r3, [r3, #2]
 8001db8:	2b32      	cmp	r3, #50	; 0x32
 8001dba:	d805      	bhi.n	8001dc8 <main+0xf84>
							sTime_AL.Seconds -= 10;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <main+0xfa8>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	3b0a      	subs	r3, #10
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <main+0xfa8>)
 8001dc6:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <main+0xfa4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461d      	mov	r5, r3
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <main+0xfa8>)
 8001dd0:	466c      	mov	r4, sp
 8001dd2:	f103 020c 	add.w	r2, r3, #12
 8001dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dda:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 fa33 	bl	800224c <screen>
 8001de6:	e028      	b.n	8001e3a <main+0xff6>
 8001de8:	200001b0 	.word	0x200001b0
 8001dec:	20000224 	.word	0x20000224
 8001df0:	200001b8 	.word	0x200001b8
 8001df4:	200001b9 	.word	0x200001b9
					}
					// 1S switching
					else if (cursor == 10) {
 8001df8:	4b85      	ldr	r3, [pc, #532]	; (8002010 <main+0x11cc>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b0a      	cmp	r3, #10
 8001dfe:	d11c      	bne.n	8001e3a <main+0xff6>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 8001e00:	4b84      	ldr	r3, [pc, #528]	; (8002014 <main+0x11d0>)
 8001e02:	789b      	ldrb	r3, [r3, #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <main+0xfd8>
 8001e08:	4b82      	ldr	r3, [pc, #520]	; (8002014 <main+0x11d0>)
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e0e:	d805      	bhi.n	8001e1c <main+0xfd8>
							sTime_AL.Seconds -= 1;
 8001e10:	4b80      	ldr	r3, [pc, #512]	; (8002014 <main+0x11d0>)
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <main+0x11d0>)
 8001e1a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001e1c:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <main+0x11cc>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461d      	mov	r5, r3
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <main+0x11d0>)
 8001e24:	466c      	mov	r4, sp
 8001e26:	f103 020c 	add.w	r2, r3, #12
 8001e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e34:	4628      	mov	r0, r5
 8001e36:	f000 fa09 	bl	800224c <screen>
					}

					// clear the down flag
					down = 0;
 8001e3a:	4b77      	ldr	r3, [pc, #476]	; (8002018 <main+0x11d4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001e40:	4b76      	ldr	r3, [pc, #472]	; (800201c <main+0x11d8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03e      	beq.n	8001ec6 <main+0x1082>
					if (cursor > 0) {
 8001e48:	4b71      	ldr	r3, [pc, #452]	; (8002010 <main+0x11cc>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d037      	beq.n	8001ec0 <main+0x107c>
						cursor--;
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <main+0x11cc>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <main+0x11cc>)
 8001e5a:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	204e      	movs	r0, #78	; 0x4e
 8001e60:	f7fe ff64 	bl	8000d2c <LCD_SendCommand>

						if (cursor == 8) {
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <main+0x11cc>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d109      	bne.n	8001e80 <main+0x103c>
							cursor--;
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <main+0x11cc>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <main+0x11cc>)
 8001e76:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001e78:	2110      	movs	r1, #16
 8001e7a:	204e      	movs	r0, #78	; 0x4e
 8001e7c:	f7fe ff56 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001e80:	4b63      	ldr	r3, [pc, #396]	; (8002010 <main+0x11cc>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d109      	bne.n	8001e9c <main+0x1058>
							cursor--;
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <main+0x11cc>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <main+0x11cc>)
 8001e92:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001e94:	2110      	movs	r1, #16
 8001e96:	204e      	movs	r0, #78	; 0x4e
 8001e98:	f7fe ff48 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 2) {
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <main+0x11cc>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d10d      	bne.n	8001ec0 <main+0x107c>
							cursor -= 2;
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <main+0x11cc>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <main+0x11cc>)
 8001eae:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	204e      	movs	r0, #78	; 0x4e
 8001eb4:	f7fe ff3a 	bl	8000d2c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001eb8:	2110      	movs	r1, #16
 8001eba:	204e      	movs	r0, #78	; 0x4e
 8001ebc:	f7fe ff36 	bl	8000d2c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 8001ec0:	4b56      	ldr	r3, [pc, #344]	; (800201c <main+0x11d8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <main+0x11dc>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03e      	beq.n	8001f4c <main+0x1108>

					if (cursor < 10) {
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <main+0x11cc>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	d837      	bhi.n	8001f46 <main+0x1102>
						cursor++;
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <main+0x11cc>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <main+0x11cc>)
 8001ee0:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001ee2:	2114      	movs	r1, #20
 8001ee4:	204e      	movs	r0, #78	; 0x4e
 8001ee6:	f7fe ff21 	bl	8000d2c <LCD_SendCommand>

						if (cursor == 8) {
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <main+0x11cc>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d109      	bne.n	8001f06 <main+0x10c2>
							cursor++;
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <main+0x11cc>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b45      	ldr	r3, [pc, #276]	; (8002010 <main+0x11cc>)
 8001efc:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001efe:	2114      	movs	r1, #20
 8001f00:	204e      	movs	r0, #78	; 0x4e
 8001f02:	f7fe ff13 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <main+0x11cc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d109      	bne.n	8001f22 <main+0x10de>
							cursor++;
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <main+0x11cc>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <main+0x11cc>)
 8001f18:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001f1a:	2114      	movs	r1, #20
 8001f1c:	204e      	movs	r0, #78	; 0x4e
 8001f1e:	f7fe ff05 	bl	8000d2c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <main+0x11cc>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10d      	bne.n	8001f46 <main+0x1102>
							cursor += 2;
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <main+0x11cc>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <main+0x11cc>)
 8001f34:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001f36:	2114      	movs	r1, #20
 8001f38:	204e      	movs	r0, #78	; 0x4e
 8001f3a:	f7fe fef7 	bl	8000d2c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001f3e:	2114      	movs	r1, #20
 8001f40:	204e      	movs	r0, #78	; 0x4e
 8001f42:	f7fe fef3 	bl	8000d2c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <main+0x11dc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <main+0x11e0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <main+0x11e4>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f43f ad08 	beq.w	800196c <main+0xb28>

			}
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 8001f5c:	e046      	b.n	8001fec <main+0x11a8>

			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <main+0x11e8>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03f      	beq.n	8001fe6 <main+0x11a2>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <main+0x11ec>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001f6c:	4b31      	ldr	r3, [pc, #196]	; (8002034 <main+0x11f0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <main+0x113c>
					InitFlag(0);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f909 	bl	800218c <InitFlag>
					printf("MODE3 exit\r\n");
 8001f7a:	482f      	ldr	r0, [pc, #188]	; (8002038 <main+0x11f4>)
 8001f7c:	f006 fa78 	bl	8008470 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8001f80:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <main+0x11f0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d12e      	bne.n	8001fe6 <main+0x11a2>
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <main+0x11f8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d92a      	bls.n	8001fe6 <main+0x11a2>


					LCD_Init(LCD_ADDR);
 8001f90:	204e      	movs	r0, #78	; 0x4e
 8001f92:	f7fe feef 	bl	8000d74 <LCD_Init>

					// set address to 0x00
					LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	204e      	movs	r0, #78	; 0x4e
 8001f9a:	f7fe fec7 	bl	8000d2c <LCD_SendCommand>
					strcpy(lcdup, "Flash Writing");
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <main+0x11fc>)
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <main+0x1200>)
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa6:	c407      	stmia	r4!, {r0, r1, r2}
 8001fa8:	8023      	strh	r3, [r4, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8001faa:	4925      	ldr	r1, [pc, #148]	; (8002040 <main+0x11fc>)
 8001fac:	204e      	movs	r0, #78	; 0x4e
 8001fae:	f7fe fefe 	bl	8000dae <LCD_SendString>

					// set address to 0x40
					LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001fb2:	21c0      	movs	r1, #192	; 0xc0
 8001fb4:	204e      	movs	r0, #78	; 0x4e
 8001fb6:	f7fe feb9 	bl	8000d2c <LCD_SendCommand>
					LCD_SendString(LCD_ADDR, "Wait for a Sec");
 8001fba:	4923      	ldr	r1, [pc, #140]	; (8002048 <main+0x1204>)
 8001fbc:	204e      	movs	r0, #78	; 0x4e
 8001fbe:	f7fe fef6 	bl	8000dae <LCD_SendString>

					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					uint32_t DATA_32 = ((uint32_t)0x00000001);
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
					uint32_t ADDR_FLASH_SECTOR = ADDR_FLASH_SECTOR_3;
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <main+0x1208>)
 8001fca:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

					FlashWritingOne (ADDR_FLASH_SECTOR, DATA_32) ;
 8001fce:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8001fd2:	f8d7 05f0 	ldr.w	r0, [r7, #1520]	; 0x5f0
 8001fd6:	f7fe fcc3 	bl	8000960 <FlashWritingOne>


					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					InitFlag(0);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f8d6 	bl	800218c <InitFlag>
					printf("MODE3 APPLY\r\n");
 8001fe0:	481b      	ldr	r0, [pc, #108]	; (8002050 <main+0x120c>)
 8001fe2:	f006 fa45 	bl	8008470 <puts>
				}
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <main+0x11e0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <main+0x11e4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d0b4      	beq.n	8001f5e <main+0x111a>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 8001ff4:	2250      	movs	r2, #80	; 0x50
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4816      	ldr	r0, [pc, #88]	; (8002054 <main+0x1210>)
 8001ffa:	f006 f9ab 	bl	8008354 <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <main+0x1214>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4915      	ldr	r1, [pc, #84]	; (800205c <main+0x1218>)
 8002006:	4813      	ldr	r0, [pc, #76]	; (8002054 <main+0x1210>)
 8002008:	f006 fa3a 	bl	8008480 <siprintf>
	while (1) {
 800200c:	f7fe bf6a 	b.w	8000ee4 <main+0xa0>
 8002010:	200001b0 	.word	0x200001b0
 8002014:	20000224 	.word	0x20000224
 8002018:	200001b9 	.word	0x200001b9
 800201c:	200001ba 	.word	0x200001ba
 8002020:	200001bb 	.word	0x200001bb
 8002024:	2000017c 	.word	0x2000017c
 8002028:	200001a3 	.word	0x200001a3
 800202c:	200001a1 	.word	0x200001a1
 8002030:	20000180 	.word	0x20000180
 8002034:	200001a2 	.word	0x200001a2
 8002038:	080098b0 	.word	0x080098b0
 800203c:	20000184 	.word	0x20000184
 8002040:	20000190 	.word	0x20000190
 8002044:	080098bc 	.word	0x080098bc
 8002048:	080098cc 	.word	0x080098cc
 800204c:	0800c000 	.word	0x0800c000
 8002050:	080098dc 	.word	0x080098dc
 8002054:	20000238 	.word	0x20000238
 8002058:	200001b4 	.word	0x200001b4
 800205c:	080098ec 	.word	0x080098ec

08002060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
 8002064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	2230      	movs	r2, #48	; 0x30
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f006 f970 	bl	8008354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <SystemClock_Config+0xdc>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <SystemClock_Config+0xdc>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <SystemClock_Config+0xdc>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <SystemClock_Config+0xe0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <SystemClock_Config+0xe0>)
 80020aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <SystemClock_Config+0xe0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80020bc:	2306      	movs	r3, #6
 80020be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c8:	2310      	movs	r3, #16
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020cc:	2302      	movs	r3, #2
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020d4:	2308      	movs	r3, #8
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80020d8:	23b4      	movs	r3, #180	; 0xb4
 80020da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020dc:	2302      	movs	r3, #2
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020e0:	2304      	movs	r3, #4
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 ff95 	bl	8005018 <HAL_RCC_OscConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020f4:	f000 fabe 	bl	8002674 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020f8:	f002 ff3e 	bl	8004f78 <HAL_PWREx_EnableOverDrive>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002102:	f000 fab7 	bl	8002674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002106:	230f      	movs	r3, #15
 8002108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800210a:	2302      	movs	r3, #2
 800210c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002112:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2105      	movs	r1, #5
 8002124:	4618      	mov	r0, r3
 8002126:	f003 f9ef 	bl	8005508 <HAL_RCC_ClockConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002130:	f000 faa0 	bl	8002674 <Error_Handler>
  }
}
 8002134:	bf00      	nop
 8002136:	3750      	adds	r7, #80	; 0x50
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	40007000 	.word	0x40007000

08002144 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	2027      	movs	r0, #39	; 0x27
 800214e:	f001 fb74 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002152:	2027      	movs	r0, #39	; 0x27
 8002154:	f001 fb8d 	bl	8003872 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	2028      	movs	r0, #40	; 0x28
 800215e:	f001 fb6c 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002162:	2028      	movs	r0, #40	; 0x28
 8002164:	f001 fb85 	bl	8003872 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	201c      	movs	r0, #28
 800216e:	f001 fb64 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002172:	201c      	movs	r0, #28
 8002174:	f001 fb7d 	bl	8003872 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	201e      	movs	r0, #30
 800217e:	f001 fb5c 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002182:	201e      	movs	r0, #30
 8002184:	f001 fb75 	bl	8003872 <HAL_NVIC_EnableIRQ>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <InitFlag>:

/* USER CODE BEGIN 4 */
//init user button & LCD
void InitFlag(int num) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

	LCD_Init(LCD_ADDR);
 8002194:	204e      	movs	r0, #78	; 0x4e
 8002196:	f7fe fded 	bl	8000d74 <LCD_Init>
	apply_flag = 0;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <InitFlag+0x38>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
	get_time_apply = 0;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <InitFlag+0x3c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
	rising_edge = 0;
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <InitFlag+0x40>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
	falling_edge = 0;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <InitFlag+0x44>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
	mode = num;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <InitFlag+0x48>)
 80021b8:	701a      	strb	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000180 	.word	0x20000180
 80021c8:	20000184 	.word	0x20000184
 80021cc:	200001a1 	.word	0x200001a1
 80021d0:	200001a2 	.word	0x200001a2
 80021d4:	200001a3 	.word	0x200001a3

080021d8 <button_status>:
ADC_StatusTypeDef button_status(uint32_t value) {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

	if (value < 100)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b63      	cmp	r3, #99	; 0x63
 80021e4:	d801      	bhi.n	80021ea <button_status+0x12>
		return UP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	e029      	b.n	800223e <button_status+0x66>
	if (800 < value && value < 900)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80021f0:	d905      	bls.n	80021fe <button_status+0x26>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80021f8:	d201      	bcs.n	80021fe <button_status+0x26>
		return DOWN;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e01f      	b.n	800223e <button_status+0x66>
	if (1800 < value && value < 2000)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002204:	d905      	bls.n	8002212 <button_status+0x3a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800220c:	d201      	bcs.n	8002212 <button_status+0x3a>
		return LEFT;
 800220e:	2304      	movs	r3, #4
 8002210:	e015      	b.n	800223e <button_status+0x66>
	if (2800 < value && value < 3200)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002218:	d905      	bls.n	8002226 <button_status+0x4e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002220:	d201      	bcs.n	8002226 <button_status+0x4e>
		return RIGHT;
 8002222:	2305      	movs	r3, #5
 8002224:	e00b      	b.n	800223e <button_status+0x66>
	if (4000 < value && value < 5000)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800222c:	d906      	bls.n	800223c <button_status+0x64>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f241 3287 	movw	r2, #4999	; 0x1387
 8002234:	4293      	cmp	r3, r2
 8002236:	d801      	bhi.n	800223c <button_status+0x64>
		return SELECT;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <button_status+0x66>

	return NONE;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <screen>:

void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 800224c:	b084      	sub	sp, #16
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af02      	add	r7, sp, #8
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	f107 001c 	add.w	r0, r7, #28
 800225a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <screen+0x78>)
 800226a:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 800226c:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 800226e:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8002270:	7f7b      	ldrb	r3, [r7, #29]
 8002272:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8002274:	9101      	str	r1, [sp, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	4913      	ldr	r1, [pc, #76]	; (80022c8 <screen+0x7c>)
 800227c:	4813      	ldr	r0, [pc, #76]	; (80022cc <screen+0x80>)
 800227e:	f006 f8ff 	bl	8008480 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8002282:	21c0      	movs	r1, #192	; 0xc0
 8002284:	204e      	movs	r0, #78	; 0x4e
 8002286:	f7fe fd51 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 800228a:	4910      	ldr	r1, [pc, #64]	; (80022cc <screen+0x80>)
 800228c:	204e      	movs	r0, #78	; 0x4e
 800228e:	f7fe fd8e 	bl	8000dae <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e006      	b.n	80022a6 <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8002298:	2110      	movs	r1, #16
 800229a:	204e      	movs	r0, #78	; 0x4e
 800229c:	f7fe fd46 	bl	8000d2c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3301      	adds	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1c3 030b 	rsb	r3, r3, #11
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbf2      	blt.n	8002298 <screen+0x4c>
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022be:	b004      	add	sp, #16
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	080097a0 	.word	0x080097a0
 80022cc:	200001e8 	.word	0x200001e8

080022d0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 80022da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022de:	481d      	ldr	r0, [pc, #116]	; (8002354 <HAL_GPIO_EXTI_Callback+0x84>)
 80022e0:	f002 f826 	bl	8004330 <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d114      	bne.n	8002314 <HAL_GPIO_EXTI_Callback+0x44>
		rising_edge++;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_GPIO_EXTI_Callback+0x88>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_GPIO_EXTI_Callback+0x88>)
 80022f4:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_GPIO_EXTI_Callback+0x88>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4817      	ldr	r0, [pc, #92]	; (800235c <HAL_GPIO_EXTI_Callback+0x8c>)
 80022fe:	f006 f831 	bl	8008364 <iprintf>
		if (rising_edge == 1) {
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_GPIO_EXTI_Callback+0x88>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d104      	bne.n	8002314 <HAL_GPIO_EXTI_Callback+0x44>
			start_tick = HAL_GetTick();
 800230a:	f000 fe07 	bl	8002f1c <HAL_GetTick>
 800230e:	4603      	mov	r3, r0
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_GPIO_EXTI_Callback+0x90>)
 8002312:	6013      	str	r3, [r2, #0]
		}
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	480e      	ldr	r0, [pc, #56]	; (8002354 <HAL_GPIO_EXTI_Callback+0x84>)
 800231a:	f002 f809 	bl	8004330 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <HAL_GPIO_EXTI_Callback+0x7c>
		if (rising_edge == 0) {
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_GPIO_EXTI_Callback+0x88>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_GPIO_EXTI_Callback+0x64>
			falling_edge = 0;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_GPIO_EXTI_Callback+0x94>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e005      	b.n	8002340 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			falling_edge++;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_GPIO_EXTI_Callback+0x94>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_GPIO_EXTI_Callback+0x94>)
 800233e:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_GPIO_EXTI_Callback+0x94>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4808      	ldr	r0, [pc, #32]	; (8002368 <HAL_GPIO_EXTI_Callback+0x98>)
 8002348:	f006 f80c 	bl	8008364 <iprintf>
	}

}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40020800 	.word	0x40020800
 8002358:	200001a1 	.word	0x200001a1
 800235c:	08009ed8 	.word	0x08009ed8
 8002360:	200001a4 	.word	0x200001a4
 8002364:	200001a2 	.word	0x200001a2
 8002368:	08009eec 	.word	0x08009eec

0800236c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d175      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0xfe>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 800237e:	4843      	ldr	r0, [pc, #268]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002380:	f000 ff45 	bl	800320e <HAL_ADC_GetValue>
 8002384:	4603      	mov	r3, r0
 8002386:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002388:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800238a:	4840      	ldr	r0, [pc, #256]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800238c:	f000 ff0c 	bl	80031a8 <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff1f 	bl	80021d8 <button_status>
 800239a:	4603      	mov	r3, r0
 800239c:	2b02      	cmp	r3, #2
 800239e:	d10b      	bne.n	80023b8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023aa:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4839      	ldr	r0, [pc, #228]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80023b4:	f005 ffd6 	bl	8008364 <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff0b 	bl	80021d8 <button_status>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d10b      	bne.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b32      	ldr	r3, [pc, #200]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80023d2:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4831      	ldr	r0, [pc, #196]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80023dc:	f005 ffc2 	bl	8008364 <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fef7 	bl	80021d8 <button_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d10b      	bne.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80023fa:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	4829      	ldr	r0, [pc, #164]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002404:	f005 ffae 	bl	8008364 <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fee3 	bl	80021d8 <button_status>
 8002412:	4603      	mov	r3, r0
 8002414:	2b05      	cmp	r3, #5
 8002416:	d10b      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x140>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002422:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	4821      	ldr	r0, [pc, #132]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800242c:	f005 ff9a 	bl	8008364 <iprintf>
		}

		if (apply_flag > 0) {
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_TIM_PeriodElapsedCallback+0xd6>
			get_time_apply++;
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002440:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_TIM_PeriodElapsedCallback+0xe8>
			get_time_exit++;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002452:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800245c:	6013      	str	r3, [r2, #0]
		printf("%d\r\n", get_time);
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4818      	ldr	r0, [pc, #96]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002466:	f005 ff7d 	bl	8008364 <iprintf>
	}

	if (htim->Instance == TIM4) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d107      	bne.n	8002484 <HAL_TIM_PeriodElapsedCallback+0x118>
		count_bit++;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800247c:	6013      	str	r3, [r2, #0]
		flag_bit_1ms = 1;
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
	}

}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000094 	.word	0x20000094
 8002490:	200001b4 	.word	0x200001b4
 8002494:	200001b8 	.word	0x200001b8
 8002498:	08009f00 	.word	0x08009f00
 800249c:	200001b9 	.word	0x200001b9
 80024a0:	08009f0c 	.word	0x08009f0c
 80024a4:	200001ba 	.word	0x200001ba
 80024a8:	08009f18 	.word	0x08009f18
 80024ac:	200001bb 	.word	0x200001bb
 80024b0:	08009f24 	.word	0x08009f24
 80024b4:	20000180 	.word	0x20000180
 80024b8:	20000184 	.word	0x20000184
 80024bc:	20000188 	.word	0x20000188
 80024c0:	2000018c 	.word	0x2000018c
 80024c4:	2000017c 	.word	0x2000017c
 80024c8:	080098ec 	.word	0x080098ec
 80024cc:	40000800 	.word	0x40000800
 80024d0:	20000160 	.word	0x20000160
 80024d4:	20000164 	.word	0x20000164

080024d8 <note>:

void note(char pitch_text, char octave_text, char temp_text, int time, int volume) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	460b      	mov	r3, r1
 80024e6:	71bb      	strb	r3, [r7, #6]
 80024e8:	4613      	mov	r3, r2
 80024ea:	717b      	strb	r3, [r7, #5]

	if (flag_bit_1ms == 1) {
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <note+0xc4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d14e      	bne.n	8002592 <note+0xba>
		int pitch = pitch_change(pitch_text);
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f858 	bl	80025ac <pitch_change>
 80024fc:	4603      	mov	r3, r0
 80024fe:	61fb      	str	r3, [r7, #28]
		int octave = octave_change(octave_text);
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f88d 	bl	8002622 <octave_change>
 8002508:	4603      	mov	r3, r0
 800250a:	613b      	str	r3, [r7, #16]
		int temp = temp_change(temp_text);
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f894 	bl	800263c <temp_change>
 8002514:	4603      	mov	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

		// avoid error(ARR == CCR)
		if (volume <= 2) {
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2b02      	cmp	r3, #2
 800251c:	dc01      	bgt.n	8002522 <note+0x4a>
			volume = 2;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// setting the octave
		if (octave != 4) {
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d022      	beq.n	800256e <note+0x96>
			if (octave < 4) {
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b03      	cmp	r3, #3
 800252c:	dc0f      	bgt.n	800254e <note+0x76>
				for (int i = 0; i < 4 - octave; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e005      	b.n	8002540 <note+0x68>
					pitch *= 2;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < 4 - octave; i++) {
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3301      	adds	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f1c3 0304 	rsb	r3, r3, #4
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf3      	blt.n	8002534 <note+0x5c>
 800254c:	e00f      	b.n	800256e <note+0x96>
				}
			} else {
				for (int i = 0; i < octave - 4; i++) {
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e007      	b.n	8002564 <note+0x8c>
					pitch /= 2;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	0fda      	lsrs	r2, r3, #31
 8002558:	4413      	add	r3, r2
 800255a:	105b      	asrs	r3, r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < octave - 4; i++) {
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3301      	adds	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3b04      	subs	r3, #4
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbf2      	blt.n	8002554 <note+0x7c>
				}
			}
		}

		TIM3->ARR = pitch;
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <note+0xc8>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c
		pitch_search = pitch;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <note+0xcc>)
 8002578:	6013      	str	r3, [r2, #0]
		volume_search = volume;
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <note+0xd0>)
 800257e:	6013      	str	r3, [r2, #0]
		TIM3->CCR3 = pitch / volume;
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	fb92 f2f3 	sdiv	r2, r2, r3
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <note+0xc8>)
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c

		flag_bit_1ms = 0;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <note+0xc4>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
	}
}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000164 	.word	0x20000164
 80025a0:	40000400 	.word	0x40000400
 80025a4:	20000158 	.word	0x20000158
 80025a8:	2000015c 	.word	0x2000015c

080025ac <pitch_change>:
uint32_t pitch_change (char pitch_text) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b4e      	cmp	r3, #78	; 0x4e
 80025ba:	d101      	bne.n	80025c0 <pitch_change+0x14>
		return N;
 80025bc:	2300      	movs	r3, #0
 80025be:	e02a      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'C') {
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b43      	cmp	r3, #67	; 0x43
 80025c4:	d102      	bne.n	80025cc <pitch_change+0x20>
		return C;
 80025c6:	f642 53f2 	movw	r3, #11762	; 0x2df2
 80025ca:	e024      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'D') {
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b44      	cmp	r3, #68	; 0x44
 80025d0:	d102      	bne.n	80025d8 <pitch_change+0x2c>
		return D;
 80025d2:	f642 03e5 	movw	r3, #10469	; 0x28e5
 80025d6:	e01e      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'E') {
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2b45      	cmp	r3, #69	; 0x45
 80025dc:	d102      	bne.n	80025e4 <pitch_change+0x38>
		return E;
 80025de:	f242 4366 	movw	r3, #9318	; 0x2466
 80025e2:	e018      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'F') {
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2b46      	cmp	r3, #70	; 0x46
 80025e8:	d102      	bne.n	80025f0 <pitch_change+0x44>
		return F;
 80025ea:	f242 2357 	movw	r3, #8791	; 0x2257
 80025ee:	e012      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'G') {
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b47      	cmp	r3, #71	; 0x47
 80025f4:	d102      	bne.n	80025fc <pitch_change+0x50>
		return G;
 80025f6:	f641 6391 	movw	r3, #7825	; 0x1e91
 80025fa:	e00c      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'A') {
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b41      	cmp	r3, #65	; 0x41
 8002600:	d102      	bne.n	8002608 <pitch_change+0x5c>
		return A;
 8002602:	f641 3336 	movw	r3, #6966	; 0x1b36
 8002606:	e006      	b.n	8002616 <pitch_change+0x6a>
	}
	else if (pitch_text == 'B') {
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b42      	cmp	r3, #66	; 0x42
 800260c:	d102      	bne.n	8002614 <pitch_change+0x68>
		return B;
 800260e:	f641 0338 	movw	r3, #6200	; 0x1838
 8002612:	e000      	b.n	8002616 <pitch_change+0x6a>
	}
	else {
		return N;
 8002614:	2300      	movs	r3, #0
	}
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <octave_change>:
uint32_t octave_change (char octave_text) {
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	3b30      	subs	r3, #48	; 0x30
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <temp_change>:
uint32_t temp_change (char temp_text) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b4e      	cmp	r3, #78	; 0x4e
 800264a:	d101      	bne.n	8002650 <temp_change+0x14>
		return 0;
 800264c:	2300      	movs	r3, #0
 800264e:	e00b      	b.n	8002668 <temp_change+0x2c>
	}
	else if (temp_text == 'S') {
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b53      	cmp	r3, #83	; 0x53
 8002654:	d101      	bne.n	800265a <temp_change+0x1e>
		return 1;
 8002656:	2301      	movs	r3, #1
 8002658:	e006      	b.n	8002668 <temp_change+0x2c>
	}
	else if (temp_text == 'F') {
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b46      	cmp	r3, #70	; 0x46
 800265e:	d102      	bne.n	8002666 <temp_change+0x2a>
		return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e000      	b.n	8002668 <temp_change+0x2c>
	}
	else {
		return 0;
 8002666:	2300      	movs	r3, #0
	}
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800267c:	e7fe      	b.n	800267c <Error_Handler+0x8>
	...

08002680 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002694:	2300      	movs	r3, #0
 8002696:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <MX_RTC_Init+0xb0>)
 800269a:	4a26      	ldr	r2, [pc, #152]	; (8002734 <MX_RTC_Init+0xb4>)
 800269c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <MX_RTC_Init+0xb0>)
 80026a0:	2240      	movs	r2, #64	; 0x40
 80026a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_RTC_Init+0xb0>)
 80026a6:	227f      	movs	r2, #127	; 0x7f
 80026a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_RTC_Init+0xb0>)
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_RTC_Init+0xb0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_RTC_Init+0xb0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_RTC_Init+0xb0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026c2:	481b      	ldr	r0, [pc, #108]	; (8002730 <MX_RTC_Init+0xb0>)
 80026c4:	f003 fac0 	bl	8005c48 <HAL_RTC_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80026ce:	f7ff ffd1 	bl	8002674 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80026de:	2301      	movs	r3, #1
 80026e0:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	480f      	ldr	r0, [pc, #60]	; (8002730 <MX_RTC_Init+0xb0>)
 80026f2:	f003 fb1f 	bl	8005d34 <HAL_RTC_SetTime>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80026fc:	f7ff ffba 	bl	8002674 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002700:	2301      	movs	r3, #1
 8002702:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002704:	2301      	movs	r3, #1
 8002706:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002708:	2301      	movs	r3, #1
 800270a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002710:	463b      	mov	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_RTC_Init+0xb0>)
 8002718:	f003 fc04 	bl	8005f24 <HAL_RTC_SetDate>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002722:	f7ff ffa7 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000288 	.word	0x20000288
 8002734:	40002800 	.word	0x40002800

08002738 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	2230      	movs	r2, #48	; 0x30
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f005 fe03 	bl	8008354 <memset>
  if(rtcHandle->Instance==RTC)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <HAL_RTC_MspInit+0x4c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002758:	2320      	movs	r3, #32
 800275a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800275c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4618      	mov	r0, r3
 8002768:	f003 f8ae 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002772:	f7ff ff7f 	bl	8002674 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_RTC_MspInit+0x50>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800277c:	bf00      	nop
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40002800 	.word	0x40002800
 8002788:	42470e3c 	.word	0x42470e3c

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_MspInit+0x4c>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <HAL_MspInit+0x4c>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6453      	str	r3, [r2, #68]	; 0x44
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_MspInit+0x4c>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_MspInit+0x4c>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_MspInit+0x4c>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_MspInit+0x4c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <NMI_Handler+0x4>

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 fb64 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <TIM2_IRQHandler+0x10>)
 8002836:	f003 fee7 	bl	8006608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200002ac 	.word	0x200002ac

08002844 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIM4_IRQHandler+0x10>)
 800284a:	f003 fedd 	bl	8006608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000033c 	.word	0x2000033c

08002858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <USART3_IRQHandler+0x10>)
 800285e:	f004 fe0d 	bl	800747c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000384 	.word	0x20000384

0800286c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002870:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002874:	f001 fd74 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e00a      	b.n	80028a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288e:	f3af 8000 	nop.w
 8002892:	4601      	mov	r1, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbf0      	blt.n	800288e <_read+0x12>
	}

return len;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e009      	b.n	80028dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	60ba      	str	r2, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe faa5 	bl	8000e20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf1      	blt.n	80028c8 <_write+0x12>
	}
	return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_close>:

int _close(int file)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	return -1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002916:	605a      	str	r2, [r3, #4]
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_isatty>:

int _isatty(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	return 1;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	return 0;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <_sbrk+0x5c>)
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_sbrk+0x60>)
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_sbrk+0x64>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <_sbrk+0x68>)
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002988:	f005 fcac 	bl	80082e4 <__errno>
 800298c:	4603      	mov	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e009      	b.n	80029ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_sbrk+0x64>)
 80029a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20030000 	.word	0x20030000
 80029b8:	00000400 	.word	0x00000400
 80029bc:	200002a8 	.word	0x200002a8
 80029c0:	20000400 	.word	0x20000400

080029c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <SystemInit+0x20>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <SystemInit+0x20>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a0e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a16:	2210      	movs	r2, #16
 8002a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a1c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a30:	f003 fc08 	bl	8006244 <HAL_TIM_Base_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a3a:	f7ff fe1b 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480d      	ldr	r0, [pc, #52]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a4c:	f003 ffa6 	bl	800699c <HAL_TIM_ConfigClockSource>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a56:	f7ff fe0d 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	4619      	mov	r1, r3
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <MX_TIM2_Init+0x98>)
 8002a68:	f004 fb98 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a72:	f7ff fdff 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200002ac 	.word	0x200002ac

08002a84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */

  htim3.Instance = TIM3;
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <MX_TIM3_Init+0xe8>)
 8002ab8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002abc:	221d      	movs	r2, #29
 8002abe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002ac8:	f641 0238 	movw	r2, #6200	; 0x1838
 8002acc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad4:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ada:	4823      	ldr	r0, [pc, #140]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002adc:	f003 fbb2 	bl	8006244 <HAL_TIM_Base_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ae6:	f7ff fdc5 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af4:	4619      	mov	r1, r3
 8002af6:	481c      	ldr	r0, [pc, #112]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002af8:	f003 ff50 	bl	800699c <HAL_TIM_ConfigClockSource>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b02:	f7ff fdb7 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b06:	4818      	ldr	r0, [pc, #96]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002b08:	f003 fc5c 	bl	80063c4 <HAL_TIM_PWM_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b12:	f7ff fdaf 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b16:	2320      	movs	r3, #32
 8002b18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b1e:	f107 0320 	add.w	r3, r7, #32
 8002b22:	4619      	mov	r1, r3
 8002b24:	4810      	ldr	r0, [pc, #64]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002b26:	f004 fb39 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b30:	f7ff fda0 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b34:	2360      	movs	r3, #96	; 0x60
 8002b36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2208      	movs	r2, #8
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4807      	ldr	r0, [pc, #28]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002b4c:	f003 fe64 	bl	8006818 <HAL_TIM_PWM_ConfigChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b56:	f7ff fd8d 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b5a:	4803      	ldr	r0, [pc, #12]	; (8002b68 <MX_TIM3_Init+0xe4>)
 8002b5c:	f000 f8a2 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 8002b60:	bf00      	nop
 8002b62:	3738      	adds	r7, #56	; 0x38
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200002f4 	.word	0x200002f4
 8002b6c:	40000400 	.word	0x40000400

08002b70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b84:	463b      	mov	r3, r7
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <MX_TIM4_Init+0x98>)
 8002b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002ba0:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bb2:	4814      	ldr	r0, [pc, #80]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bb4:	f003 fb46 	bl	8006244 <HAL_TIM_Base_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002bbe:	f7ff fd59 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bd0:	f003 fee4 	bl	800699c <HAL_TIM_ConfigClockSource>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002bda:	f7ff fd4b 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002be6:	463b      	mov	r3, r7
 8002be8:	4619      	mov	r1, r3
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bec:	f004 fad6 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002bf6:	f7ff fd3d 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000033c 	.word	0x2000033c
 8002c08:	40000800 	.word	0x40000800

08002c0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c3a:	e026      	b.n	8002c8a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_TIM_Base_MspInit+0x90>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
}
 8002c62:	e012      	b.n	8002c8a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_TIM_Base_MspInit+0x94>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_TIM_Base_MspInit+0x8c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_TIM_MspPostInit+0x68>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d11d      	bne.n	8002d02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4805      	ldr	r0, [pc, #20]	; (8002d14 <HAL_TIM_MspPostInit+0x70>)
 8002cfe:	f001 f96b 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020400 	.word	0x40020400

08002d18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <MX_USART3_UART_Init+0x50>)
 8002d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d3e:	220c      	movs	r2, #12
 8002d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_USART3_UART_Init+0x4c>)
 8002d50:	f004 fab4 	bl	80072bc <HAL_UART_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d5a:	f7ff fc8b 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000384 	.word	0x20000384
 8002d68:	40004800 	.word	0x40004800

08002d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_UART_MspInit+0x8c>)
 8002de4:	f001 f8f8 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40004800 	.word	0x40004800
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e18:	4c0b      	ldr	r4, [pc, #44]	; (8002e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e26:	f7ff fdcd 	bl	80029c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2a:	f005 fa61 	bl	80082f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2e:	f7fe f809 	bl	8000e44 <main>
  bx  lr    
 8002e32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002e40:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8002e44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e48:	200003fc 	.word	0x200003fc

08002e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_Init+0x40>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_Init+0x40>)
 8002e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_Init+0x40>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 fcd3 	bl	8003824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	200f      	movs	r0, #15
 8002e80:	f000 f808 	bl	8002e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff fc82 	bl	800278c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_InitTick+0x54>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fceb 	bl	800388e <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00e      	b.n	8002ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d80a      	bhi.n	8002ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 fcb3 	bl	800383a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <HAL_InitTick+0x5c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_IncTick+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_IncTick+0x24>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000010 	.word	0x20000010
 8002f18:	200003c8 	.word	0x200003c8

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200003c8 	.word	0x200003c8

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000010 	.word	0x20000010

08002f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e033      	b.n	8002ffa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fb64 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fc2:	f023 0302 	bic.w	r3, r3, #2
 8002fc6:	f043 0202 	orr.w	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa5c 	bl	800348c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fea:	e001      	b.n	8002ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADC_Start+0x1a>
 800301a:	2302      	movs	r3, #2
 800301c:	e0b2      	b.n	8003184 <HAL_ADC_Start+0x180>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d018      	beq.n	8003066 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003044:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_ADC_Start+0x18c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_ADC_Start+0x190>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9a      	lsrs	r2, r3, #18
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003058:	e002      	b.n	8003060 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3b01      	subs	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f9      	bne.n	800305a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d17a      	bne.n	800316a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800309e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	d106      	bne.n	80030c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f023 0206 	bic.w	r2, r3, #6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
 80030c0:	e002      	b.n	80030c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_ADC_Start+0x194>)
 80030d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d12a      	bne.n	8003140 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_ADC_Start+0x198>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d015      	beq.n	8003120 <HAL_ADC_Start+0x11c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_ADC_Start+0x19c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d105      	bne.n	800310a <HAL_ADC_Start+0x106>
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_ADC_Start+0x194>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <HAL_ADC_Start+0x1a0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d136      	bne.n	8003182 <HAL_ADC_Start+0x17e>
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_ADC_Start+0x194>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d130      	bne.n	8003182 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d129      	bne.n	8003182 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e020      	b.n	8003182 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <HAL_ADC_Start+0x198>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d11b      	bne.n	8003182 <HAL_ADC_Start+0x17e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d114      	bne.n	8003182 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e00b      	b.n	8003182 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	20000008 	.word	0x20000008
 8003194:	431bde83 	.word	0x431bde83
 8003198:	40012300 	.word	0x40012300
 800319c:	40012000 	.word	0x40012000
 80031a0:	40012100 	.word	0x40012100
 80031a4:	40012200 	.word	0x40012200

080031a8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Stop+0x16>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e021      	b.n	8003202 <HAL_ADC_Stop+0x5a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x1c>
 8003240:	2302      	movs	r3, #2
 8003242:	e113      	b.n	800346c <HAL_ADC_ConfigChannel+0x244>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b09      	cmp	r3, #9
 8003252:	d925      	bls.n	80032a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	3b1e      	subs	r3, #30
 800326a:	2207      	movs	r2, #7
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43da      	mvns	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	400a      	ands	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68d9      	ldr	r1, [r3, #12]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	4603      	mov	r3, r0
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4403      	add	r3, r0
 8003292:	3b1e      	subs	r3, #30
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	e022      	b.n	80032e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	2207      	movs	r2, #7
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	400a      	ands	r2, r1
 80032c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4403      	add	r3, r0
 80032dc:	409a      	lsls	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d824      	bhi.n	8003338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	3b05      	subs	r3, #5
 8003300:	221f      	movs	r2, #31
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	400a      	ands	r2, r1
 800330e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	4618      	mov	r0, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	3b05      	subs	r3, #5
 800332a:	fa00 f203 	lsl.w	r2, r0, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	e04c      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d824      	bhi.n	800338a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b23      	subs	r3, #35	; 0x23
 8003352:	221f      	movs	r2, #31
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43da      	mvns	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	400a      	ands	r2, r1
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b23      	subs	r3, #35	; 0x23
 800337c:	fa00 f203 	lsl.w	r2, r0, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
 8003388:	e023      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b41      	subs	r3, #65	; 0x41
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b41      	subs	r3, #65	; 0x41
 80033c6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_ADC_ConfigChannel+0x250>)
 80033d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_ADC_ConfigChannel+0x254>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10f      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d8>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d10b      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_ADC_ConfigChannel+0x254>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d12b      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x23a>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_ADC_ConfigChannel+0x258>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <HAL_ADC_ConfigChannel+0x1f4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b11      	cmp	r3, #17
 800341a:	d122      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_ADC_ConfigChannel+0x258>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_ADC_ConfigChannel+0x25c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_ADC_ConfigChannel+0x260>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	0c9a      	lsrs	r2, r3, #18
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003454:	e002      	b.n	800345c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3b01      	subs	r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f9      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40012300 	.word	0x40012300
 800347c:	40012000 	.word	0x40012000
 8003480:	10000012 	.word	0x10000012
 8003484:	20000008 	.word	0x20000008
 8003488:	431bde83 	.word	0x431bde83

0800348c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003494:	4b79      	ldr	r3, [pc, #484]	; (800367c <ADC_Init+0x1f0>)
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <ADC_Init+0x1f4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	e00f      	b.n	800358a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0202 	bic.w	r2, r2, #2
 8003598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e1b      	ldrb	r3, [r3, #24]
 80035a4:	005a      	lsls	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	3b01      	subs	r3, #1
 80035e4:	035a      	lsls	r2, r3, #13
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e007      	b.n	8003600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	3b01      	subs	r3, #1
 800361c:	051a      	lsls	r2, r3, #20
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6899      	ldr	r1, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003642:	025a      	lsls	r2, r3, #9
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	029a      	lsls	r2, r3, #10
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40012300 	.word	0x40012300
 8003680:	0f000001 	.word	0x0f000001

08003684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	60d3      	str	r3, [r2, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <__NVIC_GetPriorityGrouping+0x18>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	f003 0307 	and.w	r3, r3, #7
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db0b      	blt.n	8003712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4907      	ldr	r1, [pc, #28]	; (8003720 <__NVIC_EnableIRQ+0x38>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	; (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	; (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf28      	it	cs
 8003796:	2304      	movcs	r3, #4
 8003798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3304      	adds	r3, #4
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d902      	bls.n	80037a8 <NVIC_EncodePriority+0x30>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b03      	subs	r3, #3
 80037a6:	e000      	b.n	80037aa <NVIC_EncodePriority+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	4313      	orrs	r3, r2
         );
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f0:	d301      	bcc.n	80037f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00f      	b.n	8003816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <SysTick_Config+0x40>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fe:	210f      	movs	r1, #15
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f7ff ff8e 	bl	8003724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SysTick_Config+0x40>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <SysTick_Config+0x40>)
 8003810:	2207      	movs	r2, #7
 8003812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000e010 	.word	0xe000e010

08003824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff29 	bl	8003684 <__NVIC_SetPriorityGrouping>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800384c:	f7ff ff3e 	bl	80036cc <__NVIC_GetPriorityGrouping>
 8003850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff ff8e 	bl	8003778 <NVIC_EncodePriority>
 800385c:	4602      	mov	r2, r0
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff5d 	bl	8003724 <__NVIC_SetPriority>
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff31 	bl	80036e8 <__NVIC_EnableIRQ>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffa2 	bl	80037e0 <SysTick_Config>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff fb32 	bl	8002f1c <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d008      	beq.n	80038d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e052      	b.n	800397e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0216 	bic.w	r2, r2, #22
 80038e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_DMA_Abort+0x62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0208 	bic.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003928:	e013      	b.n	8003952 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392a:	f7ff faf7 	bl	8002f1c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b05      	cmp	r3, #5
 8003936:	d90c      	bls.n	8003952 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2203      	movs	r2, #3
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e015      	b.n	800397e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e4      	bne.n	800392a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	223f      	movs	r2, #63	; 0x3f
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e00c      	b.n	80039be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2205      	movs	r2, #5
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_FLASH_Program+0xa0>)
 80039e0:	7e1b      	ldrb	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_FLASH_Program+0x1e>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e03b      	b.n	8003a62 <HAL_FLASH_Program+0x96>
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_FLASH_Program+0xa0>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039f4:	f000 f870 	bl	8003ad8 <FLASH_WaitForLastOperation>
 80039f8:	4603      	mov	r3, r0
 80039fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12b      	bne.n	8003a5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a08:	783b      	ldrb	r3, [r7, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	68b8      	ldr	r0, [r7, #8]
 8003a0e:	f000 f91b 	bl	8003c48 <FLASH_Program_Byte>
 8003a12:	e016      	b.n	8003a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a1a:	883b      	ldrh	r3, [r7, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	68b8      	ldr	r0, [r7, #8]
 8003a20:	f000 f8ee 	bl	8003c00 <FLASH_Program_HalfWord>
 8003a24:	e00d      	b.n	8003a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d105      	bne.n	8003a38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f000 f8c3 	bl	8003bbc <FLASH_Program_Word>
 8003a36:	e004      	b.n	8003a42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f000 f88b 	bl	8003b58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a46:	f000 f847 	bl	8003ad8 <FLASH_WaitForLastOperation>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_FLASH_Program+0xa4>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_FLASH_Program+0xa4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <HAL_FLASH_Program+0xa0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003cc 	.word	0x200003cc
 8003a70:	40023c00 	.word	0x40023c00

08003a74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_FLASH_Unlock+0x38>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da0b      	bge.n	8003a9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_FLASH_Unlock+0x38>)
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_FLASH_Unlock+0x3c>)
 8003a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_FLASH_Unlock+0x38>)
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_FLASH_Unlock+0x40>)
 8003a90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_FLASH_Unlock+0x38>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da01      	bge.n	8003a9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	45670123 	.word	0x45670123
 8003ab4:	cdef89ab 	.word	0xcdef89ab

08003ab8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_FLASH_Lock+0x1c>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_FLASH_Lock+0x1c>)
 8003ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <FLASH_WaitForLastOperation+0x78>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7ff fa17 	bl	8002f1c <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003af0:	e010      	b.n	8003b14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d00c      	beq.n	8003b14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <FLASH_WaitForLastOperation+0x38>
 8003b00:	f7ff fa0c 	bl	8002f1c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d201      	bcs.n	8003b14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e019      	b.n	8003b48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <FLASH_WaitForLastOperation+0x7c>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e8      	bne.n	8003af2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <FLASH_WaitForLastOperation+0x7c>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <FLASH_WaitForLastOperation+0x7c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <FLASH_WaitForLastOperation+0x7c>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b3e:	f000 f8a5 	bl	8003c8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
  
}  
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200003cc 	.word	0x200003cc
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <FLASH_Program_DoubleWord+0x60>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003b8e:	f3bf 8f6f 	isb	sy
}
 8003b92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	000a      	movs	r2, r1
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	3104      	adds	r1, #4
 8003ba8:	4613      	mov	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <FLASH_Program_Word+0x40>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	601a      	str	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40023c00 	.word	0x40023c00

08003c00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <FLASH_Program_HalfWord+0x44>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	801a      	strh	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023c00 	.word	0x40023c00

08003c48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <FLASH_Program_Byte+0x40>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	701a      	strb	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00

08003c8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003ca6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003caa:	2210      	movs	r2, #16
 8003cac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f043 0308 	orr.w	r3, r3, #8
 8003cc2:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003cc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003cc8:	2220      	movs	r2, #32
 8003cca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003ce2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003ce6:	2240      	movs	r2, #64	; 0x40
 8003ce8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003cea:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f043 0302 	orr.w	r3, r3, #2
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003d00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003d1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f043 0320 	orr.w	r3, r3, #32
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <FLASH_SetErrorCode+0xc8>)
 8003d3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <FLASH_SetErrorCode+0xc4>)
 8003d42:	2202      	movs	r2, #2
 8003d44:	60da      	str	r2, [r3, #12]
  }
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	200003cc 	.word	0x200003cc

08003d58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_FLASHEx_Erase+0xdc>)
 8003d6c:	7e1b      	ldrb	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_FLASHEx_Erase+0x1e>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e05a      	b.n	8003e2c <HAL_FLASHEx_Erase+0xd4>
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_FLASHEx_Erase+0xdc>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d80:	f7ff feaa 	bl	8003ad8 <FLASH_WaitForLastOperation>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d14a      	bne.n	8003e24 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d117      	bne.n	8003dce <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f000 f846 	bl	8003e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003db4:	f7ff fe90 	bl	8003ad8 <FLASH_WaitForLastOperation>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_FLASHEx_Erase+0xe0>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_FLASHEx_Erase+0xe0>)
 8003dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	6113      	str	r3, [r2, #16]
 8003dcc:	e028      	b.n	8003e20 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	e01c      	b.n	8003e10 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68b8      	ldr	r0, [r7, #8]
 8003de0:	f000 f866 	bl	8003eb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de8:	f7ff fe76 	bl	8003ad8 <FLASH_WaitForLastOperation>
 8003dec:	4603      	mov	r3, r0
 8003dee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_FLASHEx_Erase+0xe0>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_FLASHEx_Erase+0xe0>)
 8003df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003dfa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	601a      	str	r2, [r3, #0]
          break;
 8003e08:	e00a      	b.n	8003e20 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4413      	add	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3da      	bcc.n	8003dd6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e20:	f000 f894 	bl	8003f4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_FLASHEx_Erase+0xdc>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	761a      	strb	r2, [r3, #24]

  return status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	200003cc 	.word	0x200003cc
 8003e38:	40023c00 	.word	0x40023c00

08003e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <FLASH_MassErase+0x70>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <FLASH_MassErase+0x70>)
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d108      	bne.n	8003e6c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <FLASH_MassErase+0x70>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <FLASH_MassErase+0x70>)
 8003e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6113      	str	r3, [r2, #16]
 8003e6a:	e00f      	b.n	8003e8c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <FLASH_MassErase+0x70>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <FLASH_MassErase+0x70>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	6113      	str	r3, [r2, #16]
 8003e7e:	e005      	b.n	8003e8c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <FLASH_MassErase+0x70>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <FLASH_MassErase+0x70>)
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <FLASH_MassErase+0x70>)
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4313      	orrs	r3, r2
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <FLASH_MassErase+0x70>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9c:	6113      	str	r3, [r2, #16]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023c00 	.word	0x40023c00

08003eb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e010      	b.n	8003eee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d103      	bne.n	8003eda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e009      	b.n	8003eee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d103      	bne.n	8003ee8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e002      	b.n	8003eee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b0b      	cmp	r3, #11
 8003ef2:	d902      	bls.n	8003efa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	490f      	ldr	r1, [pc, #60]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <FLASH_Erase_Sector+0x98>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	6113      	str	r3, [r2, #16]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40023c00 	.word	0x40023c00

08003f4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003f68:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <FLASH_FlushCaches+0x88>)
 8003fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc6:	6013      	str	r3, [r2, #0]
  }
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e177      	b.n	80042e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	f040 8166 	bne.w	80042de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d005      	beq.n	800402a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004026:	2b02      	cmp	r3, #2
 8004028:	d130      	bne.n	800408c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0201 	and.w	r2, r3, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b03      	cmp	r3, #3
 8004096:	d017      	beq.n	80040c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d123      	bne.n	800411c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	08da      	lsrs	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3208      	adds	r2, #8
 80040dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	220f      	movs	r2, #15
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	08da      	lsrs	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3208      	adds	r2, #8
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80c0 	beq.w	80042de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b66      	ldr	r3, [pc, #408]	; (80042fc <HAL_GPIO_Init+0x324>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	4a65      	ldr	r2, [pc, #404]	; (80042fc <HAL_GPIO_Init+0x324>)
 8004168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_GPIO_Init+0x324>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417a:	4a61      	ldr	r2, [pc, #388]	; (8004300 <HAL_GPIO_Init+0x328>)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <HAL_GPIO_Init+0x32c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d037      	beq.n	8004216 <HAL_GPIO_Init+0x23e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_GPIO_Init+0x330>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_GPIO_Init+0x23a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a56      	ldr	r2, [pc, #344]	; (800430c <HAL_GPIO_Init+0x334>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02b      	beq.n	800420e <HAL_GPIO_Init+0x236>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a55      	ldr	r2, [pc, #340]	; (8004310 <HAL_GPIO_Init+0x338>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d025      	beq.n	800420a <HAL_GPIO_Init+0x232>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a54      	ldr	r2, [pc, #336]	; (8004314 <HAL_GPIO_Init+0x33c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01f      	beq.n	8004206 <HAL_GPIO_Init+0x22e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a53      	ldr	r2, [pc, #332]	; (8004318 <HAL_GPIO_Init+0x340>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d019      	beq.n	8004202 <HAL_GPIO_Init+0x22a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_GPIO_Init+0x344>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_GPIO_Init+0x226>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a51      	ldr	r2, [pc, #324]	; (8004320 <HAL_GPIO_Init+0x348>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00d      	beq.n	80041fa <HAL_GPIO_Init+0x222>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a50      	ldr	r2, [pc, #320]	; (8004324 <HAL_GPIO_Init+0x34c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <HAL_GPIO_Init+0x21e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4f      	ldr	r2, [pc, #316]	; (8004328 <HAL_GPIO_Init+0x350>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_GPIO_Init+0x21a>
 80041ee:	2309      	movs	r3, #9
 80041f0:	e012      	b.n	8004218 <HAL_GPIO_Init+0x240>
 80041f2:	230a      	movs	r3, #10
 80041f4:	e010      	b.n	8004218 <HAL_GPIO_Init+0x240>
 80041f6:	2308      	movs	r3, #8
 80041f8:	e00e      	b.n	8004218 <HAL_GPIO_Init+0x240>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e00c      	b.n	8004218 <HAL_GPIO_Init+0x240>
 80041fe:	2306      	movs	r3, #6
 8004200:	e00a      	b.n	8004218 <HAL_GPIO_Init+0x240>
 8004202:	2305      	movs	r3, #5
 8004204:	e008      	b.n	8004218 <HAL_GPIO_Init+0x240>
 8004206:	2304      	movs	r3, #4
 8004208:	e006      	b.n	8004218 <HAL_GPIO_Init+0x240>
 800420a:	2303      	movs	r3, #3
 800420c:	e004      	b.n	8004218 <HAL_GPIO_Init+0x240>
 800420e:	2302      	movs	r3, #2
 8004210:	e002      	b.n	8004218 <HAL_GPIO_Init+0x240>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_GPIO_Init+0x240>
 8004216:	2300      	movs	r3, #0
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	f002 0203 	and.w	r2, r2, #3
 800421e:	0092      	lsls	r2, r2, #2
 8004220:	4093      	lsls	r3, r2
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004228:	4935      	ldr	r1, [pc, #212]	; (8004300 <HAL_GPIO_Init+0x328>)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004236:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_GPIO_Init+0x354>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425a:	4a34      	ldr	r2, [pc, #208]	; (800432c <HAL_GPIO_Init+0x354>)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_GPIO_Init+0x354>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <HAL_GPIO_Init+0x354>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_GPIO_Init+0x354>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_GPIO_Init+0x354>)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_GPIO_Init+0x354>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_GPIO_Init+0x354>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	f67f ae84 	bls.w	8003ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	40013800 	.word	0x40013800
 8004304:	40020000 	.word	0x40020000
 8004308:	40020400 	.word	0x40020400
 800430c:	40020800 	.word	0x40020800
 8004310:	40020c00 	.word	0x40020c00
 8004314:	40021000 	.word	0x40021000
 8004318:	40021400 	.word	0x40021400
 800431c:	40021800 	.word	0x40021800
 8004320:	40021c00 	.word	0x40021c00
 8004324:	40022000 	.word	0x40022000
 8004328:	40022400 	.word	0x40022400
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e001      	b.n	8004352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004376:	4a05      	ldr	r2, [pc, #20]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd ffa6 	bl	80022d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e12b      	b.n	80045fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fbac 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f4:	f001 fa40 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a81      	ldr	r2, [pc, #516]	; (8004604 <HAL_I2C_Init+0x274>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d807      	bhi.n	8004414 <HAL_I2C_Init+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a80      	ldr	r2, [pc, #512]	; (8004608 <HAL_I2C_Init+0x278>)
 8004408:	4293      	cmp	r3, r2
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e006      	b.n	8004422 <HAL_I2C_Init+0x92>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_I2C_Init+0x27c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	bf94      	ite	ls
 800441c:	2301      	movls	r3, #1
 800441e:	2300      	movhi	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0e7      	b.n	80045fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a78      	ldr	r2, [pc, #480]	; (8004610 <HAL_I2C_Init+0x280>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_I2C_Init+0x274>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d802      	bhi.n	8004464 <HAL_I2C_Init+0xd4>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	e009      	b.n	8004478 <HAL_I2C_Init+0xe8>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	4a69      	ldr	r2, [pc, #420]	; (8004614 <HAL_I2C_Init+0x284>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	3301      	adds	r3, #1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800448a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	495c      	ldr	r1, [pc, #368]	; (8004604 <HAL_I2C_Init+0x274>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d819      	bhi.n	80044cc <HAL_I2C_Init+0x13c>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e59      	subs	r1, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044ac:	400b      	ands	r3, r1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_I2C_Init+0x138>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e59      	subs	r1, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	e051      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044c8:	2304      	movs	r3, #4
 80044ca:	e04f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d111      	bne.n	80044f8 <HAL_I2C_Init+0x168>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e58      	subs	r0, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e012      	b.n	800451e <HAL_I2C_Init+0x18e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e58      	subs	r0, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	0099      	lsls	r1, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	fbb0 f3f3 	udiv	r3, r0, r3
 800450e:	3301      	adds	r3, #1
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Init+0x196>
 8004522:	2301      	movs	r3, #1
 8004524:	e022      	b.n	800456c <HAL_I2C_Init+0x1dc>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10e      	bne.n	800454c <HAL_I2C_Init+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e58      	subs	r0, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	440b      	add	r3, r1
 800453c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004540:	3301      	adds	r3, #1
 8004542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	e00f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	0099      	lsls	r1, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	6809      	ldr	r1, [r1, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800459a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6911      	ldr	r1, [r2, #16]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68d2      	ldr	r2, [r2, #12]
 80045a6:	4311      	orrs	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	000186a0 	.word	0x000186a0
 8004608:	001e847f 	.word	0x001e847f
 800460c:	003d08ff 	.word	0x003d08ff
 8004610:	431bde83 	.word	0x431bde83
 8004614:	10624dd3 	.word	0x10624dd3

08004618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	460b      	mov	r3, r1
 8004626:	817b      	strh	r3, [r7, #10]
 8004628:	4613      	mov	r3, r2
 800462a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fe fc76 	bl	8002f1c <HAL_GetTick>
 8004630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 80e0 	bne.w	8004800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	4970      	ldr	r1, [pc, #448]	; (800480c <HAL_I2C_Master_Transmit+0x1f4>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa92 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
 8004658:	e0d3      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_I2C_Master_Transmit+0x50>
 8004664:	2302      	movs	r3, #2
 8004666:	e0cc      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d007      	beq.n	800468e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2221      	movs	r2, #33	; 0x21
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	893a      	ldrh	r2, [r7, #8]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a50      	ldr	r2, [pc, #320]	; (8004810 <HAL_I2C_Master_Transmit+0x1f8>)
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f9ca 	bl	8004a70 <I2C_MasterRequestWrite>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e08d      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046fc:	e066      	b.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fb0c 	bl	8004d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b04      	cmp	r3, #4
 8004714:	d107      	bne.n	8004726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d11b      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fafc 	bl	8004da2 <I2C_WaitOnBTFFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01a      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d194      	bne.n	80046fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	00100002 	.word	0x00100002
 8004810:	ffff0000 	.word	0xffff0000

08004814 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004824:	f7fe fb7a 	bl	8002f1c <HAL_GetTick>
 8004828:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	f040 8111 	bne.w	8004a5e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2319      	movs	r3, #25
 8004842:	2201      	movs	r2, #1
 8004844:	4988      	ldr	r1, [pc, #544]	; (8004a68 <HAL_I2C_IsDeviceReady+0x254>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f994 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
 8004854:	e104      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_I2C_IsDeviceReady+0x50>
 8004860:	2302      	movs	r3, #2
 8004862:	e0fd      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d007      	beq.n	800488a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004898:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2224      	movs	r2, #36	; 0x24
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a70      	ldr	r2, [pc, #448]	; (8004a6c <HAL_I2C_IsDeviceReady+0x258>)
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f952 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d103      	bne.n	80048ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0b6      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004900:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004902:	f7fe fb0b 	bl	8002f1c <HAL_GetTick>
 8004906:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004936:	e025      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fe faf0 	bl	8002f1c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <HAL_I2C_IsDeviceReady+0x13a>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22a0      	movs	r2, #160	; 0xa0
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2ba0      	cmp	r3, #160	; 0xa0
 800498e:	d005      	beq.n	800499c <HAL_I2C_IsDeviceReady+0x188>
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_I2C_IsDeviceReady+0x188>
 8004996:	7dbb      	ldrb	r3, [r7, #22]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0cd      	beq.n	8004938 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d129      	bne.n	8004a06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2319      	movs	r3, #25
 80049de:	2201      	movs	r2, #1
 80049e0:	4921      	ldr	r1, [pc, #132]	; (8004a68 <HAL_I2C_IsDeviceReady+0x254>)
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f8c6 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e036      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e02c      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2319      	movs	r3, #25
 8004a26:	2201      	movs	r2, #1
 8004a28:	490f      	ldr	r1, [pc, #60]	; (8004a68 <HAL_I2C_IsDeviceReady+0x254>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f8a2 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e012      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	f4ff af32 	bcc.w	80048ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00100002 	.word	0x00100002
 8004a6c:	ffff0000 	.word	0xffff0000

08004a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d006      	beq.n	8004a9a <I2C_MasterRequestWrite+0x2a>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d003      	beq.n	8004a9a <I2C_MasterRequestWrite+0x2a>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a98:	d108      	bne.n	8004aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e00b      	b.n	8004ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b12      	cmp	r3, #18
 8004ab2:	d107      	bne.n	8004ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f84f 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aea:	d103      	bne.n	8004af4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e035      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b00:	d108      	bne.n	8004b14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b10:	611a      	str	r2, [r3, #16]
 8004b12:	e01b      	b.n	8004b4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030f 	orn	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <I2C_MasterRequestWrite+0xfc>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f875 	bl	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e010      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b42:	897b      	ldrh	r3, [r7, #10]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4907      	ldr	r1, [pc, #28]	; (8004b70 <I2C_MasterRequestWrite+0x100>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f865 	bl	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010008 	.word	0x00010008
 8004b70:	00010002 	.word	0x00010002

08004b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b84:	e025      	b.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d021      	beq.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fe f9c5 	bl	8002f1c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d116      	bne.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e023      	b.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10d      	bne.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	e00c      	b.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d0b6      	beq.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c30:	e051      	b.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c40:	d123      	bne.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e046      	b.n	8004d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d021      	beq.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe f943 	bl	8002f1c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e020      	b.n	8004d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10c      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e00b      	b.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d18d      	bne.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d2c:	e02d      	b.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f878 	bl	8004e24 <I2C_IsAcknowledgeFailed>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e02d      	b.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d021      	beq.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fe f8e9 	bl	8002f1c <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e007      	b.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d1ca      	bne.n	8004d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dae:	e02d      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f837 	bl	8004e24 <I2C_IsAcknowledgeFailed>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e02d      	b.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d021      	beq.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc8:	f7fe f8a8 	bl	8002f1c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e007      	b.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d1ca      	bne.n	8004db0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	d11b      	bne.n	8004e74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0204 	orr.w	r2, r3, #4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d129      	bne.n	8004eec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0210 	bic.w	r2, r2, #16
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e000      	b.n	8004eee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
  }
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d12a      	bne.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	f023 030f 	bic.w	r3, r3, #15
 8004f3a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	89fa      	ldrh	r2, [r7, #14]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_PWREx_EnableOverDrive+0x94>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa4:	f7fd ffba 	bl	8002f1c <HAL_GetTick>
 8004fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004faa:	e009      	b.n	8004fc0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fac:	f7fd ffb6 	bl	8002f1c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fba:	d901      	bls.n	8004fc0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e01f      	b.n	8005000 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d1ee      	bne.n	8004fac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fd4:	f7fd ffa2 	bl	8002f1c <HAL_GetTick>
 8004fd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fda:	e009      	b.n	8004ff0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fdc:	f7fd ff9e 	bl	8002f1c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fea:	d901      	bls.n	8004ff0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e007      	b.n	8005000 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffc:	d1ee      	bne.n	8004fdc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	420e0040 	.word	0x420e0040
 8005010:	40007000 	.word	0x40007000
 8005014:	420e0044 	.word	0x420e0044

08005018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e267      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d075      	beq.n	8005122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b04      	cmp	r3, #4
 8005040:	d00c      	beq.n	800505c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b85      	ldr	r3, [pc, #532]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504a:	2b08      	cmp	r3, #8
 800504c:	d112      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b82      	ldr	r3, [pc, #520]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b7e      	ldr	r3, [pc, #504]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <HAL_RCC_OscConfig+0x108>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e242      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x74>
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e01d      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x98>
 8005096:	4b70      	ldr	r3, [pc, #448]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6f      	ldr	r2, [pc, #444]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b6d      	ldr	r3, [pc, #436]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6c      	ldr	r2, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 80050b0:	4b69      	ldr	r3, [pc, #420]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a68      	ldr	r2, [pc, #416]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a65      	ldr	r2, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d013      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fd ff24 	bl	8002f1c <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd ff20 	bl	8002f1c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e207      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0xc0>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd ff10 	bl	8002f1c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005100:	f7fd ff0c 	bl	8002f1c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e1f3      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	4b51      	ldr	r3, [pc, #324]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0xe8>
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d063      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800512e:	4b4a      	ldr	r3, [pc, #296]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005142:	2b08      	cmp	r3, #8
 8005144:	d11c      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b44      	ldr	r3, [pc, #272]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	4b41      	ldr	r3, [pc, #260]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e1c7      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4937      	ldr	r1, [pc, #220]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	; (800525c <HAL_RCC_OscConfig+0x244>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fd fec5 	bl	8002f1c <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005196:	f7fd fec1 	bl	8002f1c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e1a8      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4925      	ldr	r1, [pc, #148]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_RCC_OscConfig+0x244>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fd fea4 	bl	8002f1c <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fd fea0 	bl	8002f1c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e187      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <HAL_RCC_OscConfig+0x248>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fd fe84 	bl	8002f1c <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005218:	f7fd fe80 	bl	8002f1c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e167      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x200>
 8005236:	e01b      	b.n	8005270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_RCC_OscConfig+0x248>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f7fd fe6d 	bl	8002f1c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	e00e      	b.n	8005264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005246:	f7fd fe69 	bl	8002f1c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e150      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8097 	beq.w	80053ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b81      	ldr	r3, [pc, #516]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a7c      	ldr	r2, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b77      	ldr	r3, [pc, #476]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b74      	ldr	r3, [pc, #464]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a73      	ldr	r2, [pc, #460]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fd fe29 	bl	8002f1c <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fd fe25 	bl	8002f1c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e10c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x2ea>
 80052f4:	4b64      	ldr	r3, [pc, #400]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a63      	ldr	r2, [pc, #396]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x30c>
 800530a:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a5e      	ldr	r2, [pc, #376]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a5b      	ldr	r2, [pc, #364]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005324:	4b58      	ldr	r3, [pc, #352]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	; 0x70
 8005330:	4b55      	ldr	r3, [pc, #340]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a54      	ldr	r2, [pc, #336]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fd fdea 	bl	8002f1c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fd fde6 	bl	8002f1c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0cb      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	4b49      	ldr	r3, [pc, #292]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x334>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fd fdd4 	bl	8002f1c <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fd fdd0 	bl	8002f1c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0b5      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	4a38      	ldr	r2, [pc, #224]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a1 	beq.w	80054f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b6:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d05c      	beq.n	800547c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d141      	bne.n	800544e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fd fda4 	bl	8002f1c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fd fda0 	bl	8002f1c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e087      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	491b      	ldr	r1, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fd fd79 	bl	8002f1c <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542e:	f7fd fd75 	bl	8002f1c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e05c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x416>
 800544c:	e054      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd fd62 	bl	8002f1c <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545c:	f7fd fd5e 	bl	8002f1c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e045      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x444>
 800547a:	e03d      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e038      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005488:	40023800 	.word	0x40023800
 800548c:	40007000 	.word	0x40007000
 8005490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x4ec>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d028      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d121      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0cc      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d90c      	bls.n	8005544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0b8      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a58      	ldr	r2, [pc, #352]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a52      	ldr	r2, [pc, #328]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800557e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b50      	ldr	r3, [pc, #320]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	494d      	ldr	r1, [pc, #308]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d044      	beq.n	8005628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d119      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e067      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4934      	ldr	r1, [pc, #208]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f8:	f7fd fc90 	bl	8002f1c <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fd fc8c 	bl	8002f1c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e04f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20c      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e032      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4916      	ldr	r1, [pc, #88]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568e:	f000 f821 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490a      	ldr	r1, [pc, #40]	; (80056c8 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fd fbf0 	bl	8002e94 <HAL_InitTick>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023c00 	.word	0x40023c00
 80056c4:	40023800 	.word	0x40023800
 80056c8:	08009f34 	.word	0x08009f34
 80056cc:	20000008 	.word	0x20000008
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b090      	sub	sp, #64	; 0x40
 80056da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	2300      	movs	r3, #0
 80056e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d00d      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x40>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	f200 80a1 	bhi.w	8005840 <HAL_RCC_GetSysClockFreq+0x16c>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x34>
 8005702:	2b04      	cmp	r3, #4
 8005704:	d003      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x3a>
 8005706:	e09b      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b53      	ldr	r3, [pc, #332]	; (8005858 <HAL_RCC_GetSysClockFreq+0x184>)
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800570c:	e09b      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570e:	4b53      	ldr	r3, [pc, #332]	; (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 8005710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005712:	e098      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005714:	4b4f      	ldr	r3, [pc, #316]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571e:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d028      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572a:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	2200      	movs	r2, #0
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	627a      	str	r2, [r7, #36]	; 0x24
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800573c:	2100      	movs	r1, #0
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 8005740:	fb03 f201 	mul.w	r2, r3, r1
 8005744:	2300      	movs	r3, #0
 8005746:	fb00 f303 	mul.w	r3, r0, r3
 800574a:	4413      	add	r3, r2
 800574c:	4a43      	ldr	r2, [pc, #268]	; (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 800574e:	fba0 1202 	umull	r1, r2, r0, r2
 8005752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005754:	460a      	mov	r2, r1
 8005756:	62ba      	str	r2, [r7, #40]	; 0x28
 8005758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575a:	4413      	add	r3, r2
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	2200      	movs	r2, #0
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	61fa      	str	r2, [r7, #28]
 8005766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800576a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800576e:	f7fa fda7 	bl	80002c0 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4613      	mov	r3, r2
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800577a:	e053      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577c:	4b35      	ldr	r3, [pc, #212]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	2200      	movs	r2, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	617a      	str	r2, [r7, #20]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800578e:	f04f 0b00 	mov.w	fp, #0
 8005792:	4652      	mov	r2, sl
 8005794:	465b      	mov	r3, fp
 8005796:	f04f 0000 	mov.w	r0, #0
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	0159      	lsls	r1, r3, #5
 80057a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a4:	0150      	lsls	r0, r2, #5
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	ebb2 080a 	subs.w	r8, r2, sl
 80057ae:	eb63 090b 	sbc.w	r9, r3, fp
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057c6:	ebb2 0408 	subs.w	r4, r2, r8
 80057ca:	eb63 0509 	sbc.w	r5, r3, r9
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	00eb      	lsls	r3, r5, #3
 80057d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057dc:	00e2      	lsls	r2, r4, #3
 80057de:	4614      	mov	r4, r2
 80057e0:	461d      	mov	r5, r3
 80057e2:	eb14 030a 	adds.w	r3, r4, sl
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	eb45 030b 	adc.w	r3, r5, fp
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057fa:	4629      	mov	r1, r5
 80057fc:	028b      	lsls	r3, r1, #10
 80057fe:	4621      	mov	r1, r4
 8005800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005804:	4621      	mov	r1, r4
 8005806:	028a      	lsls	r2, r1, #10
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	2200      	movs	r2, #0
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005818:	f7fa fd52 	bl	80002c0 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	3301      	adds	r3, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800583e:	e002      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCC_GetSysClockFreq+0x184>)
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005848:	4618      	mov	r0, r3
 800584a:	3740      	adds	r7, #64	; 0x40
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	00f42400 	.word	0x00f42400
 800585c:	017d7840 	.word	0x017d7840

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000008 	.word	0x20000008

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800587c:	f7ff fff0 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0a9b      	lsrs	r3, r3, #10
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	08009f44 	.word	0x08009f44

080058a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058a4:	f7ff ffdc 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0b5b      	lsrs	r3, r3, #13
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4903      	ldr	r1, [pc, #12]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40023800 	.word	0x40023800
 80058c4:	08009f44 	.word	0x08009f44

080058c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d075      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058fc:	4b91      	ldr	r3, [pc, #580]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005902:	f7fd fb0b 	bl	8002f1c <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005908:	e008      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800590a:	f7fd fb07 	bl	8002f1c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e189      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	019a      	lsls	r2, r3, #6
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	071b      	lsls	r3, r3, #28
 8005940:	4981      	ldr	r1, [pc, #516]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01f      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005954:	4b7c      	ldr	r3, [pc, #496]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	019a      	lsls	r2, r3, #6
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	431a      	orrs	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	4974      	ldr	r1, [pc, #464]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800597c:	4b72      	ldr	r3, [pc, #456]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005982:	f023 021f 	bic.w	r2, r3, #31
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	3b01      	subs	r3, #1
 800598c:	496e      	ldr	r1, [pc, #440]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	019a      	lsls	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	071b      	lsls	r3, r3, #28
 80059b4:	4964      	ldr	r1, [pc, #400]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059bc:	4b61      	ldr	r3, [pc, #388]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c2:	f7fd faab 	bl	8002f1c <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ca:	f7fd faa7 	bl	8002f1c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e129      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059dc:	4b5a      	ldr	r3, [pc, #360]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d079      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a00:	4b52      	ldr	r3, [pc, #328]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a06:	f7fd fa89 	bl	8002f1c <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a0e:	f7fd fa85 	bl	8002f1c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e107      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a20:	4b49      	ldr	r3, [pc, #292]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2c:	d0ef      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d020      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a3a:	4b43      	ldr	r3, [pc, #268]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	0f1b      	lsrs	r3, r3, #28
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	019a      	lsls	r2, r3, #6
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	431a      	orrs	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	071b      	lsls	r3, r3, #28
 8005a5a:	493b      	ldr	r1, [pc, #236]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a62:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	4934      	ldr	r1, [pc, #208]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a88:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	0e1b      	lsrs	r3, r3, #24
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	019a      	lsls	r2, r3, #6
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	071b      	lsls	r3, r3, #28
 8005aa8:	4927      	ldr	r1, [pc, #156]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	4922      	ldr	r1, [pc, #136]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fd fa26 	bl	8002f1c <HAL_GetTick>
 8005ad0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ad4:	f7fd fa22 	bl	8002f1c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e0a4      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ae6:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af2:	d1ef      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 808b 	beq.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	4a0f      	ldr	r2, [pc, #60]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b10:	6413      	str	r3, [r2, #64]	; 0x40
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a0b      	ldr	r2, [pc, #44]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2a:	f7fd f9f7 	bl	8002f1c <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b30:	e010      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b32:	f7fd f9f3 	bl	8002f1c <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d909      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e075      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b44:	42470068 	.word	0x42470068
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	42470070 	.word	0x42470070
 8005b50:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b54:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0e8      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b60:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02f      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b7e:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b88:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b8e:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b94:	4a29      	ldr	r2, [pc, #164]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b9a:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d114      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ba6:	f7fd f9b9 	bl	8002f1c <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fd f9b5 	bl	8002f1c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e035      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0ee      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bdc:	d10d      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005bde:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf2:	4912      	ldr	r1, [pc, #72]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	608b      	str	r3, [r1, #8]
 8005bf8:	e005      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4a0f      	ldr	r2, [pc, #60]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c04:	6093      	str	r3, [r2, #8]
 8005c06:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c12:	490a      	ldr	r1, [pc, #40]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c2c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40007000 	.word	0x40007000
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	42470e40 	.word	0x42470e40
 8005c44:	424711e0 	.word	0x424711e0

08005c48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e066      	b.n	8005d2c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7f5b      	ldrb	r3, [r3, #29]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fc fd62 	bl	8002738 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	22ca      	movs	r2, #202	; 0xca
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2253      	movs	r2, #83	; 0x53
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa45 	bl	800611a <RTC_EnterInitMode>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d12c      	bne.n	8005cf4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6899      	ldr	r1, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	68d2      	ldr	r2, [r2, #12]
 8005cd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6919      	ldr	r1, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	041a      	lsls	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa4c 	bl	8006188 <RTC_ExitInitMode>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	7f1b      	ldrb	r3, [r3, #28]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_RTC_SetTime+0x1c>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e087      	b.n	8005e60 <HAL_RTC_SetTime+0x12c>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d126      	bne.n	8005db0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fa29 	bl	80061d2 <RTC_ByteToBcd2>
 8005d80:	4603      	mov	r3, r0
 8005d82:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fa22 	bl	80061d2 <RTC_ByteToBcd2>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d92:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	789b      	ldrb	r3, [r3, #2]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa1a 	bl	80061d2 <RTC_ByteToBcd2>
 8005d9e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005da0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	78db      	ldrb	r3, [r3, #3]
 8005da8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e018      	b.n	8005de2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dd0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dd6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	22ca      	movs	r2, #202	; 0xca
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2253      	movs	r2, #83	; 0x53
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f991 	bl	800611a <RTC_EnterInitMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d120      	bne.n	8005e44 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e0c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e10:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6899      	ldr	r1, [r3, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f9a4 	bl	8006188 <RTC_ExitInitMode>
 8005e40:	4603      	mov	r3, r0
 8005e42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	771a      	strb	r2, [r3, #28]

  return status;
 8005e5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd90      	pop	{r4, r7, pc}

08005e68 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	0d9b      	lsrs	r3, r3, #22
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d11a      	bne.n	8005f1a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 f98f 	bl	800620c <RTC_Bcd2ToByte>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f986 	bl	800620c <RTC_Bcd2ToByte>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	789b      	ldrb	r3, [r3, #2]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f97d 	bl	800620c <RTC_Bcd2ToByte>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	7f1b      	ldrb	r3, [r3, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_RTC_SetDate+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e071      	b.n	8006024 <HAL_RTC_SetDate+0x100>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <HAL_RTC_SetDate+0x4c>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	330a      	adds	r3, #10
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11c      	bne.n	8005fb0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f929 	bl	80061d2 <RTC_ByteToBcd2>
 8005f80:	4603      	mov	r3, r0
 8005f82:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f922 	bl	80061d2 <RTC_ByteToBcd2>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f92:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	789b      	ldrb	r3, [r3, #2]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f91a 	bl	80061d2 <RTC_ByteToBcd2>
 8005f9e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fa0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e00e      	b.n	8005fce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fbc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005fc2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	22ca      	movs	r2, #202	; 0xca
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2253      	movs	r2, #83	; 0x53
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f89b 	bl	800611a <RTC_EnterInitMode>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10c      	bne.n	8006008 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ffc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f8c2 	bl	8006188 <RTC_ExitInitMode>
 8006004:	4603      	mov	r3, r0
 8006006:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006008:	7cfb      	ldrb	r3, [r7, #19]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	771a      	strb	r2, [r3, #28]

  return status;
 8006022:	7cfb      	ldrb	r3, [r7, #19]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	bd90      	pop	{r4, r7, pc}

0800602c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800604a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	0b5b      	lsrs	r3, r3, #13
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11a      	bne.n	80060c0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 f8bc 	bl	800620c <RTC_Bcd2ToByte>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 f8b3 	bl	800620c <RTC_Bcd2ToByte>
 80060a6:	4603      	mov	r3, r0
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	789b      	ldrb	r3, [r3, #2]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f8aa 	bl	800620c <RTC_Bcd2ToByte>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060e4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060e6:	f7fc ff19 	bl	8002f1c <HAL_GetTick>
 80060ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060ec:	e009      	b.n	8006102 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060ee:	f7fc ff15 	bl	8002f1c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060fc:	d901      	bls.n	8006102 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e007      	b.n	8006112 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0ee      	beq.n	80060ee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d122      	bne.n	800617e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006146:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006148:	f7fc fee8 	bl	8002f1c <HAL_GetTick>
 800614c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800614e:	e00c      	b.n	800616a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006150:	f7fc fee4 	bl	8002f1c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615e:	d904      	bls.n	800616a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2204      	movs	r2, #4
 8006164:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <RTC_EnterInitMode+0x64>
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d1e8      	bne.n	8006150 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff ff89 	bl	80060ca <HAL_RTC_WaitForSynchro>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4603      	mov	r3, r0
 80061da:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80061e0:	e005      	b.n	80061ee <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	3301      	adds	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	3b0a      	subs	r3, #10
 80061ec:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b09      	cmp	r3, #9
 80061f2:	d8f6      	bhi.n	80061e2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	4413      	add	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	b2da      	uxtb	r2, r3
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	4413      	add	r3, r2
 8006236:	b2db      	uxtb	r3, r3
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e041      	b.n	80062da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fc fcce 	bl	8002c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f000 fc7a 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e04e      	b.n	800639a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d01d      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_TIM_Base_Start_IT+0xc8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d111      	bne.n	8006388 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b06      	cmp	r3, #6
 8006374:	d010      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0201 	orr.w	r2, r2, #1
 8006384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006386:	e007      	b.n	8006398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40001800 	.word	0x40001800

080063c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e041      	b.n	800645a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f839 	bl	8006462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 fbba 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_TIM_PWM_Start+0x24>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e022      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d109      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x3e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e015      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_PWM_Start+0x58>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e008      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07c      	b.n	80065e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Start+0x82>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	e013      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Start+0x92>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006508:	e00b      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Start+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	e003      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2201      	movs	r2, #1
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fe10 	bl	8007150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <HAL_TIM_PWM_Start+0x174>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_PWM_Start+0xcc>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <HAL_TIM_PWM_Start+0x178>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_TIM_PWM_Start+0xd0>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <HAL_TIM_PWM_Start+0xd2>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_TIM_PWM_Start+0x174>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d01d      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_TIM_PWM_Start+0x17c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <HAL_TIM_PWM_Start+0x180>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <HAL_TIM_PWM_Start+0x184>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIM_PWM_Start+0x178>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a18      	ldr	r2, [pc, #96]	; (8006600 <HAL_TIM_PWM_Start+0x188>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_TIM_PWM_Start+0x18c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d111      	bne.n	80065d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d010      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d0:	e007      	b.n	80065e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40000400 	.word	0x40000400
 80065f8:	40000800 	.word	0x40000800
 80065fc:	40000c00 	.word	0x40000c00
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0202 	mvn.w	r2, #2
 8006634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa77 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa69 	bl	8006b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa7a 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b04      	cmp	r3, #4
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0204 	mvn.w	r2, #4
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa4d 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa3f 	bl	8006b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa50 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d122      	bne.n	800670c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d11b      	bne.n	800670c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0208 	mvn.w	r2, #8
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa23 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa15 	bl	8006b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fa26 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d122      	bne.n	8006760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b10      	cmp	r3, #16
 8006726:	d11b      	bne.n	8006760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0210 	mvn.w	r2, #16
 8006730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2208      	movs	r2, #8
 8006736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9f9 	bl	8006b3e <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9eb 	bl	8006b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9fc 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	d10e      	bne.n	800678c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0201 	mvn.w	r2, #1
 8006784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fb fdf0 	bl	800236c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d10e      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d107      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd78 	bl	80072a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d10e      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d107      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9c1 	bl	8006b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d10e      	bne.n	8006810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d107      	bne.n	8006810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0220 	mvn.w	r2, #32
 8006808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fd42 	bl	8007294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006832:	2302      	movs	r3, #2
 8006834:	e0ae      	b.n	8006994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b0c      	cmp	r3, #12
 8006842:	f200 809f 	bhi.w	8006984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006881 	.word	0x08006881
 8006850:	08006985 	.word	0x08006985
 8006854:	08006985 	.word	0x08006985
 8006858:	08006985 	.word	0x08006985
 800685c:	080068c1 	.word	0x080068c1
 8006860:	08006985 	.word	0x08006985
 8006864:	08006985 	.word	0x08006985
 8006868:	08006985 	.word	0x08006985
 800686c:	08006903 	.word	0x08006903
 8006870:	08006985 	.word	0x08006985
 8006874:	08006985 	.word	0x08006985
 8006878:	08006985 	.word	0x08006985
 800687c:	08006943 	.word	0x08006943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fa18 	bl	8006cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6999      	ldr	r1, [r3, #24]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	619a      	str	r2, [r3, #24]
      break;
 80068be:	e064      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fa68 	bl	8006d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6999      	ldr	r1, [r3, #24]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	619a      	str	r2, [r3, #24]
      break;
 8006900:	e043      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fabd 	bl	8006e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0208 	orr.w	r2, r2, #8
 800691c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0204 	bic.w	r2, r2, #4
 800692c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69d9      	ldr	r1, [r3, #28]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	61da      	str	r2, [r3, #28]
      break;
 8006940:	e023      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fb11 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800695c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69d9      	ldr	r1, [r3, #28]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	021a      	lsls	r2, r3, #8
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	61da      	str	r2, [r3, #28]
      break;
 8006982:	e002      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
      break;
 8006988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_ConfigClockSource+0x1c>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0b4      	b.n	8006b22 <HAL_TIM_ConfigClockSource+0x186>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f0:	d03e      	beq.n	8006a70 <HAL_TIM_ConfigClockSource+0xd4>
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	f200 8087 	bhi.w	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	f000 8086 	beq.w	8006b0e <HAL_TIM_ConfigClockSource+0x172>
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d87f      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b70      	cmp	r3, #112	; 0x70
 8006a0a:	d01a      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0xa6>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d87b      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b60      	cmp	r3, #96	; 0x60
 8006a12:	d050      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d877      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a18:	2b50      	cmp	r3, #80	; 0x50
 8006a1a:	d03c      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0xfa>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d873      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d058      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d86f      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d064      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d86b      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d060      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d867      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d05c      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d05a      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a40:	e062      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f000 fb5d 	bl	8007110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	609a      	str	r2, [r3, #8]
      break;
 8006a6e:	e04f      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f000 fb46 	bl	8007110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a92:	609a      	str	r2, [r3, #8]
      break;
 8006a94:	e03c      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f000 faba 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2150      	movs	r1, #80	; 0x50
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fb13 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006ab4:	e02c      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 fad9 	bl	800707a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2160      	movs	r1, #96	; 0x60
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fb03 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e01c      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 fa9a 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 faf3 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006af4:	e00c      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f000 faea 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006b06:	e003      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0c:	e000      	b.n	8006b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d00f      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d027      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d023      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_Base_SetConfig+0x128>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <TIM_Base_SetConfig+0x12c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	; (8006cac <TIM_Base_SetConfig+0x130>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <TIM_Base_SetConfig+0x134>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <TIM_Base_SetConfig+0x138>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <TIM_Base_SetConfig+0x13c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d103      	bne.n	8006c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	615a      	str	r2, [r3, #20]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40010400 	.word	0x40010400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	40001c00 	.word	0x40001c00
 8006cb8:	40002000 	.word	0x40002000

08006cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC1_SetConfig+0x64>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d10c      	bne.n	8006d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0308 	bic.w	r3, r3, #8
 8006d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC1_SetConfig+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f023 0210 	bic.w	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a22      	ldr	r2, [pc, #136]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x68>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x94>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x92>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a12      	ldr	r2, [pc, #72]	; (8007014 <TIM_OC4_SetConfig+0xa4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <TIM_OC4_SetConfig+0xa8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0210 	bic.w	r2, r3, #16
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f043 0307 	orr.w	r3, r3, #7
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800712a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	431a      	orrs	r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	609a      	str	r2, [r3, #8]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 031f 	and.w	r3, r3, #31
 8007162:	2201      	movs	r2, #1
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	43db      	mvns	r3, r3
 8007172:	401a      	ands	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1a      	ldr	r2, [r3, #32]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	fa01 f303 	lsl.w	r3, r1, r3
 8007188:	431a      	orrs	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e05a      	b.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d01d      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1a      	ldr	r2, [pc, #104]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a18      	ldr	r2, [pc, #96]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a15      	ldr	r2, [pc, #84]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d10c      	bne.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40010400 	.word	0x40010400
 800728c:	40014000 	.word	0x40014000
 8007290:	40001800 	.word	0x40001800

08007294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e03f      	b.n	800734e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fb fd42 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fd7b 	bl	8007dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b08a      	sub	sp, #40	; 0x28
 800735a:	af02      	add	r7, sp, #8
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d17c      	bne.n	8007470 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_UART_Transmit+0x2c>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e075      	b.n	8007472 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_UART_Transmit+0x3e>
 8007390:	2302      	movs	r3, #2
 8007392:	e06e      	b.n	8007472 <HAL_UART_Transmit+0x11c>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2221      	movs	r2, #33	; 0x21
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073aa:	f7fb fdb7 	bl	8002f1c <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	88fa      	ldrh	r2, [r7, #6]
 80073ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c4:	d108      	bne.n	80073d8 <HAL_UART_Transmit+0x82>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	e003      	b.n	80073e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073e8:	e02a      	b.n	8007440 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 faf9 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e036      	b.n	8007472 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	3302      	adds	r3, #2
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e007      	b.n	8007432 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1cf      	bne.n	80073ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	2140      	movs	r1, #64	; 0x40
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fac9 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e006      	b.n	8007472 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b0ba      	sub	sp, #232	; 0xe8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <HAL_UART_IRQHandler+0x66>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fbd3 	bl	8007c86 <UART_Receive_IT>
      return;
 80074e0:	e256      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80de 	beq.w	80076a8 <HAL_UART_IRQHandler+0x22c>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80d1 	beq.w	80076a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <HAL_UART_IRQHandler+0xae>
 8007512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f043 0201 	orr.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_UART_IRQHandler+0xd2>
 8007536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_UART_IRQHandler+0xf6>
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0204 	orr.w	r2, r3, #4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d011      	beq.n	80075a2 <HAL_UART_IRQHandler+0x126>
 800757e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800758a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0208 	orr.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 81ed 	beq.w	8007986 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_UART_IRQHandler+0x14e>
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb5e 	bl	8007c86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <HAL_UART_IRQHandler+0x17a>
 80075ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d04f      	beq.n	8007696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa66 	bl	8007ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d141      	bne.n	800768e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3314      	adds	r3, #20
 8007610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3314      	adds	r3, #20
 8007632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007636:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800763a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800764e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1d9      	bne.n	800760a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	4a7d      	ldr	r2, [pc, #500]	; (8007858 <HAL_UART_IRQHandler+0x3dc>)
 8007664:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	4618      	mov	r0, r3
 800766c:	f7fc f98b 	bl	8003986 <HAL_DMA_Abort_IT>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d016      	beq.n	80076a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	e00e      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f99a 	bl	80079c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	e00a      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f996 	bl	80079c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e006      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f992 	bl	80079c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076a2:	e170      	b.n	8007986 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	bf00      	nop
    return;
 80076a6:	e16e      	b.n	8007986 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f040 814a 	bne.w	8007946 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8143 	beq.w	8007946 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 813c 	beq.w	8007946 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	f040 80b4 	bne.w	800785c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8140 	beq.w	800798a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800770e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007712:	429a      	cmp	r2, r3
 8007714:	f080 8139 	bcs.w	800798a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800771e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	f000 8088 	beq.w	800783e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800775a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800775e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d9      	bne.n	800772e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800778a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800779e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e1      	bne.n	800777a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800780c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007820:	65ba      	str	r2, [r7, #88]	; 0x58
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800782e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e3      	bne.n	80077fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	4618      	mov	r0, r3
 800783a:	f7fc f834 	bl	80038a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007846:	b29b      	uxth	r3, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	b29b      	uxth	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f8c0 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007854:	e099      	b.n	800798a <HAL_UART_IRQHandler+0x50e>
 8007856:	bf00      	nop
 8007858:	08007b8f 	.word	0x08007b8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007864:	b29b      	uxth	r3, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007870:	b29b      	uxth	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 808b 	beq.w	800798e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8086 	beq.w	800798e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078a6:	647a      	str	r2, [r7, #68]	; 0x44
 80078a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e3      	bne.n	8007882 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3314      	adds	r3, #20
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078de:	633a      	str	r2, [r7, #48]	; 0x30
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e3      	bne.n	80078ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0310 	bic.w	r3, r3, #16
 8007916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	330c      	adds	r3, #12
 8007920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007924:	61fa      	str	r2, [r7, #28]
 8007926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	69b9      	ldr	r1, [r7, #24]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	617b      	str	r3, [r7, #20]
   return(result);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e3      	bne.n	8007900 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f848 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007944:	e023      	b.n	800798e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_UART_IRQHandler+0x4ea>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f929 	bl	8007bb6 <UART_Transmit_IT>
    return;
 8007964:	e014      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <HAL_UART_IRQHandler+0x514>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f969 	bl	8007c56 <UART_EndTransmit_IT>
    return;
 8007984:	e004      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
    return;
 8007986:	bf00      	nop
 8007988:	e002      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
      return;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
      return;
 800798e:	bf00      	nop
  }
}
 8007990:	37e8      	adds	r7, #232	; 0xe8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop

08007998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b090      	sub	sp, #64	; 0x40
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	4613      	mov	r3, r2
 80079fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fc:	e050      	b.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d04c      	beq.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0c:	f7fb fa86 	bl	8002f1c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d241      	bcs.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3314      	adds	r3, #20
 8007a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a70:	623a      	str	r2, [r7, #32]
 8007a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e5      	bne.n	8007a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e00f      	b.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d09f      	beq.n	80079fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3740      	adds	r7, #64	; 0x40
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b095      	sub	sp, #84	; 0x54
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007af0:	643a      	str	r2, [r7, #64]	; 0x40
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3314      	adds	r3, #20
 8007b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f023 0310 	bic.w	r3, r3, #16
 8007b56:	647b      	str	r3, [r7, #68]	; 0x44
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b60:	61ba      	str	r2, [r7, #24]
 8007b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b82:	bf00      	nop
 8007b84:	3754      	adds	r7, #84	; 0x54
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff ff09 	bl	80079c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b21      	cmp	r3, #33	; 0x21
 8007bc8:	d13e      	bne.n	8007c48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd2:	d114      	bne.n	8007bfe <UART_Transmit_IT+0x48>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	621a      	str	r2, [r3, #32]
 8007bfc:	e008      	b.n	8007c10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6211      	str	r1, [r2, #32]
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10f      	bne.n	8007c44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fe8e 	bl	8007998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08c      	sub	sp, #48	; 0x30
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b22      	cmp	r3, #34	; 0x22
 8007c98:	f040 80ab 	bne.w	8007df2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca4:	d117      	bne.n	8007cd6 <UART_Receive_IT+0x50>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d113      	bne.n	8007cd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	1c9a      	adds	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007cd4:	e026      	b.n	8007d24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce8:	d007      	beq.n	8007cfa <UART_Receive_IT+0x74>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <UART_Receive_IT+0x82>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e008      	b.n	8007d1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d15a      	bne.n	8007dee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0220 	bic.w	r2, r2, #32
 8007d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0201 	bic.w	r2, r2, #1
 8007d66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d135      	bne.n	8007de4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9e:	623a      	str	r2, [r7, #32]
 8007da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	69f9      	ldr	r1, [r7, #28]
 8007da4:	6a3a      	ldr	r2, [r7, #32]
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d10a      	bne.n	8007dd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fdf9 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
 8007de2:	e002      	b.n	8007dea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fde1 	bl	80079ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e002      	b.n	8007df4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e000      	b.n	8007df4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007df2:	2302      	movs	r3, #2
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3730      	adds	r7, #48	; 0x30
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e00:	b0c0      	sub	sp, #256	; 0x100
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e18:	68d9      	ldr	r1, [r3, #12]
 8007e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	ea40 0301 	orr.w	r3, r0, r1
 8007e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e54:	f021 010c 	bic.w	r1, r1, #12
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e62:	430b      	orrs	r3, r1
 8007e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e76:	6999      	ldr	r1, [r3, #24]
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	ea40 0301 	orr.w	r3, r0, r1
 8007e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b8f      	ldr	r3, [pc, #572]	; (80080c8 <UART_SetConfig+0x2cc>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d005      	beq.n	8007e9c <UART_SetConfig+0xa0>
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b8d      	ldr	r3, [pc, #564]	; (80080cc <UART_SetConfig+0x2d0>)
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d104      	bne.n	8007ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e9c:	f7fd fd00 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 8007ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ea4:	e003      	b.n	8007eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ea6:	f7fd fce7 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8007eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb8:	f040 810c 	bne.w	80080d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ede:	4621      	mov	r1, r4
 8007ee0:	eb12 0801 	adds.w	r8, r2, r1
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	eb43 0901 	adc.w	r9, r3, r1
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007efe:	4690      	mov	r8, r2
 8007f00:	4699      	mov	r9, r3
 8007f02:	4623      	mov	r3, r4
 8007f04:	eb18 0303 	adds.w	r3, r8, r3
 8007f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	eb49 0303 	adc.w	r3, r9, r3
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	18db      	adds	r3, r3, r3
 8007f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f30:	4613      	mov	r3, r2
 8007f32:	eb42 0303 	adc.w	r3, r2, r3
 8007f36:	657b      	str	r3, [r7, #84]	; 0x54
 8007f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f40:	f7f8 f9be 	bl	80002c0 <__aeabi_uldivmod>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4b61      	ldr	r3, [pc, #388]	; (80080d0 <UART_SetConfig+0x2d4>)
 8007f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	011c      	lsls	r4, r3, #4
 8007f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	1891      	adds	r1, r2, r2
 8007f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f74:	4641      	mov	r1, r8
 8007f76:	eb12 0a01 	adds.w	sl, r2, r1
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f94:	4692      	mov	sl, r2
 8007f96:	469b      	mov	fp, r3
 8007f98:	4643      	mov	r3, r8
 8007f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8007fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	18db      	adds	r3, r3, r3
 8007fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	eb42 0303 	adc.w	r3, r2, r3
 8007fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fd6:	f7f8 f973 	bl	80002c0 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4b3b      	ldr	r3, [pc, #236]	; (80080d0 <UART_SetConfig+0x2d4>)
 8007fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8007fe6:	095b      	lsrs	r3, r3, #5
 8007fe8:	2264      	movs	r2, #100	; 0x64
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	1acb      	subs	r3, r1, r3
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ff6:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <UART_SetConfig+0x2d4>)
 8007ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008004:	441c      	add	r4, r3
 8008006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800a:	2200      	movs	r2, #0
 800800c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	1891      	adds	r1, r2, r2
 800801e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008020:	415b      	adcs	r3, r3
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008028:	4641      	mov	r1, r8
 800802a:	1851      	adds	r1, r2, r1
 800802c:	6339      	str	r1, [r7, #48]	; 0x30
 800802e:	4649      	mov	r1, r9
 8008030:	414b      	adcs	r3, r1
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008040:	4659      	mov	r1, fp
 8008042:	00cb      	lsls	r3, r1, #3
 8008044:	4651      	mov	r1, sl
 8008046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800804a:	4651      	mov	r1, sl
 800804c:	00ca      	lsls	r2, r1, #3
 800804e:	4610      	mov	r0, r2
 8008050:	4619      	mov	r1, r3
 8008052:	4603      	mov	r3, r0
 8008054:	4642      	mov	r2, r8
 8008056:	189b      	adds	r3, r3, r2
 8008058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800805c:	464b      	mov	r3, r9
 800805e:	460a      	mov	r2, r1
 8008060:	eb42 0303 	adc.w	r3, r2, r3
 8008064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800807c:	460b      	mov	r3, r1
 800807e:	18db      	adds	r3, r3, r3
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
 8008082:	4613      	mov	r3, r2
 8008084:	eb42 0303 	adc.w	r3, r2, r3
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800808e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008092:	f7f8 f915 	bl	80002c0 <__aeabi_uldivmod>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <UART_SetConfig+0x2d4>)
 800809c:	fba3 1302 	umull	r1, r3, r3, r2
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	2164      	movs	r1, #100	; 0x64
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	3332      	adds	r3, #50	; 0x32
 80080ae:	4a08      	ldr	r2, [pc, #32]	; (80080d0 <UART_SetConfig+0x2d4>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	095b      	lsrs	r3, r3, #5
 80080b6:	f003 0207 	and.w	r2, r3, #7
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4422      	add	r2, r4
 80080c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080c4:	e105      	b.n	80082d2 <UART_SetConfig+0x4d6>
 80080c6:	bf00      	nop
 80080c8:	40011000 	.word	0x40011000
 80080cc:	40011400 	.word	0x40011400
 80080d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	1891      	adds	r1, r2, r2
 80080ec:	6239      	str	r1, [r7, #32]
 80080ee:	415b      	adcs	r3, r3
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
 80080f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080f6:	4641      	mov	r1, r8
 80080f8:	1854      	adds	r4, r2, r1
 80080fa:	4649      	mov	r1, r9
 80080fc:	eb43 0501 	adc.w	r5, r3, r1
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	00eb      	lsls	r3, r5, #3
 800810a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800810e:	00e2      	lsls	r2, r4, #3
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	4643      	mov	r3, r8
 8008116:	18e3      	adds	r3, r4, r3
 8008118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800811c:	464b      	mov	r3, r9
 800811e:	eb45 0303 	adc.w	r3, r5, r3
 8008122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008142:	4629      	mov	r1, r5
 8008144:	008b      	lsls	r3, r1, #2
 8008146:	4621      	mov	r1, r4
 8008148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814c:	4621      	mov	r1, r4
 800814e:	008a      	lsls	r2, r1, #2
 8008150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008154:	f7f8 f8b4 	bl	80002c0 <__aeabi_uldivmod>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4b60      	ldr	r3, [pc, #384]	; (80082e0 <UART_SetConfig+0x4e4>)
 800815e:	fba3 2302 	umull	r2, r3, r3, r2
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	011c      	lsls	r4, r3, #4
 8008166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816a:	2200      	movs	r2, #0
 800816c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	1891      	adds	r1, r2, r2
 800817e:	61b9      	str	r1, [r7, #24]
 8008180:	415b      	adcs	r3, r3
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008188:	4641      	mov	r1, r8
 800818a:	1851      	adds	r1, r2, r1
 800818c:	6139      	str	r1, [r7, #16]
 800818e:	4649      	mov	r1, r9
 8008190:	414b      	adcs	r3, r1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081a0:	4659      	mov	r1, fp
 80081a2:	00cb      	lsls	r3, r1, #3
 80081a4:	4651      	mov	r1, sl
 80081a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081aa:	4651      	mov	r1, sl
 80081ac:	00ca      	lsls	r2, r1, #3
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	4642      	mov	r2, r8
 80081b6:	189b      	adds	r3, r3, r2
 80081b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081bc:	464b      	mov	r3, r9
 80081be:	460a      	mov	r2, r1
 80081c0:	eb42 0303 	adc.w	r3, r2, r3
 80081c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80081d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081e0:	4649      	mov	r1, r9
 80081e2:	008b      	lsls	r3, r1, #2
 80081e4:	4641      	mov	r1, r8
 80081e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ea:	4641      	mov	r1, r8
 80081ec:	008a      	lsls	r2, r1, #2
 80081ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081f2:	f7f8 f865 	bl	80002c0 <__aeabi_uldivmod>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4b39      	ldr	r3, [pc, #228]	; (80082e0 <UART_SetConfig+0x4e4>)
 80081fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	2164      	movs	r1, #100	; 0x64
 8008204:	fb01 f303 	mul.w	r3, r1, r3
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	3332      	adds	r3, #50	; 0x32
 800820e:	4a34      	ldr	r2, [pc, #208]	; (80082e0 <UART_SetConfig+0x4e4>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	095b      	lsrs	r3, r3, #5
 8008216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800821a:	441c      	add	r4, r3
 800821c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008220:	2200      	movs	r2, #0
 8008222:	673b      	str	r3, [r7, #112]	; 0x70
 8008224:	677a      	str	r2, [r7, #116]	; 0x74
 8008226:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800822a:	4642      	mov	r2, r8
 800822c:	464b      	mov	r3, r9
 800822e:	1891      	adds	r1, r2, r2
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	415b      	adcs	r3, r3
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823a:	4641      	mov	r1, r8
 800823c:	1851      	adds	r1, r2, r1
 800823e:	6039      	str	r1, [r7, #0]
 8008240:	4649      	mov	r1, r9
 8008242:	414b      	adcs	r3, r1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008252:	4659      	mov	r1, fp
 8008254:	00cb      	lsls	r3, r1, #3
 8008256:	4651      	mov	r1, sl
 8008258:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800825c:	4651      	mov	r1, sl
 800825e:	00ca      	lsls	r2, r1, #3
 8008260:	4610      	mov	r0, r2
 8008262:	4619      	mov	r1, r3
 8008264:	4603      	mov	r3, r0
 8008266:	4642      	mov	r2, r8
 8008268:	189b      	adds	r3, r3, r2
 800826a:	66bb      	str	r3, [r7, #104]	; 0x68
 800826c:	464b      	mov	r3, r9
 800826e:	460a      	mov	r2, r1
 8008270:	eb42 0303 	adc.w	r3, r2, r3
 8008274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	663b      	str	r3, [r7, #96]	; 0x60
 8008280:	667a      	str	r2, [r7, #100]	; 0x64
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800828e:	4649      	mov	r1, r9
 8008290:	008b      	lsls	r3, r1, #2
 8008292:	4641      	mov	r1, r8
 8008294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008298:	4641      	mov	r1, r8
 800829a:	008a      	lsls	r2, r1, #2
 800829c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082a0:	f7f8 f80e 	bl	80002c0 <__aeabi_uldivmod>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <UART_SetConfig+0x4e4>)
 80082aa:	fba3 1302 	umull	r1, r3, r3, r2
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2164      	movs	r1, #100	; 0x64
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	3332      	adds	r3, #50	; 0x32
 80082bc:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <UART_SetConfig+0x4e4>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f003 020f 	and.w	r2, r3, #15
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4422      	add	r2, r4
 80082d0:	609a      	str	r2, [r3, #8]
}
 80082d2:	bf00      	nop
 80082d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082de:	bf00      	nop
 80082e0:	51eb851f 	.word	0x51eb851f

080082e4 <__errno>:
 80082e4:	4b01      	ldr	r3, [pc, #4]	; (80082ec <__errno+0x8>)
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000014 	.word	0x20000014

080082f0 <__libc_init_array>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	4d0d      	ldr	r5, [pc, #52]	; (8008328 <__libc_init_array+0x38>)
 80082f4:	4c0d      	ldr	r4, [pc, #52]	; (800832c <__libc_init_array+0x3c>)
 80082f6:	1b64      	subs	r4, r4, r5
 80082f8:	10a4      	asrs	r4, r4, #2
 80082fa:	2600      	movs	r6, #0
 80082fc:	42a6      	cmp	r6, r4
 80082fe:	d109      	bne.n	8008314 <__libc_init_array+0x24>
 8008300:	4d0b      	ldr	r5, [pc, #44]	; (8008330 <__libc_init_array+0x40>)
 8008302:	4c0c      	ldr	r4, [pc, #48]	; (8008334 <__libc_init_array+0x44>)
 8008304:	f001 fa00 	bl	8009708 <_init>
 8008308:	1b64      	subs	r4, r4, r5
 800830a:	10a4      	asrs	r4, r4, #2
 800830c:	2600      	movs	r6, #0
 800830e:	42a6      	cmp	r6, r4
 8008310:	d105      	bne.n	800831e <__libc_init_array+0x2e>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	f855 3b04 	ldr.w	r3, [r5], #4
 8008318:	4798      	blx	r3
 800831a:	3601      	adds	r6, #1
 800831c:	e7ee      	b.n	80082fc <__libc_init_array+0xc>
 800831e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008322:	4798      	blx	r3
 8008324:	3601      	adds	r6, #1
 8008326:	e7f2      	b.n	800830e <__libc_init_array+0x1e>
 8008328:	08009fec 	.word	0x08009fec
 800832c:	08009fec 	.word	0x08009fec
 8008330:	08009fec 	.word	0x08009fec
 8008334:	08009ff0 	.word	0x08009ff0

08008338 <memcpy>:
 8008338:	440a      	add	r2, r1
 800833a:	4291      	cmp	r1, r2
 800833c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008340:	d100      	bne.n	8008344 <memcpy+0xc>
 8008342:	4770      	bx	lr
 8008344:	b510      	push	{r4, lr}
 8008346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800834a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800834e:	4291      	cmp	r1, r2
 8008350:	d1f9      	bne.n	8008346 <memcpy+0xe>
 8008352:	bd10      	pop	{r4, pc}

08008354 <memset>:
 8008354:	4402      	add	r2, r0
 8008356:	4603      	mov	r3, r0
 8008358:	4293      	cmp	r3, r2
 800835a:	d100      	bne.n	800835e <memset+0xa>
 800835c:	4770      	bx	lr
 800835e:	f803 1b01 	strb.w	r1, [r3], #1
 8008362:	e7f9      	b.n	8008358 <memset+0x4>

08008364 <iprintf>:
 8008364:	b40f      	push	{r0, r1, r2, r3}
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <iprintf+0x2c>)
 8008368:	b513      	push	{r0, r1, r4, lr}
 800836a:	681c      	ldr	r4, [r3, #0]
 800836c:	b124      	cbz	r4, 8008378 <iprintf+0x14>
 800836e:	69a3      	ldr	r3, [r4, #24]
 8008370:	b913      	cbnz	r3, 8008378 <iprintf+0x14>
 8008372:	4620      	mov	r0, r4
 8008374:	f000 fa7e 	bl	8008874 <__sinit>
 8008378:	ab05      	add	r3, sp, #20
 800837a:	9a04      	ldr	r2, [sp, #16]
 800837c:	68a1      	ldr	r1, [r4, #8]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fde3 	bl	8008f4c <_vfiprintf_r>
 8008386:	b002      	add	sp, #8
 8008388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800838c:	b004      	add	sp, #16
 800838e:	4770      	bx	lr
 8008390:	20000014 	.word	0x20000014

08008394 <_puts_r>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	460e      	mov	r6, r1
 8008398:	4605      	mov	r5, r0
 800839a:	b118      	cbz	r0, 80083a4 <_puts_r+0x10>
 800839c:	6983      	ldr	r3, [r0, #24]
 800839e:	b90b      	cbnz	r3, 80083a4 <_puts_r+0x10>
 80083a0:	f000 fa68 	bl	8008874 <__sinit>
 80083a4:	69ab      	ldr	r3, [r5, #24]
 80083a6:	68ac      	ldr	r4, [r5, #8]
 80083a8:	b913      	cbnz	r3, 80083b0 <_puts_r+0x1c>
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 fa62 	bl	8008874 <__sinit>
 80083b0:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <_puts_r+0xd0>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d120      	bne.n	80083f8 <_puts_r+0x64>
 80083b6:	686c      	ldr	r4, [r5, #4]
 80083b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ba:	07db      	lsls	r3, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_puts_r+0x36>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	0598      	lsls	r0, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_puts_r+0x36>
 80083c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083c6:	f000 faf3 	bl	80089b0 <__retarget_lock_acquire_recursive>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	0719      	lsls	r1, r3, #28
 80083ce:	d51d      	bpl.n	800840c <_puts_r+0x78>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	b1db      	cbz	r3, 800840c <_puts_r+0x78>
 80083d4:	3e01      	subs	r6, #1
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	bb39      	cbnz	r1, 8008432 <_puts_r+0x9e>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da38      	bge.n	8008458 <_puts_r+0xc4>
 80083e6:	4622      	mov	r2, r4
 80083e8:	210a      	movs	r1, #10
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 f868 	bl	80084c0 <__swbuf_r>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d011      	beq.n	8008418 <_puts_r+0x84>
 80083f4:	250a      	movs	r5, #10
 80083f6:	e011      	b.n	800841c <_puts_r+0x88>
 80083f8:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <_puts_r+0xd4>)
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d101      	bne.n	8008402 <_puts_r+0x6e>
 80083fe:	68ac      	ldr	r4, [r5, #8]
 8008400:	e7da      	b.n	80083b8 <_puts_r+0x24>
 8008402:	4b1a      	ldr	r3, [pc, #104]	; (800846c <_puts_r+0xd8>)
 8008404:	429c      	cmp	r4, r3
 8008406:	bf08      	it	eq
 8008408:	68ec      	ldreq	r4, [r5, #12]
 800840a:	e7d5      	b.n	80083b8 <_puts_r+0x24>
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f000 f8a8 	bl	8008564 <__swsetup_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	d0dd      	beq.n	80083d4 <_puts_r+0x40>
 8008418:	f04f 35ff 	mov.w	r5, #4294967295
 800841c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800841e:	07da      	lsls	r2, r3, #31
 8008420:	d405      	bmi.n	800842e <_puts_r+0x9a>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	059b      	lsls	r3, r3, #22
 8008426:	d402      	bmi.n	800842e <_puts_r+0x9a>
 8008428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842a:	f000 fac2 	bl	80089b2 <__retarget_lock_release_recursive>
 800842e:	4628      	mov	r0, r5
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	2b00      	cmp	r3, #0
 8008434:	da04      	bge.n	8008440 <_puts_r+0xac>
 8008436:	69a2      	ldr	r2, [r4, #24]
 8008438:	429a      	cmp	r2, r3
 800843a:	dc06      	bgt.n	800844a <_puts_r+0xb6>
 800843c:	290a      	cmp	r1, #10
 800843e:	d004      	beq.n	800844a <_puts_r+0xb6>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	6022      	str	r2, [r4, #0]
 8008446:	7019      	strb	r1, [r3, #0]
 8008448:	e7c5      	b.n	80083d6 <_puts_r+0x42>
 800844a:	4622      	mov	r2, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f837 	bl	80084c0 <__swbuf_r>
 8008452:	3001      	adds	r0, #1
 8008454:	d1bf      	bne.n	80083d6 <_puts_r+0x42>
 8008456:	e7df      	b.n	8008418 <_puts_r+0x84>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	250a      	movs	r5, #10
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	701d      	strb	r5, [r3, #0]
 8008462:	e7db      	b.n	800841c <_puts_r+0x88>
 8008464:	08009f70 	.word	0x08009f70
 8008468:	08009f90 	.word	0x08009f90
 800846c:	08009f50 	.word	0x08009f50

08008470 <puts>:
 8008470:	4b02      	ldr	r3, [pc, #8]	; (800847c <puts+0xc>)
 8008472:	4601      	mov	r1, r0
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	f7ff bf8d 	b.w	8008394 <_puts_r>
 800847a:	bf00      	nop
 800847c:	20000014 	.word	0x20000014

08008480 <siprintf>:
 8008480:	b40e      	push	{r1, r2, r3}
 8008482:	b500      	push	{lr}
 8008484:	b09c      	sub	sp, #112	; 0x70
 8008486:	ab1d      	add	r3, sp, #116	; 0x74
 8008488:	9002      	str	r0, [sp, #8]
 800848a:	9006      	str	r0, [sp, #24]
 800848c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <siprintf+0x38>)
 8008492:	9107      	str	r1, [sp, #28]
 8008494:	9104      	str	r1, [sp, #16]
 8008496:	4909      	ldr	r1, [pc, #36]	; (80084bc <siprintf+0x3c>)
 8008498:	f853 2b04 	ldr.w	r2, [r3], #4
 800849c:	9105      	str	r1, [sp, #20]
 800849e:	6800      	ldr	r0, [r0, #0]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	a902      	add	r1, sp, #8
 80084a4:	f000 fc28 	bl	8008cf8 <_svfiprintf_r>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	b01c      	add	sp, #112	; 0x70
 80084b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b4:	b003      	add	sp, #12
 80084b6:	4770      	bx	lr
 80084b8:	20000014 	.word	0x20000014
 80084bc:	ffff0208 	.word	0xffff0208

080084c0 <__swbuf_r>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	460e      	mov	r6, r1
 80084c4:	4614      	mov	r4, r2
 80084c6:	4605      	mov	r5, r0
 80084c8:	b118      	cbz	r0, 80084d2 <__swbuf_r+0x12>
 80084ca:	6983      	ldr	r3, [r0, #24]
 80084cc:	b90b      	cbnz	r3, 80084d2 <__swbuf_r+0x12>
 80084ce:	f000 f9d1 	bl	8008874 <__sinit>
 80084d2:	4b21      	ldr	r3, [pc, #132]	; (8008558 <__swbuf_r+0x98>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d12b      	bne.n	8008530 <__swbuf_r+0x70>
 80084d8:	686c      	ldr	r4, [r5, #4]
 80084da:	69a3      	ldr	r3, [r4, #24]
 80084dc:	60a3      	str	r3, [r4, #8]
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	071a      	lsls	r2, r3, #28
 80084e2:	d52f      	bpl.n	8008544 <__swbuf_r+0x84>
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	b36b      	cbz	r3, 8008544 <__swbuf_r+0x84>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	1ac0      	subs	r0, r0, r3
 80084ee:	6963      	ldr	r3, [r4, #20]
 80084f0:	b2f6      	uxtb	r6, r6
 80084f2:	4283      	cmp	r3, r0
 80084f4:	4637      	mov	r7, r6
 80084f6:	dc04      	bgt.n	8008502 <__swbuf_r+0x42>
 80084f8:	4621      	mov	r1, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 f926 	bl	800874c <_fflush_r>
 8008500:	bb30      	cbnz	r0, 8008550 <__swbuf_r+0x90>
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	3b01      	subs	r3, #1
 8008506:	60a3      	str	r3, [r4, #8]
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	6022      	str	r2, [r4, #0]
 800850e:	701e      	strb	r6, [r3, #0]
 8008510:	6963      	ldr	r3, [r4, #20]
 8008512:	3001      	adds	r0, #1
 8008514:	4283      	cmp	r3, r0
 8008516:	d004      	beq.n	8008522 <__swbuf_r+0x62>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	07db      	lsls	r3, r3, #31
 800851c:	d506      	bpl.n	800852c <__swbuf_r+0x6c>
 800851e:	2e0a      	cmp	r6, #10
 8008520:	d104      	bne.n	800852c <__swbuf_r+0x6c>
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	f000 f911 	bl	800874c <_fflush_r>
 800852a:	b988      	cbnz	r0, 8008550 <__swbuf_r+0x90>
 800852c:	4638      	mov	r0, r7
 800852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <__swbuf_r+0x9c>)
 8008532:	429c      	cmp	r4, r3
 8008534:	d101      	bne.n	800853a <__swbuf_r+0x7a>
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	e7cf      	b.n	80084da <__swbuf_r+0x1a>
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <__swbuf_r+0xa0>)
 800853c:	429c      	cmp	r4, r3
 800853e:	bf08      	it	eq
 8008540:	68ec      	ldreq	r4, [r5, #12]
 8008542:	e7ca      	b.n	80084da <__swbuf_r+0x1a>
 8008544:	4621      	mov	r1, r4
 8008546:	4628      	mov	r0, r5
 8008548:	f000 f80c 	bl	8008564 <__swsetup_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	d0cb      	beq.n	80084e8 <__swbuf_r+0x28>
 8008550:	f04f 37ff 	mov.w	r7, #4294967295
 8008554:	e7ea      	b.n	800852c <__swbuf_r+0x6c>
 8008556:	bf00      	nop
 8008558:	08009f70 	.word	0x08009f70
 800855c:	08009f90 	.word	0x08009f90
 8008560:	08009f50 	.word	0x08009f50

08008564 <__swsetup_r>:
 8008564:	4b32      	ldr	r3, [pc, #200]	; (8008630 <__swsetup_r+0xcc>)
 8008566:	b570      	push	{r4, r5, r6, lr}
 8008568:	681d      	ldr	r5, [r3, #0]
 800856a:	4606      	mov	r6, r0
 800856c:	460c      	mov	r4, r1
 800856e:	b125      	cbz	r5, 800857a <__swsetup_r+0x16>
 8008570:	69ab      	ldr	r3, [r5, #24]
 8008572:	b913      	cbnz	r3, 800857a <__swsetup_r+0x16>
 8008574:	4628      	mov	r0, r5
 8008576:	f000 f97d 	bl	8008874 <__sinit>
 800857a:	4b2e      	ldr	r3, [pc, #184]	; (8008634 <__swsetup_r+0xd0>)
 800857c:	429c      	cmp	r4, r3
 800857e:	d10f      	bne.n	80085a0 <__swsetup_r+0x3c>
 8008580:	686c      	ldr	r4, [r5, #4]
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008588:	0719      	lsls	r1, r3, #28
 800858a:	d42c      	bmi.n	80085e6 <__swsetup_r+0x82>
 800858c:	06dd      	lsls	r5, r3, #27
 800858e:	d411      	bmi.n	80085b4 <__swsetup_r+0x50>
 8008590:	2309      	movs	r3, #9
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	f04f 30ff 	mov.w	r0, #4294967295
 800859e:	e03e      	b.n	800861e <__swsetup_r+0xba>
 80085a0:	4b25      	ldr	r3, [pc, #148]	; (8008638 <__swsetup_r+0xd4>)
 80085a2:	429c      	cmp	r4, r3
 80085a4:	d101      	bne.n	80085aa <__swsetup_r+0x46>
 80085a6:	68ac      	ldr	r4, [r5, #8]
 80085a8:	e7eb      	b.n	8008582 <__swsetup_r+0x1e>
 80085aa:	4b24      	ldr	r3, [pc, #144]	; (800863c <__swsetup_r+0xd8>)
 80085ac:	429c      	cmp	r4, r3
 80085ae:	bf08      	it	eq
 80085b0:	68ec      	ldreq	r4, [r5, #12]
 80085b2:	e7e6      	b.n	8008582 <__swsetup_r+0x1e>
 80085b4:	0758      	lsls	r0, r3, #29
 80085b6:	d512      	bpl.n	80085de <__swsetup_r+0x7a>
 80085b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ba:	b141      	cbz	r1, 80085ce <__swsetup_r+0x6a>
 80085bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c0:	4299      	cmp	r1, r3
 80085c2:	d002      	beq.n	80085ca <__swsetup_r+0x66>
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 fa5b 	bl	8008a80 <_free_r>
 80085ca:	2300      	movs	r3, #0
 80085cc:	6363      	str	r3, [r4, #52]	; 0x34
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	2300      	movs	r3, #0
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f043 0308 	orr.w	r3, r3, #8
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	b94b      	cbnz	r3, 80085fe <__swsetup_r+0x9a>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f4:	d003      	beq.n	80085fe <__swsetup_r+0x9a>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 fa01 	bl	8008a00 <__smakebuf_r>
 80085fe:	89a0      	ldrh	r0, [r4, #12]
 8008600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008604:	f010 0301 	ands.w	r3, r0, #1
 8008608:	d00a      	beq.n	8008620 <__swsetup_r+0xbc>
 800860a:	2300      	movs	r3, #0
 800860c:	60a3      	str	r3, [r4, #8]
 800860e:	6963      	ldr	r3, [r4, #20]
 8008610:	425b      	negs	r3, r3
 8008612:	61a3      	str	r3, [r4, #24]
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b943      	cbnz	r3, 800862a <__swsetup_r+0xc6>
 8008618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800861c:	d1ba      	bne.n	8008594 <__swsetup_r+0x30>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	0781      	lsls	r1, r0, #30
 8008622:	bf58      	it	pl
 8008624:	6963      	ldrpl	r3, [r4, #20]
 8008626:	60a3      	str	r3, [r4, #8]
 8008628:	e7f4      	b.n	8008614 <__swsetup_r+0xb0>
 800862a:	2000      	movs	r0, #0
 800862c:	e7f7      	b.n	800861e <__swsetup_r+0xba>
 800862e:	bf00      	nop
 8008630:	20000014 	.word	0x20000014
 8008634:	08009f70 	.word	0x08009f70
 8008638:	08009f90 	.word	0x08009f90
 800863c:	08009f50 	.word	0x08009f50

08008640 <__sflush_r>:
 8008640:	898a      	ldrh	r2, [r1, #12]
 8008642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	0710      	lsls	r0, r2, #28
 800864a:	460c      	mov	r4, r1
 800864c:	d458      	bmi.n	8008700 <__sflush_r+0xc0>
 800864e:	684b      	ldr	r3, [r1, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc05      	bgt.n	8008660 <__sflush_r+0x20>
 8008654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	dc02      	bgt.n	8008660 <__sflush_r+0x20>
 800865a:	2000      	movs	r0, #0
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008662:	2e00      	cmp	r6, #0
 8008664:	d0f9      	beq.n	800865a <__sflush_r+0x1a>
 8008666:	2300      	movs	r3, #0
 8008668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800866c:	682f      	ldr	r7, [r5, #0]
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	d032      	beq.n	80086d8 <__sflush_r+0x98>
 8008672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	075a      	lsls	r2, r3, #29
 8008678:	d505      	bpl.n	8008686 <__sflush_r+0x46>
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	1ac0      	subs	r0, r0, r3
 800867e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008680:	b10b      	cbz	r3, 8008686 <__sflush_r+0x46>
 8008682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008684:	1ac0      	subs	r0, r0, r3
 8008686:	2300      	movs	r3, #0
 8008688:	4602      	mov	r2, r0
 800868a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800868c:	6a21      	ldr	r1, [r4, #32]
 800868e:	4628      	mov	r0, r5
 8008690:	47b0      	blx	r6
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	d106      	bne.n	80086a6 <__sflush_r+0x66>
 8008698:	6829      	ldr	r1, [r5, #0]
 800869a:	291d      	cmp	r1, #29
 800869c:	d82c      	bhi.n	80086f8 <__sflush_r+0xb8>
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <__sflush_r+0x108>)
 80086a0:	40ca      	lsrs	r2, r1
 80086a2:	07d6      	lsls	r6, r2, #31
 80086a4:	d528      	bpl.n	80086f8 <__sflush_r+0xb8>
 80086a6:	2200      	movs	r2, #0
 80086a8:	6062      	str	r2, [r4, #4]
 80086aa:	04d9      	lsls	r1, r3, #19
 80086ac:	6922      	ldr	r2, [r4, #16]
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	d504      	bpl.n	80086bc <__sflush_r+0x7c>
 80086b2:	1c42      	adds	r2, r0, #1
 80086b4:	d101      	bne.n	80086ba <__sflush_r+0x7a>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	b903      	cbnz	r3, 80086bc <__sflush_r+0x7c>
 80086ba:	6560      	str	r0, [r4, #84]	; 0x54
 80086bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086be:	602f      	str	r7, [r5, #0]
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d0ca      	beq.n	800865a <__sflush_r+0x1a>
 80086c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c8:	4299      	cmp	r1, r3
 80086ca:	d002      	beq.n	80086d2 <__sflush_r+0x92>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f9d7 	bl	8008a80 <_free_r>
 80086d2:	2000      	movs	r0, #0
 80086d4:	6360      	str	r0, [r4, #52]	; 0x34
 80086d6:	e7c1      	b.n	800865c <__sflush_r+0x1c>
 80086d8:	6a21      	ldr	r1, [r4, #32]
 80086da:	2301      	movs	r3, #1
 80086dc:	4628      	mov	r0, r5
 80086de:	47b0      	blx	r6
 80086e0:	1c41      	adds	r1, r0, #1
 80086e2:	d1c7      	bne.n	8008674 <__sflush_r+0x34>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0c4      	beq.n	8008674 <__sflush_r+0x34>
 80086ea:	2b1d      	cmp	r3, #29
 80086ec:	d001      	beq.n	80086f2 <__sflush_r+0xb2>
 80086ee:	2b16      	cmp	r3, #22
 80086f0:	d101      	bne.n	80086f6 <__sflush_r+0xb6>
 80086f2:	602f      	str	r7, [r5, #0]
 80086f4:	e7b1      	b.n	800865a <__sflush_r+0x1a>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	e7ad      	b.n	800865c <__sflush_r+0x1c>
 8008700:	690f      	ldr	r7, [r1, #16]
 8008702:	2f00      	cmp	r7, #0
 8008704:	d0a9      	beq.n	800865a <__sflush_r+0x1a>
 8008706:	0793      	lsls	r3, r2, #30
 8008708:	680e      	ldr	r6, [r1, #0]
 800870a:	bf08      	it	eq
 800870c:	694b      	ldreq	r3, [r1, #20]
 800870e:	600f      	str	r7, [r1, #0]
 8008710:	bf18      	it	ne
 8008712:	2300      	movne	r3, #0
 8008714:	eba6 0807 	sub.w	r8, r6, r7
 8008718:	608b      	str	r3, [r1, #8]
 800871a:	f1b8 0f00 	cmp.w	r8, #0
 800871e:	dd9c      	ble.n	800865a <__sflush_r+0x1a>
 8008720:	6a21      	ldr	r1, [r4, #32]
 8008722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008724:	4643      	mov	r3, r8
 8008726:	463a      	mov	r2, r7
 8008728:	4628      	mov	r0, r5
 800872a:	47b0      	blx	r6
 800872c:	2800      	cmp	r0, #0
 800872e:	dc06      	bgt.n	800873e <__sflush_r+0xfe>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	e78e      	b.n	800865c <__sflush_r+0x1c>
 800873e:	4407      	add	r7, r0
 8008740:	eba8 0800 	sub.w	r8, r8, r0
 8008744:	e7e9      	b.n	800871a <__sflush_r+0xda>
 8008746:	bf00      	nop
 8008748:	20400001 	.word	0x20400001

0800874c <_fflush_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b913      	cbnz	r3, 800875c <_fflush_r+0x10>
 8008756:	2500      	movs	r5, #0
 8008758:	4628      	mov	r0, r5
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	b118      	cbz	r0, 8008766 <_fflush_r+0x1a>
 800875e:	6983      	ldr	r3, [r0, #24]
 8008760:	b90b      	cbnz	r3, 8008766 <_fflush_r+0x1a>
 8008762:	f000 f887 	bl	8008874 <__sinit>
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <_fflush_r+0x6c>)
 8008768:	429c      	cmp	r4, r3
 800876a:	d11b      	bne.n	80087a4 <_fflush_r+0x58>
 800876c:	686c      	ldr	r4, [r5, #4]
 800876e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0ef      	beq.n	8008756 <_fflush_r+0xa>
 8008776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008778:	07d0      	lsls	r0, r2, #31
 800877a:	d404      	bmi.n	8008786 <_fflush_r+0x3a>
 800877c:	0599      	lsls	r1, r3, #22
 800877e:	d402      	bmi.n	8008786 <_fflush_r+0x3a>
 8008780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008782:	f000 f915 	bl	80089b0 <__retarget_lock_acquire_recursive>
 8008786:	4628      	mov	r0, r5
 8008788:	4621      	mov	r1, r4
 800878a:	f7ff ff59 	bl	8008640 <__sflush_r>
 800878e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008790:	07da      	lsls	r2, r3, #31
 8008792:	4605      	mov	r5, r0
 8008794:	d4e0      	bmi.n	8008758 <_fflush_r+0xc>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	059b      	lsls	r3, r3, #22
 800879a:	d4dd      	bmi.n	8008758 <_fflush_r+0xc>
 800879c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800879e:	f000 f908 	bl	80089b2 <__retarget_lock_release_recursive>
 80087a2:	e7d9      	b.n	8008758 <_fflush_r+0xc>
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <_fflush_r+0x70>)
 80087a6:	429c      	cmp	r4, r3
 80087a8:	d101      	bne.n	80087ae <_fflush_r+0x62>
 80087aa:	68ac      	ldr	r4, [r5, #8]
 80087ac:	e7df      	b.n	800876e <_fflush_r+0x22>
 80087ae:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <_fflush_r+0x74>)
 80087b0:	429c      	cmp	r4, r3
 80087b2:	bf08      	it	eq
 80087b4:	68ec      	ldreq	r4, [r5, #12]
 80087b6:	e7da      	b.n	800876e <_fflush_r+0x22>
 80087b8:	08009f70 	.word	0x08009f70
 80087bc:	08009f90 	.word	0x08009f90
 80087c0:	08009f50 	.word	0x08009f50

080087c4 <std>:
 80087c4:	2300      	movs	r3, #0
 80087c6:	b510      	push	{r4, lr}
 80087c8:	4604      	mov	r4, r0
 80087ca:	e9c0 3300 	strd	r3, r3, [r0]
 80087ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087d2:	6083      	str	r3, [r0, #8]
 80087d4:	8181      	strh	r1, [r0, #12]
 80087d6:	6643      	str	r3, [r0, #100]	; 0x64
 80087d8:	81c2      	strh	r2, [r0, #14]
 80087da:	6183      	str	r3, [r0, #24]
 80087dc:	4619      	mov	r1, r3
 80087de:	2208      	movs	r2, #8
 80087e0:	305c      	adds	r0, #92	; 0x5c
 80087e2:	f7ff fdb7 	bl	8008354 <memset>
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <std+0x38>)
 80087e8:	6263      	str	r3, [r4, #36]	; 0x24
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <std+0x3c>)
 80087ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <std+0x40>)
 80087f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <std+0x44>)
 80087f4:	6224      	str	r4, [r4, #32]
 80087f6:	6323      	str	r3, [r4, #48]	; 0x30
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	080094f5 	.word	0x080094f5
 8008800:	08009517 	.word	0x08009517
 8008804:	0800954f 	.word	0x0800954f
 8008808:	08009573 	.word	0x08009573

0800880c <_cleanup_r>:
 800880c:	4901      	ldr	r1, [pc, #4]	; (8008814 <_cleanup_r+0x8>)
 800880e:	f000 b8af 	b.w	8008970 <_fwalk_reent>
 8008812:	bf00      	nop
 8008814:	0800874d 	.word	0x0800874d

08008818 <__sfmoreglue>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	2268      	movs	r2, #104	; 0x68
 800881c:	1e4d      	subs	r5, r1, #1
 800881e:	4355      	muls	r5, r2
 8008820:	460e      	mov	r6, r1
 8008822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008826:	f000 f997 	bl	8008b58 <_malloc_r>
 800882a:	4604      	mov	r4, r0
 800882c:	b140      	cbz	r0, 8008840 <__sfmoreglue+0x28>
 800882e:	2100      	movs	r1, #0
 8008830:	e9c0 1600 	strd	r1, r6, [r0]
 8008834:	300c      	adds	r0, #12
 8008836:	60a0      	str	r0, [r4, #8]
 8008838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800883c:	f7ff fd8a 	bl	8008354 <memset>
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}

08008844 <__sfp_lock_acquire>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_acquire+0x8>)
 8008846:	f000 b8b3 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	200003ed 	.word	0x200003ed

08008850 <__sfp_lock_release>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sfp_lock_release+0x8>)
 8008852:	f000 b8ae 	b.w	80089b2 <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	200003ed 	.word	0x200003ed

0800885c <__sinit_lock_acquire>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_acquire+0x8>)
 800885e:	f000 b8a7 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	200003ee 	.word	0x200003ee

08008868 <__sinit_lock_release>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__sinit_lock_release+0x8>)
 800886a:	f000 b8a2 	b.w	80089b2 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	200003ee 	.word	0x200003ee

08008874 <__sinit>:
 8008874:	b510      	push	{r4, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	f7ff fff0 	bl	800885c <__sinit_lock_acquire>
 800887c:	69a3      	ldr	r3, [r4, #24]
 800887e:	b11b      	cbz	r3, 8008888 <__sinit+0x14>
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f7ff bff0 	b.w	8008868 <__sinit_lock_release>
 8008888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800888c:	6523      	str	r3, [r4, #80]	; 0x50
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <__sinit+0x68>)
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <__sinit+0x6c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	62a2      	str	r2, [r4, #40]	; 0x28
 8008896:	42a3      	cmp	r3, r4
 8008898:	bf04      	itt	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	61a3      	streq	r3, [r4, #24]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f820 	bl	80088e4 <__sfp>
 80088a4:	6060      	str	r0, [r4, #4]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f81c 	bl	80088e4 <__sfp>
 80088ac:	60a0      	str	r0, [r4, #8]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f818 	bl	80088e4 <__sfp>
 80088b4:	2200      	movs	r2, #0
 80088b6:	60e0      	str	r0, [r4, #12]
 80088b8:	2104      	movs	r1, #4
 80088ba:	6860      	ldr	r0, [r4, #4]
 80088bc:	f7ff ff82 	bl	80087c4 <std>
 80088c0:	68a0      	ldr	r0, [r4, #8]
 80088c2:	2201      	movs	r2, #1
 80088c4:	2109      	movs	r1, #9
 80088c6:	f7ff ff7d 	bl	80087c4 <std>
 80088ca:	68e0      	ldr	r0, [r4, #12]
 80088cc:	2202      	movs	r2, #2
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff ff78 	bl	80087c4 <std>
 80088d4:	2301      	movs	r3, #1
 80088d6:	61a3      	str	r3, [r4, #24]
 80088d8:	e7d2      	b.n	8008880 <__sinit+0xc>
 80088da:	bf00      	nop
 80088dc:	08009f4c 	.word	0x08009f4c
 80088e0:	0800880d 	.word	0x0800880d

080088e4 <__sfp>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	4607      	mov	r7, r0
 80088e8:	f7ff ffac 	bl	8008844 <__sfp_lock_acquire>
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <__sfp+0x84>)
 80088ee:	681e      	ldr	r6, [r3, #0]
 80088f0:	69b3      	ldr	r3, [r6, #24]
 80088f2:	b913      	cbnz	r3, 80088fa <__sfp+0x16>
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff ffbd 	bl	8008874 <__sinit>
 80088fa:	3648      	adds	r6, #72	; 0x48
 80088fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008900:	3b01      	subs	r3, #1
 8008902:	d503      	bpl.n	800890c <__sfp+0x28>
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	b30b      	cbz	r3, 800894c <__sfp+0x68>
 8008908:	6836      	ldr	r6, [r6, #0]
 800890a:	e7f7      	b.n	80088fc <__sfp+0x18>
 800890c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008910:	b9d5      	cbnz	r5, 8008948 <__sfp+0x64>
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <__sfp+0x88>)
 8008914:	60e3      	str	r3, [r4, #12]
 8008916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800891a:	6665      	str	r5, [r4, #100]	; 0x64
 800891c:	f000 f847 	bl	80089ae <__retarget_lock_init_recursive>
 8008920:	f7ff ff96 	bl	8008850 <__sfp_lock_release>
 8008924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800892c:	6025      	str	r5, [r4, #0]
 800892e:	61a5      	str	r5, [r4, #24]
 8008930:	2208      	movs	r2, #8
 8008932:	4629      	mov	r1, r5
 8008934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008938:	f7ff fd0c 	bl	8008354 <memset>
 800893c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008944:	4620      	mov	r0, r4
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	3468      	adds	r4, #104	; 0x68
 800894a:	e7d9      	b.n	8008900 <__sfp+0x1c>
 800894c:	2104      	movs	r1, #4
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ff62 	bl	8008818 <__sfmoreglue>
 8008954:	4604      	mov	r4, r0
 8008956:	6030      	str	r0, [r6, #0]
 8008958:	2800      	cmp	r0, #0
 800895a:	d1d5      	bne.n	8008908 <__sfp+0x24>
 800895c:	f7ff ff78 	bl	8008850 <__sfp_lock_release>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	e7ee      	b.n	8008944 <__sfp+0x60>
 8008966:	bf00      	nop
 8008968:	08009f4c 	.word	0x08009f4c
 800896c:	ffff0001 	.word	0xffff0001

08008970 <_fwalk_reent>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4606      	mov	r6, r0
 8008976:	4688      	mov	r8, r1
 8008978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800897c:	2700      	movs	r7, #0
 800897e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008982:	f1b9 0901 	subs.w	r9, r9, #1
 8008986:	d505      	bpl.n	8008994 <_fwalk_reent+0x24>
 8008988:	6824      	ldr	r4, [r4, #0]
 800898a:	2c00      	cmp	r4, #0
 800898c:	d1f7      	bne.n	800897e <_fwalk_reent+0xe>
 800898e:	4638      	mov	r0, r7
 8008990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d907      	bls.n	80089aa <_fwalk_reent+0x3a>
 800899a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800899e:	3301      	adds	r3, #1
 80089a0:	d003      	beq.n	80089aa <_fwalk_reent+0x3a>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	47c0      	blx	r8
 80089a8:	4307      	orrs	r7, r0
 80089aa:	3568      	adds	r5, #104	; 0x68
 80089ac:	e7e9      	b.n	8008982 <_fwalk_reent+0x12>

080089ae <__retarget_lock_init_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <__retarget_lock_acquire_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <__retarget_lock_release_recursive>:
 80089b2:	4770      	bx	lr

080089b4 <__swhatbuf_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	460e      	mov	r6, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2900      	cmp	r1, #0
 80089be:	b096      	sub	sp, #88	; 0x58
 80089c0:	4614      	mov	r4, r2
 80089c2:	461d      	mov	r5, r3
 80089c4:	da08      	bge.n	80089d8 <__swhatbuf_r+0x24>
 80089c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	061a      	lsls	r2, r3, #24
 80089d0:	d410      	bmi.n	80089f4 <__swhatbuf_r+0x40>
 80089d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089d6:	e00e      	b.n	80089f6 <__swhatbuf_r+0x42>
 80089d8:	466a      	mov	r2, sp
 80089da:	f000 fdf1 	bl	80095c0 <_fstat_r>
 80089de:	2800      	cmp	r0, #0
 80089e0:	dbf1      	blt.n	80089c6 <__swhatbuf_r+0x12>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089ec:	425a      	negs	r2, r3
 80089ee:	415a      	adcs	r2, r3
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	e7ee      	b.n	80089d2 <__swhatbuf_r+0x1e>
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	2000      	movs	r0, #0
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	b016      	add	sp, #88	; 0x58
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a00 <__smakebuf_r>:
 8008a00:	898b      	ldrh	r3, [r1, #12]
 8008a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a04:	079d      	lsls	r5, r3, #30
 8008a06:	4606      	mov	r6, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	d507      	bpl.n	8008a1c <__smakebuf_r+0x1c>
 8008a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	2301      	movs	r3, #1
 8008a16:	6163      	str	r3, [r4, #20]
 8008a18:	b002      	add	sp, #8
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	ab01      	add	r3, sp, #4
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f7ff ffc8 	bl	80089b4 <__swhatbuf_r>
 8008a24:	9900      	ldr	r1, [sp, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 f895 	bl	8008b58 <_malloc_r>
 8008a2e:	b948      	cbnz	r0, 8008a44 <__smakebuf_r+0x44>
 8008a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a34:	059a      	lsls	r2, r3, #22
 8008a36:	d4ef      	bmi.n	8008a18 <__smakebuf_r+0x18>
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	81a3      	strh	r3, [r4, #12]
 8008a42:	e7e3      	b.n	8008a0c <__smakebuf_r+0xc>
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <__smakebuf_r+0x7c>)
 8008a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	6020      	str	r0, [r4, #0]
 8008a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	9b00      	ldr	r3, [sp, #0]
 8008a54:	6163      	str	r3, [r4, #20]
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	6120      	str	r0, [r4, #16]
 8008a5a:	b15b      	cbz	r3, 8008a74 <__smakebuf_r+0x74>
 8008a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 fdbf 	bl	80095e4 <_isatty_r>
 8008a66:	b128      	cbz	r0, 8008a74 <__smakebuf_r+0x74>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	89a0      	ldrh	r0, [r4, #12]
 8008a76:	4305      	orrs	r5, r0
 8008a78:	81a5      	strh	r5, [r4, #12]
 8008a7a:	e7cd      	b.n	8008a18 <__smakebuf_r+0x18>
 8008a7c:	0800880d 	.word	0x0800880d

08008a80 <_free_r>:
 8008a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a82:	2900      	cmp	r1, #0
 8008a84:	d044      	beq.n	8008b10 <_free_r+0x90>
 8008a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8a:	9001      	str	r0, [sp, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a92:	bfb8      	it	lt
 8008a94:	18e4      	addlt	r4, r4, r3
 8008a96:	f000 fde1 	bl	800965c <__malloc_lock>
 8008a9a:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <_free_r+0x94>)
 8008a9c:	9801      	ldr	r0, [sp, #4]
 8008a9e:	6813      	ldr	r3, [r2, #0]
 8008aa0:	b933      	cbnz	r3, 8008ab0 <_free_r+0x30>
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	6014      	str	r4, [r2, #0]
 8008aa6:	b003      	add	sp, #12
 8008aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aac:	f000 bddc 	b.w	8009668 <__malloc_unlock>
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d908      	bls.n	8008ac6 <_free_r+0x46>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf01      	itttt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	1949      	addeq	r1, r1, r5
 8008ac2:	6021      	streq	r1, [r4, #0]
 8008ac4:	e7ed      	b.n	8008aa2 <_free_r+0x22>
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b10b      	cbz	r3, 8008ad0 <_free_r+0x50>
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d9fa      	bls.n	8008ac6 <_free_r+0x46>
 8008ad0:	6811      	ldr	r1, [r2, #0]
 8008ad2:	1855      	adds	r5, r2, r1
 8008ad4:	42a5      	cmp	r5, r4
 8008ad6:	d10b      	bne.n	8008af0 <_free_r+0x70>
 8008ad8:	6824      	ldr	r4, [r4, #0]
 8008ada:	4421      	add	r1, r4
 8008adc:	1854      	adds	r4, r2, r1
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	6011      	str	r1, [r2, #0]
 8008ae2:	d1e0      	bne.n	8008aa6 <_free_r+0x26>
 8008ae4:	681c      	ldr	r4, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	4421      	add	r1, r4
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	e7da      	b.n	8008aa6 <_free_r+0x26>
 8008af0:	d902      	bls.n	8008af8 <_free_r+0x78>
 8008af2:	230c      	movs	r3, #12
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	e7d6      	b.n	8008aa6 <_free_r+0x26>
 8008af8:	6825      	ldr	r5, [r4, #0]
 8008afa:	1961      	adds	r1, r4, r5
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf04      	itt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	bf04      	itt	eq
 8008b08:	1949      	addeq	r1, r1, r5
 8008b0a:	6021      	streq	r1, [r4, #0]
 8008b0c:	6054      	str	r4, [r2, #4]
 8008b0e:	e7ca      	b.n	8008aa6 <_free_r+0x26>
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}
 8008b14:	200003f0 	.word	0x200003f0

08008b18 <sbrk_aligned>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4e0e      	ldr	r6, [pc, #56]	; (8008b54 <sbrk_aligned+0x3c>)
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6831      	ldr	r1, [r6, #0]
 8008b20:	4605      	mov	r5, r0
 8008b22:	b911      	cbnz	r1, 8008b2a <sbrk_aligned+0x12>
 8008b24:	f000 fcd6 	bl	80094d4 <_sbrk_r>
 8008b28:	6030      	str	r0, [r6, #0]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fcd1 	bl	80094d4 <_sbrk_r>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	d00a      	beq.n	8008b4c <sbrk_aligned+0x34>
 8008b36:	1cc4      	adds	r4, r0, #3
 8008b38:	f024 0403 	bic.w	r4, r4, #3
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d007      	beq.n	8008b50 <sbrk_aligned+0x38>
 8008b40:	1a21      	subs	r1, r4, r0
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 fcc6 	bl	80094d4 <_sbrk_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d101      	bne.n	8008b50 <sbrk_aligned+0x38>
 8008b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b50:	4620      	mov	r0, r4
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	200003f4 	.word	0x200003f4

08008b58 <_malloc_r>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	1ccd      	adds	r5, r1, #3
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	db01      	blt.n	8008b74 <_malloc_r+0x1c>
 8008b70:	42a9      	cmp	r1, r5
 8008b72:	d905      	bls.n	8008b80 <_malloc_r+0x28>
 8008b74:	230c      	movs	r3, #12
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	2600      	movs	r6, #0
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	4e2e      	ldr	r6, [pc, #184]	; (8008c3c <_malloc_r+0xe4>)
 8008b82:	f000 fd6b 	bl	800965c <__malloc_lock>
 8008b86:	6833      	ldr	r3, [r6, #0]
 8008b88:	461c      	mov	r4, r3
 8008b8a:	bb34      	cbnz	r4, 8008bda <_malloc_r+0x82>
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7ff ffc2 	bl	8008b18 <sbrk_aligned>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	4604      	mov	r4, r0
 8008b98:	d14d      	bne.n	8008c36 <_malloc_r+0xde>
 8008b9a:	6834      	ldr	r4, [r6, #0]
 8008b9c:	4626      	mov	r6, r4
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d140      	bne.n	8008c24 <_malloc_r+0xcc>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	eb04 0803 	add.w	r8, r4, r3
 8008bac:	f000 fc92 	bl	80094d4 <_sbrk_r>
 8008bb0:	4580      	cmp	r8, r0
 8008bb2:	d13a      	bne.n	8008c2a <_malloc_r+0xd2>
 8008bb4:	6821      	ldr	r1, [r4, #0]
 8008bb6:	3503      	adds	r5, #3
 8008bb8:	1a6d      	subs	r5, r5, r1
 8008bba:	f025 0503 	bic.w	r5, r5, #3
 8008bbe:	3508      	adds	r5, #8
 8008bc0:	2d0c      	cmp	r5, #12
 8008bc2:	bf38      	it	cc
 8008bc4:	250c      	movcc	r5, #12
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f7ff ffa5 	bl	8008b18 <sbrk_aligned>
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d02b      	beq.n	8008c2a <_malloc_r+0xd2>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	442b      	add	r3, r5
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	e00e      	b.n	8008bf8 <_malloc_r+0xa0>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	1b52      	subs	r2, r2, r5
 8008bde:	d41e      	bmi.n	8008c1e <_malloc_r+0xc6>
 8008be0:	2a0b      	cmp	r2, #11
 8008be2:	d916      	bls.n	8008c12 <_malloc_r+0xba>
 8008be4:	1961      	adds	r1, r4, r5
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	6025      	str	r5, [r4, #0]
 8008bea:	bf18      	it	ne
 8008bec:	6059      	strne	r1, [r3, #4]
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	bf08      	it	eq
 8008bf2:	6031      	streq	r1, [r6, #0]
 8008bf4:	5162      	str	r2, [r4, r5]
 8008bf6:	604b      	str	r3, [r1, #4]
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f104 060b 	add.w	r6, r4, #11
 8008bfe:	f000 fd33 	bl	8009668 <__malloc_unlock>
 8008c02:	f026 0607 	bic.w	r6, r6, #7
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	1af2      	subs	r2, r6, r3
 8008c0a:	d0b6      	beq.n	8008b7a <_malloc_r+0x22>
 8008c0c:	1b9b      	subs	r3, r3, r6
 8008c0e:	50a3      	str	r3, [r4, r2]
 8008c10:	e7b3      	b.n	8008b7a <_malloc_r+0x22>
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	bf0c      	ite	eq
 8008c18:	6032      	streq	r2, [r6, #0]
 8008c1a:	605a      	strne	r2, [r3, #4]
 8008c1c:	e7ec      	b.n	8008bf8 <_malloc_r+0xa0>
 8008c1e:	4623      	mov	r3, r4
 8008c20:	6864      	ldr	r4, [r4, #4]
 8008c22:	e7b2      	b.n	8008b8a <_malloc_r+0x32>
 8008c24:	4634      	mov	r4, r6
 8008c26:	6876      	ldr	r6, [r6, #4]
 8008c28:	e7b9      	b.n	8008b9e <_malloc_r+0x46>
 8008c2a:	230c      	movs	r3, #12
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	4638      	mov	r0, r7
 8008c30:	f000 fd1a 	bl	8009668 <__malloc_unlock>
 8008c34:	e7a1      	b.n	8008b7a <_malloc_r+0x22>
 8008c36:	6025      	str	r5, [r4, #0]
 8008c38:	e7de      	b.n	8008bf8 <_malloc_r+0xa0>
 8008c3a:	bf00      	nop
 8008c3c:	200003f0 	.word	0x200003f0

08008c40 <__ssputs_r>:
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	688e      	ldr	r6, [r1, #8]
 8008c46:	429e      	cmp	r6, r3
 8008c48:	4682      	mov	sl, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	4690      	mov	r8, r2
 8008c4e:	461f      	mov	r7, r3
 8008c50:	d838      	bhi.n	8008cc4 <__ssputs_r+0x84>
 8008c52:	898a      	ldrh	r2, [r1, #12]
 8008c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c58:	d032      	beq.n	8008cc0 <__ssputs_r+0x80>
 8008c5a:	6825      	ldr	r5, [r4, #0]
 8008c5c:	6909      	ldr	r1, [r1, #16]
 8008c5e:	eba5 0901 	sub.w	r9, r5, r1
 8008c62:	6965      	ldr	r5, [r4, #20]
 8008c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	444b      	add	r3, r9
 8008c70:	106d      	asrs	r5, r5, #1
 8008c72:	429d      	cmp	r5, r3
 8008c74:	bf38      	it	cc
 8008c76:	461d      	movcc	r5, r3
 8008c78:	0553      	lsls	r3, r2, #21
 8008c7a:	d531      	bpl.n	8008ce0 <__ssputs_r+0xa0>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7ff ff6b 	bl	8008b58 <_malloc_r>
 8008c82:	4606      	mov	r6, r0
 8008c84:	b950      	cbnz	r0, 8008c9c <__ssputs_r+0x5c>
 8008c86:	230c      	movs	r3, #12
 8008c88:	f8ca 3000 	str.w	r3, [sl]
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9c:	6921      	ldr	r1, [r4, #16]
 8008c9e:	464a      	mov	r2, r9
 8008ca0:	f7ff fb4a 	bl	8008338 <memcpy>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	6126      	str	r6, [r4, #16]
 8008cb2:	6165      	str	r5, [r4, #20]
 8008cb4:	444e      	add	r6, r9
 8008cb6:	eba5 0509 	sub.w	r5, r5, r9
 8008cba:	6026      	str	r6, [r4, #0]
 8008cbc:	60a5      	str	r5, [r4, #8]
 8008cbe:	463e      	mov	r6, r7
 8008cc0:	42be      	cmp	r6, r7
 8008cc2:	d900      	bls.n	8008cc6 <__ssputs_r+0x86>
 8008cc4:	463e      	mov	r6, r7
 8008cc6:	6820      	ldr	r0, [r4, #0]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	4641      	mov	r1, r8
 8008ccc:	f000 fcac 	bl	8009628 <memmove>
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	1b9b      	subs	r3, r3, r6
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	4433      	add	r3, r6
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e7db      	b.n	8008c98 <__ssputs_r+0x58>
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	f000 fcc7 	bl	8009674 <_realloc_r>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1e1      	bne.n	8008cb0 <__ssputs_r+0x70>
 8008cec:	6921      	ldr	r1, [r4, #16]
 8008cee:	4650      	mov	r0, sl
 8008cf0:	f7ff fec6 	bl	8008a80 <_free_r>
 8008cf4:	e7c7      	b.n	8008c86 <__ssputs_r+0x46>
	...

08008cf8 <_svfiprintf_r>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	4698      	mov	r8, r3
 8008cfe:	898b      	ldrh	r3, [r1, #12]
 8008d00:	061b      	lsls	r3, r3, #24
 8008d02:	b09d      	sub	sp, #116	; 0x74
 8008d04:	4607      	mov	r7, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	4614      	mov	r4, r2
 8008d0a:	d50e      	bpl.n	8008d2a <_svfiprintf_r+0x32>
 8008d0c:	690b      	ldr	r3, [r1, #16]
 8008d0e:	b963      	cbnz	r3, 8008d2a <_svfiprintf_r+0x32>
 8008d10:	2140      	movs	r1, #64	; 0x40
 8008d12:	f7ff ff21 	bl	8008b58 <_malloc_r>
 8008d16:	6028      	str	r0, [r5, #0]
 8008d18:	6128      	str	r0, [r5, #16]
 8008d1a:	b920      	cbnz	r0, 8008d26 <_svfiprintf_r+0x2e>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e0d1      	b.n	8008eca <_svfiprintf_r+0x1d2>
 8008d26:	2340      	movs	r3, #64	; 0x40
 8008d28:	616b      	str	r3, [r5, #20]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	2320      	movs	r3, #32
 8008d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d38:	2330      	movs	r3, #48	; 0x30
 8008d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ee4 <_svfiprintf_r+0x1ec>
 8008d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d42:	f04f 0901 	mov.w	r9, #1
 8008d46:	4623      	mov	r3, r4
 8008d48:	469a      	mov	sl, r3
 8008d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4e:	b10a      	cbz	r2, 8008d54 <_svfiprintf_r+0x5c>
 8008d50:	2a25      	cmp	r2, #37	; 0x25
 8008d52:	d1f9      	bne.n	8008d48 <_svfiprintf_r+0x50>
 8008d54:	ebba 0b04 	subs.w	fp, sl, r4
 8008d58:	d00b      	beq.n	8008d72 <_svfiprintf_r+0x7a>
 8008d5a:	465b      	mov	r3, fp
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4638      	mov	r0, r7
 8008d62:	f7ff ff6d 	bl	8008c40 <__ssputs_r>
 8008d66:	3001      	adds	r0, #1
 8008d68:	f000 80aa 	beq.w	8008ec0 <_svfiprintf_r+0x1c8>
 8008d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d6e:	445a      	add	r2, fp
 8008d70:	9209      	str	r2, [sp, #36]	; 0x24
 8008d72:	f89a 3000 	ldrb.w	r3, [sl]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80a2 	beq.w	8008ec0 <_svfiprintf_r+0x1c8>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d86:	f10a 0a01 	add.w	sl, sl, #1
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	9307      	str	r3, [sp, #28]
 8008d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d92:	931a      	str	r3, [sp, #104]	; 0x68
 8008d94:	4654      	mov	r4, sl
 8008d96:	2205      	movs	r2, #5
 8008d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9c:	4851      	ldr	r0, [pc, #324]	; (8008ee4 <_svfiprintf_r+0x1ec>)
 8008d9e:	f7f7 fa3f 	bl	8000220 <memchr>
 8008da2:	9a04      	ldr	r2, [sp, #16]
 8008da4:	b9d8      	cbnz	r0, 8008dde <_svfiprintf_r+0xe6>
 8008da6:	06d0      	lsls	r0, r2, #27
 8008da8:	bf44      	itt	mi
 8008daa:	2320      	movmi	r3, #32
 8008dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db0:	0711      	lsls	r1, r2, #28
 8008db2:	bf44      	itt	mi
 8008db4:	232b      	movmi	r3, #43	; 0x2b
 8008db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dba:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc0:	d015      	beq.n	8008dee <_svfiprintf_r+0xf6>
 8008dc2:	9a07      	ldr	r2, [sp, #28]
 8008dc4:	4654      	mov	r4, sl
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f04f 0c0a 	mov.w	ip, #10
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd2:	3b30      	subs	r3, #48	; 0x30
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d94e      	bls.n	8008e76 <_svfiprintf_r+0x17e>
 8008dd8:	b1b0      	cbz	r0, 8008e08 <_svfiprintf_r+0x110>
 8008dda:	9207      	str	r2, [sp, #28]
 8008ddc:	e014      	b.n	8008e08 <_svfiprintf_r+0x110>
 8008dde:	eba0 0308 	sub.w	r3, r0, r8
 8008de2:	fa09 f303 	lsl.w	r3, r9, r3
 8008de6:	4313      	orrs	r3, r2
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	46a2      	mov	sl, r4
 8008dec:	e7d2      	b.n	8008d94 <_svfiprintf_r+0x9c>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	1d19      	adds	r1, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	9103      	str	r1, [sp, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfbb      	ittet	lt
 8008dfa:	425b      	neglt	r3, r3
 8008dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8008e00:	9307      	strge	r3, [sp, #28]
 8008e02:	9307      	strlt	r3, [sp, #28]
 8008e04:	bfb8      	it	lt
 8008e06:	9204      	strlt	r2, [sp, #16]
 8008e08:	7823      	ldrb	r3, [r4, #0]
 8008e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0c:	d10c      	bne.n	8008e28 <_svfiprintf_r+0x130>
 8008e0e:	7863      	ldrb	r3, [r4, #1]
 8008e10:	2b2a      	cmp	r3, #42	; 0x2a
 8008e12:	d135      	bne.n	8008e80 <_svfiprintf_r+0x188>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	1d1a      	adds	r2, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	9203      	str	r2, [sp, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfb8      	it	lt
 8008e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e24:	3402      	adds	r4, #2
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ef4 <_svfiprintf_r+0x1fc>
 8008e2c:	7821      	ldrb	r1, [r4, #0]
 8008e2e:	2203      	movs	r2, #3
 8008e30:	4650      	mov	r0, sl
 8008e32:	f7f7 f9f5 	bl	8000220 <memchr>
 8008e36:	b140      	cbz	r0, 8008e4a <_svfiprintf_r+0x152>
 8008e38:	2340      	movs	r3, #64	; 0x40
 8008e3a:	eba0 000a 	sub.w	r0, r0, sl
 8008e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	4303      	orrs	r3, r0
 8008e46:	3401      	adds	r4, #1
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4e:	4826      	ldr	r0, [pc, #152]	; (8008ee8 <_svfiprintf_r+0x1f0>)
 8008e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e54:	2206      	movs	r2, #6
 8008e56:	f7f7 f9e3 	bl	8000220 <memchr>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d038      	beq.n	8008ed0 <_svfiprintf_r+0x1d8>
 8008e5e:	4b23      	ldr	r3, [pc, #140]	; (8008eec <_svfiprintf_r+0x1f4>)
 8008e60:	bb1b      	cbnz	r3, 8008eaa <_svfiprintf_r+0x1b2>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	3307      	adds	r3, #7
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	4433      	add	r3, r6
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	e767      	b.n	8008d46 <_svfiprintf_r+0x4e>
 8008e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	e7a5      	b.n	8008dcc <_svfiprintf_r+0xd4>
 8008e80:	2300      	movs	r3, #0
 8008e82:	3401      	adds	r4, #1
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	4619      	mov	r1, r3
 8008e88:	f04f 0c0a 	mov.w	ip, #10
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e92:	3a30      	subs	r2, #48	; 0x30
 8008e94:	2a09      	cmp	r2, #9
 8008e96:	d903      	bls.n	8008ea0 <_svfiprintf_r+0x1a8>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0c5      	beq.n	8008e28 <_svfiprintf_r+0x130>
 8008e9c:	9105      	str	r1, [sp, #20]
 8008e9e:	e7c3      	b.n	8008e28 <_svfiprintf_r+0x130>
 8008ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7f0      	b.n	8008e8c <_svfiprintf_r+0x194>
 8008eaa:	ab03      	add	r3, sp, #12
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <_svfiprintf_r+0x1f8>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	f3af 8000 	nop.w
 8008eba:	1c42      	adds	r2, r0, #1
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	d1d6      	bne.n	8008e6e <_svfiprintf_r+0x176>
 8008ec0:	89ab      	ldrh	r3, [r5, #12]
 8008ec2:	065b      	lsls	r3, r3, #25
 8008ec4:	f53f af2c 	bmi.w	8008d20 <_svfiprintf_r+0x28>
 8008ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eca:	b01d      	add	sp, #116	; 0x74
 8008ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	ab03      	add	r3, sp, #12
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <_svfiprintf_r+0x1f8>)
 8008ed8:	a904      	add	r1, sp, #16
 8008eda:	4638      	mov	r0, r7
 8008edc:	f000 f9d4 	bl	8009288 <_printf_i>
 8008ee0:	e7eb      	b.n	8008eba <_svfiprintf_r+0x1c2>
 8008ee2:	bf00      	nop
 8008ee4:	08009fb0 	.word	0x08009fb0
 8008ee8:	08009fba 	.word	0x08009fba
 8008eec:	00000000 	.word	0x00000000
 8008ef0:	08008c41 	.word	0x08008c41
 8008ef4:	08009fb6 	.word	0x08009fb6

08008ef8 <__sfputc_r>:
 8008ef8:	6893      	ldr	r3, [r2, #8]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	b410      	push	{r4}
 8008f00:	6093      	str	r3, [r2, #8]
 8008f02:	da08      	bge.n	8008f16 <__sfputc_r+0x1e>
 8008f04:	6994      	ldr	r4, [r2, #24]
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	db01      	blt.n	8008f0e <__sfputc_r+0x16>
 8008f0a:	290a      	cmp	r1, #10
 8008f0c:	d103      	bne.n	8008f16 <__sfputc_r+0x1e>
 8008f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f12:	f7ff bad5 	b.w	80084c0 <__swbuf_r>
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	1c58      	adds	r0, r3, #1
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	7019      	strb	r1, [r3, #0]
 8008f1e:	4608      	mov	r0, r1
 8008f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <__sfputs_r>:
 8008f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f28:	4606      	mov	r6, r0
 8008f2a:	460f      	mov	r7, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	18d5      	adds	r5, r2, r3
 8008f30:	42ac      	cmp	r4, r5
 8008f32:	d101      	bne.n	8008f38 <__sfputs_r+0x12>
 8008f34:	2000      	movs	r0, #0
 8008f36:	e007      	b.n	8008f48 <__sfputs_r+0x22>
 8008f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3c:	463a      	mov	r2, r7
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7ff ffda 	bl	8008ef8 <__sfputc_r>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d1f3      	bne.n	8008f30 <__sfputs_r+0xa>
 8008f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f4c <_vfiprintf_r>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	460d      	mov	r5, r1
 8008f52:	b09d      	sub	sp, #116	; 0x74
 8008f54:	4614      	mov	r4, r2
 8008f56:	4698      	mov	r8, r3
 8008f58:	4606      	mov	r6, r0
 8008f5a:	b118      	cbz	r0, 8008f64 <_vfiprintf_r+0x18>
 8008f5c:	6983      	ldr	r3, [r0, #24]
 8008f5e:	b90b      	cbnz	r3, 8008f64 <_vfiprintf_r+0x18>
 8008f60:	f7ff fc88 	bl	8008874 <__sinit>
 8008f64:	4b89      	ldr	r3, [pc, #548]	; (800918c <_vfiprintf_r+0x240>)
 8008f66:	429d      	cmp	r5, r3
 8008f68:	d11b      	bne.n	8008fa2 <_vfiprintf_r+0x56>
 8008f6a:	6875      	ldr	r5, [r6, #4]
 8008f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	d405      	bmi.n	8008f7e <_vfiprintf_r+0x32>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	059a      	lsls	r2, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_vfiprintf_r+0x32>
 8008f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7a:	f7ff fd19 	bl	80089b0 <__retarget_lock_acquire_recursive>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	071b      	lsls	r3, r3, #28
 8008f82:	d501      	bpl.n	8008f88 <_vfiprintf_r+0x3c>
 8008f84:	692b      	ldr	r3, [r5, #16]
 8008f86:	b9eb      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x78>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff faea 	bl	8008564 <__swsetup_r>
 8008f90:	b1c0      	cbz	r0, 8008fc4 <_vfiprintf_r+0x78>
 8008f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f94:	07dc      	lsls	r4, r3, #31
 8008f96:	d50e      	bpl.n	8008fb6 <_vfiprintf_r+0x6a>
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	b01d      	add	sp, #116	; 0x74
 8008f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa2:	4b7b      	ldr	r3, [pc, #492]	; (8009190 <_vfiprintf_r+0x244>)
 8008fa4:	429d      	cmp	r5, r3
 8008fa6:	d101      	bne.n	8008fac <_vfiprintf_r+0x60>
 8008fa8:	68b5      	ldr	r5, [r6, #8]
 8008faa:	e7df      	b.n	8008f6c <_vfiprintf_r+0x20>
 8008fac:	4b79      	ldr	r3, [pc, #484]	; (8009194 <_vfiprintf_r+0x248>)
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	bf08      	it	eq
 8008fb2:	68f5      	ldreq	r5, [r6, #12]
 8008fb4:	e7da      	b.n	8008f6c <_vfiprintf_r+0x20>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	0598      	lsls	r0, r3, #22
 8008fba:	d4ed      	bmi.n	8008f98 <_vfiprintf_r+0x4c>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fbe:	f7ff fcf8 	bl	80089b2 <__retarget_lock_release_recursive>
 8008fc2:	e7e9      	b.n	8008f98 <_vfiprintf_r+0x4c>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd2:	2330      	movs	r3, #48	; 0x30
 8008fd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009198 <_vfiprintf_r+0x24c>
 8008fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fdc:	f04f 0901 	mov.w	r9, #1
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	469a      	mov	sl, r3
 8008fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe8:	b10a      	cbz	r2, 8008fee <_vfiprintf_r+0xa2>
 8008fea:	2a25      	cmp	r2, #37	; 0x25
 8008fec:	d1f9      	bne.n	8008fe2 <_vfiprintf_r+0x96>
 8008fee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff2:	d00b      	beq.n	800900c <_vfiprintf_r+0xc0>
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ff93 	bl	8008f26 <__sfputs_r>
 8009000:	3001      	adds	r0, #1
 8009002:	f000 80aa 	beq.w	800915a <_vfiprintf_r+0x20e>
 8009006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009008:	445a      	add	r2, fp
 800900a:	9209      	str	r2, [sp, #36]	; 0x24
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a2 	beq.w	800915a <_vfiprintf_r+0x20e>
 8009016:	2300      	movs	r3, #0
 8009018:	f04f 32ff 	mov.w	r2, #4294967295
 800901c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009020:	f10a 0a01 	add.w	sl, sl, #1
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800902c:	931a      	str	r3, [sp, #104]	; 0x68
 800902e:	4654      	mov	r4, sl
 8009030:	2205      	movs	r2, #5
 8009032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009036:	4858      	ldr	r0, [pc, #352]	; (8009198 <_vfiprintf_r+0x24c>)
 8009038:	f7f7 f8f2 	bl	8000220 <memchr>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	b9d8      	cbnz	r0, 8009078 <_vfiprintf_r+0x12c>
 8009040:	06d1      	lsls	r1, r2, #27
 8009042:	bf44      	itt	mi
 8009044:	2320      	movmi	r3, #32
 8009046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904a:	0713      	lsls	r3, r2, #28
 800904c:	bf44      	itt	mi
 800904e:	232b      	movmi	r3, #43	; 0x2b
 8009050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009054:	f89a 3000 	ldrb.w	r3, [sl]
 8009058:	2b2a      	cmp	r3, #42	; 0x2a
 800905a:	d015      	beq.n	8009088 <_vfiprintf_r+0x13c>
 800905c:	9a07      	ldr	r2, [sp, #28]
 800905e:	4654      	mov	r4, sl
 8009060:	2000      	movs	r0, #0
 8009062:	f04f 0c0a 	mov.w	ip, #10
 8009066:	4621      	mov	r1, r4
 8009068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d94e      	bls.n	8009110 <_vfiprintf_r+0x1c4>
 8009072:	b1b0      	cbz	r0, 80090a2 <_vfiprintf_r+0x156>
 8009074:	9207      	str	r2, [sp, #28]
 8009076:	e014      	b.n	80090a2 <_vfiprintf_r+0x156>
 8009078:	eba0 0308 	sub.w	r3, r0, r8
 800907c:	fa09 f303 	lsl.w	r3, r9, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	46a2      	mov	sl, r4
 8009086:	e7d2      	b.n	800902e <_vfiprintf_r+0xe2>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	1d19      	adds	r1, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	9103      	str	r1, [sp, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfbb      	ittet	lt
 8009094:	425b      	neglt	r3, r3
 8009096:	f042 0202 	orrlt.w	r2, r2, #2
 800909a:	9307      	strge	r3, [sp, #28]
 800909c:	9307      	strlt	r3, [sp, #28]
 800909e:	bfb8      	it	lt
 80090a0:	9204      	strlt	r2, [sp, #16]
 80090a2:	7823      	ldrb	r3, [r4, #0]
 80090a4:	2b2e      	cmp	r3, #46	; 0x2e
 80090a6:	d10c      	bne.n	80090c2 <_vfiprintf_r+0x176>
 80090a8:	7863      	ldrb	r3, [r4, #1]
 80090aa:	2b2a      	cmp	r3, #42	; 0x2a
 80090ac:	d135      	bne.n	800911a <_vfiprintf_r+0x1ce>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	1d1a      	adds	r2, r3, #4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	9203      	str	r2, [sp, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfb8      	it	lt
 80090ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80090be:	3402      	adds	r4, #2
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091a8 <_vfiprintf_r+0x25c>
 80090c6:	7821      	ldrb	r1, [r4, #0]
 80090c8:	2203      	movs	r2, #3
 80090ca:	4650      	mov	r0, sl
 80090cc:	f7f7 f8a8 	bl	8000220 <memchr>
 80090d0:	b140      	cbz	r0, 80090e4 <_vfiprintf_r+0x198>
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	eba0 000a 	sub.w	r0, r0, sl
 80090d8:	fa03 f000 	lsl.w	r0, r3, r0
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	4303      	orrs	r3, r0
 80090e0:	3401      	adds	r4, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e8:	482c      	ldr	r0, [pc, #176]	; (800919c <_vfiprintf_r+0x250>)
 80090ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ee:	2206      	movs	r2, #6
 80090f0:	f7f7 f896 	bl	8000220 <memchr>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d03f      	beq.n	8009178 <_vfiprintf_r+0x22c>
 80090f8:	4b29      	ldr	r3, [pc, #164]	; (80091a0 <_vfiprintf_r+0x254>)
 80090fa:	bb1b      	cbnz	r3, 8009144 <_vfiprintf_r+0x1f8>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	3307      	adds	r3, #7
 8009100:	f023 0307 	bic.w	r3, r3, #7
 8009104:	3308      	adds	r3, #8
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910a:	443b      	add	r3, r7
 800910c:	9309      	str	r3, [sp, #36]	; 0x24
 800910e:	e767      	b.n	8008fe0 <_vfiprintf_r+0x94>
 8009110:	fb0c 3202 	mla	r2, ip, r2, r3
 8009114:	460c      	mov	r4, r1
 8009116:	2001      	movs	r0, #1
 8009118:	e7a5      	b.n	8009066 <_vfiprintf_r+0x11a>
 800911a:	2300      	movs	r3, #0
 800911c:	3401      	adds	r4, #1
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	4619      	mov	r1, r3
 8009122:	f04f 0c0a 	mov.w	ip, #10
 8009126:	4620      	mov	r0, r4
 8009128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912c:	3a30      	subs	r2, #48	; 0x30
 800912e:	2a09      	cmp	r2, #9
 8009130:	d903      	bls.n	800913a <_vfiprintf_r+0x1ee>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c5      	beq.n	80090c2 <_vfiprintf_r+0x176>
 8009136:	9105      	str	r1, [sp, #20]
 8009138:	e7c3      	b.n	80090c2 <_vfiprintf_r+0x176>
 800913a:	fb0c 2101 	mla	r1, ip, r1, r2
 800913e:	4604      	mov	r4, r0
 8009140:	2301      	movs	r3, #1
 8009142:	e7f0      	b.n	8009126 <_vfiprintf_r+0x1da>
 8009144:	ab03      	add	r3, sp, #12
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	462a      	mov	r2, r5
 800914a:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <_vfiprintf_r+0x258>)
 800914c:	a904      	add	r1, sp, #16
 800914e:	4630      	mov	r0, r6
 8009150:	f3af 8000 	nop.w
 8009154:	4607      	mov	r7, r0
 8009156:	1c78      	adds	r0, r7, #1
 8009158:	d1d6      	bne.n	8009108 <_vfiprintf_r+0x1bc>
 800915a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915c:	07d9      	lsls	r1, r3, #31
 800915e:	d405      	bmi.n	800916c <_vfiprintf_r+0x220>
 8009160:	89ab      	ldrh	r3, [r5, #12]
 8009162:	059a      	lsls	r2, r3, #22
 8009164:	d402      	bmi.n	800916c <_vfiprintf_r+0x220>
 8009166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009168:	f7ff fc23 	bl	80089b2 <__retarget_lock_release_recursive>
 800916c:	89ab      	ldrh	r3, [r5, #12]
 800916e:	065b      	lsls	r3, r3, #25
 8009170:	f53f af12 	bmi.w	8008f98 <_vfiprintf_r+0x4c>
 8009174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009176:	e711      	b.n	8008f9c <_vfiprintf_r+0x50>
 8009178:	ab03      	add	r3, sp, #12
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	462a      	mov	r2, r5
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <_vfiprintf_r+0x258>)
 8009180:	a904      	add	r1, sp, #16
 8009182:	4630      	mov	r0, r6
 8009184:	f000 f880 	bl	8009288 <_printf_i>
 8009188:	e7e4      	b.n	8009154 <_vfiprintf_r+0x208>
 800918a:	bf00      	nop
 800918c:	08009f70 	.word	0x08009f70
 8009190:	08009f90 	.word	0x08009f90
 8009194:	08009f50 	.word	0x08009f50
 8009198:	08009fb0 	.word	0x08009fb0
 800919c:	08009fba 	.word	0x08009fba
 80091a0:	00000000 	.word	0x00000000
 80091a4:	08008f27 	.word	0x08008f27
 80091a8:	08009fb6 	.word	0x08009fb6

080091ac <_printf_common>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	4616      	mov	r6, r2
 80091b2:	4699      	mov	r9, r3
 80091b4:	688a      	ldr	r2, [r1, #8]
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bfb8      	it	lt
 80091c0:	4613      	movlt	r3, r2
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091c8:	4607      	mov	r7, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b10a      	cbz	r2, 80091d2 <_printf_common+0x26>
 80091ce:	3301      	adds	r3, #1
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	0699      	lsls	r1, r3, #26
 80091d6:	bf42      	ittt	mi
 80091d8:	6833      	ldrmi	r3, [r6, #0]
 80091da:	3302      	addmi	r3, #2
 80091dc:	6033      	strmi	r3, [r6, #0]
 80091de:	6825      	ldr	r5, [r4, #0]
 80091e0:	f015 0506 	ands.w	r5, r5, #6
 80091e4:	d106      	bne.n	80091f4 <_printf_common+0x48>
 80091e6:	f104 0a19 	add.w	sl, r4, #25
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	6832      	ldr	r2, [r6, #0]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	dc26      	bgt.n	8009242 <_printf_common+0x96>
 80091f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091f8:	1e13      	subs	r3, r2, #0
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	bf18      	it	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	0692      	lsls	r2, r2, #26
 8009202:	d42b      	bmi.n	800925c <_printf_common+0xb0>
 8009204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009208:	4649      	mov	r1, r9
 800920a:	4638      	mov	r0, r7
 800920c:	47c0      	blx	r8
 800920e:	3001      	adds	r0, #1
 8009210:	d01e      	beq.n	8009250 <_printf_common+0xa4>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	68e5      	ldr	r5, [r4, #12]
 8009216:	6832      	ldr	r2, [r6, #0]
 8009218:	f003 0306 	and.w	r3, r3, #6
 800921c:	2b04      	cmp	r3, #4
 800921e:	bf08      	it	eq
 8009220:	1aad      	subeq	r5, r5, r2
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	bf0c      	ite	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	2500      	movne	r5, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	bfc4      	itt	gt
 8009232:	1a9b      	subgt	r3, r3, r2
 8009234:	18ed      	addgt	r5, r5, r3
 8009236:	2600      	movs	r6, #0
 8009238:	341a      	adds	r4, #26
 800923a:	42b5      	cmp	r5, r6
 800923c:	d11a      	bne.n	8009274 <_printf_common+0xc8>
 800923e:	2000      	movs	r0, #0
 8009240:	e008      	b.n	8009254 <_printf_common+0xa8>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4649      	mov	r1, r9
 8009248:	4638      	mov	r0, r7
 800924a:	47c0      	blx	r8
 800924c:	3001      	adds	r0, #1
 800924e:	d103      	bne.n	8009258 <_printf_common+0xac>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	3501      	adds	r5, #1
 800925a:	e7c6      	b.n	80091ea <_printf_common+0x3e>
 800925c:	18e1      	adds	r1, r4, r3
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	2030      	movs	r0, #48	; 0x30
 8009262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009266:	4422      	add	r2, r4
 8009268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800926c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009270:	3302      	adds	r3, #2
 8009272:	e7c7      	b.n	8009204 <_printf_common+0x58>
 8009274:	2301      	movs	r3, #1
 8009276:	4622      	mov	r2, r4
 8009278:	4649      	mov	r1, r9
 800927a:	4638      	mov	r0, r7
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d0e6      	beq.n	8009250 <_printf_common+0xa4>
 8009282:	3601      	adds	r6, #1
 8009284:	e7d9      	b.n	800923a <_printf_common+0x8e>
	...

08009288 <_printf_i>:
 8009288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	7e0f      	ldrb	r7, [r1, #24]
 800928e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009290:	2f78      	cmp	r7, #120	; 0x78
 8009292:	4691      	mov	r9, r2
 8009294:	4680      	mov	r8, r0
 8009296:	460c      	mov	r4, r1
 8009298:	469a      	mov	sl, r3
 800929a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800929e:	d807      	bhi.n	80092b0 <_printf_i+0x28>
 80092a0:	2f62      	cmp	r7, #98	; 0x62
 80092a2:	d80a      	bhi.n	80092ba <_printf_i+0x32>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	f000 80d8 	beq.w	800945a <_printf_i+0x1d2>
 80092aa:	2f58      	cmp	r7, #88	; 0x58
 80092ac:	f000 80a3 	beq.w	80093f6 <_printf_i+0x16e>
 80092b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092b8:	e03a      	b.n	8009330 <_printf_i+0xa8>
 80092ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092be:	2b15      	cmp	r3, #21
 80092c0:	d8f6      	bhi.n	80092b0 <_printf_i+0x28>
 80092c2:	a101      	add	r1, pc, #4	; (adr r1, 80092c8 <_printf_i+0x40>)
 80092c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c8:	08009321 	.word	0x08009321
 80092cc:	08009335 	.word	0x08009335
 80092d0:	080092b1 	.word	0x080092b1
 80092d4:	080092b1 	.word	0x080092b1
 80092d8:	080092b1 	.word	0x080092b1
 80092dc:	080092b1 	.word	0x080092b1
 80092e0:	08009335 	.word	0x08009335
 80092e4:	080092b1 	.word	0x080092b1
 80092e8:	080092b1 	.word	0x080092b1
 80092ec:	080092b1 	.word	0x080092b1
 80092f0:	080092b1 	.word	0x080092b1
 80092f4:	08009441 	.word	0x08009441
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009423 	.word	0x08009423
 8009300:	080092b1 	.word	0x080092b1
 8009304:	080092b1 	.word	0x080092b1
 8009308:	08009463 	.word	0x08009463
 800930c:	080092b1 	.word	0x080092b1
 8009310:	08009365 	.word	0x08009365
 8009314:	080092b1 	.word	0x080092b1
 8009318:	080092b1 	.word	0x080092b1
 800931c:	0800942b 	.word	0x0800942b
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800932c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009330:	2301      	movs	r3, #1
 8009332:	e0a3      	b.n	800947c <_printf_i+0x1f4>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	6829      	ldr	r1, [r5, #0]
 8009338:	0606      	lsls	r6, r0, #24
 800933a:	f101 0304 	add.w	r3, r1, #4
 800933e:	d50a      	bpl.n	8009356 <_printf_i+0xce>
 8009340:	680e      	ldr	r6, [r1, #0]
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	2e00      	cmp	r6, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xc8>
 8009348:	232d      	movs	r3, #45	; 0x2d
 800934a:	4276      	negs	r6, r6
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009350:	485e      	ldr	r0, [pc, #376]	; (80094cc <_printf_i+0x244>)
 8009352:	230a      	movs	r3, #10
 8009354:	e019      	b.n	800938a <_printf_i+0x102>
 8009356:	680e      	ldr	r6, [r1, #0]
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800935e:	bf18      	it	ne
 8009360:	b236      	sxthne	r6, r6
 8009362:	e7ef      	b.n	8009344 <_printf_i+0xbc>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	1d19      	adds	r1, r3, #4
 800936a:	6029      	str	r1, [r5, #0]
 800936c:	0601      	lsls	r1, r0, #24
 800936e:	d501      	bpl.n	8009374 <_printf_i+0xec>
 8009370:	681e      	ldr	r6, [r3, #0]
 8009372:	e002      	b.n	800937a <_printf_i+0xf2>
 8009374:	0646      	lsls	r6, r0, #25
 8009376:	d5fb      	bpl.n	8009370 <_printf_i+0xe8>
 8009378:	881e      	ldrh	r6, [r3, #0]
 800937a:	4854      	ldr	r0, [pc, #336]	; (80094cc <_printf_i+0x244>)
 800937c:	2f6f      	cmp	r7, #111	; 0x6f
 800937e:	bf0c      	ite	eq
 8009380:	2308      	moveq	r3, #8
 8009382:	230a      	movne	r3, #10
 8009384:	2100      	movs	r1, #0
 8009386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800938a:	6865      	ldr	r5, [r4, #4]
 800938c:	60a5      	str	r5, [r4, #8]
 800938e:	2d00      	cmp	r5, #0
 8009390:	bfa2      	ittt	ge
 8009392:	6821      	ldrge	r1, [r4, #0]
 8009394:	f021 0104 	bicge.w	r1, r1, #4
 8009398:	6021      	strge	r1, [r4, #0]
 800939a:	b90e      	cbnz	r6, 80093a0 <_printf_i+0x118>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d04d      	beq.n	800943c <_printf_i+0x1b4>
 80093a0:	4615      	mov	r5, r2
 80093a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80093a6:	fb03 6711 	mls	r7, r3, r1, r6
 80093aa:	5dc7      	ldrb	r7, [r0, r7]
 80093ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093b0:	4637      	mov	r7, r6
 80093b2:	42bb      	cmp	r3, r7
 80093b4:	460e      	mov	r6, r1
 80093b6:	d9f4      	bls.n	80093a2 <_printf_i+0x11a>
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d10b      	bne.n	80093d4 <_printf_i+0x14c>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07de      	lsls	r6, r3, #31
 80093c0:	d508      	bpl.n	80093d4 <_printf_i+0x14c>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	6861      	ldr	r1, [r4, #4]
 80093c6:	4299      	cmp	r1, r3
 80093c8:	bfde      	ittt	le
 80093ca:	2330      	movle	r3, #48	; 0x30
 80093cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093d4:	1b52      	subs	r2, r2, r5
 80093d6:	6122      	str	r2, [r4, #16]
 80093d8:	f8cd a000 	str.w	sl, [sp]
 80093dc:	464b      	mov	r3, r9
 80093de:	aa03      	add	r2, sp, #12
 80093e0:	4621      	mov	r1, r4
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7ff fee2 	bl	80091ac <_printf_common>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d14c      	bne.n	8009486 <_printf_i+0x1fe>
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	b004      	add	sp, #16
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	4835      	ldr	r0, [pc, #212]	; (80094cc <_printf_i+0x244>)
 80093f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093fc:	6829      	ldr	r1, [r5, #0]
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f851 6b04 	ldr.w	r6, [r1], #4
 8009404:	6029      	str	r1, [r5, #0]
 8009406:	061d      	lsls	r5, r3, #24
 8009408:	d514      	bpl.n	8009434 <_printf_i+0x1ac>
 800940a:	07df      	lsls	r7, r3, #31
 800940c:	bf44      	itt	mi
 800940e:	f043 0320 	orrmi.w	r3, r3, #32
 8009412:	6023      	strmi	r3, [r4, #0]
 8009414:	b91e      	cbnz	r6, 800941e <_printf_i+0x196>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f023 0320 	bic.w	r3, r3, #32
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	2310      	movs	r3, #16
 8009420:	e7b0      	b.n	8009384 <_printf_i+0xfc>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f043 0320 	orr.w	r3, r3, #32
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	2378      	movs	r3, #120	; 0x78
 800942c:	4828      	ldr	r0, [pc, #160]	; (80094d0 <_printf_i+0x248>)
 800942e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009432:	e7e3      	b.n	80093fc <_printf_i+0x174>
 8009434:	0659      	lsls	r1, r3, #25
 8009436:	bf48      	it	mi
 8009438:	b2b6      	uxthmi	r6, r6
 800943a:	e7e6      	b.n	800940a <_printf_i+0x182>
 800943c:	4615      	mov	r5, r2
 800943e:	e7bb      	b.n	80093b8 <_printf_i+0x130>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	6826      	ldr	r6, [r4, #0]
 8009444:	6961      	ldr	r1, [r4, #20]
 8009446:	1d18      	adds	r0, r3, #4
 8009448:	6028      	str	r0, [r5, #0]
 800944a:	0635      	lsls	r5, r6, #24
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	d501      	bpl.n	8009454 <_printf_i+0x1cc>
 8009450:	6019      	str	r1, [r3, #0]
 8009452:	e002      	b.n	800945a <_printf_i+0x1d2>
 8009454:	0670      	lsls	r0, r6, #25
 8009456:	d5fb      	bpl.n	8009450 <_printf_i+0x1c8>
 8009458:	8019      	strh	r1, [r3, #0]
 800945a:	2300      	movs	r3, #0
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	4615      	mov	r5, r2
 8009460:	e7ba      	b.n	80093d8 <_printf_i+0x150>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	1d1a      	adds	r2, r3, #4
 8009466:	602a      	str	r2, [r5, #0]
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	6862      	ldr	r2, [r4, #4]
 800946c:	2100      	movs	r1, #0
 800946e:	4628      	mov	r0, r5
 8009470:	f7f6 fed6 	bl	8000220 <memchr>
 8009474:	b108      	cbz	r0, 800947a <_printf_i+0x1f2>
 8009476:	1b40      	subs	r0, r0, r5
 8009478:	6060      	str	r0, [r4, #4]
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	2300      	movs	r3, #0
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009484:	e7a8      	b.n	80093d8 <_printf_i+0x150>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	462a      	mov	r2, r5
 800948a:	4649      	mov	r1, r9
 800948c:	4640      	mov	r0, r8
 800948e:	47d0      	blx	sl
 8009490:	3001      	adds	r0, #1
 8009492:	d0ab      	beq.n	80093ec <_printf_i+0x164>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	079b      	lsls	r3, r3, #30
 8009498:	d413      	bmi.n	80094c2 <_printf_i+0x23a>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	4298      	cmp	r0, r3
 80094a0:	bfb8      	it	lt
 80094a2:	4618      	movlt	r0, r3
 80094a4:	e7a4      	b.n	80093f0 <_printf_i+0x168>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d09b      	beq.n	80093ec <_printf_i+0x164>
 80094b4:	3501      	adds	r5, #1
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	9903      	ldr	r1, [sp, #12]
 80094ba:	1a5b      	subs	r3, r3, r1
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dcf2      	bgt.n	80094a6 <_printf_i+0x21e>
 80094c0:	e7eb      	b.n	800949a <_printf_i+0x212>
 80094c2:	2500      	movs	r5, #0
 80094c4:	f104 0619 	add.w	r6, r4, #25
 80094c8:	e7f5      	b.n	80094b6 <_printf_i+0x22e>
 80094ca:	bf00      	nop
 80094cc:	08009fc1 	.word	0x08009fc1
 80094d0:	08009fd2 	.word	0x08009fd2

080094d4 <_sbrk_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_sbrk_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f9 fa3a 	bl	8002958 <_sbrk>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_sbrk_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_sbrk_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200003f8 	.word	0x200003f8

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f8ea 	bl	80096d4 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	; 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2302      	movs	r3, #2
 800952e:	2200      	movs	r2, #0
 8009530:	f000 f868 	bl	8009604 <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b817 	b.w	800957c <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f000 f855 	bl	8009604 <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	; 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b813 	b.w	80095a0 <_close_r>
	...

0800957c <_write_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_write_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f9 f993 	bl	80028b6 <_write>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_write_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_write_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200003f8 	.word	0x200003f8

080095a0 <_close_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	; (80095bc <_close_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f9 f99f 	bl	80028ee <_close>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_close_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_close_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	200003f8 	.word	0x200003f8

080095c0 <_fstat_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_fstat_r+0x20>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	4611      	mov	r1, r2
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f7f9 f99a 	bl	8002906 <_fstat>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d102      	bne.n	80095dc <_fstat_r+0x1c>
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	b103      	cbz	r3, 80095dc <_fstat_r+0x1c>
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	200003f8 	.word	0x200003f8

080095e4 <_isatty_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_isatty_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f9 f999 	bl	8002926 <_isatty>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_isatty_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_isatty_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	200003f8 	.word	0x200003f8

08009604 <_lseek_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_lseek_r+0x20>)
 8009608:	4604      	mov	r4, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	2200      	movs	r2, #0
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f7f9 f992 	bl	800293c <_lseek>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_lseek_r+0x1e>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_lseek_r+0x1e>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	200003f8 	.word	0x200003f8

08009628 <memmove>:
 8009628:	4288      	cmp	r0, r1
 800962a:	b510      	push	{r4, lr}
 800962c:	eb01 0402 	add.w	r4, r1, r2
 8009630:	d902      	bls.n	8009638 <memmove+0x10>
 8009632:	4284      	cmp	r4, r0
 8009634:	4623      	mov	r3, r4
 8009636:	d807      	bhi.n	8009648 <memmove+0x20>
 8009638:	1e43      	subs	r3, r0, #1
 800963a:	42a1      	cmp	r1, r4
 800963c:	d008      	beq.n	8009650 <memmove+0x28>
 800963e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009646:	e7f8      	b.n	800963a <memmove+0x12>
 8009648:	4402      	add	r2, r0
 800964a:	4601      	mov	r1, r0
 800964c:	428a      	cmp	r2, r1
 800964e:	d100      	bne.n	8009652 <memmove+0x2a>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965a:	e7f7      	b.n	800964c <memmove+0x24>

0800965c <__malloc_lock>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__malloc_lock+0x8>)
 800965e:	f7ff b9a7 	b.w	80089b0 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	200003ec 	.word	0x200003ec

08009668 <__malloc_unlock>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__malloc_unlock+0x8>)
 800966a:	f7ff b9a2 	b.w	80089b2 <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	200003ec 	.word	0x200003ec

08009674 <_realloc_r>:
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	4680      	mov	r8, r0
 800967a:	4614      	mov	r4, r2
 800967c:	460e      	mov	r6, r1
 800967e:	b921      	cbnz	r1, 800968a <_realloc_r+0x16>
 8009680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4611      	mov	r1, r2
 8009686:	f7ff ba67 	b.w	8008b58 <_malloc_r>
 800968a:	b92a      	cbnz	r2, 8009698 <_realloc_r+0x24>
 800968c:	f7ff f9f8 	bl	8008a80 <_free_r>
 8009690:	4625      	mov	r5, r4
 8009692:	4628      	mov	r0, r5
 8009694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009698:	f000 f82e 	bl	80096f8 <_malloc_usable_size_r>
 800969c:	4284      	cmp	r4, r0
 800969e:	4607      	mov	r7, r0
 80096a0:	d802      	bhi.n	80096a8 <_realloc_r+0x34>
 80096a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096a6:	d812      	bhi.n	80096ce <_realloc_r+0x5a>
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff fa54 	bl	8008b58 <_malloc_r>
 80096b0:	4605      	mov	r5, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0ed      	beq.n	8009692 <_realloc_r+0x1e>
 80096b6:	42bc      	cmp	r4, r7
 80096b8:	4622      	mov	r2, r4
 80096ba:	4631      	mov	r1, r6
 80096bc:	bf28      	it	cs
 80096be:	463a      	movcs	r2, r7
 80096c0:	f7fe fe3a 	bl	8008338 <memcpy>
 80096c4:	4631      	mov	r1, r6
 80096c6:	4640      	mov	r0, r8
 80096c8:	f7ff f9da 	bl	8008a80 <_free_r>
 80096cc:	e7e1      	b.n	8009692 <_realloc_r+0x1e>
 80096ce:	4635      	mov	r5, r6
 80096d0:	e7df      	b.n	8009692 <_realloc_r+0x1e>
	...

080096d4 <_read_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_read_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f9 f8ca 	bl	800287c <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_read_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_read_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	200003f8 	.word	0x200003f8

080096f8 <_malloc_usable_size_r>:
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f18      	subs	r0, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbc      	itt	lt
 8009702:	580b      	ldrlt	r3, [r1, r0]
 8009704:	18c0      	addlt	r0, r0, r3
 8009706:	4770      	bx	lr

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
