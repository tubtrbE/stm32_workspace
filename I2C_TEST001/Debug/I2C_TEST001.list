
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e0  080095e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e8  080095e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080095f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000338  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018006  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ce  00000000  00000000  000380ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ff3  00000000  00000000  0003dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad51  00000000  00000000  00065c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f09fb  00000000  00000000  000809d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001713cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ba4  00000000  00000000  00171420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d70 	.word	0x08008d70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008d70 	.word	0x08008d70

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f002 fae1 	bl	8002bf0 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f001 fe58 	bl	80022e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f002 fc27 	bl	8002e9c <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f001 fe48 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000094 	.word	0x20000094
 8000664:	40012000 	.word	0x40012000

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d127      	bne.n	80006da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0x84>)
 80006d6:	f002 ffb3 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xac>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_GPIO_Init+0xac>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xac>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xac>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_GPIO_Init+0xac>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xac>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0xac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_GPIO_Init+0xac>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_GPIO_Init+0xac>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0xac>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <MX_GPIO_Init+0xac>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_GPIO_Init+0xac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800077c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xb0>)
 800078e:	f002 ff57 	bl	8003640 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800

080007a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e2:	f003 f909 	bl	80039f8 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f001 fd7c 	bl	80022e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f4:	f003 fe79 	bl	80044ea <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007fe:	f001 fd73 	bl	80022e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x74>)
 8000806:	f003 feac 	bl	8004562 <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000810:	f001 fd6a 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000dc 	.word	0x200000dc
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_I2C_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12c      	bne.n	80008a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <HAL_I2C_MspInit+0x8c>)
 8000880:	f002 fede 	bl	8003640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400

080008b4 <I2C_Scan>:
#include "lcd.h"

HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b096      	sub	sp, #88	; 0x58
 80008b8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <I2C_Scan+0xc0>)
 80008bc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008c0:	461d      	mov	r5, r3
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ca:	6020      	str	r0, [r4, #0]
 80008cc:	3404      	adds	r4, #4
 80008ce:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80008d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc95 	bl	8000204 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <I2C_Scan+0xc4>)
 80008e8:	f006 f869 	bl	80069be <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80008f2:	e030      	b.n	8000956 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80008f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	b299      	uxth	r1, r3
 80008fc:	230a      	movs	r3, #10
 80008fe:	2201      	movs	r2, #1
 8000900:	481e      	ldr	r0, [pc, #120]	; (800097c <I2C_Scan+0xc8>)
 8000902:	f003 fabb 	bl	8003e7c <HAL_I2C_IsDeviceReady>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <I2C_Scan+0xcc>)
 800090c:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <I2C_Scan+0xcc>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d113      	bne.n	800093e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8000916:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800091a:	4638      	mov	r0, r7
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <I2C_Scan+0xd0>)
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	f007 f8e2 	bl	8007ae8 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000924:	463b      	mov	r3, r7
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc6c 	bl	8000204 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b29a      	uxth	r2, r3
 8000930:	4639      	mov	r1, r7
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <I2C_Scan+0xc4>)
 8000938:	f006 f841 	bl	80069be <HAL_UART_Transmit>
 800093c:	e006      	b.n	800094c <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2201      	movs	r2, #1
 8000944:	4910      	ldr	r1, [pc, #64]	; (8000988 <I2C_Scan+0xd4>)
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <I2C_Scan+0xc4>)
 8000948:	f006 f839 	bl	80069be <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800094c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000950:	3301      	adds	r3, #1
 8000952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800095a:	2b7f      	cmp	r3, #127	; 0x7f
 800095c:	d9ca      	bls.n	80008f4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2202      	movs	r2, #2
 8000964:	4909      	ldr	r1, [pc, #36]	; (800098c <I2C_Scan+0xd8>)
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <I2C_Scan+0xc4>)
 8000968:	f006 f829 	bl	80069be <HAL_UART_Transmit>
}
 800096c:	bf00      	nop
 800096e:	3758      	adds	r7, #88	; 0x58
 8000970:	46bd      	mov	sp, r7
 8000972:	bdb0      	pop	{r4, r5, r7, pc}
 8000974:	08008d98 	.word	0x08008d98
 8000978:	20000358 	.word	0x20000358
 800097c:	200000dc 	.word	0x200000dc
 8000980:	20000130 	.word	0x20000130
 8000984:	08008d88 	.word	0x08008d88
 8000988:	08008d90 	.word	0x08008d90
 800098c:	08008d94 	.word	0x08008d94

08000990 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	4613      	mov	r3, r2
 80009a0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2201      	movs	r2, #1
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <LCD_SendInternal+0xa8>)
 80009ae:	f003 fa65 	bl	8003e7c <HAL_I2C_IsDeviceReady>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d000      	beq.n	80009be <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80009bc:	e7f1      	b.n	80009a2 <LCD_SendInternal+0x12>
			break;
 80009be:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80009ce:	7bba      	ldrb	r2, [r7, #14]
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f043 030c 	orr.w	r3, r3, #12
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80009de:	7bba      	ldrb	r2, [r7, #14]
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80009ee:	7b7a      	ldrb	r2, [r7, #13]
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f043 030c 	orr.w	r3, r3, #12
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80009fe:	7b7a      	ldrb	r2, [r7, #13]
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b299      	uxth	r1, r3
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <LCD_SendInternal+0xa8>)
 8000a20:	f003 f92e 	bl	8003c80 <HAL_I2C_Master_Transmit>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000a28:	2005      	movs	r0, #5
 8000a2a:	f002 f8bd 	bl	8002ba8 <HAL_Delay>
	return res;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000dc 	.word	0x200000dc

08000a3c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000a4c:	79b9      	ldrb	r1, [r7, #6]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2200      	movs	r2, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff9c 	bl	8000990 <LCD_SendInternal>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000a70:	79b9      	ldrb	r1, [r7, #6]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff8a 	bl	8000990 <LCD_SendInternal>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2130      	movs	r1, #48	; 0x30
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffd2 	bl	8000a3c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffcd 	bl	8000a3c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	210c      	movs	r1, #12
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffc8 	bl	8000a3c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffc3 	bl	8000a3c <LCD_SendCommand>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000aca:	e009      	b.n	8000ae0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffc3 	bl	8000a60 <LCD_SendData>
		str++;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f1      	bne.n	8000acc <LCD_SendString+0xe>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <init>:

void init() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000af8:	f7ff fedc 	bl	80008b4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000afc:	204e      	movs	r0, #78	; 0x4e
 8000afe:	f7ff ffc1 	bl	8000a84 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	204e      	movs	r0, #78	; 0x4e
 8000b06:	f7ff ff99 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000b0a:	4907      	ldr	r1, [pc, #28]	; (8000b28 <init+0x34>)
 8000b0c:	204e      	movs	r0, #78	; 0x4e
 8000b0e:	f7ff ffd6 	bl	8000abe <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000b12:	21c0      	movs	r1, #192	; 0xc0
 8000b14:	204e      	movs	r0, #78	; 0x4e
 8000b16:	f7ff ff91 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <init+0x38>)
 8000b1c:	204e      	movs	r0, #78	; 0x4e
 8000b1e:	f7ff ffce 	bl	8000abe <LCD_SendString>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08008db0 	.word	0x08008db0
 8000b2c:	08008dc0 	.word	0x08008dc0

08000b30 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <__io_putchar+0x20>)
 8000b40:	f005 ff3d 	bl	80069be <HAL_UART_Transmit>
	return ch;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000358 	.word	0x20000358

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8000b5a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f001 ffb2 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f001 f8e8 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff fdc4 	bl	80006f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b68:	f001 fbc4 	bl	80022f4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000b6c:	f7ff fe1a 	bl	80007a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000b70:	f001 ff0c 	bl	800298c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b74:	f7ff fd26 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b78:	f001 fdbe 	bl	80026f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b7c:	f001 fd6e 	bl	800265c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b80:	f001 fe30 	bl	80027e4 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b84:	f001 f948 	bl	8001e18 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b88:	48a3      	ldr	r0, [pc, #652]	; (8000e18 <main+0x2c4>)
 8000b8a:	f004 fedf 	bl	800594c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	48a2      	ldr	r0, [pc, #648]	; (8000e1c <main+0x2c8>)
 8000b92:	f004 ffa5 	bl	8005ae0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000b96:	48a2      	ldr	r0, [pc, #648]	; (8000e20 <main+0x2cc>)
 8000b98:	f004 fed8 	bl	800594c <HAL_TIM_Base_Start_IT>
	char *verse1[] = {
 8000b9c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000ba0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000ba4:	4a9f      	ldr	r2, [pc, #636]	; (8000e24 <main+0x2d0>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	4611      	mov	r1, r2
 8000baa:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f006 fef6 	bl	80079a0 <memcpy>

			"0",
	///////////////////////////////////////////////////////////
			};

	int verse1_time[] = {
 8000bb4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000bb8:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000bbc:	4a9a      	ldr	r2, [pc, #616]	; (8000e28 <main+0x2d4>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f006 feea 	bl	80079a0 <memcpy>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000bcc:	f7ff ff92 	bl	8000af4 <init>
	LCD_Init(LCD_ADDR);
 8000bd0:	204e      	movs	r0, #78	; 0x4e
 8000bd2:	f7ff ff57 	bl	8000a84 <LCD_Init>
	up = 0;
 8000bd6:	4b95      	ldr	r3, [pc, #596]	; (8000e2c <main+0x2d8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000bdc:	4b94      	ldr	r3, [pc, #592]	; (8000e30 <main+0x2dc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000be2:	4b94      	ldr	r3, [pc, #592]	; (8000e34 <main+0x2e0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000be8:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <main+0x2e4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]

	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000bee:	4b93      	ldr	r3, [pc, #588]	; (8000e3c <main+0x2e8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000bf4:	4b91      	ldr	r3, [pc, #580]	; (8000e3c <main+0x2e8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000bfa:	4b90      	ldr	r3, [pc, #576]	; (8000e3c <main+0x2e8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000c00:	4b8e      	ldr	r3, [pc, #568]	; (8000e3c <main+0x2e8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	70da      	strb	r2, [r3, #3]

		//Main loop
		while (mode == 0) {
 8000c06:	e204      	b.n	8001012 <main+0x4be>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	498d      	ldr	r1, [pc, #564]	; (8000e40 <main+0x2ec>)
 8000c0c:	488d      	ldr	r0, [pc, #564]	; (8000e44 <main+0x2f0>)
 8000c0e:	f004 fc5f 	bl	80054d0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c12:	2200      	movs	r2, #0
 8000c14:	498c      	ldr	r1, [pc, #560]	; (8000e48 <main+0x2f4>)
 8000c16:	488b      	ldr	r0, [pc, #556]	; (8000e44 <main+0x2f0>)
 8000c18:	f004 fd3c 	bl	8005694 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000c1c:	488b      	ldr	r0, [pc, #556]	; (8000e4c <main+0x2f8>)
 8000c1e:	f002 f82b 	bl	8002c78 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <main+0x2ec>)
 8000c24:	78db      	ldrb	r3, [r3, #3]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a88      	ldr	r2, [pc, #544]	; (8000e50 <main+0x2fc>)
 8000c30:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c32:	4b83      	ldr	r3, [pc, #524]	; (8000e40 <main+0x2ec>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c36:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <main+0x2ec>)
 8000c3a:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c3c:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <main+0x2ec>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	9100      	str	r1, [sp, #0]
 8000c46:	4603      	mov	r3, r0
 8000c48:	4982      	ldr	r1, [pc, #520]	; (8000e54 <main+0x300>)
 8000c4a:	4883      	ldr	r0, [pc, #524]	; (8000e58 <main+0x304>)
 8000c4c:	f006 ff4c 	bl	8007ae8 <siprintf>

			if (strcmp(lcdup, "Park Jung Hwan") != 0) {
 8000c50:	4982      	ldr	r1, [pc, #520]	; (8000e5c <main+0x308>)
 8000c52:	4883      	ldr	r0, [pc, #524]	; (8000e60 <main+0x30c>)
 8000c54:	f7ff facc 	bl	80001f0 <strcmp>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d032      	beq.n	8000cc4 <main+0x170>
				LCD_Init(LCD_ADDR);
 8000c5e:	204e      	movs	r0, #78	; 0x4e
 8000c60:	f7ff ff10 	bl	8000a84 <LCD_Init>
				strcpy(lcdup, "Park Jung Hwan");
 8000c64:	4a7e      	ldr	r2, [pc, #504]	; (8000e60 <main+0x30c>)
 8000c66:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <main+0x308>)
 8000c68:	4614      	mov	r4, r2
 8000c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c6e:	8023      	strh	r3, [r4, #0]
 8000c70:	3402      	adds	r4, #2
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	7023      	strb	r3, [r4, #0]
				// LCD up
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	204e      	movs	r0, #78	; 0x4e
 8000c7a:	f7ff fedf 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, lcdup);
 8000c7e:	4978      	ldr	r1, [pc, #480]	; (8000e60 <main+0x30c>)
 8000c80:	204e      	movs	r0, #78	; 0x4e
 8000c82:	f7ff ff1c 	bl	8000abe <LCD_SendString>

				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c86:	4b6e      	ldr	r3, [pc, #440]	; (8000e40 <main+0x2ec>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	4a6f      	ldr	r2, [pc, #444]	; (8000e50 <main+0x2fc>)
 8000c94:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <main+0x2ec>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c9a:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c9c:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <main+0x2ec>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000ca0:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <main+0x2ec>)
 8000ca4:	789b      	ldrb	r3, [r3, #2]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9100      	str	r1, [sp, #0]
 8000caa:	4603      	mov	r3, r0
 8000cac:	4969      	ldr	r1, [pc, #420]	; (8000e54 <main+0x300>)
 8000cae:	486a      	ldr	r0, [pc, #424]	; (8000e58 <main+0x304>)
 8000cb0:	f006 ff1a 	bl	8007ae8 <siprintf>

				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000cb4:	21c0      	movs	r1, #192	; 0xc0
 8000cb6:	204e      	movs	r0, #78	; 0x4e
 8000cb8:	f7ff fec0 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000cbc:	4966      	ldr	r1, [pc, #408]	; (8000e58 <main+0x304>)
 8000cbe:	204e      	movs	r0, #78	; 0x4e
 8000cc0:	f7ff fefd 	bl	8000abe <LCD_SendString>
			}

			sTimestart = sTimecur;
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <main+0x310>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a67      	ldr	r2, [pc, #412]	; (8000e68 <main+0x314>)
 8000cca:	6013      	str	r3, [r2, #0]
			sTimecur = sTime.Seconds;
 8000ccc:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <main+0x2ec>)
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <main+0x310>)
 8000cd4:	601a      	str	r2, [r3, #0]

			if (sTimecur != sTimestart) {
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <main+0x310>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <main+0x314>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d007      	beq.n	8000cf2 <main+0x19e>
				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ce2:	21c0      	movs	r1, #192	; 0xc0
 8000ce4:	204e      	movs	r0, #78	; 0x4e
 8000ce6:	f7ff fea9 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000cea:	495b      	ldr	r1, [pc, #364]	; (8000e58 <main+0x304>)
 8000cec:	204e      	movs	r0, #78	; 0x4e
 8000cee:	f7ff fee6 	bl	8000abe <LCD_SendString>
			}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			if (strcmp(Time, Time_AL) == 0) {
 8000cf2:	495e      	ldr	r1, [pc, #376]	; (8000e6c <main+0x318>)
 8000cf4:	4858      	ldr	r0, [pc, #352]	; (8000e58 <main+0x304>)
 8000cf6:	f7ff fa7b 	bl	80001f0 <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d104      	bne.n	8000d0a <main+0x1b6>
				flag_alarm++;
 8000d00:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <main+0x31c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a5a      	ldr	r2, [pc, #360]	; (8000e70 <main+0x31c>)
 8000d08:	6013      	str	r3, [r2, #0]
			}
			if (flag_alarm > 0) {
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <main+0x31c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 817a 	beq.w	8001008 <main+0x4b4>

				song_time = 2000/verse1_time[count_note];
 8000d14:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <main+0x320>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d1c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <main+0x324>)
 8000d30:	601a      	str	r2, [r3, #0]

				if (strlen(verse1[count_note]) == 3 && song_time >= count_bit) {
 8000d32:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <main+0x320>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d3a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa5e 	bl	8000204 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d13d      	bne.n	8000dca <main+0x276>
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <main+0x324>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <main+0x328>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d337      	bcc.n	8000dca <main+0x276>

					int time = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
					char tempP = verse1[count_note][0];
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <main+0x320>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d68:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
					char tempO = verse1[count_note][1];
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <main+0x320>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d7e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	f887 35ea 	strb.w	r3, [r7, #1514]	; 0x5ea
					char tempT = verse1[count_note][2];
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <main+0x320>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d94:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	f887 35e9 	strb.w	r3, [r7, #1513]	; 0x5e9
					note(tempP, tempO, tempT, 2000 / time, 2 + (count_bit));
 8000da2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000da6:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8000daa:	fb92 f4f3 	sdiv	r4, r2, r3
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <main+0x328>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3302      	adds	r3, #2
 8000db4:	f897 25e9 	ldrb.w	r2, [r7, #1513]	; 0x5e9
 8000db8:	f897 15ea 	ldrb.w	r1, [r7, #1514]	; 0x5ea
 8000dbc:	f897 05eb 	ldrb.w	r0, [r7, #1515]	; 0x5eb
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	f001 f9c6 	bl	8002154 <note>
				if (strlen(verse1[count_note]) == 3 && song_time >= count_bit) {
 8000dc8:	e016      	b.n	8000df8 <main+0x2a4>

				} else if (strlen(verse1[count_note]) == 1) {
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <main+0x320>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000dd2:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa12 	bl	8000204 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <main+0x2a4>
					TIM3->CCR3 = 0;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <main+0x32c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
					count_note = 0;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0x320>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
					flag_alarm = 0;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <main+0x31c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
				}

				if (song_time < count_bit) {
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0x324>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <main+0x328>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f080 8101 	bcs.w	8001008 <main+0x4b4>
					count_note++;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <main+0x320>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <main+0x320>)
 8000e0e:	6013      	str	r3, [r2, #0]
					count_bit = 0;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <main+0x328>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
			////////////////////////////////////////////////////////////////////////////////////////////////////
			}

		//==========================================================================================================
		//mode choose while loop
		while (rising_edge >= 1) {
 8000e16:	e0f7      	b.n	8001008 <main+0x4b4>
 8000e18:	20000280 	.word	0x20000280
 8000e1c:	200002c8 	.word	0x200002c8
 8000e20:	20000310 	.word	0x20000310
 8000e24:	08008ef0 	.word	0x08008ef0
 8000e28:	080091e4 	.word	0x080091e4
 8000e2c:	2000018c 	.word	0x2000018c
 8000e30:	2000018d 	.word	0x2000018d
 8000e34:	2000018e 	.word	0x2000018e
 8000e38:	2000018f 	.word	0x2000018f
 8000e3c:	200001d0 	.word	0x200001d0
 8000e40:	200001a4 	.word	0x200001a4
 8000e44:	2000025c 	.word	0x2000025c
 8000e48:	200001b8 	.word	0x200001b8
 8000e4c:	20000094 	.word	0x20000094
 8000e50:	20000000 	.word	0x20000000
 8000e54:	08008e08 	.word	0x08008e08
 8000e58:	20000190 	.word	0x20000190
 8000e5c:	08008e1c 	.word	0x08008e1c
 8000e60:	20000164 	.word	0x20000164
 8000e64:	2000014c 	.word	0x2000014c
 8000e68:	20000148 	.word	0x20000148
 8000e6c:	200001e4 	.word	0x200001e4
 8000e70:	2000013c 	.word	0x2000013c
 8000e74:	20000140 	.word	0x20000140
 8000e78:	20000144 	.word	0x20000144
 8000e7c:	20000134 	.word	0x20000134
 8000e80:	40000400 	.word	0x40000400
			cur_tick = HAL_GetTick();
 8000e84:	f001 fe84 	bl	8002b90 <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4aa5      	ldr	r2, [pc, #660]	; (8001120 <main+0x5cc>)
 8000e8c:	6013      	str	r3, [r2, #0]
			tick_gap = cur_tick - start_tick;
 8000e8e:	4ba4      	ldr	r3, [pc, #656]	; (8001120 <main+0x5cc>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4ba4      	ldr	r3, [pc, #656]	; (8001124 <main+0x5d0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4aa3      	ldr	r2, [pc, #652]	; (8001128 <main+0x5d4>)
 8000e9a:	6013      	str	r3, [r2, #0]

			//remove bounce effect
			if (tick_gap < 100 && rising_edge > 1) {
 8000e9c:	4ba2      	ldr	r3, [pc, #648]	; (8001128 <main+0x5d4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b63      	cmp	r3, #99	; 0x63
 8000ea2:	d806      	bhi.n	8000eb2 <main+0x35e>
 8000ea4:	4ba1      	ldr	r3, [pc, #644]	; (800112c <main+0x5d8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d902      	bls.n	8000eb2 <main+0x35e>
				rising_edge = 1;
 8000eac:	4b9f      	ldr	r3, [pc, #636]	; (800112c <main+0x5d8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
			}

			if (tick_gap >= 300) {
 8000eb2:	4b9d      	ldr	r3, [pc, #628]	; (8001128 <main+0x5d4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eba:	f0c0 80a5 	bcc.w	8001008 <main+0x4b4>

				if (rising_edge == 1 && falling_edge >= 1) {
 8000ebe:	4b9b      	ldr	r3, [pc, #620]	; (800112c <main+0x5d8>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d142      	bne.n	8000f4c <main+0x3f8>
 8000ec6:	4b9a      	ldr	r3, [pc, #616]	; (8001130 <main+0x5dc>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03e      	beq.n	8000f4c <main+0x3f8>

					// init the temp
					sTime_temp.Hours = 0;
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <main+0x5e0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
					sTime_temp.Minutes = 0;
 8000ed4:	4b97      	ldr	r3, [pc, #604]	; (8001134 <main+0x5e0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	705a      	strb	r2, [r3, #1]
					sTime_temp.Seconds = 0;
 8000eda:	4b96      	ldr	r3, [pc, #600]	; (8001134 <main+0x5e0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	709a      	strb	r2, [r3, #2]
					sTime_temp.TimeFormat = 0;
 8000ee0:	4b94      	ldr	r3, [pc, #592]	; (8001134 <main+0x5e0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	70da      	strb	r2, [r3, #3]
					cursor = 0;
 8000ee6:	4b94      	ldr	r3, [pc, #592]	; (8001138 <main+0x5e4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

					// LCD up
					LCD_Init(LCD_ADDR);
 8000eec:	204e      	movs	r0, #78	; 0x4e
 8000eee:	f7ff fdc9 	bl	8000a84 <LCD_Init>
					LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	204e      	movs	r0, #78	; 0x4e
 8000ef6:	f7ff fda1 	bl	8000a3c <LCD_SendCommand>
					strcpy(lcdup, "Set Time Mode");
 8000efa:	4a90      	ldr	r2, [pc, #576]	; (800113c <main+0x5e8>)
 8000efc:	4b90      	ldr	r3, [pc, #576]	; (8001140 <main+0x5ec>)
 8000efe:	4614      	mov	r4, r2
 8000f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f02:	c407      	stmia	r4!, {r0, r1, r2}
 8000f04:	8023      	strh	r3, [r4, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8000f06:	498d      	ldr	r1, [pc, #564]	; (800113c <main+0x5e8>)
 8000f08:	204e      	movs	r0, #78	; 0x4e
 8000f0a:	f7ff fdd8 	bl	8000abe <LCD_SendString>
					// LCD down
					screen(cursor, sTime_temp);
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <main+0x5e4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461d      	mov	r5, r3
 8000f14:	4b87      	ldr	r3, [pc, #540]	; (8001134 <main+0x5e0>)
 8000f16:	466c      	mov	r4, sp
 8000f18:	f103 020c 	add.w	r2, r3, #12
 8000f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f20:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f26:	4628      	mov	r0, r5
 8000f28:	f001 f884 	bl	8002034 <screen>

					LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	204e      	movs	r0, #78	; 0x4e
 8000f30:	f7ff fd84 	bl	8000a3c <LCD_SendCommand>

					//init the user button
					rising_edge = 0;
 8000f34:	4b7d      	ldr	r3, [pc, #500]	; (800112c <main+0x5d8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <main+0x5dc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
					mode = 1;
 8000f40:	4b80      	ldr	r3, [pc, #512]	; (8001144 <main+0x5f0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
					printf("one click==========================\r\n");
 8000f46:	4880      	ldr	r0, [pc, #512]	; (8001148 <main+0x5f4>)
 8000f48:	f006 fdc6 	bl	8007ad8 <puts>
				}

				if (rising_edge >= 2 && falling_edge >= 1) {
 8000f4c:	4b77      	ldr	r3, [pc, #476]	; (800112c <main+0x5d8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d944      	bls.n	8000fde <main+0x48a>
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <main+0x5dc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d040      	beq.n	8000fde <main+0x48a>
					// init the temp
					sTime_AL.Hours = 0;
 8000f5c:	4b7b      	ldr	r3, [pc, #492]	; (800114c <main+0x5f8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
					sTime_AL.Minutes = 0;
 8000f62:	4b7a      	ldr	r3, [pc, #488]	; (800114c <main+0x5f8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	705a      	strb	r2, [r3, #1]
					sTime_AL.Seconds = 0;
 8000f68:	4b78      	ldr	r3, [pc, #480]	; (800114c <main+0x5f8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	709a      	strb	r2, [r3, #2]
					sTime_AL.TimeFormat = 0;
 8000f6e:	4b77      	ldr	r3, [pc, #476]	; (800114c <main+0x5f8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	70da      	strb	r2, [r3, #3]
					cursor = 0;
 8000f74:	4b70      	ldr	r3, [pc, #448]	; (8001138 <main+0x5e4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

					// LCD up
					LCD_Init(LCD_ADDR);
 8000f7a:	204e      	movs	r0, #78	; 0x4e
 8000f7c:	f7ff fd82 	bl	8000a84 <LCD_Init>
					//blink on
					LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000f80:	210f      	movs	r1, #15
 8000f82:	204e      	movs	r0, #78	; 0x4e
 8000f84:	f7ff fd5a 	bl	8000a3c <LCD_SendCommand>

					LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	204e      	movs	r0, #78	; 0x4e
 8000f8c:	f7ff fd56 	bl	8000a3c <LCD_SendCommand>
					strcpy(lcdup, "Alarm Mode");
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <main+0x5e8>)
 8000f92:	4a6f      	ldr	r2, [pc, #444]	; (8001150 <main+0x5fc>)
 8000f94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f96:	c303      	stmia	r3!, {r0, r1}
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	701a      	strb	r2, [r3, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 8000fa0:	4966      	ldr	r1, [pc, #408]	; (800113c <main+0x5e8>)
 8000fa2:	204e      	movs	r0, #78	; 0x4e
 8000fa4:	f7ff fd8b 	bl	8000abe <LCD_SendString>
					// LCD down
					screen(cursor, sTime_AL);
 8000fa8:	4b63      	ldr	r3, [pc, #396]	; (8001138 <main+0x5e4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461d      	mov	r5, r3
 8000fae:	4b67      	ldr	r3, [pc, #412]	; (800114c <main+0x5f8>)
 8000fb0:	466c      	mov	r4, sp
 8000fb2:	f103 020c 	add.w	r2, r3, #12
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f001 f837 	bl	8002034 <screen>

					//init the user button
					rising_edge = 0;
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <main+0x5d8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000fcc:	4b58      	ldr	r3, [pc, #352]	; (8001130 <main+0x5dc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
					mode = 2;
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <main+0x5f0>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]

					printf("two click++++++++++++++++++++++++++\r\n");
 8000fd8:	485e      	ldr	r0, [pc, #376]	; (8001154 <main+0x600>)
 8000fda:	f006 fd7d 	bl	8007ad8 <puts>
				}

				if (tick_gap >= 2000 && falling_edge == 0) {
 8000fde:	4b52      	ldr	r3, [pc, #328]	; (8001128 <main+0x5d4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe6:	d30f      	bcc.n	8001008 <main+0x4b4>
 8000fe8:	4b51      	ldr	r3, [pc, #324]	; (8001130 <main+0x5dc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10b      	bne.n	8001008 <main+0x4b4>
					rising_edge = 0;
 8000ff0:	4b4e      	ldr	r3, [pc, #312]	; (800112c <main+0x5d8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <main+0x5dc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
					mode = 3;
 8000ffc:	4b51      	ldr	r3, [pc, #324]	; (8001144 <main+0x5f0>)
 8000ffe:	2203      	movs	r2, #3
 8001000:	701a      	strb	r2, [r3, #0]
					printf("long click//////////////////////////\r\n");
 8001002:	4855      	ldr	r0, [pc, #340]	; (8001158 <main+0x604>)
 8001004:	f006 fd68 	bl	8007ad8 <puts>
		while (rising_edge >= 1) {
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <main+0x5d8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f47f af39 	bne.w	8000e84 <main+0x330>
		while (mode == 0) {
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <main+0x5f0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f43f adf6 	beq.w	8000c08 <main+0xb4>
	//==========================================================================================================



		//Set Time loop
		while (mode == 1) {
 800101c:	e31b      	b.n	8001656 <main+0xb02>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 800101e:	484f      	ldr	r0, [pc, #316]	; (800115c <main+0x608>)
 8001020:	f001 fe2a 	bl	8002c78 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001024:	4b41      	ldr	r3, [pc, #260]	; (800112c <main+0x5d8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d04c      	beq.n	80010c6 <main+0x572>

				// this flag is check the exit or apply
				apply_flag = 1;
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <main+0x60c>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <main+0x5dc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d012      	beq.n	8001060 <main+0x50c>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <main+0x60c>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <main+0x5d8>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <main+0x5dc>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 800104c:	210e      	movs	r1, #14
 800104e:	204e      	movs	r0, #78	; 0x4e
 8001050:	f7ff fcf4 	bl	8000a3c <LCD_SendCommand>
					mode = 0;
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <main+0x5f0>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 800105a:	4842      	ldr	r0, [pc, #264]	; (8001164 <main+0x610>)
 800105c:	f006 fd3c 	bl	8007ad8 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <main+0x5dc>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d12e      	bne.n	80010c6 <main+0x572>
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <main+0x614>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d92a      	bls.n	80010c6 <main+0x572>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <main+0x5e0>)
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <main+0x618>)
 8001076:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <main+0x5e0>)
 800107a:	785a      	ldrb	r2, [r3, #1]
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <main+0x618>)
 800107e:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <main+0x5e0>)
 8001082:	789a      	ldrb	r2, [r3, #2]
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <main+0x618>)
 8001086:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <main+0x5e0>)
 800108a:	78da      	ldrb	r2, [r3, #3]
 800108c:	4b37      	ldr	r3, [pc, #220]	; (800116c <main+0x618>)
 800108e:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001090:	2200      	movs	r2, #0
 8001092:	4936      	ldr	r1, [pc, #216]	; (800116c <main+0x618>)
 8001094:	4836      	ldr	r0, [pc, #216]	; (8001170 <main+0x61c>)
 8001096:	f004 f981 	bl	800539c <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 800109a:	210e      	movs	r1, #14
 800109c:	204e      	movs	r0, #78	; 0x4e
 800109e:	f7ff fccd 	bl	8000a3c <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <main+0x60c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <main+0x614>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <main+0x5d8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <main+0x5dc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]

					mode = 0;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <main+0x5f0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 80010c0:	482c      	ldr	r0, [pc, #176]	; (8001174 <main+0x620>)
 80010c2:	f006 fd09 	bl	8007ad8 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <main+0x624>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 82c3 	beq.w	8001656 <main+0xb02>

				if (up > 0) {
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <main+0x628>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 813f 	beq.w	8001358 <main+0x804>
					//AM or PM switching
					if (cursor == 0) {
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <main+0x5e4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d16d      	bne.n	80011be <main+0x66a>
						if (sTime_temp.TimeFormat == 0) {
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <main+0x5e0>)
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d14a      	bne.n	8001180 <main+0x62c>
							sTime_temp.TimeFormat = 1;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <main+0x5e0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <main+0x5e0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <main+0x5aa>
								sTime_temp.Hours = 12;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <main+0x5e0>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <main+0x5e4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461d      	mov	r5, r3
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <main+0x5e0>)
 8001106:	466c      	mov	r4, sp
 8001108:	f103 020c 	add.w	r2, r3, #12
 800110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001110:	e884 0003 	stmia.w	r4, {r0, r1}
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	4628      	mov	r0, r5
 8001118:	f000 ff8c 	bl	8002034 <screen>
 800111c:	e119      	b.n	8001352 <main+0x7fe>
 800111e:	bf00      	nop
 8001120:	2000017c 	.word	0x2000017c
 8001124:	20000178 	.word	0x20000178
 8001128:	20000180 	.word	0x20000180
 800112c:	20000175 	.word	0x20000175
 8001130:	20000176 	.word	0x20000176
 8001134:	200001d0 	.word	0x200001d0
 8001138:	20000184 	.word	0x20000184
 800113c:	20000164 	.word	0x20000164
 8001140:	08008e2c 	.word	0x08008e2c
 8001144:	20000177 	.word	0x20000177
 8001148:	08008e3c 	.word	0x08008e3c
 800114c:	200001f8 	.word	0x200001f8
 8001150:	08008e64 	.word	0x08008e64
 8001154:	08008e70 	.word	0x08008e70
 8001158:	08008e98 	.word	0x08008e98
 800115c:	20000094 	.word	0x20000094
 8001160:	20000154 	.word	0x20000154
 8001164:	08008ec0 	.word	0x08008ec0
 8001168:	20000158 	.word	0x20000158
 800116c:	200001a4 	.word	0x200001a4
 8001170:	2000025c 	.word	0x2000025c
 8001174:	08008ecc 	.word	0x08008ecc
 8001178:	20000150 	.word	0x20000150
 800117c:	2000018c 	.word	0x2000018c

						} else if (sTime_temp.TimeFormat == 1) {
 8001180:	4b98      	ldr	r3, [pc, #608]	; (80013e4 <main+0x890>)
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	2b01      	cmp	r3, #1
 8001186:	f040 80e4 	bne.w	8001352 <main+0x7fe>
							sTime_temp.TimeFormat = 0;
 800118a:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <main+0x890>)
 800118c:	2200      	movs	r2, #0
 800118e:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8001190:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <main+0x890>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d102      	bne.n	800119e <main+0x64a>
								sTime_temp.Hours = 0;
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <main+0x890>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 800119e:	4b92      	ldr	r3, [pc, #584]	; (80013e8 <main+0x894>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461d      	mov	r5, r3
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <main+0x890>)
 80011a6:	466c      	mov	r4, sp
 80011a8:	f103 020c 	add.w	r2, r3, #12
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	4628      	mov	r0, r5
 80011b8:	f000 ff3c 	bl	8002034 <screen>
 80011bc:	e0c9      	b.n	8001352 <main+0x7fe>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 80011be:	4b8a      	ldr	r3, [pc, #552]	; (80013e8 <main+0x894>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d119      	bne.n	80011fa <main+0x6a6>

						if (sTime_temp.Hours < 3) {
 80011c6:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <main+0x890>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d805      	bhi.n	80011da <main+0x686>
							sTime_temp.Hours += 10;
 80011ce:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <main+0x890>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	330a      	adds	r3, #10
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <main+0x890>)
 80011d8:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 80011da:	4b83      	ldr	r3, [pc, #524]	; (80013e8 <main+0x894>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461d      	mov	r5, r3
 80011e0:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <main+0x890>)
 80011e2:	466c      	mov	r4, sp
 80011e4:	f103 020c 	add.w	r2, r3, #12
 80011e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80011f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 ff1e 	bl	8002034 <screen>
 80011f8:	e0ab      	b.n	8001352 <main+0x7fe>
					}

					// 1H switching
					else if (cursor == 4) {
 80011fa:	4b7b      	ldr	r3, [pc, #492]	; (80013e8 <main+0x894>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d130      	bne.n	8001264 <main+0x710>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 8001202:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <main+0x890>)
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10a      	bne.n	8001220 <main+0x6cc>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours
									&& sTime_temp.Hours < 11) {
 800120a:	4b76      	ldr	r3, [pc, #472]	; (80013e4 <main+0x890>)
 800120c:	781b      	ldrb	r3, [r3, #0]
							if (0 <= sTime_temp.Hours
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d818      	bhi.n	8001244 <main+0x6f0>
								sTime_temp.Hours++;
 8001212:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <main+0x890>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <main+0x890>)
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e011      	b.n	8001244 <main+0x6f0>
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 8001220:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <main+0x890>)
 8001222:	78db      	ldrb	r3, [r3, #3]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10d      	bne.n	8001244 <main+0x6f0>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours
 8001228:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <main+0x890>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d009      	beq.n	8001244 <main+0x6f0>
									&& sTime_temp.Hours < 12) {
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <main+0x890>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b0b      	cmp	r3, #11
 8001236:	d805      	bhi.n	8001244 <main+0x6f0>
								sTime_temp.Hours++;
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <main+0x890>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <main+0x890>)
 8001242:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_temp);
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <main+0x894>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461d      	mov	r5, r3
 800124a:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <main+0x890>)
 800124c:	466c      	mov	r4, sp
 800124e:	f103 020c 	add.w	r2, r3, #12
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	e884 0003 	stmia.w	r4, {r0, r1}
 800125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125c:	4628      	mov	r0, r5
 800125e:	f000 fee9 	bl	8002034 <screen>
 8001262:	e076      	b.n	8001352 <main+0x7fe>
					}

					// 10M switching
					else if (cursor == 6) {
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <main+0x894>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b06      	cmp	r3, #6
 800126a:	d119      	bne.n	80012a0 <main+0x74c>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 50) {
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <main+0x890>)
 800126e:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8001270:	2b31      	cmp	r3, #49	; 0x31
 8001272:	d805      	bhi.n	8001280 <main+0x72c>
							sTime_temp.Minutes += 10;
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <main+0x890>)
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	330a      	adds	r3, #10
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <main+0x890>)
 800127e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001280:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <main+0x894>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461d      	mov	r5, r3
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <main+0x890>)
 8001288:	466c      	mov	r4, sp
 800128a:	f103 020c 	add.w	r2, r3, #12
 800128e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001292:	e884 0003 	stmia.w	r4, {r0, r1}
 8001296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001298:	4628      	mov	r0, r5
 800129a:	f000 fecb 	bl	8002034 <screen>
 800129e:	e058      	b.n	8001352 <main+0x7fe>
					}
					// 1M switching
					else if (cursor == 7) {
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <main+0x894>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d119      	bne.n	80012dc <main+0x788>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 59) {
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <main+0x890>)
 80012aa:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 80012ac:	2b3a      	cmp	r3, #58	; 0x3a
 80012ae:	d805      	bhi.n	80012bc <main+0x768>
							sTime_temp.Minutes += 1;
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <main+0x890>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <main+0x890>)
 80012ba:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <main+0x894>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <main+0x890>)
 80012c4:	466c      	mov	r4, sp
 80012c6:	f103 020c 	add.w	r2, r3, #12
 80012ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80012d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d4:	4628      	mov	r0, r5
 80012d6:	f000 fead 	bl	8002034 <screen>
 80012da:	e03a      	b.n	8001352 <main+0x7fe>
					}

					// 10S switching
					else if (cursor == 9) {
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <main+0x894>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d119      	bne.n	8001318 <main+0x7c4>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 50) {
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <main+0x890>)
 80012e6:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 80012e8:	2b31      	cmp	r3, #49	; 0x31
 80012ea:	d805      	bhi.n	80012f8 <main+0x7a4>
							sTime_temp.Seconds += 10;
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <main+0x890>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	330a      	adds	r3, #10
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <main+0x890>)
 80012f6:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <main+0x894>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461d      	mov	r5, r3
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <main+0x890>)
 8001300:	466c      	mov	r4, sp
 8001302:	f103 020c 	add.w	r2, r3, #12
 8001306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130a:	e884 0003 	stmia.w	r4, {r0, r1}
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	4628      	mov	r0, r5
 8001312:	f000 fe8f 	bl	8002034 <screen>
 8001316:	e01c      	b.n	8001352 <main+0x7fe>
					}
					// 1S switching
					else if (cursor == 10) {
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <main+0x894>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d118      	bne.n	8001352 <main+0x7fe>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 59) {
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <main+0x890>)
 8001322:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 8001324:	2b3a      	cmp	r3, #58	; 0x3a
 8001326:	d805      	bhi.n	8001334 <main+0x7e0>
							sTime_temp.Seconds += 1;
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <main+0x890>)
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <main+0x890>)
 8001332:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <main+0x894>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461d      	mov	r5, r3
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <main+0x890>)
 800133c:	466c      	mov	r4, sp
 800133e:	f103 020c 	add.w	r2, r3, #12
 8001342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001346:	e884 0003 	stmia.w	r4, {r0, r1}
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	4628      	mov	r0, r5
 800134e:	f000 fe71 	bl	8002034 <screen>
					}

					// clear the up flag
					up = 0;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <main+0x898>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <main+0x89c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80f1 	beq.w	8001544 <main+0x9f0>

					//AM or PM switching
					if (cursor == 0) {
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <main+0x894>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d144      	bne.n	80013f4 <main+0x8a0>
						if (sTime_temp.TimeFormat == 0) {
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <main+0x890>)
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d119      	bne.n	80013a6 <main+0x852>
							sTime_temp.TimeFormat = 1;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <main+0x890>)
 8001374:	2201      	movs	r2, #1
 8001376:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <main+0x890>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <main+0x832>
								sTime_temp.Hours = 12;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <main+0x890>)
 8001382:	220c      	movs	r2, #12
 8001384:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <main+0x894>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461d      	mov	r5, r3
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <main+0x890>)
 800138e:	466c      	mov	r4, sp
 8001390:	f103 020c 	add.w	r2, r3, #12
 8001394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001398:	e884 0003 	stmia.w	r4, {r0, r1}
 800139c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139e:	4628      	mov	r0, r5
 80013a0:	f000 fe48 	bl	8002034 <screen>
 80013a4:	e0cb      	b.n	800153e <main+0x9ea>
						} else if (sTime_temp.TimeFormat == 1) {
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <main+0x890>)
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 80c7 	bne.w	800153e <main+0x9ea>
							sTime_temp.TimeFormat = 0;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <main+0x890>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <main+0x890>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d102      	bne.n	80013c4 <main+0x870>
								sTime_temp.Hours = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <main+0x890>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <main+0x894>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <main+0x890>)
 80013cc:	466c      	mov	r4, sp
 80013ce:	f103 020c 	add.w	r2, r3, #12
 80013d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	4628      	mov	r0, r5
 80013de:	f000 fe29 	bl	8002034 <screen>
 80013e2:	e0ac      	b.n	800153e <main+0x9ea>
 80013e4:	200001d0 	.word	0x200001d0
 80013e8:	20000184 	.word	0x20000184
 80013ec:	2000018c 	.word	0x2000018c
 80013f0:	2000018d 	.word	0x2000018d
						}
					}

					// 1H switching
					else if (cursor == 4) {
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <main+0xb10>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d119      	bne.n	8001430 <main+0x8dc>
						if (sTime_temp.Hours > 0) {
 80013fc:	4b9a      	ldr	r3, [pc, #616]	; (8001668 <main+0xb14>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <main+0x8bc>
							sTime_temp.Hours--;
 8001404:	4b98      	ldr	r3, [pc, #608]	; (8001668 <main+0xb14>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b96      	ldr	r3, [pc, #600]	; (8001668 <main+0xb14>)
 800140e:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 8001410:	4b94      	ldr	r3, [pc, #592]	; (8001664 <main+0xb10>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461d      	mov	r5, r3
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <main+0xb14>)
 8001418:	466c      	mov	r4, sp
 800141a:	f103 020c 	add.w	r2, r3, #12
 800141e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001422:	e884 0003 	stmia.w	r4, {r0, r1}
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	4628      	mov	r0, r5
 800142a:	f000 fe03 	bl	8002034 <screen>
 800142e:	e086      	b.n	800153e <main+0x9ea>
					}

					// 10M switching
					else if (cursor == 6) {
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <main+0xb10>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d11d      	bne.n	8001474 <main+0x920>
						if (0 < sTime_temp.Minutes
 8001438:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <main+0xb14>)
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <main+0x900>
								&& sTime_temp.Minutes <= 50) {
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <main+0xb14>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	2b32      	cmp	r3, #50	; 0x32
 8001446:	d805      	bhi.n	8001454 <main+0x900>
							sTime_temp.Minutes -= 10;
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <main+0xb14>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	3b0a      	subs	r3, #10
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b85      	ldr	r3, [pc, #532]	; (8001668 <main+0xb14>)
 8001452:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001454:	4b83      	ldr	r3, [pc, #524]	; (8001664 <main+0xb10>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461d      	mov	r5, r3
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <main+0xb14>)
 800145c:	466c      	mov	r4, sp
 800145e:	f103 020c 	add.w	r2, r3, #12
 8001462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001466:	e884 0003 	stmia.w	r4, {r0, r1}
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	4628      	mov	r0, r5
 800146e:	f000 fde1 	bl	8002034 <screen>
 8001472:	e064      	b.n	800153e <main+0x9ea>
					}
					// 1M switching
					else if (cursor == 7) {
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <main+0xb10>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b07      	cmp	r3, #7
 800147a:	d11d      	bne.n	80014b8 <main+0x964>
						if (0 < sTime_temp.Minutes
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <main+0xb14>)
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <main+0x944>
								&& sTime_temp.Minutes <= 59) {
 8001484:	4b78      	ldr	r3, [pc, #480]	; (8001668 <main+0xb14>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	2b3b      	cmp	r3, #59	; 0x3b
 800148a:	d805      	bhi.n	8001498 <main+0x944>
							sTime_temp.Minutes -= 1;
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <main+0xb14>)
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	3b01      	subs	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b74      	ldr	r3, [pc, #464]	; (8001668 <main+0xb14>)
 8001496:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001498:	4b72      	ldr	r3, [pc, #456]	; (8001664 <main+0xb10>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461d      	mov	r5, r3
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <main+0xb14>)
 80014a0:	466c      	mov	r4, sp
 80014a2:	f103 020c 	add.w	r2, r3, #12
 80014a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80014ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 fdbf 	bl	8002034 <screen>
 80014b6:	e042      	b.n	800153e <main+0x9ea>
					}

					// 10S switching
					else if (cursor == 9) {
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <main+0xb10>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d11d      	bne.n	80014fc <main+0x9a8>
						if (0 < sTime_temp.Seconds
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <main+0xb14>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d009      	beq.n	80014dc <main+0x988>
								&& sTime_temp.Seconds <= 50) {
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <main+0xb14>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	2b32      	cmp	r3, #50	; 0x32
 80014ce:	d805      	bhi.n	80014dc <main+0x988>
							sTime_temp.Seconds -= 10;
 80014d0:	4b65      	ldr	r3, [pc, #404]	; (8001668 <main+0xb14>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	3b0a      	subs	r3, #10
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b63      	ldr	r3, [pc, #396]	; (8001668 <main+0xb14>)
 80014da:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <main+0xb10>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461d      	mov	r5, r3
 80014e2:	4b61      	ldr	r3, [pc, #388]	; (8001668 <main+0xb14>)
 80014e4:	466c      	mov	r4, sp
 80014e6:	f103 020c 	add.w	r2, r3, #12
 80014ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80014f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f4:	4628      	mov	r0, r5
 80014f6:	f000 fd9d 	bl	8002034 <screen>
 80014fa:	e020      	b.n	800153e <main+0x9ea>
					}
					// 1S switching
					else if (cursor == 10) {
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <main+0xb10>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b0a      	cmp	r3, #10
 8001502:	d11c      	bne.n	800153e <main+0x9ea>
						if (0 < sTime_temp.Seconds
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <main+0xb14>)
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <main+0x9cc>
								&& sTime_temp.Seconds <= 59) {
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <main+0xb14>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b3b      	cmp	r3, #59	; 0x3b
 8001512:	d805      	bhi.n	8001520 <main+0x9cc>
							sTime_temp.Seconds -= 1;
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <main+0xb14>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	3b01      	subs	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <main+0xb14>)
 800151e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <main+0xb10>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461d      	mov	r5, r3
 8001526:	4b50      	ldr	r3, [pc, #320]	; (8001668 <main+0xb14>)
 8001528:	466c      	mov	r4, sp
 800152a:	f103 020c 	add.w	r2, r3, #12
 800152e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001532:	e884 0003 	stmia.w	r4, {r0, r1}
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	4628      	mov	r0, r5
 800153a:	f000 fd7b 	bl	8002034 <screen>
					}

					// clear the down flag
					down = 0;
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <main+0xb18>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <main+0xb1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d03e      	beq.n	80015ca <main+0xa76>
					if (cursor > 0) {
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <main+0xb10>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d037      	beq.n	80015c4 <main+0xa70>
						cursor--;
 8001554:	4b43      	ldr	r3, [pc, #268]	; (8001664 <main+0xb10>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <main+0xb10>)
 800155e:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001560:	2110      	movs	r1, #16
 8001562:	204e      	movs	r0, #78	; 0x4e
 8001564:	f7ff fa6a 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <main+0xb10>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d109      	bne.n	8001584 <main+0xa30>
							cursor--;
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <main+0xb10>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <main+0xb10>)
 800157a:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 800157c:	2110      	movs	r1, #16
 800157e:	204e      	movs	r0, #78	; 0x4e
 8001580:	f7ff fa5c 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <main+0xb10>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d109      	bne.n	80015a0 <main+0xa4c>
							cursor--;
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <main+0xb10>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <main+0xb10>)
 8001596:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001598:	2110      	movs	r1, #16
 800159a:	204e      	movs	r0, #78	; 0x4e
 800159c:	f7ff fa4e 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 2) {
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <main+0xb10>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d10d      	bne.n	80015c4 <main+0xa70>
							cursor -= 2;
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <main+0xb10>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3b02      	subs	r3, #2
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <main+0xb10>)
 80015b2:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80015b4:	2110      	movs	r1, #16
 80015b6:	204e      	movs	r0, #78	; 0x4e
 80015b8:	f7ff fa40 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80015bc:	2110      	movs	r1, #16
 80015be:	204e      	movs	r0, #78	; 0x4e
 80015c0:	f7ff fa3c 	bl	8000a3c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <main+0xb1c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <main+0xb20>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03e      	beq.n	8001650 <main+0xafc>

					if (cursor < 10) {
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <main+0xb10>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b09      	cmp	r3, #9
 80015d8:	d837      	bhi.n	800164a <main+0xaf6>
						cursor++;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <main+0xb10>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <main+0xb10>)
 80015e4:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015e6:	2114      	movs	r1, #20
 80015e8:	204e      	movs	r0, #78	; 0x4e
 80015ea:	f7ff fa27 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <main+0xb10>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d109      	bne.n	800160a <main+0xab6>
							cursor++;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <main+0xb10>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <main+0xb10>)
 8001600:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001602:	2114      	movs	r1, #20
 8001604:	204e      	movs	r0, #78	; 0x4e
 8001606:	f7ff fa19 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <main+0xb10>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d109      	bne.n	8001626 <main+0xad2>
							cursor++;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <main+0xb10>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <main+0xb10>)
 800161c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800161e:	2114      	movs	r1, #20
 8001620:	204e      	movs	r0, #78	; 0x4e
 8001622:	f7ff fa0b 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <main+0xb10>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10d      	bne.n	800164a <main+0xaf6>
							cursor += 2;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <main+0xb10>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3302      	adds	r3, #2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <main+0xb10>)
 8001638:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800163a:	2114      	movs	r1, #20
 800163c:	204e      	movs	r0, #78	; 0x4e
 800163e:	f7ff f9fd 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001642:	2114      	movs	r1, #20
 8001644:	204e      	movs	r0, #78	; 0x4e
 8001646:	f7ff f9f9 	bl	8000a3c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <main+0xb20>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <main+0xb24>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <main+0xb28>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f43f acdf 	beq.w	800101e <main+0x4ca>
			}
		}

		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 8001660:	e31f      	b.n	8001ca2 <main+0x114e>
 8001662:	bf00      	nop
 8001664:	20000184 	.word	0x20000184
 8001668:	200001d0 	.word	0x200001d0
 800166c:	2000018d 	.word	0x2000018d
 8001670:	2000018e 	.word	0x2000018e
 8001674:	2000018f 	.word	0x2000018f
 8001678:	20000150 	.word	0x20000150
 800167c:	20000177 	.word	0x20000177
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8001680:	4899      	ldr	r0, [pc, #612]	; (80018e8 <main+0xd94>)
 8001682:	f001 faf9 	bl	8002c78 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001686:	4b99      	ldr	r3, [pc, #612]	; (80018ec <main+0xd98>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d052      	beq.n	8001734 <main+0xbe0>

				// Alarm init
				sprintf(Time_AL, "");
 800168e:	4998      	ldr	r1, [pc, #608]	; (80018f0 <main+0xd9c>)
 8001690:	4898      	ldr	r0, [pc, #608]	; (80018f4 <main+0xda0>)
 8001692:	f006 fa29 	bl	8007ae8 <siprintf>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001696:	4b98      	ldr	r3, [pc, #608]	; (80018f8 <main+0xda4>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <main+0xda8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <main+0xb76>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 80016a4:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <main+0xda4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 80016aa:	4b90      	ldr	r3, [pc, #576]	; (80018ec <main+0xd98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <main+0xda8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 80016b6:	210e      	movs	r1, #14
 80016b8:	204e      	movs	r0, #78	; 0x4e
 80016ba:	f7ff f9bf 	bl	8000a3c <LCD_SendCommand>
					mode = 0;
 80016be:	4b90      	ldr	r3, [pc, #576]	; (8001900 <main+0xdac>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 80016c4:	488f      	ldr	r0, [pc, #572]	; (8001904 <main+0xdb0>)
 80016c6:	f006 fa07 	bl	8007ad8 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 80016ca:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <main+0xda8>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d130      	bne.n	8001734 <main+0xbe0>
 80016d2:	4b8d      	ldr	r3, [pc, #564]	; (8001908 <main+0xdb4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d92c      	bls.n	8001734 <main+0xbe0>

					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016da:	4b8c      	ldr	r3, [pc, #560]	; (800190c <main+0xdb8>)
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	461a      	mov	r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	4a8a      	ldr	r2, [pc, #552]	; (8001910 <main+0xdbc>)
 80016e8:	441a      	add	r2, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <main+0xdb8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016ee:	4618      	mov	r0, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016f0:	4b86      	ldr	r3, [pc, #536]	; (800190c <main+0xdb8>)
 80016f2:	785b      	ldrb	r3, [r3, #1]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016f4:	4619      	mov	r1, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016f6:	4b85      	ldr	r3, [pc, #532]	; (800190c <main+0xdb8>)
 80016f8:	789b      	ldrb	r3, [r3, #2]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	9100      	str	r1, [sp, #0]
 80016fe:	4603      	mov	r3, r0
 8001700:	4984      	ldr	r1, [pc, #528]	; (8001914 <main+0xdc0>)
 8001702:	487c      	ldr	r0, [pc, #496]	; (80018f4 <main+0xda0>)
 8001704:	f006 f9f0 	bl	8007ae8 <siprintf>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8001708:	210e      	movs	r1, #14
 800170a:	204e      	movs	r0, #78	; 0x4e
 800170c:	f7ff f996 	bl	8000a3c <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 8001710:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <main+0xda4>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8001716:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <main+0xdb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 800171c:	4b73      	ldr	r3, [pc, #460]	; (80018ec <main+0xd98>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8001722:	4b76      	ldr	r3, [pc, #472]	; (80018fc <main+0xda8>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

					mode = 0;
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <main+0xdac>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 800172e:	487a      	ldr	r0, [pc, #488]	; (8001918 <main+0xdc4>)
 8001730:	f006 f9d2 	bl	8007ad8 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 8001734:	4b79      	ldr	r3, [pc, #484]	; (800191c <main+0xdc8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 82b2 	beq.w	8001ca2 <main+0x114e>

				if (up > 0) {
 800173e:	4b78      	ldr	r3, [pc, #480]	; (8001920 <main+0xdcc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 812e 	beq.w	80019a4 <main+0xe50>
					//AM or PM switching
					if (cursor == 0) {
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <main+0xdd0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13c      	bne.n	80017ca <main+0xc76>
						if (sTime_AL.TimeFormat == 0) {
 8001750:	4b6e      	ldr	r3, [pc, #440]	; (800190c <main+0xdb8>)
 8001752:	78db      	ldrb	r3, [r3, #3]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <main+0xc38>
							sTime_AL.TimeFormat = 1;
 8001758:	4b6c      	ldr	r3, [pc, #432]	; (800190c <main+0xdb8>)
 800175a:	2201      	movs	r2, #1
 800175c:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 800175e:	4b6b      	ldr	r3, [pc, #428]	; (800190c <main+0xdb8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <main+0xc18>
								sTime_AL.Hours = 12;
 8001766:	4b69      	ldr	r3, [pc, #420]	; (800190c <main+0xdb8>)
 8001768:	220c      	movs	r2, #12
 800176a:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <main+0xdd0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461d      	mov	r5, r3
 8001772:	4b66      	ldr	r3, [pc, #408]	; (800190c <main+0xdb8>)
 8001774:	466c      	mov	r4, sp
 8001776:	f103 020c 	add.w	r2, r3, #12
 800177a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001784:	4628      	mov	r0, r5
 8001786:	f000 fc55 	bl	8002034 <screen>
 800178a:	e108      	b.n	800199e <main+0xe4a>

						} else if (sTime_AL.TimeFormat == 1) {
 800178c:	4b5f      	ldr	r3, [pc, #380]	; (800190c <main+0xdb8>)
 800178e:	78db      	ldrb	r3, [r3, #3]
 8001790:	2b01      	cmp	r3, #1
 8001792:	f040 8104 	bne.w	800199e <main+0xe4a>
							sTime_AL.TimeFormat = 0;
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <main+0xdb8>)
 8001798:	2200      	movs	r2, #0
 800179a:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 800179c:	4b5b      	ldr	r3, [pc, #364]	; (800190c <main+0xdb8>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d102      	bne.n	80017aa <main+0xc56>
								sTime_AL.Hours = 0;
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <main+0xdb8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80017aa:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <main+0xdd0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461d      	mov	r5, r3
 80017b0:	4b56      	ldr	r3, [pc, #344]	; (800190c <main+0xdb8>)
 80017b2:	466c      	mov	r4, sp
 80017b4:	f103 020c 	add.w	r2, r3, #12
 80017b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80017c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c2:	4628      	mov	r0, r5
 80017c4:	f000 fc36 	bl	8002034 <screen>
 80017c8:	e0e9      	b.n	800199e <main+0xe4a>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <main+0xdd0>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d119      	bne.n	8001806 <main+0xcb2>

						if (sTime_AL.Hours < 3) {
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <main+0xdb8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d805      	bhi.n	80017e6 <main+0xc92>
							sTime_AL.Hours += 10;
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <main+0xdb8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	330a      	adds	r3, #10
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <main+0xdb8>)
 80017e4:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 80017e6:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <main+0xdd0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461d      	mov	r5, r3
 80017ec:	4b47      	ldr	r3, [pc, #284]	; (800190c <main+0xdb8>)
 80017ee:	466c      	mov	r4, sp
 80017f0:	f103 020c 	add.w	r2, r3, #12
 80017f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80017fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fe:	4628      	mov	r0, r5
 8001800:	f000 fc18 	bl	8002034 <screen>
 8001804:	e0cb      	b.n	800199e <main+0xe4a>
					}

					// 1H switching
					else if (cursor == 4) {
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <main+0xdd0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d130      	bne.n	8001870 <main+0xd1c>

						//AM
						if (sTime_AL.TimeFormat == 0) {
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <main+0xdb8>)
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <main+0xcd8>
							// 0 ~ 11
							if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <main+0xdb8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d818      	bhi.n	8001850 <main+0xcfc>
								sTime_AL.Hours++;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <main+0xdb8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <main+0xdb8>)
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e011      	b.n	8001850 <main+0xcfc>
							}
						}
						//PM
						else if (sTime_AL.TimeFormat == 1) {
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <main+0xdb8>)
 800182e:	78db      	ldrb	r3, [r3, #3]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10d      	bne.n	8001850 <main+0xcfc>

							// 1 ~ 12
							if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <main+0xdb8>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <main+0xcfc>
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <main+0xdb8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0b      	cmp	r3, #11
 8001842:	d805      	bhi.n	8001850 <main+0xcfc>
								sTime_AL.Hours++;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <main+0xdb8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <main+0xdb8>)
 800184e:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_AL);
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <main+0xdd0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461d      	mov	r5, r3
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <main+0xdb8>)
 8001858:	466c      	mov	r4, sp
 800185a:	f103 020c 	add.w	r2, r3, #12
 800185e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001862:	e884 0003 	stmia.w	r4, {r0, r1}
 8001866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001868:	4628      	mov	r0, r5
 800186a:	f000 fbe3 	bl	8002034 <screen>
 800186e:	e096      	b.n	800199e <main+0xe4a>
					}

					// 10M switching
					else if (cursor == 6) {
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <main+0xdd0>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d119      	bne.n	80018ac <main+0xd58>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <main+0xdb8>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b31      	cmp	r3, #49	; 0x31
 800187e:	d805      	bhi.n	800188c <main+0xd38>
							sTime_AL.Minutes += 10;
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <main+0xdb8>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	330a      	adds	r3, #10
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <main+0xdb8>)
 800188a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <main+0xdd0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461d      	mov	r5, r3
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <main+0xdb8>)
 8001894:	466c      	mov	r4, sp
 8001896:	f103 020c 	add.w	r2, r3, #12
 800189a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189e:	e884 0003 	stmia.w	r4, {r0, r1}
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	4628      	mov	r0, r5
 80018a6:	f000 fbc5 	bl	8002034 <screen>
 80018aa:	e078      	b.n	800199e <main+0xe4a>
					}
					// 1M switching
					else if (cursor == 7) {
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <main+0xdd0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	d139      	bne.n	8001928 <main+0xdd4>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <main+0xdb8>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	2b3a      	cmp	r3, #58	; 0x3a
 80018ba:	d805      	bhi.n	80018c8 <main+0xd74>
							sTime_AL.Minutes += 1;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <main+0xdb8>)
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <main+0xdb8>)
 80018c6:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <main+0xdd0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461d      	mov	r5, r3
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <main+0xdb8>)
 80018d0:	466c      	mov	r4, sp
 80018d2:	f103 020c 	add.w	r2, r3, #12
 80018d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018da:	e884 0003 	stmia.w	r4, {r0, r1}
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 fba7 	bl	8002034 <screen>
 80018e6:	e05a      	b.n	800199e <main+0xe4a>
 80018e8:	20000094 	.word	0x20000094
 80018ec:	20000175 	.word	0x20000175
 80018f0:	08008ed8 	.word	0x08008ed8
 80018f4:	200001e4 	.word	0x200001e4
 80018f8:	20000154 	.word	0x20000154
 80018fc:	20000176 	.word	0x20000176
 8001900:	20000177 	.word	0x20000177
 8001904:	08008ec0 	.word	0x08008ec0
 8001908:	20000158 	.word	0x20000158
 800190c:	200001f8 	.word	0x200001f8
 8001910:	20000000 	.word	0x20000000
 8001914:	08008e08 	.word	0x08008e08
 8001918:	08008ecc 	.word	0x08008ecc
 800191c:	20000150 	.word	0x20000150
 8001920:	2000018c 	.word	0x2000018c
 8001924:	20000184 	.word	0x20000184
					}

					// 10S switching
					else if (cursor == 9) {
 8001928:	4b83      	ldr	r3, [pc, #524]	; (8001b38 <main+0xfe4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b09      	cmp	r3, #9
 800192e:	d119      	bne.n	8001964 <main+0xe10>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 8001930:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <main+0xfe8>)
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	2b31      	cmp	r3, #49	; 0x31
 8001936:	d805      	bhi.n	8001944 <main+0xdf0>
							sTime_AL.Seconds += 10;
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <main+0xfe8>)
 800193a:	789b      	ldrb	r3, [r3, #2]
 800193c:	330a      	adds	r3, #10
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <main+0xfe8>)
 8001942:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001944:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <main+0xfe4>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461d      	mov	r5, r3
 800194a:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <main+0xfe8>)
 800194c:	466c      	mov	r4, sp
 800194e:	f103 020c 	add.w	r2, r3, #12
 8001952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001956:	e884 0003 	stmia.w	r4, {r0, r1}
 800195a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195c:	4628      	mov	r0, r5
 800195e:	f000 fb69 	bl	8002034 <screen>
 8001962:	e01c      	b.n	800199e <main+0xe4a>
					}
					// 1S switching
					else if (cursor == 10) {
 8001964:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <main+0xfe4>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b0a      	cmp	r3, #10
 800196a:	d118      	bne.n	800199e <main+0xe4a>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <main+0xfe8>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	2b3a      	cmp	r3, #58	; 0x3a
 8001972:	d805      	bhi.n	8001980 <main+0xe2c>
							sTime_AL.Seconds += 1;
 8001974:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <main+0xfe8>)
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	3301      	adds	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <main+0xfe8>)
 800197e:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001980:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <main+0xfe4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461d      	mov	r5, r3
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <main+0xfe8>)
 8001988:	466c      	mov	r4, sp
 800198a:	f103 020c 	add.w	r2, r3, #12
 800198e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001992:	e884 0003 	stmia.w	r4, {r0, r1}
 8001996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001998:	4628      	mov	r0, r5
 800199a:	f000 fb4b 	bl	8002034 <screen>
					}

					// clear the up flag
					up = 0;
 800199e:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <main+0xfec>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <main+0xff0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80f1 	beq.w	8001b90 <main+0x103c>

					//AM or PM switching
					if (cursor == 0) {
 80019ae:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <main+0xfe4>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d13c      	bne.n	8001a30 <main+0xedc>
						if (sTime_AL.TimeFormat == 0) {
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <main+0xfe8>)
 80019b8:	78db      	ldrb	r3, [r3, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <main+0xe9e>
							sTime_AL.TimeFormat = 1;
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <main+0xfe8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 80019c4:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <main+0xfe8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <main+0xe7e>
								sTime_AL.Hours = 12;
 80019cc:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <main+0xfe8>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <main+0xfe4>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461d      	mov	r5, r3
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <main+0xfe8>)
 80019da:	466c      	mov	r4, sp
 80019dc:	f103 020c 	add.w	r2, r3, #12
 80019e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80019e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ea:	4628      	mov	r0, r5
 80019ec:	f000 fb22 	bl	8002034 <screen>
 80019f0:	e0cb      	b.n	8001b8a <main+0x1036>
						} else if (sTime_AL.TimeFormat == 1) {
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <main+0xfe8>)
 80019f4:	78db      	ldrb	r3, [r3, #3]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 80c7 	bne.w	8001b8a <main+0x1036>
							sTime_AL.TimeFormat = 0;
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <main+0xfe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <main+0xfe8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d102      	bne.n	8001a10 <main+0xebc>
								sTime_AL.Hours = 0;
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <main+0xfe8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <main+0xfe4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461d      	mov	r5, r3
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <main+0xfe8>)
 8001a18:	466c      	mov	r4, sp
 8001a1a:	f103 020c 	add.w	r2, r3, #12
 8001a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a22:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f000 fb03 	bl	8002034 <screen>
 8001a2e:	e0ac      	b.n	8001b8a <main+0x1036>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <main+0xfe4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d119      	bne.n	8001a6c <main+0xf18>
						if (sTime_AL.Hours > 0) {
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <main+0xfe8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <main+0xef8>
							sTime_AL.Hours--;
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <main+0xfe8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <main+0xfe8>)
 8001a4a:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <main+0xfe4>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461d      	mov	r5, r3
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <main+0xfe8>)
 8001a54:	466c      	mov	r4, sp
 8001a56:	f103 020c 	add.w	r2, r3, #12
 8001a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	4628      	mov	r0, r5
 8001a66:	f000 fae5 	bl	8002034 <screen>
 8001a6a:	e08e      	b.n	8001b8a <main+0x1036>
					}

					// 10M switching
					else if (cursor == 6) {
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <main+0xfe4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d11d      	bne.n	8001ab0 <main+0xf5c>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <main+0xfe8>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <main+0xf3c>
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <main+0xfe8>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b32      	cmp	r3, #50	; 0x32
 8001a82:	d805      	bhi.n	8001a90 <main+0xf3c>
							sTime_AL.Minutes -= 10;
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <main+0xfe8>)
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	3b0a      	subs	r3, #10
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <main+0xfe8>)
 8001a8e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <main+0xfe4>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461d      	mov	r5, r3
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <main+0xfe8>)
 8001a98:	466c      	mov	r4, sp
 8001a9a:	f103 020c 	add.w	r2, r3, #12
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 fac3 	bl	8002034 <screen>
 8001aae:	e06c      	b.n	8001b8a <main+0x1036>
					}
					// 1M switching
					else if (cursor == 7) {
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <main+0xfe4>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b07      	cmp	r3, #7
 8001ab6:	d11d      	bne.n	8001af4 <main+0xfa0>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <main+0xfe8>)
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <main+0xf80>
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <main+0xfe8>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac6:	d805      	bhi.n	8001ad4 <main+0xf80>
							sTime_AL.Minutes -= 1;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <main+0xfe8>)
 8001aca:	785b      	ldrb	r3, [r3, #1]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <main+0xfe8>)
 8001ad2:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <main+0xfe4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461d      	mov	r5, r3
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <main+0xfe8>)
 8001adc:	466c      	mov	r4, sp
 8001ade:	f103 020c 	add.w	r2, r3, #12
 8001ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 faa1 	bl	8002034 <screen>
 8001af2:	e04a      	b.n	8001b8a <main+0x1036>
					}

					// 10S switching
					else if (cursor == 9) {
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <main+0xfe4>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d125      	bne.n	8001b48 <main+0xff4>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <main+0xfe8>)
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <main+0xfc4>
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <main+0xfe8>)
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	2b32      	cmp	r3, #50	; 0x32
 8001b0a:	d805      	bhi.n	8001b18 <main+0xfc4>
							sTime_AL.Seconds -= 10;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <main+0xfe8>)
 8001b0e:	789b      	ldrb	r3, [r3, #2]
 8001b10:	3b0a      	subs	r3, #10
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <main+0xfe8>)
 8001b16:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <main+0xfe4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <main+0xfe8>)
 8001b20:	466c      	mov	r4, sp
 8001b22:	f103 020c 	add.w	r2, r3, #12
 8001b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b30:	4628      	mov	r0, r5
 8001b32:	f000 fa7f 	bl	8002034 <screen>
 8001b36:	e028      	b.n	8001b8a <main+0x1036>
 8001b38:	20000184 	.word	0x20000184
 8001b3c:	200001f8 	.word	0x200001f8
 8001b40:	2000018c 	.word	0x2000018c
 8001b44:	2000018d 	.word	0x2000018d
					}
					// 1S switching
					else if (cursor == 10) {
 8001b48:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <main+0x11ac>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b0a      	cmp	r3, #10
 8001b4e:	d11c      	bne.n	8001b8a <main+0x1036>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 8001b50:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <main+0x11b0>)
 8001b52:	789b      	ldrb	r3, [r3, #2]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <main+0x1018>
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <main+0x11b0>)
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	2b3b      	cmp	r3, #59	; 0x3b
 8001b5e:	d805      	bhi.n	8001b6c <main+0x1018>
							sTime_AL.Seconds -= 1;
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <main+0x11b0>)
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <main+0x11b0>)
 8001b6a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001b6c:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <main+0x11ac>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <main+0x11b0>)
 8001b74:	466c      	mov	r4, sp
 8001b76:	f103 020c 	add.w	r2, r3, #12
 8001b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 fa55 	bl	8002034 <screen>
					}

					// clear the down flag
					down = 0;
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <main+0x11b4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <main+0x11b8>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03e      	beq.n	8001c16 <main+0x10c2>
					if (cursor > 0) {
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <main+0x11ac>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d037      	beq.n	8001c10 <main+0x10bc>
						cursor--;
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <main+0x11ac>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <main+0x11ac>)
 8001baa:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bac:	2110      	movs	r1, #16
 8001bae:	204e      	movs	r0, #78	; 0x4e
 8001bb0:	f7fe ff44 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001bb4:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <main+0x11ac>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d109      	bne.n	8001bd0 <main+0x107c>
							cursor--;
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <main+0x11ac>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <main+0x11ac>)
 8001bc6:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bc8:	2110      	movs	r1, #16
 8001bca:	204e      	movs	r0, #78	; 0x4e
 8001bcc:	f7fe ff36 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <main+0x11ac>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d109      	bne.n	8001bec <main+0x1098>
							cursor--;
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <main+0x11ac>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <main+0x11ac>)
 8001be2:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001be4:	2110      	movs	r1, #16
 8001be6:	204e      	movs	r0, #78	; 0x4e
 8001be8:	f7fe ff28 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 2) {
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <main+0x11ac>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d10d      	bne.n	8001c10 <main+0x10bc>
							cursor -= 2;
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <main+0x11ac>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3b02      	subs	r3, #2
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <main+0x11ac>)
 8001bfe:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001c00:	2110      	movs	r1, #16
 8001c02:	204e      	movs	r0, #78	; 0x4e
 8001c04:	f7fe ff1a 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001c08:	2110      	movs	r1, #16
 8001c0a:	204e      	movs	r0, #78	; 0x4e
 8001c0c:	f7fe ff16 	bl	8000a3c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 8001c10:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <main+0x11b8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <main+0x11bc>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d03e      	beq.n	8001c9c <main+0x1148>

					if (cursor < 10) {
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <main+0x11ac>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b09      	cmp	r3, #9
 8001c24:	d837      	bhi.n	8001c96 <main+0x1142>
						cursor++;
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <main+0x11ac>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <main+0x11ac>)
 8001c30:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c32:	2114      	movs	r1, #20
 8001c34:	204e      	movs	r0, #78	; 0x4e
 8001c36:	f7fe ff01 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <main+0x11ac>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d109      	bne.n	8001c56 <main+0x1102>
							cursor++;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <main+0x11ac>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <main+0x11ac>)
 8001c4c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c4e:	2114      	movs	r1, #20
 8001c50:	204e      	movs	r0, #78	; 0x4e
 8001c52:	f7fe fef3 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <main+0x11ac>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d109      	bne.n	8001c72 <main+0x111e>
							cursor++;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <main+0x11ac>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <main+0x11ac>)
 8001c68:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c6a:	2114      	movs	r1, #20
 8001c6c:	204e      	movs	r0, #78	; 0x4e
 8001c6e:	f7fe fee5 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <main+0x11ac>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10d      	bne.n	8001c96 <main+0x1142>
							cursor += 2;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <main+0x11ac>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <main+0x11ac>)
 8001c84:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c86:	2114      	movs	r1, #20
 8001c88:	204e      	movs	r0, #78	; 0x4e
 8001c8a:	f7fe fed7 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c8e:	2114      	movs	r1, #20
 8001c90:	204e      	movs	r0, #78	; 0x4e
 8001c92:	f7fe fed3 	bl	8000a3c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <main+0x11bc>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <main+0x11c0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <main+0x11c4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f43f acea 	beq.w	8001680 <main+0xb2c>

			}
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 8001cac:	e016      	b.n	8001cdc <main+0x1188>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <main+0x11c8>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00f      	beq.n	8001cd6 <main+0x1182>
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <main+0x11cc>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <main+0x1182>
				rising_edge = 0;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <main+0x11c8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <main+0x11cc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <main+0x11c4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <main+0x11d0>)
 8001cd2:	f005 ff01 	bl	8007ad8 <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <main+0x11c0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <main+0x11c4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d0e4      	beq.n	8001cae <main+0x115a>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 8001ce4:	2250      	movs	r2, #80	; 0x50
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <main+0x11d4>)
 8001cea:	f005 fe67 	bl	80079bc <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <main+0x11d8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <main+0x11dc>)
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <main+0x11d4>)
 8001cf8:	f005 fef6 	bl	8007ae8 <siprintf>
	while (1) {
 8001cfc:	f7fe bf77 	b.w	8000bee <main+0x9a>
 8001d00:	20000184 	.word	0x20000184
 8001d04:	200001f8 	.word	0x200001f8
 8001d08:	2000018d 	.word	0x2000018d
 8001d0c:	2000018e 	.word	0x2000018e
 8001d10:	2000018f 	.word	0x2000018f
 8001d14:	20000150 	.word	0x20000150
 8001d18:	20000177 	.word	0x20000177
 8001d1c:	20000175 	.word	0x20000175
 8001d20:	20000176 	.word	0x20000176
 8001d24:	08008edc 	.word	0x08008edc
 8001d28:	2000020c 	.word	0x2000020c
 8001d2c:	20000188 	.word	0x20000188
 8001d30:	08008ee8 	.word	0x08008ee8

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	; 0x50
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	2230      	movs	r2, #48	; 0x30
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 fe3a 	bl	80079bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <SystemClock_Config+0xdc>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <SystemClock_Config+0xdc>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <SystemClock_Config+0xdc>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <SystemClock_Config+0xe0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <SystemClock_Config+0xe0>)
 8001d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <SystemClock_Config+0xe0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001d90:	2306      	movs	r3, #6
 8001d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da0:	2302      	movs	r3, #2
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da8:	2308      	movs	r3, #8
 8001daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001dac:	23b4      	movs	r3, #180	; 0xb4
 8001dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db0:	2302      	movs	r3, #2
 8001db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db4:	2304      	movs	r3, #4
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db8:	f107 0320 	add.w	r3, r7, #32
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 fc5f 	bl	8004680 <HAL_RCC_OscConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dc8:	f000 fa8e 	bl	80022e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dcc:	f002 fc08 	bl	80045e0 <HAL_PWREx_EnableOverDrive>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dd6:	f000 fa87 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	230f      	movs	r3, #15
 8001ddc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001de6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2105      	movs	r1, #5
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 feb9 	bl	8004b70 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e04:	f000 fa70 	bl	80022e8 <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	; 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2027      	movs	r0, #39	; 0x27
 8001e22:	f001 fb44 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e26:	2027      	movs	r0, #39	; 0x27
 8001e28:	f001 fb5d 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2028      	movs	r0, #40	; 0x28
 8001e32:	f001 fb3c 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e36:	2028      	movs	r0, #40	; 0x28
 8001e38:	f001 fb55 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	201c      	movs	r0, #28
 8001e42:	f001 fb34 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e46:	201c      	movs	r0, #28
 8001e48:	f001 fb4d 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	201e      	movs	r0, #30
 8001e52:	f001 fb2c 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e56:	201e      	movs	r0, #30
 8001e58:	f001 fb45 	bl	80034e6 <HAL_NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b63      	cmp	r3, #99	; 0x63
 8001e6c:	d801      	bhi.n	8001e72 <button_status+0x12>
		return UP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e02a      	b.n	8001ec8 <button_status+0x68>
	if (800 < value && value < 900)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e78:	d905      	bls.n	8001e86 <button_status+0x26>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001e80:	d201      	bcs.n	8001e86 <button_status+0x26>
		return DOWN;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e020      	b.n	8001ec8 <button_status+0x68>
	if (1800 < value && value < 2000)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001e8c:	d905      	bls.n	8001e9a <button_status+0x3a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e94:	d201      	bcs.n	8001e9a <button_status+0x3a>
		return LEFT;
 8001e96:	2304      	movs	r3, #4
 8001e98:	e016      	b.n	8001ec8 <button_status+0x68>
	if (2800 < value && value < 3100)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001ea0:	d906      	bls.n	8001eb0 <button_status+0x50>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f640 421b 	movw	r2, #3099	; 0xc1b
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d801      	bhi.n	8001eb0 <button_status+0x50>
		return RIGHT;
 8001eac:	2305      	movs	r3, #5
 8001eae:	e00b      	b.n	8001ec8 <button_status+0x68>
	if (4000 < value && value < 5000)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001eb6:	d906      	bls.n	8001ec6 <button_status+0x66>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d801      	bhi.n	8001ec6 <button_status+0x66>
		return SELECT;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <button_status+0x68>

	return NONE;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	f040 8082 	bne.w	8001fec <HAL_TIM_PeriodElapsedCallback+0x118>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001ee8:	4842      	ldr	r0, [pc, #264]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001eea:	f000 ffca 	bl	8002e82 <HAL_ADC_GetValue>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ef2:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8001ef4:	483f      	ldr	r0, [pc, #252]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001ef6:	f000 ff91 	bl	8002e1c <HAL_ADC_Stop>

		if (3300 < ADC_value && ADC_value < 3400) {
 8001efa:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d905      	bls.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f640 5247 	movw	r2, #3399	; 0xd47
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d905      	bls.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x4a>

		}
		else {
			printf("%d\r\n", ADC_value);
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4838      	ldr	r0, [pc, #224]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f1a:	f005 fd57 	bl	80079cc <iprintf>
		}

		if (button_status(ADC_value) == UP) {
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff9c 	bl	8001e60 <button_status>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d10b      	bne.n	8001f46 <HAL_TIM_PeriodElapsedCallback+0x72>
			up++;
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001f38:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4830      	ldr	r0, [pc, #192]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f42:	f005 fd43 	bl	80079cc <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff88 	bl	8001e60 <button_status>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d10b      	bne.n	8001f6e <HAL_TIM_PeriodElapsedCallback+0x9a>
			down++;
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001f60:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4828      	ldr	r0, [pc, #160]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001f6a:	f005 fd2f 	bl	80079cc <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff74 	bl	8001e60 <button_status>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d10b      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0xc2>
			left++;
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001f88:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4820      	ldr	r0, [pc, #128]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f92:	f005 fd1b 	bl	80079cc <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff60 	bl	8001e60 <button_status>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d10b      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0xea>
			right++;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001fb0:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4818      	ldr	r0, [pc, #96]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001fba:	f005 fd07 	bl	80079cc <iprintf>
		}

		if (apply_flag > 0) {
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0xfc>
			get_time_apply++;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001fce:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x10e>
			get_time_exit++;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001fe0:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001fea:	6013      	str	r3, [r2, #0]
//		printf("%d\r\n", get_time);
	}
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000094 	.word	0x20000094
 8001ff8:	20000188 	.word	0x20000188
 8001ffc:	08008ee8 	.word	0x08008ee8
 8002000:	2000018c 	.word	0x2000018c
 8002004:	080094d4 	.word	0x080094d4
 8002008:	2000018d 	.word	0x2000018d
 800200c:	080094e0 	.word	0x080094e0
 8002010:	2000018e 	.word	0x2000018e
 8002014:	080094ec 	.word	0x080094ec
 8002018:	2000018f 	.word	0x2000018f
 800201c:	080094f8 	.word	0x080094f8
 8002020:	20000154 	.word	0x20000154
 8002024:	20000158 	.word	0x20000158
 8002028:	2000015c 	.word	0x2000015c
 800202c:	20000160 	.word	0x20000160
 8002030:	20000150 	.word	0x20000150

08002034 <screen>:




void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 8002034:	b084      	sub	sp, #16
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af02      	add	r7, sp, #8
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	f107 001c 	add.w	r0, r7, #28
 8002042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <screen+0x78>)
 8002052:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8002054:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8002056:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8002058:	7f7b      	ldrb	r3, [r7, #29]
 800205a:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 800205c:	9101      	str	r1, [sp, #4]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4603      	mov	r3, r0
 8002062:	4913      	ldr	r1, [pc, #76]	; (80020b0 <screen+0x7c>)
 8002064:	4813      	ldr	r0, [pc, #76]	; (80020b4 <screen+0x80>)
 8002066:	f005 fd3f 	bl	8007ae8 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800206a:	21c0      	movs	r1, #192	; 0xc0
 800206c:	204e      	movs	r0, #78	; 0x4e
 800206e:	f7fe fce5 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 8002072:	4910      	ldr	r1, [pc, #64]	; (80020b4 <screen+0x80>)
 8002074:	204e      	movs	r0, #78	; 0x4e
 8002076:	f7fe fd22 	bl	8000abe <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e006      	b.n	800208e <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8002080:	2110      	movs	r1, #16
 8002082:	204e      	movs	r0, #78	; 0x4e
 8002084:	f7fe fcda 	bl	8000a3c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1c3 030b 	rsb	r3, r3, #11
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf2      	blt.n	8002080 <screen+0x4c>
	}
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020a6:	b004      	add	sp, #16
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000
 80020b0:	08008e08 	.word	0x08008e08
 80020b4:	200001bc 	.word	0x200001bc

080020b8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	481d      	ldr	r0, [pc, #116]	; (800213c <HAL_GPIO_EXTI_Callback+0x84>)
 80020c8:	f001 fc66 	bl	8003998 <HAL_GPIO_ReadPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d114      	bne.n	80020fc <HAL_GPIO_EXTI_Callback+0x44>
		rising_edge++;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 80020dc:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4817      	ldr	r0, [pc, #92]	; (8002144 <HAL_GPIO_EXTI_Callback+0x8c>)
 80020e6:	f005 fc71 	bl	80079cc <iprintf>
		if (rising_edge == 1) {
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d104      	bne.n	80020fc <HAL_GPIO_EXTI_Callback+0x44>
			start_tick = HAL_GetTick();
 80020f2:	f000 fd4d 	bl	8002b90 <HAL_GetTick>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_GPIO_EXTI_Callback+0x90>)
 80020fa:	6013      	str	r3, [r2, #0]
		}

	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80020fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <HAL_GPIO_EXTI_Callback+0x84>)
 8002102:	f001 fc49 	bl	8003998 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <HAL_GPIO_EXTI_Callback+0x7c>
		if (rising_edge == 0) {
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_GPIO_EXTI_Callback+0x64>
			falling_edge = 0;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_GPIO_EXTI_Callback+0x94>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e005      	b.n	8002128 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			falling_edge++;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_GPIO_EXTI_Callback+0x94>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_GPIO_EXTI_Callback+0x94>)
 8002126:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_GPIO_EXTI_Callback+0x94>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <HAL_GPIO_EXTI_Callback+0x98>)
 8002130:	f005 fc4c 	bl	80079cc <iprintf>
	}

}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020800 	.word	0x40020800
 8002140:	20000175 	.word	0x20000175
 8002144:	08009508 	.word	0x08009508
 8002148:	20000178 	.word	0x20000178
 800214c:	20000176 	.word	0x20000176
 8002150:	0800951c 	.word	0x0800951c

08002154 <note>:


void note(char pitch_text, char octave_text, char temp_text, int time, int volume) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	460b      	mov	r3, r1
 8002162:	71bb      	strb	r3, [r7, #6]
 8002164:	4613      	mov	r3, r2
 8002166:	717b      	strb	r3, [r7, #5]

	if (flag == 1) {
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <note+0xc4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d14e      	bne.n	800220e <note+0xba>
		int pitch = pitch_change(pitch_text);
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f854 	bl	8002220 <pitch_change>
 8002178:	4603      	mov	r3, r0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
		int octave = octave_change(octave_text);
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f889 	bl	8002296 <octave_change>
 8002184:	4603      	mov	r3, r0
 8002186:	61bb      	str	r3, [r7, #24]
		int temp = temp_change(temp_text);
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f890 	bl	80022b0 <temp_change>
 8002190:	4603      	mov	r3, r0
 8002192:	617b      	str	r3, [r7, #20]

		uint32_t start_tick = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
		uint32_t cur_tick = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
		uint32_t tick_gap = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]

		// avoid error(ARR == CCR)
		if (volume <= 2) {
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	dc01      	bgt.n	80021aa <note+0x56>
			volume = 2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// setting the octave
		if (octave != 4) {
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d022      	beq.n	80021f6 <note+0xa2>
			if (octave < 4) {
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	dc0f      	bgt.n	80021d6 <note+0x82>
				for (int i = 0; i < 4 - octave; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	e005      	b.n	80021c8 <note+0x74>
					pitch *= 2;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i < 4 - octave; i++) {
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	3301      	adds	r3, #1
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f1c3 0304 	rsb	r3, r3, #4
 80021ce:	6a3a      	ldr	r2, [r7, #32]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf3      	blt.n	80021bc <note+0x68>
 80021d4:	e00f      	b.n	80021f6 <note+0xa2>
				}
			} else {
				for (int i = 0; i < octave - 4; i++) {
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e007      	b.n	80021ec <note+0x98>
					pitch /= 2;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	0fda      	lsrs	r2, r3, #31
 80021e0:	4413      	add	r3, r2
 80021e2:	105b      	asrs	r3, r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i < octave - 4; i++) {
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	3b04      	subs	r3, #4
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dbf2      	blt.n	80021dc <note+0x88>
				}
			}
		}

		TIM3->ARR = pitch;
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <note+0xc8>)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR3 = pitch / volume;
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	fb92 f2f3 	sdiv	r2, r2, r3
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <note+0xc8>)
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c

		flag = 0;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <note+0xc4>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
	}
}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000138 	.word	0x20000138
 800221c:	40000400 	.word	0x40000400

08002220 <pitch_change>:
uint32_t pitch_change (char pitch_text) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b4e      	cmp	r3, #78	; 0x4e
 800222e:	d101      	bne.n	8002234 <pitch_change+0x14>
		return N;
 8002230:	2300      	movs	r3, #0
 8002232:	e02a      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'C') {
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b43      	cmp	r3, #67	; 0x43
 8002238:	d102      	bne.n	8002240 <pitch_change+0x20>
		return C;
 800223a:	f642 53f2 	movw	r3, #11762	; 0x2df2
 800223e:	e024      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'D') {
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b44      	cmp	r3, #68	; 0x44
 8002244:	d102      	bne.n	800224c <pitch_change+0x2c>
		return D;
 8002246:	f642 03e5 	movw	r3, #10469	; 0x28e5
 800224a:	e01e      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'E') {
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b45      	cmp	r3, #69	; 0x45
 8002250:	d102      	bne.n	8002258 <pitch_change+0x38>
		return E;
 8002252:	f242 4366 	movw	r3, #9318	; 0x2466
 8002256:	e018      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'F') {
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b46      	cmp	r3, #70	; 0x46
 800225c:	d102      	bne.n	8002264 <pitch_change+0x44>
		return F;
 800225e:	f242 2357 	movw	r3, #8791	; 0x2257
 8002262:	e012      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'G') {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b47      	cmp	r3, #71	; 0x47
 8002268:	d102      	bne.n	8002270 <pitch_change+0x50>
		return G;
 800226a:	f641 6391 	movw	r3, #7825	; 0x1e91
 800226e:	e00c      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'A') {
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b41      	cmp	r3, #65	; 0x41
 8002274:	d102      	bne.n	800227c <pitch_change+0x5c>
		return A;
 8002276:	f641 3336 	movw	r3, #6966	; 0x1b36
 800227a:	e006      	b.n	800228a <pitch_change+0x6a>
	}
	else if (pitch_text == 'B') {
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b42      	cmp	r3, #66	; 0x42
 8002280:	d102      	bne.n	8002288 <pitch_change+0x68>
		return B;
 8002282:	f641 0338 	movw	r3, #6200	; 0x1838
 8002286:	e000      	b.n	800228a <pitch_change+0x6a>
	}
	else {
		return N;
 8002288:	2300      	movs	r3, #0
	}
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <octave_change>:
uint32_t octave_change (char octave_text) {
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	3b30      	subs	r3, #48	; 0x30
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <temp_change>:
uint32_t temp_change (char temp_text) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b4e      	cmp	r3, #78	; 0x4e
 80022be:	d101      	bne.n	80022c4 <temp_change+0x14>
		return 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e00b      	b.n	80022dc <temp_change+0x2c>
	}
	else if (temp_text == 'S') {
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b53      	cmp	r3, #83	; 0x53
 80022c8:	d101      	bne.n	80022ce <temp_change+0x1e>
		return 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e006      	b.n	80022dc <temp_change+0x2c>
	}
	else if (temp_text == 'F') {
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b46      	cmp	r3, #70	; 0x46
 80022d2:	d102      	bne.n	80022da <temp_change+0x2a>
		return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
 80022d8:	e000      	b.n	80022dc <temp_change+0x2c>
	}
	else {
		return 0;
 80022da:	2300      	movs	r3, #0
	}
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022f0:	e7fe      	b.n	80022f0 <Error_Handler+0x8>
	...

080022f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002308:	2300      	movs	r3, #0
 800230a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <MX_RTC_Init+0xb0>)
 800230e:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <MX_RTC_Init+0xb4>)
 8002310:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <MX_RTC_Init+0xb0>)
 800231a:	227f      	movs	r2, #127	; 0x7f
 800231c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <MX_RTC_Init+0xb0>)
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002336:	481b      	ldr	r0, [pc, #108]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002338:	f002 ffba 	bl	80052b0 <HAL_RTC_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002342:	f7ff ffd1 	bl	80022e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002352:	2301      	movs	r3, #1
 8002354:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	480f      	ldr	r0, [pc, #60]	; (80023a4 <MX_RTC_Init+0xb0>)
 8002366:	f003 f819 	bl	800539c <HAL_RTC_SetTime>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002370:	f7ff ffba 	bl	80022e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002374:	2301      	movs	r3, #1
 8002376:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002378:	2301      	movs	r3, #1
 800237a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800237c:	2301      	movs	r3, #1
 800237e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_RTC_Init+0xb0>)
 800238c:	f003 f8fe 	bl	800558c <HAL_RTC_SetDate>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002396:	f7ff ffa7 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000025c 	.word	0x2000025c
 80023a8:	40002800 	.word	0x40002800

080023ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	2230      	movs	r2, #48	; 0x30
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 fafd 	bl	80079bc <memset>
  if(rtcHandle->Instance==RTC)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RTC_MspInit+0x4c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d111      	bne.n	80023f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023cc:	2320      	movs	r3, #32
 80023ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fda8 	bl	8004f30 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023e6:	f7ff ff7f 	bl	80022e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_RTC_MspInit+0x50>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023f0:	bf00      	nop
 80023f2:	3738      	adds	r7, #56	; 0x38
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40002800 	.word	0x40002800
 80023fc:	42470e3c 	.word	0x42470e3c

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_MspInit+0x4c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_MspInit+0x4c>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 fb64 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM2_IRQHandler+0x10>)
 80024aa:	f003 fbe1 	bl	8005c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000280 	.word	0x20000280

080024b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM4_IRQHandler+0x10>)
 80024be:	f003 fbd7 	bl	8005c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000310 	.word	0x20000310

080024cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART3_IRQHandler+0x10>)
 80024d2:	f004 fb07 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000358 	.word	0x20000358

080024e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024e8:	f001 fa6e 	bl	80039c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
	}

return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe faf3 	bl	8000b30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
	}
	return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258a:	605a      	str	r2, [r3, #4]
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f005 f9a6 	bl	800794c <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20030000 	.word	0x20030000
 800262c:	00000400 	.word	0x00000400
 8002630:	2000027c 	.word	0x2000027c
 8002634:	200003b0 	.word	0x200003b0

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <MX_TIM2_Init+0x98>)
 800267a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <MX_TIM2_Init+0x98>)
 8002682:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_TIM2_Init+0x98>)
 800268a:	2210      	movs	r2, #16
 800268c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <MX_TIM2_Init+0x98>)
 8002690:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <MX_TIM2_Init+0x98>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <MX_TIM2_Init+0x98>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026a2:	4814      	ldr	r0, [pc, #80]	; (80026f4 <MX_TIM2_Init+0x98>)
 80026a4:	f003 f902 	bl	80058ac <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ae:	f7ff fe1b 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_TIM2_Init+0x98>)
 80026c0:	f003 fca0 	bl	8006004 <HAL_TIM_ConfigClockSource>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026ca:	f7ff fe0d 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_TIM2_Init+0x98>)
 80026dc:	f004 f892 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026e6:	f7ff fdff 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000280 	.word	0x20000280

080026f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	615a      	str	r2, [r3, #20]
 8002726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <MX_TIM3_Init+0xe4>)
 800272a:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <MX_TIM3_Init+0xe8>)
 800272c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <MX_TIM3_Init+0xe4>)
 8002730:	221d      	movs	r2, #29
 8002732:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <MX_TIM3_Init+0xe4>)
 8002736:	2210      	movs	r2, #16
 8002738:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <MX_TIM3_Init+0xe4>)
 800273c:	f641 0238 	movw	r2, #6200	; 0x1838
 8002740:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <MX_TIM3_Init+0xe4>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_TIM3_Init+0xe4>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800274e:	4823      	ldr	r0, [pc, #140]	; (80027dc <MX_TIM3_Init+0xe4>)
 8002750:	f003 f8ac 	bl	80058ac <HAL_TIM_Base_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800275a:	f7ff fdc5 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002768:	4619      	mov	r1, r3
 800276a:	481c      	ldr	r0, [pc, #112]	; (80027dc <MX_TIM3_Init+0xe4>)
 800276c:	f003 fc4a 	bl	8006004 <HAL_TIM_ConfigClockSource>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002776:	f7ff fdb7 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800277a:	4818      	ldr	r0, [pc, #96]	; (80027dc <MX_TIM3_Init+0xe4>)
 800277c:	f003 f956 	bl	8005a2c <HAL_TIM_PWM_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002786:	f7ff fdaf 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800278a:	2320      	movs	r3, #32
 800278c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	4619      	mov	r1, r3
 8002798:	4810      	ldr	r0, [pc, #64]	; (80027dc <MX_TIM3_Init+0xe4>)
 800279a:	f004 f833 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80027a4:	f7ff fda0 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a8:	2360      	movs	r3, #96	; 0x60
 80027aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	2208      	movs	r2, #8
 80027bc:	4619      	mov	r1, r3
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <MX_TIM3_Init+0xe4>)
 80027c0:	f003 fb5e 	bl	8005e80 <HAL_TIM_PWM_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80027ca:	f7ff fd8d 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <MX_TIM3_Init+0xe4>)
 80027d0:	f000 f8a2 	bl	8002918 <HAL_TIM_MspPostInit>

}
 80027d4:	bf00      	nop
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200002c8 	.word	0x200002c8
 80027e0:	40000400 	.word	0x40000400

080027e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f8:	463b      	mov	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <MX_TIM4_Init+0x94>)
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <MX_TIM4_Init+0x98>)
 8002804:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <MX_TIM4_Init+0x94>)
 8002808:	2264      	movs	r2, #100	; 0x64
 800280a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_TIM4_Init+0x94>)
 800280e:	2210      	movs	r2, #16
 8002810:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <MX_TIM4_Init+0x94>)
 8002814:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002818:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <MX_TIM4_Init+0x94>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_TIM4_Init+0x94>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002826:	4814      	ldr	r0, [pc, #80]	; (8002878 <MX_TIM4_Init+0x94>)
 8002828:	f003 f840 	bl	80058ac <HAL_TIM_Base_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002832:	f7ff fd59 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	4619      	mov	r1, r3
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <MX_TIM4_Init+0x94>)
 8002844:	f003 fbde 	bl	8006004 <HAL_TIM_ConfigClockSource>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800284e:	f7ff fd4b 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800285a:	463b      	mov	r3, r7
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <MX_TIM4_Init+0x94>)
 8002860:	f003 ffd0 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800286a:	f7ff fd3d 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000310 	.word	0x20000310
 800287c:	40000800 	.word	0x40000800

08002880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028ae:	e026      	b.n	80028fe <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_TIM_Base_MspInit+0x90>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
}
 80028d6:	e012      	b.n	80028fe <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_TIM_Base_MspInit+0x94>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_TIM_Base_MspInit+0x8c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_TIM_MspPostInit+0x68>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d11d      	bne.n	8002976 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_TIM_MspPostInit+0x6c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_TIM_MspPostInit+0x6c>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_TIM_MspPostInit+0x6c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002956:	2301      	movs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002966:	2302      	movs	r3, #2
 8002968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_TIM_MspPostInit+0x70>)
 8002972:	f000 fe65 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002976:	bf00      	nop
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40000400 	.word	0x40000400
 8002984:	40023800 	.word	0x40023800
 8002988:	40020400 	.word	0x40020400

0800298c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <MX_USART3_UART_Init+0x50>)
 8002994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029c4:	f003 ffae 	bl	8006924 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ce:	f7ff fc8b 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000358 	.word	0x20000358
 80029dc:	40004800 	.word	0x40004800

080029e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_UART_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12c      	bne.n	8002a5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_UART_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_MspInit+0x8c>)
 8002a58:	f000 fdf2 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40004800 	.word	0x40004800
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020c00 	.word	0x40020c00

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9a:	f7ff fdcd 	bl	8002638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f004 ff5b 	bl	8007958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7fe f857 	bl	8000b54 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002aa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ab4:	080095f0 	.word	0x080095f0
  ldr r2, =_sbss
 8002ab8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002abc:	200003b0 	.word	0x200003b0

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 fcd3 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fc82 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fceb 	bl	8003502 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f000 fcb3 	bl	80034ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000008 	.word	0x20000008
 8002b60:	20000010 	.word	0x20000010
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	2000039c 	.word	0x2000039c

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000039c 	.word	0x2000039c

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000010 	.word	0x20000010

08002bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e033      	b.n	8002c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fd2a 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c36:	f023 0302 	bic.w	r3, r3, #2
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa5c 	bl	8003100 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5e:	e001      	b.n	8002c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Start+0x1a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0b2      	b.n	8002df8 <HAL_ADC_Start+0x180>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d018      	beq.n	8002cda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_ADC_Start+0x18c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_ADC_Start+0x190>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9a      	lsrs	r2, r3, #18
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ccc:	e002      	b.n	8002cd4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f9      	bne.n	8002cce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d17a      	bne.n	8002dde <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f023 0206 	bic.w	r2, r3, #6
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44
 8002d34:	e002      	b.n	8002d3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_ADC_Start+0x194>)
 8002d46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d12a      	bne.n	8002db4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <HAL_ADC_Start+0x198>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d015      	beq.n	8002d94 <HAL_ADC_Start+0x11c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <HAL_ADC_Start+0x19c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_Start+0x106>
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_ADC_Start+0x194>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <HAL_ADC_Start+0x1a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d136      	bne.n	8002df6 <HAL_ADC_Start+0x17e>
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_ADC_Start+0x194>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d130      	bne.n	8002df6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d129      	bne.n	8002df6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	e020      	b.n	8002df6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_ADC_Start+0x198>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_ADC_Start+0x17e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d114      	bne.n	8002df6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e00b      	b.n	8002df6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	20000008 	.word	0x20000008
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	40012300 	.word	0x40012300
 8002e10:	40012000 	.word	0x40012000
 8002e14:	40012100 	.word	0x40012100
 8002e18:	40012200 	.word	0x40012200

08002e1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Stop+0x16>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e021      	b.n	8002e76 <HAL_ADC_Stop+0x5a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e113      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x244>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	d925      	bls.n	8002f14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	3b1e      	subs	r3, #30
 8002ede:	2207      	movs	r2, #7
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	4603      	mov	r3, r0
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4403      	add	r3, r0
 8002f06:	3b1e      	subs	r3, #30
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	e022      	b.n	8002f5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6919      	ldr	r1, [r3, #16]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	2207      	movs	r2, #7
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	400a      	ands	r2, r1
 8002f36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6919      	ldr	r1, [r3, #16]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4403      	add	r3, r0
 8002f50:	409a      	lsls	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d824      	bhi.n	8002fac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	3b05      	subs	r3, #5
 8002f74:	221f      	movs	r2, #31
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b05      	subs	r3, #5
 8002f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8002faa:	e04c      	b.n	8003046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d824      	bhi.n	8002ffe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b23      	subs	r3, #35	; 0x23
 8002fc6:	221f      	movs	r2, #31
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	3b23      	subs	r3, #35	; 0x23
 8002ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffc:	e023      	b.n	8003046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	3b41      	subs	r3, #65	; 0x41
 8003010:	221f      	movs	r2, #31
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b41      	subs	r3, #65	; 0x41
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <HAL_ADC_ConfigChannel+0x250>)
 8003048:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_ADC_ConfigChannel+0x254>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1d8>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b12      	cmp	r3, #18
 800305a:	d10b      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_ADC_ConfigChannel+0x254>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12b      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_ADC_ConfigChannel+0x258>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x1f4>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b11      	cmp	r3, #17
 800308e:	d122      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_ADC_ConfigChannel+0x258>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_ADC_ConfigChannel+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_ADC_ConfigChannel+0x260>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9a      	lsrs	r2, r3, #18
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f9      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40012300 	.word	0x40012300
 80030f0:	40012000 	.word	0x40012000
 80030f4:	10000012 	.word	0x10000012
 80030f8:	20000008 	.word	0x20000008
 80030fc:	431bde83 	.word	0x431bde83

08003100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003108:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <ADC_Init+0x1f0>)
 800310a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <ADC_Init+0x1f4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e00f      	b.n	80031fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0202 	bic.w	r2, r2, #2
 800320c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7e1b      	ldrb	r3, [r3, #24]
 8003218:	005a      	lsls	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800324a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	3b01      	subs	r3, #1
 8003258:	035a      	lsls	r2, r3, #13
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e007      	b.n	8003274 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003272:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	3b01      	subs	r3, #1
 8003290:	051a      	lsls	r2, r3, #20
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b6:	025a      	lsls	r2, r3, #9
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	029a      	lsls	r2, r3, #10
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40012300 	.word	0x40012300
 80032f4:	0f000001 	.word	0x0f000001

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60d3      	str	r3, [r2, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db0b      	blt.n	8003386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <__NVIC_EnableIRQ+0x38>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff29 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c0:	f7ff ff3e 	bl	8003340 <__NVIC_GetPriorityGrouping>
 80034c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff8e 	bl	80033ec <NVIC_EncodePriority>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff5d 	bl	8003398 <__NVIC_SetPriority>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff31 	bl	800335c <__NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffa2 	bl	8003454 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff fb32 	bl	8002b90 <HAL_GetTick>
 800352c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d008      	beq.n	800354c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e052      	b.n	80035f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0216 	bic.w	r2, r2, #22
 800355a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_DMA_Abort+0x62>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0208 	bic.w	r2, r2, #8
 800358a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359c:	e013      	b.n	80035c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359e:	f7ff faf7 	bl	8002b90 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d90c      	bls.n	80035c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2203      	movs	r2, #3
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e015      	b.n	80035f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e4      	bne.n	800359e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	223f      	movs	r2, #63	; 0x3f
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d004      	beq.n	8003618 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e00c      	b.n	8003632 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2205      	movs	r2, #5
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e177      	b.n	800394c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8166 	bne.w	8003946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d005      	beq.n	8003692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	2b02      	cmp	r3, #2
 8003690:	d130      	bne.n	80036f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 0201 	and.w	r2, r3, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d017      	beq.n	8003730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c0 	beq.w	8003946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b66      	ldr	r3, [pc, #408]	; (8003964 <HAL_GPIO_Init+0x324>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	4a65      	ldr	r2, [pc, #404]	; (8003964 <HAL_GPIO_Init+0x324>)
 80037d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d4:	6453      	str	r3, [r2, #68]	; 0x44
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_GPIO_Init+0x324>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e2:	4a61      	ldr	r2, [pc, #388]	; (8003968 <HAL_GPIO_Init+0x328>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_GPIO_Init+0x32c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d037      	beq.n	800387e <HAL_GPIO_Init+0x23e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_GPIO_Init+0x330>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_GPIO_Init+0x23a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a56      	ldr	r2, [pc, #344]	; (8003974 <HAL_GPIO_Init+0x334>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <HAL_GPIO_Init+0x236>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a55      	ldr	r2, [pc, #340]	; (8003978 <HAL_GPIO_Init+0x338>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d025      	beq.n	8003872 <HAL_GPIO_Init+0x232>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_GPIO_Init+0x33c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <HAL_GPIO_Init+0x22e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a53      	ldr	r2, [pc, #332]	; (8003980 <HAL_GPIO_Init+0x340>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d019      	beq.n	800386a <HAL_GPIO_Init+0x22a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_GPIO_Init+0x344>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a51      	ldr	r2, [pc, #324]	; (8003988 <HAL_GPIO_Init+0x348>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a50      	ldr	r2, [pc, #320]	; (800398c <HAL_GPIO_Init+0x34c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4f      	ldr	r2, [pc, #316]	; (8003990 <HAL_GPIO_Init+0x350>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_GPIO_Init+0x21a>
 8003856:	2309      	movs	r3, #9
 8003858:	e012      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385a:	230a      	movs	r3, #10
 800385c:	e010      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385e:	2308      	movs	r3, #8
 8003860:	e00e      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003862:	2307      	movs	r3, #7
 8003864:	e00c      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003866:	2306      	movs	r3, #6
 8003868:	e00a      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386a:	2305      	movs	r3, #5
 800386c:	e008      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386e:	2304      	movs	r3, #4
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003872:	2303      	movs	r3, #3
 8003874:	e004      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003876:	2302      	movs	r3, #2
 8003878:	e002      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387e:	2300      	movs	r3, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	4093      	lsls	r3, r2
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003890:	4935      	ldr	r1, [pc, #212]	; (8003968 <HAL_GPIO_Init+0x328>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <HAL_GPIO_Init+0x354>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a34      	ldr	r2, [pc, #208]	; (8003994 <HAL_GPIO_Init+0x354>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b32      	ldr	r3, [pc, #200]	; (8003994 <HAL_GPIO_Init+0x354>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_GPIO_Init+0x354>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f2:	4b28      	ldr	r3, [pc, #160]	; (8003994 <HAL_GPIO_Init+0x354>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <HAL_GPIO_Init+0x354>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x354>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <HAL_GPIO_Init+0x354>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f67f ae84 	bls.w	800365c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40013800 	.word	0x40013800
 800396c:	40020000 	.word	0x40020000
 8003970:	40020400 	.word	0x40020400
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	40021c00 	.word	0x40021c00
 800398c:	40022000 	.word	0x40022000
 8003990:	40022400 	.word	0x40022400
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e001      	b.n	80039ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d006      	beq.n	80039ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fb66 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40013c00 	.word	0x40013c00

080039f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e12b      	b.n	8003c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fc ff00 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	; 0x24
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f001 fa40 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 8003a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a81      	ldr	r2, [pc, #516]	; (8003c6c <HAL_I2C_Init+0x274>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d807      	bhi.n	8003a7c <HAL_I2C_Init+0x84>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a80      	ldr	r2, [pc, #512]	; (8003c70 <HAL_I2C_Init+0x278>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	bf94      	ite	ls
 8003a74:	2301      	movls	r3, #1
 8003a76:	2300      	movhi	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e006      	b.n	8003a8a <HAL_I2C_Init+0x92>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a7d      	ldr	r2, [pc, #500]	; (8003c74 <HAL_I2C_Init+0x27c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	bf94      	ite	ls
 8003a84:	2301      	movls	r3, #1
 8003a86:	2300      	movhi	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0e7      	b.n	8003c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a78      	ldr	r2, [pc, #480]	; (8003c78 <HAL_I2C_Init+0x280>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0c9b      	lsrs	r3, r3, #18
 8003a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	; (8003c6c <HAL_I2C_Init+0x274>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d802      	bhi.n	8003acc <HAL_I2C_Init+0xd4>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	e009      	b.n	8003ae0 <HAL_I2C_Init+0xe8>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a69      	ldr	r2, [pc, #420]	; (8003c7c <HAL_I2C_Init+0x284>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	3301      	adds	r3, #1
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	495c      	ldr	r1, [pc, #368]	; (8003c6c <HAL_I2C_Init+0x274>)
 8003afc:	428b      	cmp	r3, r1
 8003afe:	d819      	bhi.n	8003b34 <HAL_I2C_Init+0x13c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e59      	subs	r1, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b14:	400b      	ands	r3, r1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_I2C_Init+0x138>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e59      	subs	r1, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	e051      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e04f      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d111      	bne.n	8003b60 <HAL_I2C_Init+0x168>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1e58      	subs	r0, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e012      	b.n	8003b86 <HAL_I2C_Init+0x18e>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	0099      	lsls	r1, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Init+0x196>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e022      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10e      	bne.n	8003bb4 <HAL_I2C_Init+0x1bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e58      	subs	r0, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	440b      	add	r3, r1
 8003ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb2:	e00f      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e58      	subs	r0, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	0099      	lsls	r1, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	6809      	ldr	r1, [r1, #0]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6911      	ldr	r1, [r2, #16]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	000186a0 	.word	0x000186a0
 8003c70:	001e847f 	.word	0x001e847f
 8003c74:	003d08ff 	.word	0x003d08ff
 8003c78:	431bde83 	.word	0x431bde83
 8003c7c:	10624dd3 	.word	0x10624dd3

08003c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
 8003c90:	4613      	mov	r3, r2
 8003c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7fe ff7c 	bl	8002b90 <HAL_GetTick>
 8003c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f040 80e0 	bne.w	8003e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4970      	ldr	r1, [pc, #448]	; (8003e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fa92 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0d3      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2C_Master_Transmit+0x50>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e0cc      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d007      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2210      	movs	r2, #16
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	893a      	ldrh	r2, [r7, #8]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9ca 	bl	80040d8 <I2C_MasterRequestWrite>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e08d      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d64:	e066      	b.n	8003e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fb0c 	bl	8004388 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06b      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d11b      	bne.n	8003e08 <HAL_I2C_Master_Transmit+0x188>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	6a39      	ldr	r1, [r7, #32]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fafc 	bl	800440a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d107      	bne.n	8003e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e01a      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d194      	bne.n	8003d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	00100002 	.word	0x00100002
 8003e78:	ffff0000 	.word	0xffff0000

08003e7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7fe fe80 	bl	8002b90 <HAL_GetTick>
 8003e90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	f040 8111 	bne.w	80040c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2319      	movs	r3, #25
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4988      	ldr	r1, [pc, #544]	; (80040d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f994 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e104      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_I2C_IsDeviceReady+0x50>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0fd      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d007      	beq.n	8003ef2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2224      	movs	r2, #36	; 0x24
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a70      	ldr	r2, [pc, #448]	; (80040d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f952 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d103      	bne.n	8003f56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0b6      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fe11 	bl	8002b90 <HAL_GetTick>
 8003f6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f9e:	e025      	b.n	8003fec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7fe fdf6 	bl	8002b90 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <HAL_I2C_IsDeviceReady+0x13a>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22a0      	movs	r2, #160	; 0xa0
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ff6:	d005      	beq.n	8004004 <HAL_I2C_IsDeviceReady+0x188>
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_I2C_IsDeviceReady+0x188>
 8003ffe:	7dbb      	ldrb	r3, [r7, #22]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0cd      	beq.n	8003fa0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d129      	bne.n	800406e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004028:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	4921      	ldr	r1, [pc, #132]	; (80040d0 <HAL_I2C_IsDeviceReady+0x254>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8c6 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e036      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e02c      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004086:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2319      	movs	r3, #25
 800408e:	2201      	movs	r2, #1
 8004090:	490f      	ldr	r1, [pc, #60]	; (80040d0 <HAL_I2C_IsDeviceReady+0x254>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f8a2 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e012      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f4ff af32 	bcc.w	8003f16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00100002 	.word	0x00100002
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d006      	beq.n	8004102 <I2C_MasterRequestWrite+0x2a>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d003      	beq.n	8004102 <I2C_MasterRequestWrite+0x2a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004100:	d108      	bne.n	8004114 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e00b      	b.n	800412c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b12      	cmp	r3, #18
 800411a:	d107      	bne.n	800412c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f84f 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d103      	bne.n	800415c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e035      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004168:	d108      	bne.n	800417c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	e01b      	b.n	80041b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	11db      	asrs	r3, r3, #7
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f063 030f 	orn	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	490e      	ldr	r1, [pc, #56]	; (80041d4 <I2C_MasterRequestWrite+0xfc>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f875 	bl	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e010      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <I2C_MasterRequestWrite+0x100>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f865 	bl	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	00010008 	.word	0x00010008
 80041d8:	00010002 	.word	0x00010002

080041dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ec:	e025      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d021      	beq.n	800423a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fccb 	bl	8002b90 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e023      	b.n	8004282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10d      	bne.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	e00c      	b.n	800427a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d0b6      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004298:	e051      	b.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d123      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e046      	b.n	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d021      	beq.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fe fc49 	bl	8002b90 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e020      	b.n	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10c      	bne.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf14      	ite	ne
 800435a:	2301      	movne	r3, #1
 800435c:	2300      	moveq	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e00b      	b.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	43da      	mvns	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d18d      	bne.n	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f878 	bl	800448c <I2C_IsAcknowledgeFailed>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e02d      	b.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fbef 	bl	8002b90 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e007      	b.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d1ca      	bne.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004416:	e02d      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f837 	bl	800448c <I2C_IsAcknowledgeFailed>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e02d      	b.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d021      	beq.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7fe fbae 	bl	8002b90 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d116      	bne.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e007      	b.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d1ca      	bne.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d11b      	bne.n	80044dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d129      	bne.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0210 	bic.w	r2, r2, #16
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b20      	cmp	r3, #32
 800457a:	d12a      	bne.n	80045d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	f023 030f 	bic.w	r3, r3, #15
 80045a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	89fb      	ldrh	r3, [r7, #14]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	89fa      	ldrh	r2, [r7, #14]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_PWREx_EnableOverDrive+0x90>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_PWREx_EnableOverDrive+0x90>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_PWREx_EnableOverDrive+0x90>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004606:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_PWREx_EnableOverDrive+0x94>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800460c:	f7fe fac0 	bl	8002b90 <HAL_GetTick>
 8004610:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004612:	e009      	b.n	8004628 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004614:	f7fe fabc 	bl	8002b90 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004622:	d901      	bls.n	8004628 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e01f      	b.n	8004668 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_PWREx_EnableOverDrive+0x98>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	d1ee      	bne.n	8004614 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800463c:	f7fe faa8 	bl	8002b90 <HAL_GetTick>
 8004640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004642:	e009      	b.n	8004658 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004644:	f7fe faa4 	bl	8002b90 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004652:	d901      	bls.n	8004658 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e007      	b.n	8004668 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_PWREx_EnableOverDrive+0x98>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004664:	d1ee      	bne.n	8004644 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	420e0040 	.word	0x420e0040
 8004678:	40007000 	.word	0x40007000
 800467c:	420e0044 	.word	0x420e0044

08004680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e267      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d075      	beq.n	800478a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d00c      	beq.n	80046c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046aa:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d112      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b82      	ldr	r3, [pc, #520]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c2:	d10b      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	4b7e      	ldr	r3, [pc, #504]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05b      	beq.n	8004788 <HAL_RCC_OscConfig+0x108>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d157      	bne.n	8004788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e242      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_OscConfig+0x74>
 80046e6:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a75      	ldr	r2, [pc, #468]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e01d      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x98>
 80046fe:	4b70      	ldr	r3, [pc, #448]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a6f      	ldr	r2, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6c      	ldr	r2, [pc, #432]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 8004718:	4b69      	ldr	r3, [pc, #420]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a68      	ldr	r2, [pc, #416]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800471e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a65      	ldr	r2, [pc, #404]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800472a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fe fa2a 	bl	8002b90 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7fe fa26 	bl	8002b90 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e207      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0xc0>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fe fa16 	bl	8002b90 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe fa12 	bl	8002b90 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1f3      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0xe8>
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d063      	beq.n	800485e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d116      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e1c7      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	e03a      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCC_OscConfig+0x244>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fe f9cb 	bl	8002b90 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fe f9c7 	bl	8002b90 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1a8      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4925      	ldr	r1, [pc, #148]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCC_OscConfig+0x244>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fe f9aa 	bl	8002b90 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004840:	f7fe f9a6 	bl	8002b90 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e187      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d036      	beq.n	80048d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCC_OscConfig+0x248>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fe f98a 	bl	8002b90 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004880:	f7fe f986 	bl	8002b90 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e167      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x240>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x200>
 800489e:	e01b      	b.n	80048d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_OscConfig+0x248>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fe f973 	bl	8002b90 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	e00e      	b.n	80048cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fe f96f 	bl	8002b90 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d907      	bls.n	80048cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e150      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
 80048c0:	40023800 	.word	0x40023800
 80048c4:	42470000 	.word	0x42470000
 80048c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ea      	bne.n	80048ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8097 	beq.w	8004a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4b81      	ldr	r3, [pc, #516]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	4b7d      	ldr	r3, [pc, #500]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a7c      	ldr	r2, [pc, #496]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
 8004906:	4b7a      	ldr	r3, [pc, #488]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	4b77      	ldr	r3, [pc, #476]	; (8004af4 <HAL_RCC_OscConfig+0x474>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d118      	bne.n	8004954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004922:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <HAL_RCC_OscConfig+0x474>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a73      	ldr	r2, [pc, #460]	; (8004af4 <HAL_RCC_OscConfig+0x474>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492e:	f7fe f92f 	bl	8002b90 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004936:	f7fe f92b 	bl	8002b90 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e10c      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <HAL_RCC_OscConfig+0x474>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d106      	bne.n	800496a <HAL_RCC_OscConfig+0x2ea>
 800495c:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a63      	ldr	r2, [pc, #396]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	e01c      	b.n	80049a4 <HAL_RCC_OscConfig+0x324>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b05      	cmp	r3, #5
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0x30c>
 8004972:	4b5f      	ldr	r3, [pc, #380]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a5e      	ldr	r2, [pc, #376]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	6713      	str	r3, [r2, #112]	; 0x70
 800497e:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a5b      	ldr	r2, [pc, #364]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0x324>
 800498c:	4b58      	ldr	r3, [pc, #352]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a57      	ldr	r2, [pc, #348]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	4b55      	ldr	r3, [pc, #340]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a54      	ldr	r2, [pc, #336]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 0304 	bic.w	r3, r3, #4
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fe f8f0 	bl	8002b90 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7fe f8ec 	bl	8002b90 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0cb      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	4b49      	ldr	r3, [pc, #292]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ee      	beq.n	80049b4 <HAL_RCC_OscConfig+0x334>
 80049d6:	e014      	b.n	8004a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d8:	f7fe f8da 	bl	8002b90 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fe f8d6 	bl	8002b90 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0b5      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1ee      	bne.n	80049e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a08:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	4a38      	ldr	r2, [pc, #224]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a1 	beq.w	8004b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a1e:	4b34      	ldr	r3, [pc, #208]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d05c      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d141      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCC_OscConfig+0x478>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fe f8aa 	bl	8002b90 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe f8a6 	bl	8002b90 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e087      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	3b01      	subs	r3, #1
 8004a78:	041b      	lsls	r3, r3, #16
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	491b      	ldr	r1, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x478>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fe f87f 	bl	8002b90 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fe f87b 	bl	8002b90 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e05c      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x416>
 8004ab4:	e054      	b.n	8004b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_RCC_OscConfig+0x478>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fe f868 	bl	8002b90 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fe f864 	bl	8002b90 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e045      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x444>
 8004ae2:	e03d      	b.n	8004b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e038      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40007000 	.word	0x40007000
 8004af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x4ec>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d028      	beq.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d121      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d11a      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d111      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800

08004b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0cc      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d90c      	bls.n	8004bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0b8      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a52      	ldr	r2, [pc, #328]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	494d      	ldr	r1, [pc, #308]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d044      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d119      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e06f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e067      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4934      	ldr	r1, [pc, #208]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fd ff96 	bl	8002b90 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fd ff92 	bl	8002b90 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e04f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d20c      	bcs.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e032      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4916      	ldr	r1, [pc, #88]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	490e      	ldr	r1, [pc, #56]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cf6:	f000 f821 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	490a      	ldr	r1, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	5ccb      	ldrb	r3, [r1, r3]
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fef6 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023c00 	.word	0x40023c00
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	08009530 	.word	0x08009530
 8004d34:	20000008 	.word	0x20000008
 8004d38:	2000000c 	.word	0x2000000c

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d40:	b090      	sub	sp, #64	; 0x40
 8004d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d00d      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x40>
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	f200 80a1 	bhi.w	8004ea8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x34>
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d6e:	e09b      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d74:	e09b      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d76:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d7a:	e098      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d7c:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d86:	4b4d      	ldr	r3, [pc, #308]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d028      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d92:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	2200      	movs	r2, #0
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004da4:	2100      	movs	r1, #0
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004da8:	fb03 f201 	mul.w	r2, r3, r1
 8004dac:	2300      	movs	r3, #0
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	4a43      	ldr	r2, [pc, #268]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004db6:	fba0 1202 	umull	r1, r2, r0, r2
 8004dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc2:	4413      	add	r3, r2
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	2200      	movs	r2, #0
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	61fa      	str	r2, [r7, #28]
 8004dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dd6:	f7fb fa73 	bl	80002c0 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4613      	mov	r3, r2
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de2:	e053      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	2200      	movs	r2, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	617a      	str	r2, [r7, #20]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004df6:	f04f 0b00 	mov.w	fp, #0
 8004dfa:	4652      	mov	r2, sl
 8004dfc:	465b      	mov	r3, fp
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0c:	0150      	lsls	r0, r2, #5
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	ebb2 080a 	subs.w	r8, r2, sl
 8004e16:	eb63 090b 	sbc.w	r9, r3, fp
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e2e:	ebb2 0408 	subs.w	r4, r2, r8
 8004e32:	eb63 0509 	sbc.w	r5, r3, r9
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	00eb      	lsls	r3, r5, #3
 8004e40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e44:	00e2      	lsls	r2, r4, #3
 8004e46:	4614      	mov	r4, r2
 8004e48:	461d      	mov	r5, r3
 8004e4a:	eb14 030a 	adds.w	r3, r4, sl
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	eb45 030b 	adc.w	r3, r5, fp
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e62:	4629      	mov	r1, r5
 8004e64:	028b      	lsls	r3, r1, #10
 8004e66:	4621      	mov	r1, r4
 8004e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	028a      	lsls	r2, r1, #10
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	2200      	movs	r2, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e80:	f7fb fa1e 	bl	80002c0 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	3301      	adds	r3, #1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ea6:	e002      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3740      	adds	r7, #64	; 0x40
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	017d7840 	.word	0x017d7840

08004ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ece:	681b      	ldr	r3, [r3, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000008 	.word	0x20000008

08004ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee4:	f7ff fff0 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0a9b      	lsrs	r3, r3, #10
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	08009540 	.word	0x08009540

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f0c:	f7ff ffdc 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0b5b      	lsrs	r3, r3, #13
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4903      	ldr	r1, [pc, #12]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	08009540 	.word	0x08009540

08004f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d075      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f64:	4b91      	ldr	r3, [pc, #580]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fd fe11 	bl	8002b90 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fd fe0d 	bl	8002b90 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e189      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f84:	4b8a      	ldr	r3, [pc, #552]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	019a      	lsls	r2, r3, #6
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	071b      	lsls	r3, r3, #28
 8004fa8:	4981      	ldr	r1, [pc, #516]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fbc:	4b7c      	ldr	r3, [pc, #496]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc2:	0f1b      	lsrs	r3, r3, #28
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	019a      	lsls	r2, r3, #6
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	071b      	lsls	r3, r3, #28
 8004fdc:	4974      	ldr	r1, [pc, #464]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe4:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fea:	f023 021f 	bic.w	r2, r3, #31
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	496e      	ldr	r1, [pc, #440]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	019a      	lsls	r2, r3, #6
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4964      	ldr	r1, [pc, #400]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005024:	4b61      	ldr	r3, [pc, #388]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502a:	f7fd fdb1 	bl	8002b90 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005032:	f7fd fdad 	bl	8002b90 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e129      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	4b5a      	ldr	r3, [pc, #360]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005064:	2b00      	cmp	r3, #0
 8005066:	d079      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005068:	4b52      	ldr	r3, [pc, #328]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506e:	f7fd fd8f 	bl	8002b90 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005076:	f7fd fd8b 	bl	8002b90 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e107      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005088:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005094:	d0ef      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d020      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	0f1b      	lsrs	r3, r3, #28
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	019a      	lsls	r2, r3, #6
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	431a      	orrs	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	071b      	lsls	r3, r3, #28
 80050c2:	493b      	ldr	r1, [pc, #236]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	3b01      	subs	r3, #1
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01e      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f0:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	0e1b      	lsrs	r3, r3, #24
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	019a      	lsls	r2, r3, #6
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	4927      	ldr	r1, [pc, #156]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	4922      	ldr	r1, [pc, #136]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800512e:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005130:	2201      	movs	r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005134:	f7fd fd2c 	bl	8002b90 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800513a:	e008      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800513c:	f7fd fd28 	bl	8002b90 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0a4      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515a:	d1ef      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 808b 	beq.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a0b      	ldr	r2, [pc, #44]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005192:	f7fd fcfd 	bl	8002b90 <HAL_GetTick>
 8005196:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005198:	e010      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fd fcf9 	bl	8002b90 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d909      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e075      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051ac:	42470068 	.word	0x42470068
 80051b0:	40023800 	.word	0x40023800
 80051b4:	42470070 	.word	0x42470070
 80051b8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0e8      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02f      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d028      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051f0:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f6:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005202:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d114      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800520e:	f7fd fcbf 	bl	8002b90 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005214:	e00a      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fd fcbb 	bl	8002b90 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e035      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522c:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ee      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005244:	d10d      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	4912      	ldr	r1, [pc, #72]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]
 8005260:	e005      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005262:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005268:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800526c:	6093      	str	r3, [r2, #8]
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005270:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800527c:	4313      	orrs	r3, r2
 800527e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005294:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40007000 	.word	0x40007000
 80052a4:	40023800 	.word	0x40023800
 80052a8:	42470e40 	.word	0x42470e40
 80052ac:	424711e0 	.word	0x424711e0

080052b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e066      	b.n	8005394 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7f5b      	ldrb	r3, [r3, #29]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd f868 	bl	80023ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	22ca      	movs	r2, #202	; 0xca
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2253      	movs	r2, #83	; 0x53
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa45 	bl	8005782 <RTC_EnterInitMode>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d12c      	bne.n	800535c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005314:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68d2      	ldr	r2, [r2, #12]
 800533c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6919      	ldr	r1, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	041a      	lsls	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa4c 	bl	80057f0 <RTC_ExitInitMode>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	7f1b      	ldrb	r3, [r3, #28]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_RTC_SetTime+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e087      	b.n	80054c8 <HAL_RTC_SetTime+0x12c>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2202      	movs	r2, #2
 80053c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d126      	bne.n	8005418 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa29 	bl	800583a <RTC_ByteToBcd2>
 80053e8:	4603      	mov	r3, r0
 80053ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fa22 	bl	800583a <RTC_ByteToBcd2>
 80053f6:	4603      	mov	r3, r0
 80053f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	789b      	ldrb	r3, [r3, #2]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fa1a 	bl	800583a <RTC_ByteToBcd2>
 8005406:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005408:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	78db      	ldrb	r3, [r3, #3]
 8005410:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e018      	b.n	800544a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005438:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800543e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	22ca      	movs	r2, #202	; 0xca
 8005450:	625a      	str	r2, [r3, #36]	; 0x24
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2253      	movs	r2, #83	; 0x53
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f991 	bl	8005782 <RTC_EnterInitMode>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d120      	bne.n	80054ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005474:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005478:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005488:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f9a4 	bl	80057f0 <RTC_ExitInitMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	771a      	strb	r2, [r3, #28]

  return status;
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}

080054d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005502:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005506:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	0d9b      	lsrs	r3, r3, #22
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11a      	bne.n	8005582 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f98f 	bl	8005874 <RTC_Bcd2ToByte>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f986 	bl	8005874 <RTC_Bcd2ToByte>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	789b      	ldrb	r3, [r3, #2]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f97d 	bl	8005874 <RTC_Bcd2ToByte>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	7f1b      	ldrb	r3, [r3, #28]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_RTC_SetDate+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e071      	b.n	800568c <HAL_RTC_SetDate+0x100>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2202      	movs	r2, #2
 80055b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10e      	bne.n	80055d8 <HAL_RTC_SetDate+0x4c>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	330a      	adds	r3, #10
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11c      	bne.n	8005618 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	78db      	ldrb	r3, [r3, #3]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f929 	bl	800583a <RTC_ByteToBcd2>
 80055e8:	4603      	mov	r3, r0
 80055ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f922 	bl	800583a <RTC_ByteToBcd2>
 80055f6:	4603      	mov	r3, r0
 80055f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	789b      	ldrb	r3, [r3, #2]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f91a 	bl	800583a <RTC_ByteToBcd2>
 8005606:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005608:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e00e      	b.n	8005636 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	78db      	ldrb	r3, [r3, #3]
 800561c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005624:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800562a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	22ca      	movs	r2, #202	; 0xca
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2253      	movs	r2, #83	; 0x53
 8005644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f89b 	bl	8005782 <RTC_EnterInitMode>
 800564c:	4603      	mov	r3, r0
 800564e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005664:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8c2 	bl	80057f0 <RTC_ExitInitMode>
 800566c:	4603      	mov	r3, r0
 800566e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	22ff      	movs	r2, #255	; 0xff
 8005682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	771a      	strb	r2, [r3, #28]

  return status;
 800568a:	7cfb      	ldrb	r3, [r7, #19]
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}

08005694 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	0b5b      	lsrs	r3, r3, #13
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11a      	bne.n	8005728 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	78db      	ldrb	r3, [r3, #3]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f8bc 	bl	8005874 <RTC_Bcd2ToByte>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f8b3 	bl	8005874 <RTC_Bcd2ToByte>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	789b      	ldrb	r3, [r3, #2]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f8aa 	bl	8005874 <RTC_Bcd2ToByte>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800574c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800574e:	f7fd fa1f 	bl	8002b90 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005754:	e009      	b.n	800576a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005756:	f7fd fa1b 	bl	8002b90 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005764:	d901      	bls.n	800576a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e007      	b.n	800577a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ee      	beq.n	8005756 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d122      	bne.n	80057e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057b0:	f7fd f9ee 	bl	8002b90 <HAL_GetTick>
 80057b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057b6:	e00c      	b.n	80057d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057b8:	f7fd f9ea 	bl	8002b90 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c6:	d904      	bls.n	80057d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2204      	movs	r2, #4
 80057cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <RTC_EnterInitMode+0x64>
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d1e8      	bne.n	80057b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff89 	bl	8005732 <HAL_RTC_WaitForSynchro>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2204      	movs	r2, #4
 800582a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	4603      	mov	r3, r0
 8005842:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005848:	e005      	b.n	8005856 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	3301      	adds	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	3b0a      	subs	r3, #10
 8005854:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b09      	cmp	r3, #9
 800585a:	d8f6      	bhi.n	800584a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	b2da      	uxtb	r2, r3
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	4313      	orrs	r3, r2
 8005866:	b2db      	uxtb	r3, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	0092      	lsls	r2, r2, #2
 800588c:	4413      	add	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	b2da      	uxtb	r2, r3
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	4413      	add	r3, r2
 800589e:	b2db      	uxtb	r3, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e041      	b.n	8005942 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc ffd4 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 fc7a 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d001      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e04e      	b.n	8005a02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d01d      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x80>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d111      	bne.n	80059f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d010      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	e007      	b.n	8005a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40010400 	.word	0x40010400
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40001800 	.word	0x40001800

08005a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e041      	b.n	8005ac2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f839 	bl	8005aca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f000 fbba 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x24>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e022      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d109      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x3e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e015      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d109      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x58>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e008      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e07c      	b.n	8005c4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0x82>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b60:	e013      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0x92>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b70:	e00b      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_PWM_Start+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b80:	e003      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fe10 	bl	80067b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <HAL_TIM_PWM_Start+0x174>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_PWM_Start+0xcc>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <HAL_TIM_PWM_Start+0x178>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_PWM_Start+0xd0>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xd2>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_TIM_PWM_Start+0x174>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d022      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01d      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_TIM_PWM_Start+0x17c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_TIM_PWM_Start+0x180>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <HAL_TIM_PWM_Start+0x184>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <HAL_TIM_PWM_Start+0x178>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <HAL_TIM_PWM_Start+0x188>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x136>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <HAL_TIM_PWM_Start+0x18c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d111      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b06      	cmp	r3, #6
 8005c26:	d010      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	e007      	b.n	8005c4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40001800 	.word	0x40001800

08005c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0202 	mvn.w	r2, #2
 8005c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa77 	bl	80061a6 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa69 	bl	8006192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fa7a 	bl	80061ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0204 	mvn.w	r2, #4
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa4d 	bl	80061a6 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa3f 	bl	8006192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fa50 	bl	80061ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0208 	mvn.w	r2, #8
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa23 	bl	80061a6 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa15 	bl	8006192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa26 	bl	80061ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0210 	mvn.w	r2, #16
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9f9 	bl	80061a6 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9eb 	bl	8006192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9fc 	bl	80061ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0201 	mvn.w	r2, #1
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc f870 	bl	8001ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b80      	cmp	r3, #128	; 0x80
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fd78 	bl	8006910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d10e      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d107      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9c1 	bl	80061ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d10e      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0220 	mvn.w	r2, #32
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fd42 	bl	80068fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e0ae      	b.n	8005ffc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b0c      	cmp	r3, #12
 8005eaa:	f200 809f 	bhi.w	8005fec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ee9 	.word	0x08005ee9
 8005eb8:	08005fed 	.word	0x08005fed
 8005ebc:	08005fed 	.word	0x08005fed
 8005ec0:	08005fed 	.word	0x08005fed
 8005ec4:	08005f29 	.word	0x08005f29
 8005ec8:	08005fed 	.word	0x08005fed
 8005ecc:	08005fed 	.word	0x08005fed
 8005ed0:	08005fed 	.word	0x08005fed
 8005ed4:	08005f6b 	.word	0x08005f6b
 8005ed8:	08005fed 	.word	0x08005fed
 8005edc:	08005fed 	.word	0x08005fed
 8005ee0:	08005fed 	.word	0x08005fed
 8005ee4:	08005fab 	.word	0x08005fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fa18 	bl	8006324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0208 	orr.w	r2, r2, #8
 8005f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0204 	bic.w	r2, r2, #4
 8005f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	619a      	str	r2, [r3, #24]
      break;
 8005f26:	e064      	b.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fa68 	bl	8006404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	021a      	lsls	r2, r3, #8
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	619a      	str	r2, [r3, #24]
      break;
 8005f68:	e043      	b.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fabd 	bl	80064f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0208 	orr.w	r2, r2, #8
 8005f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0204 	bic.w	r2, r2, #4
 8005f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69d9      	ldr	r1, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	61da      	str	r2, [r3, #28]
      break;
 8005fa8:	e023      	b.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fb11 	bl	80065d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69d9      	ldr	r1, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	021a      	lsls	r2, r3, #8
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	61da      	str	r2, [r3, #28]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIM_ConfigClockSource+0x1c>
 800601c:	2302      	movs	r3, #2
 800601e:	e0b4      	b.n	800618a <HAL_TIM_ConfigClockSource+0x186>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800603e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006058:	d03e      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0xd4>
 800605a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605e:	f200 8087 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	f000 8086 	beq.w	8006176 <HAL_TIM_ConfigClockSource+0x172>
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606e:	d87f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d01a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0xa6>
 8006074:	2b70      	cmp	r3, #112	; 0x70
 8006076:	d87b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d050      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x11a>
 800607c:	2b60      	cmp	r3, #96	; 0x60
 800607e:	d877      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d03c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0xfa>
 8006084:	2b50      	cmp	r3, #80	; 0x50
 8006086:	d873      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d058      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x13a>
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d86f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d064      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b30      	cmp	r3, #48	; 0x30
 8006096:	d86b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d060      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x15a>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d867      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d05c      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x15a>
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d05a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	e062      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6899      	ldr	r1, [r3, #8]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f000 fb5d 	bl	8006778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	609a      	str	r2, [r3, #8]
      break;
 80060d6:	e04f      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f000 fb46 	bl	8006778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fa:	609a      	str	r2, [r3, #8]
      break;
 80060fc:	e03c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	461a      	mov	r2, r3
 800610c:	f000 faba 	bl	8006684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2150      	movs	r1, #80	; 0x50
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fb13 	bl	8006742 <TIM_ITRx_SetConfig>
      break;
 800611c:	e02c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 fad9 	bl	80066e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2160      	movs	r1, #96	; 0x60
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb03 	bl	8006742 <TIM_ITRx_SetConfig>
      break;
 800613c:	e01c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fa9a 	bl	8006684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2140      	movs	r1, #64	; 0x40
 8006156:	4618      	mov	r0, r3
 8006158:	f000 faf3 	bl	8006742 <TIM_ITRx_SetConfig>
      break;
 800615c:	e00c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f000 faea 	bl	8006742 <TIM_ITRx_SetConfig>
      break;
 800616e:	e003      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e000      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a40      	ldr	r2, [pc, #256]	; (80062f8 <TIM_Base_SetConfig+0x114>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d00f      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a3d      	ldr	r2, [pc, #244]	; (80062fc <TIM_Base_SetConfig+0x118>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <TIM_Base_SetConfig+0x11c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <TIM_Base_SetConfig+0x120>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3a      	ldr	r2, [pc, #232]	; (8006308 <TIM_Base_SetConfig+0x124>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d108      	bne.n	8006236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a2f      	ldr	r2, [pc, #188]	; (80062f8 <TIM_Base_SetConfig+0x114>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d027      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2c      	ldr	r2, [pc, #176]	; (80062fc <TIM_Base_SetConfig+0x118>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d023      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <TIM_Base_SetConfig+0x11c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01f      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <TIM_Base_SetConfig+0x120>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a29      	ldr	r2, [pc, #164]	; (8006308 <TIM_Base_SetConfig+0x124>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d017      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a28      	ldr	r2, [pc, #160]	; (800630c <TIM_Base_SetConfig+0x128>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <TIM_Base_SetConfig+0x12c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a26      	ldr	r2, [pc, #152]	; (8006314 <TIM_Base_SetConfig+0x130>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a25      	ldr	r2, [pc, #148]	; (8006318 <TIM_Base_SetConfig+0x134>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a24      	ldr	r2, [pc, #144]	; (800631c <TIM_Base_SetConfig+0x138>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a23      	ldr	r2, [pc, #140]	; (8006320 <TIM_Base_SetConfig+0x13c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d108      	bne.n	80062a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <TIM_Base_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0xf8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <TIM_Base_SetConfig+0x124>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d103      	bne.n	80062e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	615a      	str	r2, [r3, #20]
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40000c00 	.word	0x40000c00
 8006308:	40010400 	.word	0x40010400
 800630c:	40014000 	.word	0x40014000
 8006310:	40014400 	.word	0x40014400
 8006314:	40014800 	.word	0x40014800
 8006318:	40001800 	.word	0x40001800
 800631c:	40001c00 	.word	0x40001c00
 8006320:	40002000 	.word	0x40002000

08006324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0302 	bic.w	r3, r3, #2
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a20      	ldr	r2, [pc, #128]	; (80063fc <TIM_OC1_SetConfig+0xd8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_OC1_SetConfig+0x64>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <TIM_OC1_SetConfig+0xdc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10c      	bne.n	80063a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 0308 	bic.w	r3, r3, #8
 800638e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 0304 	bic.w	r3, r3, #4
 80063a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <TIM_OC1_SetConfig+0xd8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC1_SetConfig+0x8e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a14      	ldr	r2, [pc, #80]	; (8006400 <TIM_OC1_SetConfig+0xdc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d111      	bne.n	80063d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400

08006404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	f023 0210 	bic.w	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0320 	bic.w	r3, r3, #32
 800644e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a22      	ldr	r2, [pc, #136]	; (80064e8 <TIM_OC2_SetConfig+0xe4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_OC2_SetConfig+0x68>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a21      	ldr	r2, [pc, #132]	; (80064ec <TIM_OC2_SetConfig+0xe8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10d      	bne.n	8006488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <TIM_OC2_SetConfig+0xe4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC2_SetConfig+0x94>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a16      	ldr	r2, [pc, #88]	; (80064ec <TIM_OC2_SetConfig+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d113      	bne.n	80064c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400

080064f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <TIM_OC3_SetConfig+0xe0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_OC3_SetConfig+0x66>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <TIM_OC3_SetConfig+0xe4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10d      	bne.n	8006572 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800655c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <TIM_OC3_SetConfig+0xe0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC3_SetConfig+0x92>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a15      	ldr	r2, [pc, #84]	; (80065d4 <TIM_OC3_SetConfig+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d113      	bne.n	80065aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	621a      	str	r2, [r3, #32]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400

080065d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a12      	ldr	r2, [pc, #72]	; (800667c <TIM_OC4_SetConfig+0xa4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_OC4_SetConfig+0x68>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a11      	ldr	r2, [pc, #68]	; (8006680 <TIM_OC4_SetConfig+0xa8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d109      	bne.n	8006654 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 030a 	bic.w	r3, r3, #10
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b087      	sub	sp, #28
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0210 	bic.w	r2, r3, #16
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800670c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	031b      	lsls	r3, r3, #12
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	f043 0307 	orr.w	r3, r3, #7
 8006764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	021a      	lsls	r2, r3, #8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	431a      	orrs	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4313      	orrs	r3, r2
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	609a      	str	r2, [r3, #8]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	fa01 f303 	lsl.w	r3, r1, r3
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006818:	2302      	movs	r3, #2
 800681a:	e05a      	b.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006868:	d01d      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10c      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40000400 	.word	0x40000400
 80068e8:	40000800 	.word	0x40000800
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40010400 	.word	0x40010400
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40001800 	.word	0x40001800

080068fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e03f      	b.n	80069b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fc f848 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fd7b 	bl	8007464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800697c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695a      	ldr	r2, [r3, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800698c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800699c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08a      	sub	sp, #40	; 0x28
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d17c      	bne.n	8006ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_UART_Transmit+0x2c>
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e075      	b.n	8006ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Transmit+0x3e>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e06e      	b.n	8006ada <HAL_UART_Transmit+0x11c>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2221      	movs	r2, #33	; 0x21
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a12:	f7fc f8bd 	bl	8002b90 <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d108      	bne.n	8006a40 <HAL_UART_Transmit+0x82>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	e003      	b.n	8006a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a50:	e02a      	b.n	8006aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 faf9 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e036      	b.n	8006ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	3302      	adds	r3, #2
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e007      	b.n	8006a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1cf      	bne.n	8006a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2140      	movs	r1, #64	; 0x40
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fac9 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e006      	b.n	8006ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b0ba      	sub	sp, #232	; 0xe8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fbd3 	bl	80072ee <UART_Receive_IT>
      return;
 8006b48:	e256      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80de 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
 8006b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80d1 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
 8006b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f043 0201 	orr.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
 8006bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d011      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f043 0208 	orr.w	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 81ed 	beq.w	8006fee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fb5e 	bl	80072ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_UART_IRQHandler+0x17a>
 8006c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d04f      	beq.n	8006cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa66 	bl	8007130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d141      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3314      	adds	r3, #20
 8006c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1d9      	bne.n	8006c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d013      	beq.n	8006cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	4a7d      	ldr	r2, [pc, #500]	; (8006ec0 <HAL_UART_IRQHandler+0x3dc>)
 8006ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fc fc91 	bl	80035fa <HAL_DMA_Abort_IT>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	e00e      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f99a 	bl	8007028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00a      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f996 	bl	8007028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e006      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f992 	bl	8007028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d0a:	e170      	b.n	8006fee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	bf00      	nop
    return;
 8006d0e:	e16e      	b.n	8006fee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 814a 	bne.w	8006fae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8143 	beq.w	8006fae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 813c 	beq.w	8006fae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	f040 80b4 	bne.w	8006ec4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8140 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f080 8139 	bcs.w	8006ff2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d92:	f000 8088 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e1      	bne.n	8006de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fc fb3a 	bl	800351a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8c0 	bl	800703c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ebc:	e099      	b.n	8006ff2 <HAL_UART_IRQHandler+0x50e>
 8006ebe:	bf00      	nop
 8006ec0:	080071f7 	.word	0x080071f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 808b 	beq.w	8006ff6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8086 	beq.w	8006ff6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e3      	bne.n	8006eea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	623b      	str	r3, [r7, #32]
   return(result);
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3314      	adds	r3, #20
 8006f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f46:	633a      	str	r2, [r7, #48]	; 0x30
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e3      	bne.n	8006f22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	330c      	adds	r3, #12
 8006f88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f8c:	61fa      	str	r2, [r7, #28]
 8006f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e3      	bne.n	8006f68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f848 	bl	800703c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fac:	e023      	b.n	8006ff6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_UART_IRQHandler+0x4ea>
 8006fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f929 	bl	800721e <UART_Transmit_IT>
    return;
 8006fcc:	e014      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x514>
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f969 	bl	80072be <UART_EndTransmit_IT>
    return;
 8006fec:	e004      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
    return;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ff6:	bf00      	nop
  }
}
 8006ff8:	37e8      	adds	r7, #232	; 0xe8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b090      	sub	sp, #64	; 0x40
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	e050      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d04c      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800706e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <UART_WaitOnFlagUntilTimeout+0x30>
 8007074:	f7fb fd8c 	bl	8002b90 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007080:	429a      	cmp	r2, r3
 8007082:	d241      	bcs.n	8007108 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070a4:	637a      	str	r2, [r7, #52]	; 0x34
 80070a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3314      	adds	r3, #20
 80070be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	613b      	str	r3, [r7, #16]
   return(result);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3314      	adds	r3, #20
 80070d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d8:	623a      	str	r2, [r7, #32]
 80070da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e00f      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	429a      	cmp	r2, r3
 8007124:	d09f      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3740      	adds	r7, #64	; 0x40
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b095      	sub	sp, #84	; 0x54
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007158:	643a      	str	r2, [r7, #64]	; 0x40
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800715e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	61fb      	str	r3, [r7, #28]
   return(result);
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	64bb      	str	r3, [r7, #72]	; 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3314      	adds	r3, #20
 800718a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d119      	bne.n	80071dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c8:	61ba      	str	r2, [r7, #24]
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071ea:	bf00      	nop
 80071ec:	3754      	adds	r7, #84	; 0x54
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff ff09 	bl	8007028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b21      	cmp	r3, #33	; 0x21
 8007230:	d13e      	bne.n	80072b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723a:	d114      	bne.n	8007266 <UART_Transmit_IT+0x48>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d110      	bne.n	8007266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	621a      	str	r2, [r3, #32]
 8007264:	e008      	b.n	8007278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6211      	str	r1, [r2, #32]
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4619      	mov	r1, r3
 8007286:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10f      	bne.n	80072ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800729a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e000      	b.n	80072b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fe8e 	bl	8007000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b08c      	sub	sp, #48	; 0x30
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b22      	cmp	r3, #34	; 0x22
 8007300:	f040 80ab 	bne.w	800745a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730c:	d117      	bne.n	800733e <UART_Receive_IT+0x50>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d113      	bne.n	800733e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732c:	b29a      	uxth	r2, r3
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28
 800733c:	e026      	b.n	800738c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007350:	d007      	beq.n	8007362 <UART_Receive_IT+0x74>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <UART_Receive_IT+0x82>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e008      	b.n	8007382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737c:	b2da      	uxtb	r2, r3
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4619      	mov	r1, r3
 800739a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800739c:	2b00      	cmp	r3, #0
 800739e:	d15a      	bne.n	8007456 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0220 	bic.w	r2, r2, #32
 80073ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d135      	bne.n	800744c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	613b      	str	r3, [r7, #16]
   return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f023 0310 	bic.w	r3, r3, #16
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	623a      	str	r2, [r7, #32]
 8007408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	69f9      	ldr	r1, [r7, #28]
 800740c:	6a3a      	ldr	r2, [r7, #32]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	61bb      	str	r3, [r7, #24]
   return(result);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e5      	bne.n	80073e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b10      	cmp	r3, #16
 8007426:	d10a      	bne.n	800743e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fdf9 	bl	800703c <HAL_UARTEx_RxEventCallback>
 800744a:	e002      	b.n	8007452 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff fde1 	bl	8007014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e002      	b.n	800745c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3730      	adds	r7, #48	; 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007468:	b0c0      	sub	sp, #256	; 0x100
 800746a:	af00      	add	r7, sp, #0
 800746c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	68d9      	ldr	r1, [r3, #12]
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	ea40 0301 	orr.w	r3, r0, r1
 800748c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	431a      	orrs	r2, r3
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074bc:	f021 010c 	bic.w	r1, r1, #12
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074ca:	430b      	orrs	r3, r1
 80074cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074de:	6999      	ldr	r1, [r3, #24]
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	ea40 0301 	orr.w	r3, r0, r1
 80074ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b8f      	ldr	r3, [pc, #572]	; (8007730 <UART_SetConfig+0x2cc>)
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d005      	beq.n	8007504 <UART_SetConfig+0xa0>
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b8d      	ldr	r3, [pc, #564]	; (8007734 <UART_SetConfig+0x2d0>)
 8007500:	429a      	cmp	r2, r3
 8007502:	d104      	bne.n	800750e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fd fd00 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8007508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800750c:	e003      	b.n	8007516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fd fce7 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 8007512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	f040 810c 	bne.w	800773c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007528:	2200      	movs	r2, #0
 800752a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800752e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007536:	4622      	mov	r2, r4
 8007538:	462b      	mov	r3, r5
 800753a:	1891      	adds	r1, r2, r2
 800753c:	65b9      	str	r1, [r7, #88]	; 0x58
 800753e:	415b      	adcs	r3, r3
 8007540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007546:	4621      	mov	r1, r4
 8007548:	eb12 0801 	adds.w	r8, r2, r1
 800754c:	4629      	mov	r1, r5
 800754e:	eb43 0901 	adc.w	r9, r3, r1
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800755e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007566:	4690      	mov	r8, r2
 8007568:	4699      	mov	r9, r3
 800756a:	4623      	mov	r3, r4
 800756c:	eb18 0303 	adds.w	r3, r8, r3
 8007570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007574:	462b      	mov	r3, r5
 8007576:	eb49 0303 	adc.w	r3, r9, r3
 800757a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800758a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800758e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007592:	460b      	mov	r3, r1
 8007594:	18db      	adds	r3, r3, r3
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
 8007598:	4613      	mov	r3, r2
 800759a:	eb42 0303 	adc.w	r3, r2, r3
 800759e:	657b      	str	r3, [r7, #84]	; 0x54
 80075a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075a8:	f7f8 fe8a 	bl	80002c0 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4b61      	ldr	r3, [pc, #388]	; (8007738 <UART_SetConfig+0x2d4>)
 80075b2:	fba3 2302 	umull	r2, r3, r3, r2
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	011c      	lsls	r4, r3, #4
 80075ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	1891      	adds	r1, r2, r2
 80075d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80075d4:	415b      	adcs	r3, r3
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075dc:	4641      	mov	r1, r8
 80075de:	eb12 0a01 	adds.w	sl, r2, r1
 80075e2:	4649      	mov	r1, r9
 80075e4:	eb43 0b01 	adc.w	fp, r3, r1
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075fc:	4692      	mov	sl, r2
 80075fe:	469b      	mov	fp, r3
 8007600:	4643      	mov	r3, r8
 8007602:	eb1a 0303 	adds.w	r3, sl, r3
 8007606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800760a:	464b      	mov	r3, r9
 800760c:	eb4b 0303 	adc.w	r3, fp, r3
 8007610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007628:	460b      	mov	r3, r1
 800762a:	18db      	adds	r3, r3, r3
 800762c:	643b      	str	r3, [r7, #64]	; 0x40
 800762e:	4613      	mov	r3, r2
 8007630:	eb42 0303 	adc.w	r3, r2, r3
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
 8007636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800763a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800763e:	f7f8 fe3f 	bl	80002c0 <__aeabi_uldivmod>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4611      	mov	r1, r2
 8007648:	4b3b      	ldr	r3, [pc, #236]	; (8007738 <UART_SetConfig+0x2d4>)
 800764a:	fba3 2301 	umull	r2, r3, r3, r1
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	2264      	movs	r2, #100	; 0x64
 8007652:	fb02 f303 	mul.w	r3, r2, r3
 8007656:	1acb      	subs	r3, r1, r3
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800765e:	4b36      	ldr	r3, [pc, #216]	; (8007738 <UART_SetConfig+0x2d4>)
 8007660:	fba3 2302 	umull	r2, r3, r3, r2
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800766c:	441c      	add	r4, r3
 800766e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007672:	2200      	movs	r2, #0
 8007674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800767c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	1891      	adds	r1, r2, r2
 8007686:	63b9      	str	r1, [r7, #56]	; 0x38
 8007688:	415b      	adcs	r3, r3
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007690:	4641      	mov	r1, r8
 8007692:	1851      	adds	r1, r2, r1
 8007694:	6339      	str	r1, [r7, #48]	; 0x30
 8007696:	4649      	mov	r1, r9
 8007698:	414b      	adcs	r3, r1
 800769a:	637b      	str	r3, [r7, #52]	; 0x34
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076a8:	4659      	mov	r1, fp
 80076aa:	00cb      	lsls	r3, r1, #3
 80076ac:	4651      	mov	r1, sl
 80076ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076b2:	4651      	mov	r1, sl
 80076b4:	00ca      	lsls	r2, r1, #3
 80076b6:	4610      	mov	r0, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	4642      	mov	r2, r8
 80076be:	189b      	adds	r3, r3, r2
 80076c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076c4:	464b      	mov	r3, r9
 80076c6:	460a      	mov	r2, r1
 80076c8:	eb42 0303 	adc.w	r3, r2, r3
 80076cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076e4:	460b      	mov	r3, r1
 80076e6:	18db      	adds	r3, r3, r3
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ea:	4613      	mov	r3, r2
 80076ec:	eb42 0303 	adc.w	r3, r2, r3
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076fa:	f7f8 fde1 	bl	80002c0 <__aeabi_uldivmod>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <UART_SetConfig+0x2d4>)
 8007704:	fba3 1302 	umull	r1, r3, r3, r2
 8007708:	095b      	lsrs	r3, r3, #5
 800770a:	2164      	movs	r1, #100	; 0x64
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	3332      	adds	r3, #50	; 0x32
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <UART_SetConfig+0x2d4>)
 8007718:	fba2 2303 	umull	r2, r3, r2, r3
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	f003 0207 	and.w	r2, r3, #7
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4422      	add	r2, r4
 800772a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800772c:	e105      	b.n	800793a <UART_SetConfig+0x4d6>
 800772e:	bf00      	nop
 8007730:	40011000 	.word	0x40011000
 8007734:	40011400 	.word	0x40011400
 8007738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800773c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007740:	2200      	movs	r2, #0
 8007742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800774a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800774e:	4642      	mov	r2, r8
 8007750:	464b      	mov	r3, r9
 8007752:	1891      	adds	r1, r2, r2
 8007754:	6239      	str	r1, [r7, #32]
 8007756:	415b      	adcs	r3, r3
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
 800775a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800775e:	4641      	mov	r1, r8
 8007760:	1854      	adds	r4, r2, r1
 8007762:	4649      	mov	r1, r9
 8007764:	eb43 0501 	adc.w	r5, r3, r1
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	00eb      	lsls	r3, r5, #3
 8007772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007776:	00e2      	lsls	r2, r4, #3
 8007778:	4614      	mov	r4, r2
 800777a:	461d      	mov	r5, r3
 800777c:	4643      	mov	r3, r8
 800777e:	18e3      	adds	r3, r4, r3
 8007780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007784:	464b      	mov	r3, r9
 8007786:	eb45 0303 	adc.w	r3, r5, r3
 800778a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800779a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077aa:	4629      	mov	r1, r5
 80077ac:	008b      	lsls	r3, r1, #2
 80077ae:	4621      	mov	r1, r4
 80077b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077b4:	4621      	mov	r1, r4
 80077b6:	008a      	lsls	r2, r1, #2
 80077b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077bc:	f7f8 fd80 	bl	80002c0 <__aeabi_uldivmod>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4b60      	ldr	r3, [pc, #384]	; (8007948 <UART_SetConfig+0x4e4>)
 80077c6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	011c      	lsls	r4, r3, #4
 80077ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077e0:	4642      	mov	r2, r8
 80077e2:	464b      	mov	r3, r9
 80077e4:	1891      	adds	r1, r2, r2
 80077e6:	61b9      	str	r1, [r7, #24]
 80077e8:	415b      	adcs	r3, r3
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f0:	4641      	mov	r1, r8
 80077f2:	1851      	adds	r1, r2, r1
 80077f4:	6139      	str	r1, [r7, #16]
 80077f6:	4649      	mov	r1, r9
 80077f8:	414b      	adcs	r3, r1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007808:	4659      	mov	r1, fp
 800780a:	00cb      	lsls	r3, r1, #3
 800780c:	4651      	mov	r1, sl
 800780e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007812:	4651      	mov	r1, sl
 8007814:	00ca      	lsls	r2, r1, #3
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	4603      	mov	r3, r0
 800781c:	4642      	mov	r2, r8
 800781e:	189b      	adds	r3, r3, r2
 8007820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007824:	464b      	mov	r3, r9
 8007826:	460a      	mov	r2, r1
 8007828:	eb42 0303 	adc.w	r3, r2, r3
 800782c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	67bb      	str	r3, [r7, #120]	; 0x78
 800783a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007848:	4649      	mov	r1, r9
 800784a:	008b      	lsls	r3, r1, #2
 800784c:	4641      	mov	r1, r8
 800784e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007852:	4641      	mov	r1, r8
 8007854:	008a      	lsls	r2, r1, #2
 8007856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800785a:	f7f8 fd31 	bl	80002c0 <__aeabi_uldivmod>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4b39      	ldr	r3, [pc, #228]	; (8007948 <UART_SetConfig+0x4e4>)
 8007864:	fba3 1302 	umull	r1, r3, r3, r2
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	2164      	movs	r1, #100	; 0x64
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	3332      	adds	r3, #50	; 0x32
 8007876:	4a34      	ldr	r2, [pc, #208]	; (8007948 <UART_SetConfig+0x4e4>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007882:	441c      	add	r4, r3
 8007884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007888:	2200      	movs	r2, #0
 800788a:	673b      	str	r3, [r7, #112]	; 0x70
 800788c:	677a      	str	r2, [r7, #116]	; 0x74
 800788e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007892:	4642      	mov	r2, r8
 8007894:	464b      	mov	r3, r9
 8007896:	1891      	adds	r1, r2, r2
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	415b      	adcs	r3, r3
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078a2:	4641      	mov	r1, r8
 80078a4:	1851      	adds	r1, r2, r1
 80078a6:	6039      	str	r1, [r7, #0]
 80078a8:	4649      	mov	r1, r9
 80078aa:	414b      	adcs	r3, r1
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ba:	4659      	mov	r1, fp
 80078bc:	00cb      	lsls	r3, r1, #3
 80078be:	4651      	mov	r1, sl
 80078c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c4:	4651      	mov	r1, sl
 80078c6:	00ca      	lsls	r2, r1, #3
 80078c8:	4610      	mov	r0, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	4603      	mov	r3, r0
 80078ce:	4642      	mov	r2, r8
 80078d0:	189b      	adds	r3, r3, r2
 80078d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078d4:	464b      	mov	r3, r9
 80078d6:	460a      	mov	r2, r1
 80078d8:	eb42 0303 	adc.w	r3, r2, r3
 80078dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	663b      	str	r3, [r7, #96]	; 0x60
 80078e8:	667a      	str	r2, [r7, #100]	; 0x64
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078f6:	4649      	mov	r1, r9
 80078f8:	008b      	lsls	r3, r1, #2
 80078fa:	4641      	mov	r1, r8
 80078fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007900:	4641      	mov	r1, r8
 8007902:	008a      	lsls	r2, r1, #2
 8007904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007908:	f7f8 fcda 	bl	80002c0 <__aeabi_uldivmod>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <UART_SetConfig+0x4e4>)
 8007912:	fba3 1302 	umull	r1, r3, r3, r2
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2164      	movs	r1, #100	; 0x64
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	3332      	adds	r3, #50	; 0x32
 8007924:	4a08      	ldr	r2, [pc, #32]	; (8007948 <UART_SetConfig+0x4e4>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	f003 020f 	and.w	r2, r3, #15
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4422      	add	r2, r4
 8007938:	609a      	str	r2, [r3, #8]
}
 800793a:	bf00      	nop
 800793c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007940:	46bd      	mov	sp, r7
 8007942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007946:	bf00      	nop
 8007948:	51eb851f 	.word	0x51eb851f

0800794c <__errno>:
 800794c:	4b01      	ldr	r3, [pc, #4]	; (8007954 <__errno+0x8>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000014 	.word	0x20000014

08007958 <__libc_init_array>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4d0d      	ldr	r5, [pc, #52]	; (8007990 <__libc_init_array+0x38>)
 800795c:	4c0d      	ldr	r4, [pc, #52]	; (8007994 <__libc_init_array+0x3c>)
 800795e:	1b64      	subs	r4, r4, r5
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	2600      	movs	r6, #0
 8007964:	42a6      	cmp	r6, r4
 8007966:	d109      	bne.n	800797c <__libc_init_array+0x24>
 8007968:	4d0b      	ldr	r5, [pc, #44]	; (8007998 <__libc_init_array+0x40>)
 800796a:	4c0c      	ldr	r4, [pc, #48]	; (800799c <__libc_init_array+0x44>)
 800796c:	f001 fa00 	bl	8008d70 <_init>
 8007970:	1b64      	subs	r4, r4, r5
 8007972:	10a4      	asrs	r4, r4, #2
 8007974:	2600      	movs	r6, #0
 8007976:	42a6      	cmp	r6, r4
 8007978:	d105      	bne.n	8007986 <__libc_init_array+0x2e>
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007980:	4798      	blx	r3
 8007982:	3601      	adds	r6, #1
 8007984:	e7ee      	b.n	8007964 <__libc_init_array+0xc>
 8007986:	f855 3b04 	ldr.w	r3, [r5], #4
 800798a:	4798      	blx	r3
 800798c:	3601      	adds	r6, #1
 800798e:	e7f2      	b.n	8007976 <__libc_init_array+0x1e>
 8007990:	080095e8 	.word	0x080095e8
 8007994:	080095e8 	.word	0x080095e8
 8007998:	080095e8 	.word	0x080095e8
 800799c:	080095ec 	.word	0x080095ec

080079a0 <memcpy>:
 80079a0:	440a      	add	r2, r1
 80079a2:	4291      	cmp	r1, r2
 80079a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a8:	d100      	bne.n	80079ac <memcpy+0xc>
 80079aa:	4770      	bx	lr
 80079ac:	b510      	push	{r4, lr}
 80079ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b6:	4291      	cmp	r1, r2
 80079b8:	d1f9      	bne.n	80079ae <memcpy+0xe>
 80079ba:	bd10      	pop	{r4, pc}

080079bc <memset>:
 80079bc:	4402      	add	r2, r0
 80079be:	4603      	mov	r3, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d100      	bne.n	80079c6 <memset+0xa>
 80079c4:	4770      	bx	lr
 80079c6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ca:	e7f9      	b.n	80079c0 <memset+0x4>

080079cc <iprintf>:
 80079cc:	b40f      	push	{r0, r1, r2, r3}
 80079ce:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <iprintf+0x2c>)
 80079d0:	b513      	push	{r0, r1, r4, lr}
 80079d2:	681c      	ldr	r4, [r3, #0]
 80079d4:	b124      	cbz	r4, 80079e0 <iprintf+0x14>
 80079d6:	69a3      	ldr	r3, [r4, #24]
 80079d8:	b913      	cbnz	r3, 80079e0 <iprintf+0x14>
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fa7e 	bl	8007edc <__sinit>
 80079e0:	ab05      	add	r3, sp, #20
 80079e2:	9a04      	ldr	r2, [sp, #16]
 80079e4:	68a1      	ldr	r1, [r4, #8]
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fde3 	bl	80085b4 <_vfiprintf_r>
 80079ee:	b002      	add	sp, #8
 80079f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f4:	b004      	add	sp, #16
 80079f6:	4770      	bx	lr
 80079f8:	20000014 	.word	0x20000014

080079fc <_puts_r>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	460e      	mov	r6, r1
 8007a00:	4605      	mov	r5, r0
 8007a02:	b118      	cbz	r0, 8007a0c <_puts_r+0x10>
 8007a04:	6983      	ldr	r3, [r0, #24]
 8007a06:	b90b      	cbnz	r3, 8007a0c <_puts_r+0x10>
 8007a08:	f000 fa68 	bl	8007edc <__sinit>
 8007a0c:	69ab      	ldr	r3, [r5, #24]
 8007a0e:	68ac      	ldr	r4, [r5, #8]
 8007a10:	b913      	cbnz	r3, 8007a18 <_puts_r+0x1c>
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 fa62 	bl	8007edc <__sinit>
 8007a18:	4b2c      	ldr	r3, [pc, #176]	; (8007acc <_puts_r+0xd0>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d120      	bne.n	8007a60 <_puts_r+0x64>
 8007a1e:	686c      	ldr	r4, [r5, #4]
 8007a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a22:	07db      	lsls	r3, r3, #31
 8007a24:	d405      	bmi.n	8007a32 <_puts_r+0x36>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	0598      	lsls	r0, r3, #22
 8007a2a:	d402      	bmi.n	8007a32 <_puts_r+0x36>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2e:	f000 faf3 	bl	8008018 <__retarget_lock_acquire_recursive>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	0719      	lsls	r1, r3, #28
 8007a36:	d51d      	bpl.n	8007a74 <_puts_r+0x78>
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	b1db      	cbz	r3, 8007a74 <_puts_r+0x78>
 8007a3c:	3e01      	subs	r6, #1
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a44:	3b01      	subs	r3, #1
 8007a46:	60a3      	str	r3, [r4, #8]
 8007a48:	bb39      	cbnz	r1, 8007a9a <_puts_r+0x9e>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da38      	bge.n	8007ac0 <_puts_r+0xc4>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	210a      	movs	r1, #10
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f868 	bl	8007b28 <__swbuf_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d011      	beq.n	8007a80 <_puts_r+0x84>
 8007a5c:	250a      	movs	r5, #10
 8007a5e:	e011      	b.n	8007a84 <_puts_r+0x88>
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <_puts_r+0xd4>)
 8007a62:	429c      	cmp	r4, r3
 8007a64:	d101      	bne.n	8007a6a <_puts_r+0x6e>
 8007a66:	68ac      	ldr	r4, [r5, #8]
 8007a68:	e7da      	b.n	8007a20 <_puts_r+0x24>
 8007a6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <_puts_r+0xd8>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	bf08      	it	eq
 8007a70:	68ec      	ldreq	r4, [r5, #12]
 8007a72:	e7d5      	b.n	8007a20 <_puts_r+0x24>
 8007a74:	4621      	mov	r1, r4
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 f8a8 	bl	8007bcc <__swsetup_r>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d0dd      	beq.n	8007a3c <_puts_r+0x40>
 8007a80:	f04f 35ff 	mov.w	r5, #4294967295
 8007a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a86:	07da      	lsls	r2, r3, #31
 8007a88:	d405      	bmi.n	8007a96 <_puts_r+0x9a>
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	059b      	lsls	r3, r3, #22
 8007a8e:	d402      	bmi.n	8007a96 <_puts_r+0x9a>
 8007a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a92:	f000 fac2 	bl	800801a <__retarget_lock_release_recursive>
 8007a96:	4628      	mov	r0, r5
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	da04      	bge.n	8007aa8 <_puts_r+0xac>
 8007a9e:	69a2      	ldr	r2, [r4, #24]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	dc06      	bgt.n	8007ab2 <_puts_r+0xb6>
 8007aa4:	290a      	cmp	r1, #10
 8007aa6:	d004      	beq.n	8007ab2 <_puts_r+0xb6>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	6022      	str	r2, [r4, #0]
 8007aae:	7019      	strb	r1, [r3, #0]
 8007ab0:	e7c5      	b.n	8007a3e <_puts_r+0x42>
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 f837 	bl	8007b28 <__swbuf_r>
 8007aba:	3001      	adds	r0, #1
 8007abc:	d1bf      	bne.n	8007a3e <_puts_r+0x42>
 8007abe:	e7df      	b.n	8007a80 <_puts_r+0x84>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	250a      	movs	r5, #10
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	701d      	strb	r5, [r3, #0]
 8007aca:	e7db      	b.n	8007a84 <_puts_r+0x88>
 8007acc:	0800956c 	.word	0x0800956c
 8007ad0:	0800958c 	.word	0x0800958c
 8007ad4:	0800954c 	.word	0x0800954c

08007ad8 <puts>:
 8007ad8:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <puts+0xc>)
 8007ada:	4601      	mov	r1, r0
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	f7ff bf8d 	b.w	80079fc <_puts_r>
 8007ae2:	bf00      	nop
 8007ae4:	20000014 	.word	0x20000014

08007ae8 <siprintf>:
 8007ae8:	b40e      	push	{r1, r2, r3}
 8007aea:	b500      	push	{lr}
 8007aec:	b09c      	sub	sp, #112	; 0x70
 8007aee:	ab1d      	add	r3, sp, #116	; 0x74
 8007af0:	9002      	str	r0, [sp, #8]
 8007af2:	9006      	str	r0, [sp, #24]
 8007af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007af8:	4809      	ldr	r0, [pc, #36]	; (8007b20 <siprintf+0x38>)
 8007afa:	9107      	str	r1, [sp, #28]
 8007afc:	9104      	str	r1, [sp, #16]
 8007afe:	4909      	ldr	r1, [pc, #36]	; (8007b24 <siprintf+0x3c>)
 8007b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	a902      	add	r1, sp, #8
 8007b0c:	f000 fc28 	bl	8008360 <_svfiprintf_r>
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	b01c      	add	sp, #112	; 0x70
 8007b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b1c:	b003      	add	sp, #12
 8007b1e:	4770      	bx	lr
 8007b20:	20000014 	.word	0x20000014
 8007b24:	ffff0208 	.word	0xffff0208

08007b28 <__swbuf_r>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b118      	cbz	r0, 8007b3a <__swbuf_r+0x12>
 8007b32:	6983      	ldr	r3, [r0, #24]
 8007b34:	b90b      	cbnz	r3, 8007b3a <__swbuf_r+0x12>
 8007b36:	f000 f9d1 	bl	8007edc <__sinit>
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <__swbuf_r+0x98>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	d12b      	bne.n	8007b98 <__swbuf_r+0x70>
 8007b40:	686c      	ldr	r4, [r5, #4]
 8007b42:	69a3      	ldr	r3, [r4, #24]
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	071a      	lsls	r2, r3, #28
 8007b4a:	d52f      	bpl.n	8007bac <__swbuf_r+0x84>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	b36b      	cbz	r3, 8007bac <__swbuf_r+0x84>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1ac0      	subs	r0, r0, r3
 8007b56:	6963      	ldr	r3, [r4, #20]
 8007b58:	b2f6      	uxtb	r6, r6
 8007b5a:	4283      	cmp	r3, r0
 8007b5c:	4637      	mov	r7, r6
 8007b5e:	dc04      	bgt.n	8007b6a <__swbuf_r+0x42>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f926 	bl	8007db4 <_fflush_r>
 8007b68:	bb30      	cbnz	r0, 8007bb8 <__swbuf_r+0x90>
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	60a3      	str	r3, [r4, #8]
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	6022      	str	r2, [r4, #0]
 8007b76:	701e      	strb	r6, [r3, #0]
 8007b78:	6963      	ldr	r3, [r4, #20]
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	4283      	cmp	r3, r0
 8007b7e:	d004      	beq.n	8007b8a <__swbuf_r+0x62>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	07db      	lsls	r3, r3, #31
 8007b84:	d506      	bpl.n	8007b94 <__swbuf_r+0x6c>
 8007b86:	2e0a      	cmp	r6, #10
 8007b88:	d104      	bne.n	8007b94 <__swbuf_r+0x6c>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 f911 	bl	8007db4 <_fflush_r>
 8007b92:	b988      	cbnz	r0, 8007bb8 <__swbuf_r+0x90>
 8007b94:	4638      	mov	r0, r7
 8007b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <__swbuf_r+0x9c>)
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	d101      	bne.n	8007ba2 <__swbuf_r+0x7a>
 8007b9e:	68ac      	ldr	r4, [r5, #8]
 8007ba0:	e7cf      	b.n	8007b42 <__swbuf_r+0x1a>
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <__swbuf_r+0xa0>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	bf08      	it	eq
 8007ba8:	68ec      	ldreq	r4, [r5, #12]
 8007baa:	e7ca      	b.n	8007b42 <__swbuf_r+0x1a>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f80c 	bl	8007bcc <__swsetup_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d0cb      	beq.n	8007b50 <__swbuf_r+0x28>
 8007bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bbc:	e7ea      	b.n	8007b94 <__swbuf_r+0x6c>
 8007bbe:	bf00      	nop
 8007bc0:	0800956c 	.word	0x0800956c
 8007bc4:	0800958c 	.word	0x0800958c
 8007bc8:	0800954c 	.word	0x0800954c

08007bcc <__swsetup_r>:
 8007bcc:	4b32      	ldr	r3, [pc, #200]	; (8007c98 <__swsetup_r+0xcc>)
 8007bce:	b570      	push	{r4, r5, r6, lr}
 8007bd0:	681d      	ldr	r5, [r3, #0]
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	b125      	cbz	r5, 8007be2 <__swsetup_r+0x16>
 8007bd8:	69ab      	ldr	r3, [r5, #24]
 8007bda:	b913      	cbnz	r3, 8007be2 <__swsetup_r+0x16>
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 f97d 	bl	8007edc <__sinit>
 8007be2:	4b2e      	ldr	r3, [pc, #184]	; (8007c9c <__swsetup_r+0xd0>)
 8007be4:	429c      	cmp	r4, r3
 8007be6:	d10f      	bne.n	8007c08 <__swsetup_r+0x3c>
 8007be8:	686c      	ldr	r4, [r5, #4]
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bf0:	0719      	lsls	r1, r3, #28
 8007bf2:	d42c      	bmi.n	8007c4e <__swsetup_r+0x82>
 8007bf4:	06dd      	lsls	r5, r3, #27
 8007bf6:	d411      	bmi.n	8007c1c <__swsetup_r+0x50>
 8007bf8:	2309      	movs	r3, #9
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	e03e      	b.n	8007c86 <__swsetup_r+0xba>
 8007c08:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <__swsetup_r+0xd4>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <__swsetup_r+0x46>
 8007c0e:	68ac      	ldr	r4, [r5, #8]
 8007c10:	e7eb      	b.n	8007bea <__swsetup_r+0x1e>
 8007c12:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <__swsetup_r+0xd8>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68ec      	ldreq	r4, [r5, #12]
 8007c1a:	e7e6      	b.n	8007bea <__swsetup_r+0x1e>
 8007c1c:	0758      	lsls	r0, r3, #29
 8007c1e:	d512      	bpl.n	8007c46 <__swsetup_r+0x7a>
 8007c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c22:	b141      	cbz	r1, 8007c36 <__swsetup_r+0x6a>
 8007c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	d002      	beq.n	8007c32 <__swsetup_r+0x66>
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 fa5b 	bl	80080e8 <_free_r>
 8007c32:	2300      	movs	r3, #0
 8007c34:	6363      	str	r3, [r4, #52]	; 0x34
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0308 	orr.w	r3, r3, #8
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	b94b      	cbnz	r3, 8007c66 <__swsetup_r+0x9a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5c:	d003      	beq.n	8007c66 <__swsetup_r+0x9a>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 fa01 	bl	8008068 <__smakebuf_r>
 8007c66:	89a0      	ldrh	r0, [r4, #12]
 8007c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c6c:	f010 0301 	ands.w	r3, r0, #1
 8007c70:	d00a      	beq.n	8007c88 <__swsetup_r+0xbc>
 8007c72:	2300      	movs	r3, #0
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	6963      	ldr	r3, [r4, #20]
 8007c78:	425b      	negs	r3, r3
 8007c7a:	61a3      	str	r3, [r4, #24]
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b943      	cbnz	r3, 8007c92 <__swsetup_r+0xc6>
 8007c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c84:	d1ba      	bne.n	8007bfc <__swsetup_r+0x30>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	0781      	lsls	r1, r0, #30
 8007c8a:	bf58      	it	pl
 8007c8c:	6963      	ldrpl	r3, [r4, #20]
 8007c8e:	60a3      	str	r3, [r4, #8]
 8007c90:	e7f4      	b.n	8007c7c <__swsetup_r+0xb0>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e7f7      	b.n	8007c86 <__swsetup_r+0xba>
 8007c96:	bf00      	nop
 8007c98:	20000014 	.word	0x20000014
 8007c9c:	0800956c 	.word	0x0800956c
 8007ca0:	0800958c 	.word	0x0800958c
 8007ca4:	0800954c 	.word	0x0800954c

08007ca8 <__sflush_r>:
 8007ca8:	898a      	ldrh	r2, [r1, #12]
 8007caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cae:	4605      	mov	r5, r0
 8007cb0:	0710      	lsls	r0, r2, #28
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	d458      	bmi.n	8007d68 <__sflush_r+0xc0>
 8007cb6:	684b      	ldr	r3, [r1, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc05      	bgt.n	8007cc8 <__sflush_r+0x20>
 8007cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dc02      	bgt.n	8007cc8 <__sflush_r+0x20>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	d0f9      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cd4:	682f      	ldr	r7, [r5, #0]
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	d032      	beq.n	8007d40 <__sflush_r+0x98>
 8007cda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	075a      	lsls	r2, r3, #29
 8007ce0:	d505      	bpl.n	8007cee <__sflush_r+0x46>
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	1ac0      	subs	r0, r0, r3
 8007ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ce8:	b10b      	cbz	r3, 8007cee <__sflush_r+0x46>
 8007cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cec:	1ac0      	subs	r0, r0, r3
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf4:	6a21      	ldr	r1, [r4, #32]
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	47b0      	blx	r6
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	d106      	bne.n	8007d0e <__sflush_r+0x66>
 8007d00:	6829      	ldr	r1, [r5, #0]
 8007d02:	291d      	cmp	r1, #29
 8007d04:	d82c      	bhi.n	8007d60 <__sflush_r+0xb8>
 8007d06:	4a2a      	ldr	r2, [pc, #168]	; (8007db0 <__sflush_r+0x108>)
 8007d08:	40ca      	lsrs	r2, r1
 8007d0a:	07d6      	lsls	r6, r2, #31
 8007d0c:	d528      	bpl.n	8007d60 <__sflush_r+0xb8>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	6062      	str	r2, [r4, #4]
 8007d12:	04d9      	lsls	r1, r3, #19
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	6022      	str	r2, [r4, #0]
 8007d18:	d504      	bpl.n	8007d24 <__sflush_r+0x7c>
 8007d1a:	1c42      	adds	r2, r0, #1
 8007d1c:	d101      	bne.n	8007d22 <__sflush_r+0x7a>
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	b903      	cbnz	r3, 8007d24 <__sflush_r+0x7c>
 8007d22:	6560      	str	r0, [r4, #84]	; 0x54
 8007d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d26:	602f      	str	r7, [r5, #0]
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d0ca      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <__sflush_r+0x92>
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 f9d7 	bl	80080e8 <_free_r>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d3e:	e7c1      	b.n	8007cc4 <__sflush_r+0x1c>
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	2301      	movs	r3, #1
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b0      	blx	r6
 8007d48:	1c41      	adds	r1, r0, #1
 8007d4a:	d1c7      	bne.n	8007cdc <__sflush_r+0x34>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0c4      	beq.n	8007cdc <__sflush_r+0x34>
 8007d52:	2b1d      	cmp	r3, #29
 8007d54:	d001      	beq.n	8007d5a <__sflush_r+0xb2>
 8007d56:	2b16      	cmp	r3, #22
 8007d58:	d101      	bne.n	8007d5e <__sflush_r+0xb6>
 8007d5a:	602f      	str	r7, [r5, #0]
 8007d5c:	e7b1      	b.n	8007cc2 <__sflush_r+0x1a>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	e7ad      	b.n	8007cc4 <__sflush_r+0x1c>
 8007d68:	690f      	ldr	r7, [r1, #16]
 8007d6a:	2f00      	cmp	r7, #0
 8007d6c:	d0a9      	beq.n	8007cc2 <__sflush_r+0x1a>
 8007d6e:	0793      	lsls	r3, r2, #30
 8007d70:	680e      	ldr	r6, [r1, #0]
 8007d72:	bf08      	it	eq
 8007d74:	694b      	ldreq	r3, [r1, #20]
 8007d76:	600f      	str	r7, [r1, #0]
 8007d78:	bf18      	it	ne
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	eba6 0807 	sub.w	r8, r6, r7
 8007d80:	608b      	str	r3, [r1, #8]
 8007d82:	f1b8 0f00 	cmp.w	r8, #0
 8007d86:	dd9c      	ble.n	8007cc2 <__sflush_r+0x1a>
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	463a      	mov	r2, r7
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	2800      	cmp	r0, #0
 8007d96:	dc06      	bgt.n	8007da6 <__sflush_r+0xfe>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e78e      	b.n	8007cc4 <__sflush_r+0x1c>
 8007da6:	4407      	add	r7, r0
 8007da8:	eba8 0800 	sub.w	r8, r8, r0
 8007dac:	e7e9      	b.n	8007d82 <__sflush_r+0xda>
 8007dae:	bf00      	nop
 8007db0:	20400001 	.word	0x20400001

08007db4 <_fflush_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	690b      	ldr	r3, [r1, #16]
 8007db8:	4605      	mov	r5, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_fflush_r+0x10>
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	b118      	cbz	r0, 8007dce <_fflush_r+0x1a>
 8007dc6:	6983      	ldr	r3, [r0, #24]
 8007dc8:	b90b      	cbnz	r3, 8007dce <_fflush_r+0x1a>
 8007dca:	f000 f887 	bl	8007edc <__sinit>
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <_fflush_r+0x6c>)
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	d11b      	bne.n	8007e0c <_fflush_r+0x58>
 8007dd4:	686c      	ldr	r4, [r5, #4]
 8007dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0ef      	beq.n	8007dbe <_fflush_r+0xa>
 8007dde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007de0:	07d0      	lsls	r0, r2, #31
 8007de2:	d404      	bmi.n	8007dee <_fflush_r+0x3a>
 8007de4:	0599      	lsls	r1, r3, #22
 8007de6:	d402      	bmi.n	8007dee <_fflush_r+0x3a>
 8007de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dea:	f000 f915 	bl	8008018 <__retarget_lock_acquire_recursive>
 8007dee:	4628      	mov	r0, r5
 8007df0:	4621      	mov	r1, r4
 8007df2:	f7ff ff59 	bl	8007ca8 <__sflush_r>
 8007df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df8:	07da      	lsls	r2, r3, #31
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	d4e0      	bmi.n	8007dc0 <_fflush_r+0xc>
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	059b      	lsls	r3, r3, #22
 8007e02:	d4dd      	bmi.n	8007dc0 <_fflush_r+0xc>
 8007e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e06:	f000 f908 	bl	800801a <__retarget_lock_release_recursive>
 8007e0a:	e7d9      	b.n	8007dc0 <_fflush_r+0xc>
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <_fflush_r+0x70>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d101      	bne.n	8007e16 <_fflush_r+0x62>
 8007e12:	68ac      	ldr	r4, [r5, #8]
 8007e14:	e7df      	b.n	8007dd6 <_fflush_r+0x22>
 8007e16:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <_fflush_r+0x74>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	bf08      	it	eq
 8007e1c:	68ec      	ldreq	r4, [r5, #12]
 8007e1e:	e7da      	b.n	8007dd6 <_fflush_r+0x22>
 8007e20:	0800956c 	.word	0x0800956c
 8007e24:	0800958c 	.word	0x0800958c
 8007e28:	0800954c 	.word	0x0800954c

08007e2c <std>:
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	e9c0 3300 	strd	r3, r3, [r0]
 8007e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e3a:	6083      	str	r3, [r0, #8]
 8007e3c:	8181      	strh	r1, [r0, #12]
 8007e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e40:	81c2      	strh	r2, [r0, #14]
 8007e42:	6183      	str	r3, [r0, #24]
 8007e44:	4619      	mov	r1, r3
 8007e46:	2208      	movs	r2, #8
 8007e48:	305c      	adds	r0, #92	; 0x5c
 8007e4a:	f7ff fdb7 	bl	80079bc <memset>
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <std+0x38>)
 8007e50:	6263      	str	r3, [r4, #36]	; 0x24
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <std+0x3c>)
 8007e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x40>)
 8007e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <std+0x44>)
 8007e5c:	6224      	str	r4, [r4, #32]
 8007e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	08008b5d 	.word	0x08008b5d
 8007e68:	08008b7f 	.word	0x08008b7f
 8007e6c:	08008bb7 	.word	0x08008bb7
 8007e70:	08008bdb 	.word	0x08008bdb

08007e74 <_cleanup_r>:
 8007e74:	4901      	ldr	r1, [pc, #4]	; (8007e7c <_cleanup_r+0x8>)
 8007e76:	f000 b8af 	b.w	8007fd8 <_fwalk_reent>
 8007e7a:	bf00      	nop
 8007e7c:	08007db5 	.word	0x08007db5

08007e80 <__sfmoreglue>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	2268      	movs	r2, #104	; 0x68
 8007e84:	1e4d      	subs	r5, r1, #1
 8007e86:	4355      	muls	r5, r2
 8007e88:	460e      	mov	r6, r1
 8007e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e8e:	f000 f997 	bl	80081c0 <_malloc_r>
 8007e92:	4604      	mov	r4, r0
 8007e94:	b140      	cbz	r0, 8007ea8 <__sfmoreglue+0x28>
 8007e96:	2100      	movs	r1, #0
 8007e98:	e9c0 1600 	strd	r1, r6, [r0]
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	60a0      	str	r0, [r4, #8]
 8007ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ea4:	f7ff fd8a 	bl	80079bc <memset>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}

08007eac <__sfp_lock_acquire>:
 8007eac:	4801      	ldr	r0, [pc, #4]	; (8007eb4 <__sfp_lock_acquire+0x8>)
 8007eae:	f000 b8b3 	b.w	8008018 <__retarget_lock_acquire_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200003a1 	.word	0x200003a1

08007eb8 <__sfp_lock_release>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__sfp_lock_release+0x8>)
 8007eba:	f000 b8ae 	b.w	800801a <__retarget_lock_release_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200003a1 	.word	0x200003a1

08007ec4 <__sinit_lock_acquire>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__sinit_lock_acquire+0x8>)
 8007ec6:	f000 b8a7 	b.w	8008018 <__retarget_lock_acquire_recursive>
 8007eca:	bf00      	nop
 8007ecc:	200003a2 	.word	0x200003a2

08007ed0 <__sinit_lock_release>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__sinit_lock_release+0x8>)
 8007ed2:	f000 b8a2 	b.w	800801a <__retarget_lock_release_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	200003a2 	.word	0x200003a2

08007edc <__sinit>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	4604      	mov	r4, r0
 8007ee0:	f7ff fff0 	bl	8007ec4 <__sinit_lock_acquire>
 8007ee4:	69a3      	ldr	r3, [r4, #24]
 8007ee6:	b11b      	cbz	r3, 8007ef0 <__sinit+0x14>
 8007ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eec:	f7ff bff0 	b.w	8007ed0 <__sinit_lock_release>
 8007ef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ef6:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <__sinit+0x68>)
 8007ef8:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <__sinit+0x6c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	bf04      	itt	eq
 8007f02:	2301      	moveq	r3, #1
 8007f04:	61a3      	streq	r3, [r4, #24]
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 f820 	bl	8007f4c <__sfp>
 8007f0c:	6060      	str	r0, [r4, #4]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f81c 	bl	8007f4c <__sfp>
 8007f14:	60a0      	str	r0, [r4, #8]
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 f818 	bl	8007f4c <__sfp>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	60e0      	str	r0, [r4, #12]
 8007f20:	2104      	movs	r1, #4
 8007f22:	6860      	ldr	r0, [r4, #4]
 8007f24:	f7ff ff82 	bl	8007e2c <std>
 8007f28:	68a0      	ldr	r0, [r4, #8]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	2109      	movs	r1, #9
 8007f2e:	f7ff ff7d 	bl	8007e2c <std>
 8007f32:	68e0      	ldr	r0, [r4, #12]
 8007f34:	2202      	movs	r2, #2
 8007f36:	2112      	movs	r1, #18
 8007f38:	f7ff ff78 	bl	8007e2c <std>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	61a3      	str	r3, [r4, #24]
 8007f40:	e7d2      	b.n	8007ee8 <__sinit+0xc>
 8007f42:	bf00      	nop
 8007f44:	08009548 	.word	0x08009548
 8007f48:	08007e75 	.word	0x08007e75

08007f4c <__sfp>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	4607      	mov	r7, r0
 8007f50:	f7ff ffac 	bl	8007eac <__sfp_lock_acquire>
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <__sfp+0x84>)
 8007f56:	681e      	ldr	r6, [r3, #0]
 8007f58:	69b3      	ldr	r3, [r6, #24]
 8007f5a:	b913      	cbnz	r3, 8007f62 <__sfp+0x16>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff ffbd 	bl	8007edc <__sinit>
 8007f62:	3648      	adds	r6, #72	; 0x48
 8007f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	d503      	bpl.n	8007f74 <__sfp+0x28>
 8007f6c:	6833      	ldr	r3, [r6, #0]
 8007f6e:	b30b      	cbz	r3, 8007fb4 <__sfp+0x68>
 8007f70:	6836      	ldr	r6, [r6, #0]
 8007f72:	e7f7      	b.n	8007f64 <__sfp+0x18>
 8007f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f78:	b9d5      	cbnz	r5, 8007fb0 <__sfp+0x64>
 8007f7a:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <__sfp+0x88>)
 8007f7c:	60e3      	str	r3, [r4, #12]
 8007f7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f82:	6665      	str	r5, [r4, #100]	; 0x64
 8007f84:	f000 f847 	bl	8008016 <__retarget_lock_init_recursive>
 8007f88:	f7ff ff96 	bl	8007eb8 <__sfp_lock_release>
 8007f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f94:	6025      	str	r5, [r4, #0]
 8007f96:	61a5      	str	r5, [r4, #24]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa0:	f7ff fd0c 	bl	80079bc <memset>
 8007fa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fac:	4620      	mov	r0, r4
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb0:	3468      	adds	r4, #104	; 0x68
 8007fb2:	e7d9      	b.n	8007f68 <__sfp+0x1c>
 8007fb4:	2104      	movs	r1, #4
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ff62 	bl	8007e80 <__sfmoreglue>
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	6030      	str	r0, [r6, #0]
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d1d5      	bne.n	8007f70 <__sfp+0x24>
 8007fc4:	f7ff ff78 	bl	8007eb8 <__sfp_lock_release>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	e7ee      	b.n	8007fac <__sfp+0x60>
 8007fce:	bf00      	nop
 8007fd0:	08009548 	.word	0x08009548
 8007fd4:	ffff0001 	.word	0xffff0001

08007fd8 <_fwalk_reent>:
 8007fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fdc:	4606      	mov	r6, r0
 8007fde:	4688      	mov	r8, r1
 8007fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fe4:	2700      	movs	r7, #0
 8007fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fea:	f1b9 0901 	subs.w	r9, r9, #1
 8007fee:	d505      	bpl.n	8007ffc <_fwalk_reent+0x24>
 8007ff0:	6824      	ldr	r4, [r4, #0]
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d1f7      	bne.n	8007fe6 <_fwalk_reent+0xe>
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffc:	89ab      	ldrh	r3, [r5, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d907      	bls.n	8008012 <_fwalk_reent+0x3a>
 8008002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008006:	3301      	adds	r3, #1
 8008008:	d003      	beq.n	8008012 <_fwalk_reent+0x3a>
 800800a:	4629      	mov	r1, r5
 800800c:	4630      	mov	r0, r6
 800800e:	47c0      	blx	r8
 8008010:	4307      	orrs	r7, r0
 8008012:	3568      	adds	r5, #104	; 0x68
 8008014:	e7e9      	b.n	8007fea <_fwalk_reent+0x12>

08008016 <__retarget_lock_init_recursive>:
 8008016:	4770      	bx	lr

08008018 <__retarget_lock_acquire_recursive>:
 8008018:	4770      	bx	lr

0800801a <__retarget_lock_release_recursive>:
 800801a:	4770      	bx	lr

0800801c <__swhatbuf_r>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	460e      	mov	r6, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	2900      	cmp	r1, #0
 8008026:	b096      	sub	sp, #88	; 0x58
 8008028:	4614      	mov	r4, r2
 800802a:	461d      	mov	r5, r3
 800802c:	da08      	bge.n	8008040 <__swhatbuf_r+0x24>
 800802e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	602a      	str	r2, [r5, #0]
 8008036:	061a      	lsls	r2, r3, #24
 8008038:	d410      	bmi.n	800805c <__swhatbuf_r+0x40>
 800803a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803e:	e00e      	b.n	800805e <__swhatbuf_r+0x42>
 8008040:	466a      	mov	r2, sp
 8008042:	f000 fdf1 	bl	8008c28 <_fstat_r>
 8008046:	2800      	cmp	r0, #0
 8008048:	dbf1      	blt.n	800802e <__swhatbuf_r+0x12>
 800804a:	9a01      	ldr	r2, [sp, #4]
 800804c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008054:	425a      	negs	r2, r3
 8008056:	415a      	adcs	r2, r3
 8008058:	602a      	str	r2, [r5, #0]
 800805a:	e7ee      	b.n	800803a <__swhatbuf_r+0x1e>
 800805c:	2340      	movs	r3, #64	; 0x40
 800805e:	2000      	movs	r0, #0
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	b016      	add	sp, #88	; 0x58
 8008064:	bd70      	pop	{r4, r5, r6, pc}
	...

08008068 <__smakebuf_r>:
 8008068:	898b      	ldrh	r3, [r1, #12]
 800806a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800806c:	079d      	lsls	r5, r3, #30
 800806e:	4606      	mov	r6, r0
 8008070:	460c      	mov	r4, r1
 8008072:	d507      	bpl.n	8008084 <__smakebuf_r+0x1c>
 8008074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	2301      	movs	r3, #1
 800807e:	6163      	str	r3, [r4, #20]
 8008080:	b002      	add	sp, #8
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	ab01      	add	r3, sp, #4
 8008086:	466a      	mov	r2, sp
 8008088:	f7ff ffc8 	bl	800801c <__swhatbuf_r>
 800808c:	9900      	ldr	r1, [sp, #0]
 800808e:	4605      	mov	r5, r0
 8008090:	4630      	mov	r0, r6
 8008092:	f000 f895 	bl	80081c0 <_malloc_r>
 8008096:	b948      	cbnz	r0, 80080ac <__smakebuf_r+0x44>
 8008098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800809c:	059a      	lsls	r2, r3, #22
 800809e:	d4ef      	bmi.n	8008080 <__smakebuf_r+0x18>
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	f043 0302 	orr.w	r3, r3, #2
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	e7e3      	b.n	8008074 <__smakebuf_r+0xc>
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <__smakebuf_r+0x7c>)
 80080ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	6020      	str	r0, [r4, #0]
 80080b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	6163      	str	r3, [r4, #20]
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	6120      	str	r0, [r4, #16]
 80080c2:	b15b      	cbz	r3, 80080dc <__smakebuf_r+0x74>
 80080c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 fdbf 	bl	8008c4c <_isatty_r>
 80080ce:	b128      	cbz	r0, 80080dc <__smakebuf_r+0x74>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	89a0      	ldrh	r0, [r4, #12]
 80080de:	4305      	orrs	r5, r0
 80080e0:	81a5      	strh	r5, [r4, #12]
 80080e2:	e7cd      	b.n	8008080 <__smakebuf_r+0x18>
 80080e4:	08007e75 	.word	0x08007e75

080080e8 <_free_r>:
 80080e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ea:	2900      	cmp	r1, #0
 80080ec:	d044      	beq.n	8008178 <_free_r+0x90>
 80080ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f2:	9001      	str	r0, [sp, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f1a1 0404 	sub.w	r4, r1, #4
 80080fa:	bfb8      	it	lt
 80080fc:	18e4      	addlt	r4, r4, r3
 80080fe:	f000 fde1 	bl	8008cc4 <__malloc_lock>
 8008102:	4a1e      	ldr	r2, [pc, #120]	; (800817c <_free_r+0x94>)
 8008104:	9801      	ldr	r0, [sp, #4]
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	b933      	cbnz	r3, 8008118 <_free_r+0x30>
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	6014      	str	r4, [r2, #0]
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008114:	f000 bddc 	b.w	8008cd0 <__malloc_unlock>
 8008118:	42a3      	cmp	r3, r4
 800811a:	d908      	bls.n	800812e <_free_r+0x46>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf01      	itttt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	1949      	addeq	r1, r1, r5
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	e7ed      	b.n	800810a <_free_r+0x22>
 800812e:	461a      	mov	r2, r3
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b10b      	cbz	r3, 8008138 <_free_r+0x50>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d9fa      	bls.n	800812e <_free_r+0x46>
 8008138:	6811      	ldr	r1, [r2, #0]
 800813a:	1855      	adds	r5, r2, r1
 800813c:	42a5      	cmp	r5, r4
 800813e:	d10b      	bne.n	8008158 <_free_r+0x70>
 8008140:	6824      	ldr	r4, [r4, #0]
 8008142:	4421      	add	r1, r4
 8008144:	1854      	adds	r4, r2, r1
 8008146:	42a3      	cmp	r3, r4
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	d1e0      	bne.n	800810e <_free_r+0x26>
 800814c:	681c      	ldr	r4, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	6053      	str	r3, [r2, #4]
 8008152:	4421      	add	r1, r4
 8008154:	6011      	str	r1, [r2, #0]
 8008156:	e7da      	b.n	800810e <_free_r+0x26>
 8008158:	d902      	bls.n	8008160 <_free_r+0x78>
 800815a:	230c      	movs	r3, #12
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	e7d6      	b.n	800810e <_free_r+0x26>
 8008160:	6825      	ldr	r5, [r4, #0]
 8008162:	1961      	adds	r1, r4, r5
 8008164:	428b      	cmp	r3, r1
 8008166:	bf04      	itt	eq
 8008168:	6819      	ldreq	r1, [r3, #0]
 800816a:	685b      	ldreq	r3, [r3, #4]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	bf04      	itt	eq
 8008170:	1949      	addeq	r1, r1, r5
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6054      	str	r4, [r2, #4]
 8008176:	e7ca      	b.n	800810e <_free_r+0x26>
 8008178:	b003      	add	sp, #12
 800817a:	bd30      	pop	{r4, r5, pc}
 800817c:	200003a4 	.word	0x200003a4

08008180 <sbrk_aligned>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4e0e      	ldr	r6, [pc, #56]	; (80081bc <sbrk_aligned+0x3c>)
 8008184:	460c      	mov	r4, r1
 8008186:	6831      	ldr	r1, [r6, #0]
 8008188:	4605      	mov	r5, r0
 800818a:	b911      	cbnz	r1, 8008192 <sbrk_aligned+0x12>
 800818c:	f000 fcd6 	bl	8008b3c <_sbrk_r>
 8008190:	6030      	str	r0, [r6, #0]
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f000 fcd1 	bl	8008b3c <_sbrk_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d00a      	beq.n	80081b4 <sbrk_aligned+0x34>
 800819e:	1cc4      	adds	r4, r0, #3
 80081a0:	f024 0403 	bic.w	r4, r4, #3
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d007      	beq.n	80081b8 <sbrk_aligned+0x38>
 80081a8:	1a21      	subs	r1, r4, r0
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 fcc6 	bl	8008b3c <_sbrk_r>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d101      	bne.n	80081b8 <sbrk_aligned+0x38>
 80081b4:	f04f 34ff 	mov.w	r4, #4294967295
 80081b8:	4620      	mov	r0, r4
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	200003a8 	.word	0x200003a8

080081c0 <_malloc_r>:
 80081c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	1ccd      	adds	r5, r1, #3
 80081c6:	f025 0503 	bic.w	r5, r5, #3
 80081ca:	3508      	adds	r5, #8
 80081cc:	2d0c      	cmp	r5, #12
 80081ce:	bf38      	it	cc
 80081d0:	250c      	movcc	r5, #12
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	4607      	mov	r7, r0
 80081d6:	db01      	blt.n	80081dc <_malloc_r+0x1c>
 80081d8:	42a9      	cmp	r1, r5
 80081da:	d905      	bls.n	80081e8 <_malloc_r+0x28>
 80081dc:	230c      	movs	r3, #12
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	2600      	movs	r6, #0
 80081e2:	4630      	mov	r0, r6
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	4e2e      	ldr	r6, [pc, #184]	; (80082a4 <_malloc_r+0xe4>)
 80081ea:	f000 fd6b 	bl	8008cc4 <__malloc_lock>
 80081ee:	6833      	ldr	r3, [r6, #0]
 80081f0:	461c      	mov	r4, r3
 80081f2:	bb34      	cbnz	r4, 8008242 <_malloc_r+0x82>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7ff ffc2 	bl	8008180 <sbrk_aligned>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	4604      	mov	r4, r0
 8008200:	d14d      	bne.n	800829e <_malloc_r+0xde>
 8008202:	6834      	ldr	r4, [r6, #0]
 8008204:	4626      	mov	r6, r4
 8008206:	2e00      	cmp	r6, #0
 8008208:	d140      	bne.n	800828c <_malloc_r+0xcc>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	4631      	mov	r1, r6
 800820e:	4638      	mov	r0, r7
 8008210:	eb04 0803 	add.w	r8, r4, r3
 8008214:	f000 fc92 	bl	8008b3c <_sbrk_r>
 8008218:	4580      	cmp	r8, r0
 800821a:	d13a      	bne.n	8008292 <_malloc_r+0xd2>
 800821c:	6821      	ldr	r1, [r4, #0]
 800821e:	3503      	adds	r5, #3
 8008220:	1a6d      	subs	r5, r5, r1
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	4629      	mov	r1, r5
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff ffa5 	bl	8008180 <sbrk_aligned>
 8008236:	3001      	adds	r0, #1
 8008238:	d02b      	beq.n	8008292 <_malloc_r+0xd2>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	442b      	add	r3, r5
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	e00e      	b.n	8008260 <_malloc_r+0xa0>
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	1b52      	subs	r2, r2, r5
 8008246:	d41e      	bmi.n	8008286 <_malloc_r+0xc6>
 8008248:	2a0b      	cmp	r2, #11
 800824a:	d916      	bls.n	800827a <_malloc_r+0xba>
 800824c:	1961      	adds	r1, r4, r5
 800824e:	42a3      	cmp	r3, r4
 8008250:	6025      	str	r5, [r4, #0]
 8008252:	bf18      	it	ne
 8008254:	6059      	strne	r1, [r3, #4]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	bf08      	it	eq
 800825a:	6031      	streq	r1, [r6, #0]
 800825c:	5162      	str	r2, [r4, r5]
 800825e:	604b      	str	r3, [r1, #4]
 8008260:	4638      	mov	r0, r7
 8008262:	f104 060b 	add.w	r6, r4, #11
 8008266:	f000 fd33 	bl	8008cd0 <__malloc_unlock>
 800826a:	f026 0607 	bic.w	r6, r6, #7
 800826e:	1d23      	adds	r3, r4, #4
 8008270:	1af2      	subs	r2, r6, r3
 8008272:	d0b6      	beq.n	80081e2 <_malloc_r+0x22>
 8008274:	1b9b      	subs	r3, r3, r6
 8008276:	50a3      	str	r3, [r4, r2]
 8008278:	e7b3      	b.n	80081e2 <_malloc_r+0x22>
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	42a3      	cmp	r3, r4
 800827e:	bf0c      	ite	eq
 8008280:	6032      	streq	r2, [r6, #0]
 8008282:	605a      	strne	r2, [r3, #4]
 8008284:	e7ec      	b.n	8008260 <_malloc_r+0xa0>
 8008286:	4623      	mov	r3, r4
 8008288:	6864      	ldr	r4, [r4, #4]
 800828a:	e7b2      	b.n	80081f2 <_malloc_r+0x32>
 800828c:	4634      	mov	r4, r6
 800828e:	6876      	ldr	r6, [r6, #4]
 8008290:	e7b9      	b.n	8008206 <_malloc_r+0x46>
 8008292:	230c      	movs	r3, #12
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4638      	mov	r0, r7
 8008298:	f000 fd1a 	bl	8008cd0 <__malloc_unlock>
 800829c:	e7a1      	b.n	80081e2 <_malloc_r+0x22>
 800829e:	6025      	str	r5, [r4, #0]
 80082a0:	e7de      	b.n	8008260 <_malloc_r+0xa0>
 80082a2:	bf00      	nop
 80082a4:	200003a4 	.word	0x200003a4

080082a8 <__ssputs_r>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	688e      	ldr	r6, [r1, #8]
 80082ae:	429e      	cmp	r6, r3
 80082b0:	4682      	mov	sl, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4690      	mov	r8, r2
 80082b6:	461f      	mov	r7, r3
 80082b8:	d838      	bhi.n	800832c <__ssputs_r+0x84>
 80082ba:	898a      	ldrh	r2, [r1, #12]
 80082bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082c0:	d032      	beq.n	8008328 <__ssputs_r+0x80>
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	6909      	ldr	r1, [r1, #16]
 80082c6:	eba5 0901 	sub.w	r9, r5, r1
 80082ca:	6965      	ldr	r5, [r4, #20]
 80082cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082d4:	3301      	adds	r3, #1
 80082d6:	444b      	add	r3, r9
 80082d8:	106d      	asrs	r5, r5, #1
 80082da:	429d      	cmp	r5, r3
 80082dc:	bf38      	it	cc
 80082de:	461d      	movcc	r5, r3
 80082e0:	0553      	lsls	r3, r2, #21
 80082e2:	d531      	bpl.n	8008348 <__ssputs_r+0xa0>
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7ff ff6b 	bl	80081c0 <_malloc_r>
 80082ea:	4606      	mov	r6, r0
 80082ec:	b950      	cbnz	r0, 8008304 <__ssputs_r+0x5c>
 80082ee:	230c      	movs	r3, #12
 80082f0:	f8ca 3000 	str.w	r3, [sl]
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	464a      	mov	r2, r9
 8008308:	f7ff fb4a 	bl	80079a0 <memcpy>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	6126      	str	r6, [r4, #16]
 800831a:	6165      	str	r5, [r4, #20]
 800831c:	444e      	add	r6, r9
 800831e:	eba5 0509 	sub.w	r5, r5, r9
 8008322:	6026      	str	r6, [r4, #0]
 8008324:	60a5      	str	r5, [r4, #8]
 8008326:	463e      	mov	r6, r7
 8008328:	42be      	cmp	r6, r7
 800832a:	d900      	bls.n	800832e <__ssputs_r+0x86>
 800832c:	463e      	mov	r6, r7
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	4632      	mov	r2, r6
 8008332:	4641      	mov	r1, r8
 8008334:	f000 fcac 	bl	8008c90 <memmove>
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	1b9b      	subs	r3, r3, r6
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4433      	add	r3, r6
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	2000      	movs	r0, #0
 8008346:	e7db      	b.n	8008300 <__ssputs_r+0x58>
 8008348:	462a      	mov	r2, r5
 800834a:	f000 fcc7 	bl	8008cdc <_realloc_r>
 800834e:	4606      	mov	r6, r0
 8008350:	2800      	cmp	r0, #0
 8008352:	d1e1      	bne.n	8008318 <__ssputs_r+0x70>
 8008354:	6921      	ldr	r1, [r4, #16]
 8008356:	4650      	mov	r0, sl
 8008358:	f7ff fec6 	bl	80080e8 <_free_r>
 800835c:	e7c7      	b.n	80082ee <__ssputs_r+0x46>
	...

08008360 <_svfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4698      	mov	r8, r3
 8008366:	898b      	ldrh	r3, [r1, #12]
 8008368:	061b      	lsls	r3, r3, #24
 800836a:	b09d      	sub	sp, #116	; 0x74
 800836c:	4607      	mov	r7, r0
 800836e:	460d      	mov	r5, r1
 8008370:	4614      	mov	r4, r2
 8008372:	d50e      	bpl.n	8008392 <_svfiprintf_r+0x32>
 8008374:	690b      	ldr	r3, [r1, #16]
 8008376:	b963      	cbnz	r3, 8008392 <_svfiprintf_r+0x32>
 8008378:	2140      	movs	r1, #64	; 0x40
 800837a:	f7ff ff21 	bl	80081c0 <_malloc_r>
 800837e:	6028      	str	r0, [r5, #0]
 8008380:	6128      	str	r0, [r5, #16]
 8008382:	b920      	cbnz	r0, 800838e <_svfiprintf_r+0x2e>
 8008384:	230c      	movs	r3, #12
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	e0d1      	b.n	8008532 <_svfiprintf_r+0x1d2>
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	616b      	str	r3, [r5, #20]
 8008392:	2300      	movs	r3, #0
 8008394:	9309      	str	r3, [sp, #36]	; 0x24
 8008396:	2320      	movs	r3, #32
 8008398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800839c:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a0:	2330      	movs	r3, #48	; 0x30
 80083a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800854c <_svfiprintf_r+0x1ec>
 80083a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083aa:	f04f 0901 	mov.w	r9, #1
 80083ae:	4623      	mov	r3, r4
 80083b0:	469a      	mov	sl, r3
 80083b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b6:	b10a      	cbz	r2, 80083bc <_svfiprintf_r+0x5c>
 80083b8:	2a25      	cmp	r2, #37	; 0x25
 80083ba:	d1f9      	bne.n	80083b0 <_svfiprintf_r+0x50>
 80083bc:	ebba 0b04 	subs.w	fp, sl, r4
 80083c0:	d00b      	beq.n	80083da <_svfiprintf_r+0x7a>
 80083c2:	465b      	mov	r3, fp
 80083c4:	4622      	mov	r2, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff ff6d 	bl	80082a8 <__ssputs_r>
 80083ce:	3001      	adds	r0, #1
 80083d0:	f000 80aa 	beq.w	8008528 <_svfiprintf_r+0x1c8>
 80083d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d6:	445a      	add	r2, fp
 80083d8:	9209      	str	r2, [sp, #36]	; 0x24
 80083da:	f89a 3000 	ldrb.w	r3, [sl]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80a2 	beq.w	8008528 <_svfiprintf_r+0x1c8>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ee:	f10a 0a01 	add.w	sl, sl, #1
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083fa:	931a      	str	r3, [sp, #104]	; 0x68
 80083fc:	4654      	mov	r4, sl
 80083fe:	2205      	movs	r2, #5
 8008400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008404:	4851      	ldr	r0, [pc, #324]	; (800854c <_svfiprintf_r+0x1ec>)
 8008406:	f7f7 ff0b 	bl	8000220 <memchr>
 800840a:	9a04      	ldr	r2, [sp, #16]
 800840c:	b9d8      	cbnz	r0, 8008446 <_svfiprintf_r+0xe6>
 800840e:	06d0      	lsls	r0, r2, #27
 8008410:	bf44      	itt	mi
 8008412:	2320      	movmi	r3, #32
 8008414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008418:	0711      	lsls	r1, r2, #28
 800841a:	bf44      	itt	mi
 800841c:	232b      	movmi	r3, #43	; 0x2b
 800841e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008422:	f89a 3000 	ldrb.w	r3, [sl]
 8008426:	2b2a      	cmp	r3, #42	; 0x2a
 8008428:	d015      	beq.n	8008456 <_svfiprintf_r+0xf6>
 800842a:	9a07      	ldr	r2, [sp, #28]
 800842c:	4654      	mov	r4, sl
 800842e:	2000      	movs	r0, #0
 8008430:	f04f 0c0a 	mov.w	ip, #10
 8008434:	4621      	mov	r1, r4
 8008436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800843a:	3b30      	subs	r3, #48	; 0x30
 800843c:	2b09      	cmp	r3, #9
 800843e:	d94e      	bls.n	80084de <_svfiprintf_r+0x17e>
 8008440:	b1b0      	cbz	r0, 8008470 <_svfiprintf_r+0x110>
 8008442:	9207      	str	r2, [sp, #28]
 8008444:	e014      	b.n	8008470 <_svfiprintf_r+0x110>
 8008446:	eba0 0308 	sub.w	r3, r0, r8
 800844a:	fa09 f303 	lsl.w	r3, r9, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	46a2      	mov	sl, r4
 8008454:	e7d2      	b.n	80083fc <_svfiprintf_r+0x9c>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	1d19      	adds	r1, r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	9103      	str	r1, [sp, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfbb      	ittet	lt
 8008462:	425b      	neglt	r3, r3
 8008464:	f042 0202 	orrlt.w	r2, r2, #2
 8008468:	9307      	strge	r3, [sp, #28]
 800846a:	9307      	strlt	r3, [sp, #28]
 800846c:	bfb8      	it	lt
 800846e:	9204      	strlt	r2, [sp, #16]
 8008470:	7823      	ldrb	r3, [r4, #0]
 8008472:	2b2e      	cmp	r3, #46	; 0x2e
 8008474:	d10c      	bne.n	8008490 <_svfiprintf_r+0x130>
 8008476:	7863      	ldrb	r3, [r4, #1]
 8008478:	2b2a      	cmp	r3, #42	; 0x2a
 800847a:	d135      	bne.n	80084e8 <_svfiprintf_r+0x188>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	9203      	str	r2, [sp, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfb8      	it	lt
 8008488:	f04f 33ff 	movlt.w	r3, #4294967295
 800848c:	3402      	adds	r4, #2
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800855c <_svfiprintf_r+0x1fc>
 8008494:	7821      	ldrb	r1, [r4, #0]
 8008496:	2203      	movs	r2, #3
 8008498:	4650      	mov	r0, sl
 800849a:	f7f7 fec1 	bl	8000220 <memchr>
 800849e:	b140      	cbz	r0, 80084b2 <_svfiprintf_r+0x152>
 80084a0:	2340      	movs	r3, #64	; 0x40
 80084a2:	eba0 000a 	sub.w	r0, r0, sl
 80084a6:	fa03 f000 	lsl.w	r0, r3, r0
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	4303      	orrs	r3, r0
 80084ae:	3401      	adds	r4, #1
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b6:	4826      	ldr	r0, [pc, #152]	; (8008550 <_svfiprintf_r+0x1f0>)
 80084b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084bc:	2206      	movs	r2, #6
 80084be:	f7f7 feaf 	bl	8000220 <memchr>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d038      	beq.n	8008538 <_svfiprintf_r+0x1d8>
 80084c6:	4b23      	ldr	r3, [pc, #140]	; (8008554 <_svfiprintf_r+0x1f4>)
 80084c8:	bb1b      	cbnz	r3, 8008512 <_svfiprintf_r+0x1b2>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	3307      	adds	r3, #7
 80084ce:	f023 0307 	bic.w	r3, r3, #7
 80084d2:	3308      	adds	r3, #8
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d8:	4433      	add	r3, r6
 80084da:	9309      	str	r3, [sp, #36]	; 0x24
 80084dc:	e767      	b.n	80083ae <_svfiprintf_r+0x4e>
 80084de:	fb0c 3202 	mla	r2, ip, r2, r3
 80084e2:	460c      	mov	r4, r1
 80084e4:	2001      	movs	r0, #1
 80084e6:	e7a5      	b.n	8008434 <_svfiprintf_r+0xd4>
 80084e8:	2300      	movs	r3, #0
 80084ea:	3401      	adds	r4, #1
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	4619      	mov	r1, r3
 80084f0:	f04f 0c0a 	mov.w	ip, #10
 80084f4:	4620      	mov	r0, r4
 80084f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084fa:	3a30      	subs	r2, #48	; 0x30
 80084fc:	2a09      	cmp	r2, #9
 80084fe:	d903      	bls.n	8008508 <_svfiprintf_r+0x1a8>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0c5      	beq.n	8008490 <_svfiprintf_r+0x130>
 8008504:	9105      	str	r1, [sp, #20]
 8008506:	e7c3      	b.n	8008490 <_svfiprintf_r+0x130>
 8008508:	fb0c 2101 	mla	r1, ip, r1, r2
 800850c:	4604      	mov	r4, r0
 800850e:	2301      	movs	r3, #1
 8008510:	e7f0      	b.n	80084f4 <_svfiprintf_r+0x194>
 8008512:	ab03      	add	r3, sp, #12
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	462a      	mov	r2, r5
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <_svfiprintf_r+0x1f8>)
 800851a:	a904      	add	r1, sp, #16
 800851c:	4638      	mov	r0, r7
 800851e:	f3af 8000 	nop.w
 8008522:	1c42      	adds	r2, r0, #1
 8008524:	4606      	mov	r6, r0
 8008526:	d1d6      	bne.n	80084d6 <_svfiprintf_r+0x176>
 8008528:	89ab      	ldrh	r3, [r5, #12]
 800852a:	065b      	lsls	r3, r3, #25
 800852c:	f53f af2c 	bmi.w	8008388 <_svfiprintf_r+0x28>
 8008530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008532:	b01d      	add	sp, #116	; 0x74
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	462a      	mov	r2, r5
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <_svfiprintf_r+0x1f8>)
 8008540:	a904      	add	r1, sp, #16
 8008542:	4638      	mov	r0, r7
 8008544:	f000 f9d4 	bl	80088f0 <_printf_i>
 8008548:	e7eb      	b.n	8008522 <_svfiprintf_r+0x1c2>
 800854a:	bf00      	nop
 800854c:	080095ac 	.word	0x080095ac
 8008550:	080095b6 	.word	0x080095b6
 8008554:	00000000 	.word	0x00000000
 8008558:	080082a9 	.word	0x080082a9
 800855c:	080095b2 	.word	0x080095b2

08008560 <__sfputc_r>:
 8008560:	6893      	ldr	r3, [r2, #8]
 8008562:	3b01      	subs	r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	b410      	push	{r4}
 8008568:	6093      	str	r3, [r2, #8]
 800856a:	da08      	bge.n	800857e <__sfputc_r+0x1e>
 800856c:	6994      	ldr	r4, [r2, #24]
 800856e:	42a3      	cmp	r3, r4
 8008570:	db01      	blt.n	8008576 <__sfputc_r+0x16>
 8008572:	290a      	cmp	r1, #10
 8008574:	d103      	bne.n	800857e <__sfputc_r+0x1e>
 8008576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857a:	f7ff bad5 	b.w	8007b28 <__swbuf_r>
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	1c58      	adds	r0, r3, #1
 8008582:	6010      	str	r0, [r2, #0]
 8008584:	7019      	strb	r1, [r3, #0]
 8008586:	4608      	mov	r0, r1
 8008588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858c:	4770      	bx	lr

0800858e <__sfputs_r>:
 800858e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008590:	4606      	mov	r6, r0
 8008592:	460f      	mov	r7, r1
 8008594:	4614      	mov	r4, r2
 8008596:	18d5      	adds	r5, r2, r3
 8008598:	42ac      	cmp	r4, r5
 800859a:	d101      	bne.n	80085a0 <__sfputs_r+0x12>
 800859c:	2000      	movs	r0, #0
 800859e:	e007      	b.n	80085b0 <__sfputs_r+0x22>
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	463a      	mov	r2, r7
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff ffda 	bl	8008560 <__sfputc_r>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d1f3      	bne.n	8008598 <__sfputs_r+0xa>
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085b4 <_vfiprintf_r>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	460d      	mov	r5, r1
 80085ba:	b09d      	sub	sp, #116	; 0x74
 80085bc:	4614      	mov	r4, r2
 80085be:	4698      	mov	r8, r3
 80085c0:	4606      	mov	r6, r0
 80085c2:	b118      	cbz	r0, 80085cc <_vfiprintf_r+0x18>
 80085c4:	6983      	ldr	r3, [r0, #24]
 80085c6:	b90b      	cbnz	r3, 80085cc <_vfiprintf_r+0x18>
 80085c8:	f7ff fc88 	bl	8007edc <__sinit>
 80085cc:	4b89      	ldr	r3, [pc, #548]	; (80087f4 <_vfiprintf_r+0x240>)
 80085ce:	429d      	cmp	r5, r3
 80085d0:	d11b      	bne.n	800860a <_vfiprintf_r+0x56>
 80085d2:	6875      	ldr	r5, [r6, #4]
 80085d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	d405      	bmi.n	80085e6 <_vfiprintf_r+0x32>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	059a      	lsls	r2, r3, #22
 80085de:	d402      	bmi.n	80085e6 <_vfiprintf_r+0x32>
 80085e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e2:	f7ff fd19 	bl	8008018 <__retarget_lock_acquire_recursive>
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	071b      	lsls	r3, r3, #28
 80085ea:	d501      	bpl.n	80085f0 <_vfiprintf_r+0x3c>
 80085ec:	692b      	ldr	r3, [r5, #16]
 80085ee:	b9eb      	cbnz	r3, 800862c <_vfiprintf_r+0x78>
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff faea 	bl	8007bcc <__swsetup_r>
 80085f8:	b1c0      	cbz	r0, 800862c <_vfiprintf_r+0x78>
 80085fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fc:	07dc      	lsls	r4, r3, #31
 80085fe:	d50e      	bpl.n	800861e <_vfiprintf_r+0x6a>
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	b01d      	add	sp, #116	; 0x74
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860a:	4b7b      	ldr	r3, [pc, #492]	; (80087f8 <_vfiprintf_r+0x244>)
 800860c:	429d      	cmp	r5, r3
 800860e:	d101      	bne.n	8008614 <_vfiprintf_r+0x60>
 8008610:	68b5      	ldr	r5, [r6, #8]
 8008612:	e7df      	b.n	80085d4 <_vfiprintf_r+0x20>
 8008614:	4b79      	ldr	r3, [pc, #484]	; (80087fc <_vfiprintf_r+0x248>)
 8008616:	429d      	cmp	r5, r3
 8008618:	bf08      	it	eq
 800861a:	68f5      	ldreq	r5, [r6, #12]
 800861c:	e7da      	b.n	80085d4 <_vfiprintf_r+0x20>
 800861e:	89ab      	ldrh	r3, [r5, #12]
 8008620:	0598      	lsls	r0, r3, #22
 8008622:	d4ed      	bmi.n	8008600 <_vfiprintf_r+0x4c>
 8008624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008626:	f7ff fcf8 	bl	800801a <__retarget_lock_release_recursive>
 800862a:	e7e9      	b.n	8008600 <_vfiprintf_r+0x4c>
 800862c:	2300      	movs	r3, #0
 800862e:	9309      	str	r3, [sp, #36]	; 0x24
 8008630:	2320      	movs	r3, #32
 8008632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008636:	f8cd 800c 	str.w	r8, [sp, #12]
 800863a:	2330      	movs	r3, #48	; 0x30
 800863c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008800 <_vfiprintf_r+0x24c>
 8008640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008644:	f04f 0901 	mov.w	r9, #1
 8008648:	4623      	mov	r3, r4
 800864a:	469a      	mov	sl, r3
 800864c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008650:	b10a      	cbz	r2, 8008656 <_vfiprintf_r+0xa2>
 8008652:	2a25      	cmp	r2, #37	; 0x25
 8008654:	d1f9      	bne.n	800864a <_vfiprintf_r+0x96>
 8008656:	ebba 0b04 	subs.w	fp, sl, r4
 800865a:	d00b      	beq.n	8008674 <_vfiprintf_r+0xc0>
 800865c:	465b      	mov	r3, fp
 800865e:	4622      	mov	r2, r4
 8008660:	4629      	mov	r1, r5
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ff93 	bl	800858e <__sfputs_r>
 8008668:	3001      	adds	r0, #1
 800866a:	f000 80aa 	beq.w	80087c2 <_vfiprintf_r+0x20e>
 800866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008670:	445a      	add	r2, fp
 8008672:	9209      	str	r2, [sp, #36]	; 0x24
 8008674:	f89a 3000 	ldrb.w	r3, [sl]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80a2 	beq.w	80087c2 <_vfiprintf_r+0x20e>
 800867e:	2300      	movs	r3, #0
 8008680:	f04f 32ff 	mov.w	r2, #4294967295
 8008684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008688:	f10a 0a01 	add.w	sl, sl, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008694:	931a      	str	r3, [sp, #104]	; 0x68
 8008696:	4654      	mov	r4, sl
 8008698:	2205      	movs	r2, #5
 800869a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869e:	4858      	ldr	r0, [pc, #352]	; (8008800 <_vfiprintf_r+0x24c>)
 80086a0:	f7f7 fdbe 	bl	8000220 <memchr>
 80086a4:	9a04      	ldr	r2, [sp, #16]
 80086a6:	b9d8      	cbnz	r0, 80086e0 <_vfiprintf_r+0x12c>
 80086a8:	06d1      	lsls	r1, r2, #27
 80086aa:	bf44      	itt	mi
 80086ac:	2320      	movmi	r3, #32
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b2:	0713      	lsls	r3, r2, #28
 80086b4:	bf44      	itt	mi
 80086b6:	232b      	movmi	r3, #43	; 0x2b
 80086b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086bc:	f89a 3000 	ldrb.w	r3, [sl]
 80086c0:	2b2a      	cmp	r3, #42	; 0x2a
 80086c2:	d015      	beq.n	80086f0 <_vfiprintf_r+0x13c>
 80086c4:	9a07      	ldr	r2, [sp, #28]
 80086c6:	4654      	mov	r4, sl
 80086c8:	2000      	movs	r0, #0
 80086ca:	f04f 0c0a 	mov.w	ip, #10
 80086ce:	4621      	mov	r1, r4
 80086d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d4:	3b30      	subs	r3, #48	; 0x30
 80086d6:	2b09      	cmp	r3, #9
 80086d8:	d94e      	bls.n	8008778 <_vfiprintf_r+0x1c4>
 80086da:	b1b0      	cbz	r0, 800870a <_vfiprintf_r+0x156>
 80086dc:	9207      	str	r2, [sp, #28]
 80086de:	e014      	b.n	800870a <_vfiprintf_r+0x156>
 80086e0:	eba0 0308 	sub.w	r3, r0, r8
 80086e4:	fa09 f303 	lsl.w	r3, r9, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	46a2      	mov	sl, r4
 80086ee:	e7d2      	b.n	8008696 <_vfiprintf_r+0xe2>
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	1d19      	adds	r1, r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	9103      	str	r1, [sp, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbb      	ittet	lt
 80086fc:	425b      	neglt	r3, r3
 80086fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008702:	9307      	strge	r3, [sp, #28]
 8008704:	9307      	strlt	r3, [sp, #28]
 8008706:	bfb8      	it	lt
 8008708:	9204      	strlt	r2, [sp, #16]
 800870a:	7823      	ldrb	r3, [r4, #0]
 800870c:	2b2e      	cmp	r3, #46	; 0x2e
 800870e:	d10c      	bne.n	800872a <_vfiprintf_r+0x176>
 8008710:	7863      	ldrb	r3, [r4, #1]
 8008712:	2b2a      	cmp	r3, #42	; 0x2a
 8008714:	d135      	bne.n	8008782 <_vfiprintf_r+0x1ce>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	1d1a      	adds	r2, r3, #4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	9203      	str	r2, [sp, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	f04f 33ff 	movlt.w	r3, #4294967295
 8008726:	3402      	adds	r4, #2
 8008728:	9305      	str	r3, [sp, #20]
 800872a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008810 <_vfiprintf_r+0x25c>
 800872e:	7821      	ldrb	r1, [r4, #0]
 8008730:	2203      	movs	r2, #3
 8008732:	4650      	mov	r0, sl
 8008734:	f7f7 fd74 	bl	8000220 <memchr>
 8008738:	b140      	cbz	r0, 800874c <_vfiprintf_r+0x198>
 800873a:	2340      	movs	r3, #64	; 0x40
 800873c:	eba0 000a 	sub.w	r0, r0, sl
 8008740:	fa03 f000 	lsl.w	r0, r3, r0
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	4303      	orrs	r3, r0
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	482c      	ldr	r0, [pc, #176]	; (8008804 <_vfiprintf_r+0x250>)
 8008752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008756:	2206      	movs	r2, #6
 8008758:	f7f7 fd62 	bl	8000220 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d03f      	beq.n	80087e0 <_vfiprintf_r+0x22c>
 8008760:	4b29      	ldr	r3, [pc, #164]	; (8008808 <_vfiprintf_r+0x254>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_vfiprintf_r+0x1f8>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	443b      	add	r3, r7
 8008774:	9309      	str	r3, [sp, #36]	; 0x24
 8008776:	e767      	b.n	8008648 <_vfiprintf_r+0x94>
 8008778:	fb0c 3202 	mla	r2, ip, r2, r3
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	e7a5      	b.n	80086ce <_vfiprintf_r+0x11a>
 8008782:	2300      	movs	r3, #0
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	; 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_vfiprintf_r+0x1ee>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c5      	beq.n	800872a <_vfiprintf_r+0x176>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c3      	b.n	800872a <_vfiprintf_r+0x176>
 80087a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7f0      	b.n	800878e <_vfiprintf_r+0x1da>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4b16      	ldr	r3, [pc, #88]	; (800880c <_vfiprintf_r+0x258>)
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	4630      	mov	r0, r6
 80087b8:	f3af 8000 	nop.w
 80087bc:	4607      	mov	r7, r0
 80087be:	1c78      	adds	r0, r7, #1
 80087c0:	d1d6      	bne.n	8008770 <_vfiprintf_r+0x1bc>
 80087c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	d405      	bmi.n	80087d4 <_vfiprintf_r+0x220>
 80087c8:	89ab      	ldrh	r3, [r5, #12]
 80087ca:	059a      	lsls	r2, r3, #22
 80087cc:	d402      	bmi.n	80087d4 <_vfiprintf_r+0x220>
 80087ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d0:	f7ff fc23 	bl	800801a <__retarget_lock_release_recursive>
 80087d4:	89ab      	ldrh	r3, [r5, #12]
 80087d6:	065b      	lsls	r3, r3, #25
 80087d8:	f53f af12 	bmi.w	8008600 <_vfiprintf_r+0x4c>
 80087dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087de:	e711      	b.n	8008604 <_vfiprintf_r+0x50>
 80087e0:	ab03      	add	r3, sp, #12
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	462a      	mov	r2, r5
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <_vfiprintf_r+0x258>)
 80087e8:	a904      	add	r1, sp, #16
 80087ea:	4630      	mov	r0, r6
 80087ec:	f000 f880 	bl	80088f0 <_printf_i>
 80087f0:	e7e4      	b.n	80087bc <_vfiprintf_r+0x208>
 80087f2:	bf00      	nop
 80087f4:	0800956c 	.word	0x0800956c
 80087f8:	0800958c 	.word	0x0800958c
 80087fc:	0800954c 	.word	0x0800954c
 8008800:	080095ac 	.word	0x080095ac
 8008804:	080095b6 	.word	0x080095b6
 8008808:	00000000 	.word	0x00000000
 800880c:	0800858f 	.word	0x0800858f
 8008810:	080095b2 	.word	0x080095b2

08008814 <_printf_common>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	4616      	mov	r6, r2
 800881a:	4699      	mov	r9, r3
 800881c:	688a      	ldr	r2, [r1, #8]
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008824:	4293      	cmp	r3, r2
 8008826:	bfb8      	it	lt
 8008828:	4613      	movlt	r3, r2
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008830:	4607      	mov	r7, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b10a      	cbz	r2, 800883a <_printf_common+0x26>
 8008836:	3301      	adds	r3, #1
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	0699      	lsls	r1, r3, #26
 800883e:	bf42      	ittt	mi
 8008840:	6833      	ldrmi	r3, [r6, #0]
 8008842:	3302      	addmi	r3, #2
 8008844:	6033      	strmi	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	f015 0506 	ands.w	r5, r5, #6
 800884c:	d106      	bne.n	800885c <_printf_common+0x48>
 800884e:	f104 0a19 	add.w	sl, r4, #25
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	6832      	ldr	r2, [r6, #0]
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	42ab      	cmp	r3, r5
 800885a:	dc26      	bgt.n	80088aa <_printf_common+0x96>
 800885c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008860:	1e13      	subs	r3, r2, #0
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	bf18      	it	ne
 8008866:	2301      	movne	r3, #1
 8008868:	0692      	lsls	r2, r2, #26
 800886a:	d42b      	bmi.n	80088c4 <_printf_common+0xb0>
 800886c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008870:	4649      	mov	r1, r9
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	3001      	adds	r0, #1
 8008878:	d01e      	beq.n	80088b8 <_printf_common+0xa4>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	68e5      	ldr	r5, [r4, #12]
 800887e:	6832      	ldr	r2, [r6, #0]
 8008880:	f003 0306 	and.w	r3, r3, #6
 8008884:	2b04      	cmp	r3, #4
 8008886:	bf08      	it	eq
 8008888:	1aad      	subeq	r5, r5, r2
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	6922      	ldr	r2, [r4, #16]
 800888e:	bf0c      	ite	eq
 8008890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008894:	2500      	movne	r5, #0
 8008896:	4293      	cmp	r3, r2
 8008898:	bfc4      	itt	gt
 800889a:	1a9b      	subgt	r3, r3, r2
 800889c:	18ed      	addgt	r5, r5, r3
 800889e:	2600      	movs	r6, #0
 80088a0:	341a      	adds	r4, #26
 80088a2:	42b5      	cmp	r5, r6
 80088a4:	d11a      	bne.n	80088dc <_printf_common+0xc8>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e008      	b.n	80088bc <_printf_common+0xa8>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4652      	mov	r2, sl
 80088ae:	4649      	mov	r1, r9
 80088b0:	4638      	mov	r0, r7
 80088b2:	47c0      	blx	r8
 80088b4:	3001      	adds	r0, #1
 80088b6:	d103      	bne.n	80088c0 <_printf_common+0xac>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7c6      	b.n	8008852 <_printf_common+0x3e>
 80088c4:	18e1      	adds	r1, r4, r3
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	2030      	movs	r0, #48	; 0x30
 80088ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ce:	4422      	add	r2, r4
 80088d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088d8:	3302      	adds	r3, #2
 80088da:	e7c7      	b.n	800886c <_printf_common+0x58>
 80088dc:	2301      	movs	r3, #1
 80088de:	4622      	mov	r2, r4
 80088e0:	4649      	mov	r1, r9
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c0      	blx	r8
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0e6      	beq.n	80088b8 <_printf_common+0xa4>
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7d9      	b.n	80088a2 <_printf_common+0x8e>
	...

080088f0 <_printf_i>:
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	7e0f      	ldrb	r7, [r1, #24]
 80088f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088f8:	2f78      	cmp	r7, #120	; 0x78
 80088fa:	4691      	mov	r9, r2
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	469a      	mov	sl, r3
 8008902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008906:	d807      	bhi.n	8008918 <_printf_i+0x28>
 8008908:	2f62      	cmp	r7, #98	; 0x62
 800890a:	d80a      	bhi.n	8008922 <_printf_i+0x32>
 800890c:	2f00      	cmp	r7, #0
 800890e:	f000 80d8 	beq.w	8008ac2 <_printf_i+0x1d2>
 8008912:	2f58      	cmp	r7, #88	; 0x58
 8008914:	f000 80a3 	beq.w	8008a5e <_printf_i+0x16e>
 8008918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800891c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008920:	e03a      	b.n	8008998 <_printf_i+0xa8>
 8008922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008926:	2b15      	cmp	r3, #21
 8008928:	d8f6      	bhi.n	8008918 <_printf_i+0x28>
 800892a:	a101      	add	r1, pc, #4	; (adr r1, 8008930 <_printf_i+0x40>)
 800892c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008930:	08008989 	.word	0x08008989
 8008934:	0800899d 	.word	0x0800899d
 8008938:	08008919 	.word	0x08008919
 800893c:	08008919 	.word	0x08008919
 8008940:	08008919 	.word	0x08008919
 8008944:	08008919 	.word	0x08008919
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008919 	.word	0x08008919
 8008950:	08008919 	.word	0x08008919
 8008954:	08008919 	.word	0x08008919
 8008958:	08008919 	.word	0x08008919
 800895c:	08008aa9 	.word	0x08008aa9
 8008960:	080089cd 	.word	0x080089cd
 8008964:	08008a8b 	.word	0x08008a8b
 8008968:	08008919 	.word	0x08008919
 800896c:	08008919 	.word	0x08008919
 8008970:	08008acb 	.word	0x08008acb
 8008974:	08008919 	.word	0x08008919
 8008978:	080089cd 	.word	0x080089cd
 800897c:	08008919 	.word	0x08008919
 8008980:	08008919 	.word	0x08008919
 8008984:	08008a93 	.word	0x08008a93
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	1d1a      	adds	r2, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008998:	2301      	movs	r3, #1
 800899a:	e0a3      	b.n	8008ae4 <_printf_i+0x1f4>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	6829      	ldr	r1, [r5, #0]
 80089a0:	0606      	lsls	r6, r0, #24
 80089a2:	f101 0304 	add.w	r3, r1, #4
 80089a6:	d50a      	bpl.n	80089be <_printf_i+0xce>
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	2e00      	cmp	r6, #0
 80089ae:	da03      	bge.n	80089b8 <_printf_i+0xc8>
 80089b0:	232d      	movs	r3, #45	; 0x2d
 80089b2:	4276      	negs	r6, r6
 80089b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b8:	485e      	ldr	r0, [pc, #376]	; (8008b34 <_printf_i+0x244>)
 80089ba:	230a      	movs	r3, #10
 80089bc:	e019      	b.n	80089f2 <_printf_i+0x102>
 80089be:	680e      	ldr	r6, [r1, #0]
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089c6:	bf18      	it	ne
 80089c8:	b236      	sxthne	r6, r6
 80089ca:	e7ef      	b.n	80089ac <_printf_i+0xbc>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	1d19      	adds	r1, r3, #4
 80089d2:	6029      	str	r1, [r5, #0]
 80089d4:	0601      	lsls	r1, r0, #24
 80089d6:	d501      	bpl.n	80089dc <_printf_i+0xec>
 80089d8:	681e      	ldr	r6, [r3, #0]
 80089da:	e002      	b.n	80089e2 <_printf_i+0xf2>
 80089dc:	0646      	lsls	r6, r0, #25
 80089de:	d5fb      	bpl.n	80089d8 <_printf_i+0xe8>
 80089e0:	881e      	ldrh	r6, [r3, #0]
 80089e2:	4854      	ldr	r0, [pc, #336]	; (8008b34 <_printf_i+0x244>)
 80089e4:	2f6f      	cmp	r7, #111	; 0x6f
 80089e6:	bf0c      	ite	eq
 80089e8:	2308      	moveq	r3, #8
 80089ea:	230a      	movne	r3, #10
 80089ec:	2100      	movs	r1, #0
 80089ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f2:	6865      	ldr	r5, [r4, #4]
 80089f4:	60a5      	str	r5, [r4, #8]
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	bfa2      	ittt	ge
 80089fa:	6821      	ldrge	r1, [r4, #0]
 80089fc:	f021 0104 	bicge.w	r1, r1, #4
 8008a00:	6021      	strge	r1, [r4, #0]
 8008a02:	b90e      	cbnz	r6, 8008a08 <_printf_i+0x118>
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	d04d      	beq.n	8008aa4 <_printf_i+0x1b4>
 8008a08:	4615      	mov	r5, r2
 8008a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a12:	5dc7      	ldrb	r7, [r0, r7]
 8008a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a18:	4637      	mov	r7, r6
 8008a1a:	42bb      	cmp	r3, r7
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	d9f4      	bls.n	8008a0a <_printf_i+0x11a>
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d10b      	bne.n	8008a3c <_printf_i+0x14c>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	07de      	lsls	r6, r3, #31
 8008a28:	d508      	bpl.n	8008a3c <_printf_i+0x14c>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	6861      	ldr	r1, [r4, #4]
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	bfde      	ittt	le
 8008a32:	2330      	movle	r3, #48	; 0x30
 8008a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a3c:	1b52      	subs	r2, r2, r5
 8008a3e:	6122      	str	r2, [r4, #16]
 8008a40:	f8cd a000 	str.w	sl, [sp]
 8008a44:	464b      	mov	r3, r9
 8008a46:	aa03      	add	r2, sp, #12
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	f7ff fee2 	bl	8008814 <_printf_common>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d14c      	bne.n	8008aee <_printf_i+0x1fe>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	b004      	add	sp, #16
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	4835      	ldr	r0, [pc, #212]	; (8008b34 <_printf_i+0x244>)
 8008a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a6c:	6029      	str	r1, [r5, #0]
 8008a6e:	061d      	lsls	r5, r3, #24
 8008a70:	d514      	bpl.n	8008a9c <_printf_i+0x1ac>
 8008a72:	07df      	lsls	r7, r3, #31
 8008a74:	bf44      	itt	mi
 8008a76:	f043 0320 	orrmi.w	r3, r3, #32
 8008a7a:	6023      	strmi	r3, [r4, #0]
 8008a7c:	b91e      	cbnz	r6, 8008a86 <_printf_i+0x196>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f023 0320 	bic.w	r3, r3, #32
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	2310      	movs	r3, #16
 8008a88:	e7b0      	b.n	80089ec <_printf_i+0xfc>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	f043 0320 	orr.w	r3, r3, #32
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	2378      	movs	r3, #120	; 0x78
 8008a94:	4828      	ldr	r0, [pc, #160]	; (8008b38 <_printf_i+0x248>)
 8008a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a9a:	e7e3      	b.n	8008a64 <_printf_i+0x174>
 8008a9c:	0659      	lsls	r1, r3, #25
 8008a9e:	bf48      	it	mi
 8008aa0:	b2b6      	uxthmi	r6, r6
 8008aa2:	e7e6      	b.n	8008a72 <_printf_i+0x182>
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	e7bb      	b.n	8008a20 <_printf_i+0x130>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6826      	ldr	r6, [r4, #0]
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	1d18      	adds	r0, r3, #4
 8008ab0:	6028      	str	r0, [r5, #0]
 8008ab2:	0635      	lsls	r5, r6, #24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0x1cc>
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <_printf_i+0x1d2>
 8008abc:	0670      	lsls	r0, r6, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0x1c8>
 8008ac0:	8019      	strh	r1, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	e7ba      	b.n	8008a40 <_printf_i+0x150>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f7 fba2 	bl	8000220 <memchr>
 8008adc:	b108      	cbz	r0, 8008ae2 <_printf_i+0x1f2>
 8008ade:	1b40      	subs	r0, r0, r5
 8008ae0:	6060      	str	r0, [r4, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aec:	e7a8      	b.n	8008a40 <_printf_i+0x150>
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0ab      	beq.n	8008a54 <_printf_i+0x164>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	079b      	lsls	r3, r3, #30
 8008b00:	d413      	bmi.n	8008b2a <_printf_i+0x23a>
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	4298      	cmp	r0, r3
 8008b08:	bfb8      	it	lt
 8008b0a:	4618      	movlt	r0, r3
 8008b0c:	e7a4      	b.n	8008a58 <_printf_i+0x168>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d09b      	beq.n	8008a54 <_printf_i+0x164>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	9903      	ldr	r1, [sp, #12]
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dcf2      	bgt.n	8008b0e <_printf_i+0x21e>
 8008b28:	e7eb      	b.n	8008b02 <_printf_i+0x212>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	f104 0619 	add.w	r6, r4, #25
 8008b30:	e7f5      	b.n	8008b1e <_printf_i+0x22e>
 8008b32:	bf00      	nop
 8008b34:	080095bd 	.word	0x080095bd
 8008b38:	080095ce 	.word	0x080095ce

08008b3c <_sbrk_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	; (8008b58 <_sbrk_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7f9 fd40 	bl	80025cc <_sbrk>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_sbrk_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_sbrk_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200003ac 	.word	0x200003ac

08008b5c <__sread>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	460c      	mov	r4, r1
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	f000 f8ea 	bl	8008d3c <_read_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	bfab      	itete	ge
 8008b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b70:	181b      	addge	r3, r3, r0
 8008b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b76:	bfac      	ite	ge
 8008b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b7a:	81a3      	strhlt	r3, [r4, #12]
 8008b7c:	bd10      	pop	{r4, pc}

08008b7e <__swrite>:
 8008b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	461f      	mov	r7, r3
 8008b84:	898b      	ldrh	r3, [r1, #12]
 8008b86:	05db      	lsls	r3, r3, #23
 8008b88:	4605      	mov	r5, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	d505      	bpl.n	8008b9c <__swrite+0x1e>
 8008b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b94:	2302      	movs	r3, #2
 8008b96:	2200      	movs	r2, #0
 8008b98:	f000 f868 	bl	8008c6c <_lseek_r>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	4628      	mov	r0, r5
 8008bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb2:	f000 b817 	b.w	8008be4 <_write_r>

08008bb6 <__sseek>:
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	460c      	mov	r4, r1
 8008bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbe:	f000 f855 	bl	8008c6c <_lseek_r>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	bf15      	itete	ne
 8008bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bd2:	81a3      	strheq	r3, [r4, #12]
 8008bd4:	bf18      	it	ne
 8008bd6:	81a3      	strhne	r3, [r4, #12]
 8008bd8:	bd10      	pop	{r4, pc}

08008bda <__sclose>:
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f000 b813 	b.w	8008c08 <_close_r>
	...

08008be4 <_write_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	; (8008c04 <_write_r+0x20>)
 8008be8:	4604      	mov	r4, r0
 8008bea:	4608      	mov	r0, r1
 8008bec:	4611      	mov	r1, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	602a      	str	r2, [r5, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f7f9 fc99 	bl	800252a <_write>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_write_r+0x1e>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_write_r+0x1e>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	200003ac 	.word	0x200003ac

08008c08 <_close_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d06      	ldr	r5, [pc, #24]	; (8008c24 <_close_r+0x1c>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	f7f9 fca5 	bl	8002562 <_close>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d102      	bne.n	8008c22 <_close_r+0x1a>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	b103      	cbz	r3, 8008c22 <_close_r+0x1a>
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	200003ac 	.word	0x200003ac

08008c28 <_fstat_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	; (8008c48 <_fstat_r+0x20>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f9 fca0 	bl	800257a <_fstat>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_fstat_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_fstat_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	200003ac 	.word	0x200003ac

08008c4c <_isatty_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d06      	ldr	r5, [pc, #24]	; (8008c68 <_isatty_r+0x1c>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f9 fc9f 	bl	800259a <_isatty>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_isatty_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_isatty_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	200003ac 	.word	0x200003ac

08008c6c <_lseek_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d07      	ldr	r5, [pc, #28]	; (8008c8c <_lseek_r+0x20>)
 8008c70:	4604      	mov	r4, r0
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	602a      	str	r2, [r5, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7f9 fc98 	bl	80025b0 <_lseek>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_lseek_r+0x1e>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_lseek_r+0x1e>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	200003ac 	.word	0x200003ac

08008c90 <memmove>:
 8008c90:	4288      	cmp	r0, r1
 8008c92:	b510      	push	{r4, lr}
 8008c94:	eb01 0402 	add.w	r4, r1, r2
 8008c98:	d902      	bls.n	8008ca0 <memmove+0x10>
 8008c9a:	4284      	cmp	r4, r0
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	d807      	bhi.n	8008cb0 <memmove+0x20>
 8008ca0:	1e43      	subs	r3, r0, #1
 8008ca2:	42a1      	cmp	r1, r4
 8008ca4:	d008      	beq.n	8008cb8 <memmove+0x28>
 8008ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cae:	e7f8      	b.n	8008ca2 <memmove+0x12>
 8008cb0:	4402      	add	r2, r0
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	d100      	bne.n	8008cba <memmove+0x2a>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc2:	e7f7      	b.n	8008cb4 <memmove+0x24>

08008cc4 <__malloc_lock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__malloc_lock+0x8>)
 8008cc6:	f7ff b9a7 	b.w	8008018 <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200003a0 	.word	0x200003a0

08008cd0 <__malloc_unlock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__malloc_unlock+0x8>)
 8008cd2:	f7ff b9a2 	b.w	800801a <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	200003a0 	.word	0x200003a0

08008cdc <_realloc_r>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	b921      	cbnz	r1, 8008cf2 <_realloc_r+0x16>
 8008ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4611      	mov	r1, r2
 8008cee:	f7ff ba67 	b.w	80081c0 <_malloc_r>
 8008cf2:	b92a      	cbnz	r2, 8008d00 <_realloc_r+0x24>
 8008cf4:	f7ff f9f8 	bl	80080e8 <_free_r>
 8008cf8:	4625      	mov	r5, r4
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	f000 f82e 	bl	8008d60 <_malloc_usable_size_r>
 8008d04:	4284      	cmp	r4, r0
 8008d06:	4607      	mov	r7, r0
 8008d08:	d802      	bhi.n	8008d10 <_realloc_r+0x34>
 8008d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d0e:	d812      	bhi.n	8008d36 <_realloc_r+0x5a>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4640      	mov	r0, r8
 8008d14:	f7ff fa54 	bl	80081c0 <_malloc_r>
 8008d18:	4605      	mov	r5, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0ed      	beq.n	8008cfa <_realloc_r+0x1e>
 8008d1e:	42bc      	cmp	r4, r7
 8008d20:	4622      	mov	r2, r4
 8008d22:	4631      	mov	r1, r6
 8008d24:	bf28      	it	cs
 8008d26:	463a      	movcs	r2, r7
 8008d28:	f7fe fe3a 	bl	80079a0 <memcpy>
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f7ff f9da 	bl	80080e8 <_free_r>
 8008d34:	e7e1      	b.n	8008cfa <_realloc_r+0x1e>
 8008d36:	4635      	mov	r5, r6
 8008d38:	e7df      	b.n	8008cfa <_realloc_r+0x1e>
	...

08008d3c <_read_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_read_r+0x20>)
 8008d40:	4604      	mov	r4, r0
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f7f9 fbd0 	bl	80024f0 <_read>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_read_r+0x1e>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_read_r+0x1e>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200003ac 	.word	0x200003ac

08008d60 <_malloc_usable_size_r>:
 8008d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d64:	1f18      	subs	r0, r3, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfbc      	itt	lt
 8008d6a:	580b      	ldrlt	r3, [r1, r0]
 8008d6c:	18c0      	addlt	r0, r0, r3
 8008d6e:	4770      	bx	lr

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
