
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009708  08009708  000207c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009710  08009710  000207c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c8  20000000  08009718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000207c8  2**0
                  CONTENTS
 10 .bss          0000032c  200007c8  200007c8  000207c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  000207c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019480  00000000  00000000  000207f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c90  00000000  00000000  00039c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  0003eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028809  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf4b  00000000  00000000  00068b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f165e  00000000  00000000  00085a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001770da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006450  00000000  00000000  0017712c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200007c8 	.word	0x200007c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800943c 	.word	0x0800943c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200007cc 	.word	0x200007cc
 80001ec:	0800943c 	.word	0x0800943c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f002 fad1 	bl	8002bd0 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f001 fe48 	bl	80022c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f002 fc17 	bl	8002e7c <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f001 fe38 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200007e4 	.word	0x200007e4
 8000664:	40012000 	.word	0x40012000

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d127      	bne.n	80006da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0x84>)
 80006d6:	f003 faa9 	bl	8003c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <GetSector>:
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetSector(uint32_t Address)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a82      	ldr	r2, [pc, #520]	; (8000908 <GetSector+0x218>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d206      	bcs.n	8000712 <GetSector+0x22>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800070a:	d302      	bcc.n	8000712 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e0f3      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a7d      	ldr	r2, [pc, #500]	; (800090c <GetSector+0x21c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d206      	bcs.n	8000728 <GetSector+0x38>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a7a      	ldr	r2, [pc, #488]	; (8000908 <GetSector+0x218>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d302      	bcc.n	8000728 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e0e8      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a79      	ldr	r2, [pc, #484]	; (8000910 <GetSector+0x220>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d206      	bcs.n	800073e <GetSector+0x4e>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a76      	ldr	r2, [pc, #472]	; (800090c <GetSector+0x21c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d302      	bcc.n	800073e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e0dd      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a74      	ldr	r2, [pc, #464]	; (8000914 <GetSector+0x224>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d806      	bhi.n	8000754 <GetSector+0x64>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a71      	ldr	r2, [pc, #452]	; (8000910 <GetSector+0x220>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d302      	bcc.n	8000754 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800074e:	2303      	movs	r3, #3
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e0d2      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a70      	ldr	r2, [pc, #448]	; (8000918 <GetSector+0x228>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d806      	bhi.n	800076a <GetSector+0x7a>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <GetSector+0x224>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d902      	bls.n	800076a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000764:	2304      	movs	r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e0c7      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a6b      	ldr	r2, [pc, #428]	; (800091c <GetSector+0x22c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d806      	bhi.n	8000780 <GetSector+0x90>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a68      	ldr	r2, [pc, #416]	; (8000918 <GetSector+0x228>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d902      	bls.n	8000780 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800077a:	2305      	movs	r3, #5
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e0bc      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a67      	ldr	r2, [pc, #412]	; (8000920 <GetSector+0x230>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d806      	bhi.n	8000796 <GetSector+0xa6>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a64      	ldr	r2, [pc, #400]	; (800091c <GetSector+0x22c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d902      	bls.n	8000796 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000790:	2306      	movs	r3, #6
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e0b1      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a62      	ldr	r2, [pc, #392]	; (8000924 <GetSector+0x234>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d806      	bhi.n	80007ac <GetSector+0xbc>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a5f      	ldr	r2, [pc, #380]	; (8000920 <GetSector+0x230>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d902      	bls.n	80007ac <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e0a6      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <GetSector+0x238>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d806      	bhi.n	80007c2 <GetSector+0xd2>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a5b      	ldr	r2, [pc, #364]	; (8000924 <GetSector+0x234>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80007bc:	2308      	movs	r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e09b      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a59      	ldr	r2, [pc, #356]	; (800092c <GetSector+0x23c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d806      	bhi.n	80007d8 <GetSector+0xe8>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <GetSector+0x238>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d902      	bls.n	80007d8 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80007d2:	2309      	movs	r3, #9
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e090      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <GetSector+0x240>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d806      	bhi.n	80007ee <GetSector+0xfe>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a52      	ldr	r2, [pc, #328]	; (800092c <GetSector+0x23c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d902      	bls.n	80007ee <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80007e8:	230a      	movs	r3, #10
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e085      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80007f4:	d206      	bcs.n	8000804 <GetSector+0x114>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a4d      	ldr	r2, [pc, #308]	; (8000930 <GetSector+0x240>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d902      	bls.n	8000804 <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;
 80007fe:	230b      	movs	r3, #11
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e07a      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a4b      	ldr	r2, [pc, #300]	; (8000934 <GetSector+0x244>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d206      	bcs.n	800081a <GetSector+0x12a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000812:	d302      	bcc.n	800081a <GetSector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000814:	230c      	movs	r3, #12
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e06f      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a46      	ldr	r2, [pc, #280]	; (8000938 <GetSector+0x248>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d206      	bcs.n	8000830 <GetSector+0x140>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a43      	ldr	r2, [pc, #268]	; (8000934 <GetSector+0x244>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d302      	bcc.n	8000830 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_13;
 800082a:	230d      	movs	r3, #13
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e064      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a42      	ldr	r2, [pc, #264]	; (800093c <GetSector+0x24c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d206      	bcs.n	8000846 <GetSector+0x156>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <GetSector+0x248>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d302      	bcc.n	8000846 <GetSector+0x156>
  {
    sector = FLASH_SECTOR_14;
 8000840:	230e      	movs	r3, #14
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e059      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <GetSector+0x250>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d806      	bhi.n	800085c <GetSector+0x16c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a3a      	ldr	r2, [pc, #232]	; (800093c <GetSector+0x24c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d302      	bcc.n	800085c <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000856:	230f      	movs	r3, #15
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e04e      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a39      	ldr	r2, [pc, #228]	; (8000944 <GetSector+0x254>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d806      	bhi.n	8000872 <GetSector+0x182>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <GetSector+0x250>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d902      	bls.n	8000872 <GetSector+0x182>
  {
    sector = FLASH_SECTOR_16;
 800086c:	2310      	movs	r3, #16
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e043      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a34      	ldr	r2, [pc, #208]	; (8000948 <GetSector+0x258>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d806      	bhi.n	8000888 <GetSector+0x198>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a31      	ldr	r2, [pc, #196]	; (8000944 <GetSector+0x254>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d902      	bls.n	8000888 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_17;
 8000882:	2311      	movs	r3, #17
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e038      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <GetSector+0x25c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d806      	bhi.n	800089e <GetSector+0x1ae>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <GetSector+0x258>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d902      	bls.n	800089e <GetSector+0x1ae>
  {
    sector = FLASH_SECTOR_18;
 8000898:	2312      	movs	r3, #18
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e02d      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <GetSector+0x260>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d806      	bhi.n	80008b4 <GetSector+0x1c4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <GetSector+0x25c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d902      	bls.n	80008b4 <GetSector+0x1c4>
  {
    sector = FLASH_SECTOR_19;
 80008ae:	2313      	movs	r3, #19
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e022      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <GetSector+0x264>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d806      	bhi.n	80008ca <GetSector+0x1da>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <GetSector+0x260>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d902      	bls.n	80008ca <GetSector+0x1da>
  {
    sector = FLASH_SECTOR_20;
 80008c4:	2314      	movs	r3, #20
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e017      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <GetSector+0x268>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d806      	bhi.n	80008e0 <GetSector+0x1f0>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <GetSector+0x264>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d902      	bls.n	80008e0 <GetSector+0x1f0>
  {
    sector = FLASH_SECTOR_21;
 80008da:	2315      	movs	r3, #21
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00c      	b.n	80008fa <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <GetSector+0x26c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d806      	bhi.n	80008f6 <GetSector+0x206>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <GetSector+0x268>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <GetSector+0x206>
  {
    sector = FLASH_SECTOR_22;
 80008f0:	2316      	movs	r3, #22
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e001      	b.n	80008fa <GetSector+0x20a>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
  {
    sector = FLASH_SECTOR_23;
 80008f6:	2317      	movs	r3, #23
 80008f8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	08004000 	.word	0x08004000
 800090c:	08008000 	.word	0x08008000
 8000910:	0800c000 	.word	0x0800c000
 8000914:	0800ffff 	.word	0x0800ffff
 8000918:	0801ffff 	.word	0x0801ffff
 800091c:	0803ffff 	.word	0x0803ffff
 8000920:	0805ffff 	.word	0x0805ffff
 8000924:	0807ffff 	.word	0x0807ffff
 8000928:	0809ffff 	.word	0x0809ffff
 800092c:	080bffff 	.word	0x080bffff
 8000930:	080dffff 	.word	0x080dffff
 8000934:	08104000 	.word	0x08104000
 8000938:	08108000 	.word	0x08108000
 800093c:	0810c000 	.word	0x0810c000
 8000940:	0810ffff 	.word	0x0810ffff
 8000944:	0811ffff 	.word	0x0811ffff
 8000948:	0813ffff 	.word	0x0813ffff
 800094c:	0815ffff 	.word	0x0815ffff
 8000950:	0817ffff 	.word	0x0817ffff
 8000954:	0819ffff 	.word	0x0819ffff
 8000958:	081bffff 	.word	0x081bffff
 800095c:	081dffff 	.word	0x081dffff

08000960 <FlashWritingOne>:
    sectorsize = 128 * 1024;
  }
  return sectorsize;
}

void FlashWritingOne (uint32_t FLASH_USER_ADDR, uint32_t DATA_32)  {
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]

	  HAL_FLASH_Unlock();
 800096a:	f002 fead 	bl	80036c8 <HAL_FLASH_Unlock>

	  NbOfSectors = 1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <FlashWritingOne+0x6c>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
	  FirstSector = GetSector(FLASH_USER_ADDR);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff febb 	bl	80006f0 <GetSector>
 800097a:	4603      	mov	r3, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <FlashWritingOne+0x70>)
 800097e:	6013      	str	r3, [r2, #0]
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <FlashWritingOne+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <FlashWritingOne+0x74>)
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = FirstSector;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <FlashWritingOne+0x70>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <FlashWritingOne+0x74>)
 8000992:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = NbOfSectors;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <FlashWritingOne+0x6c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <FlashWritingOne+0x74>)
 800099a:	60d3      	str	r3, [r2, #12]

	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800099c:	490e      	ldr	r1, [pc, #56]	; (80009d8 <FlashWritingOne+0x78>)
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <FlashWritingOne+0x74>)
 80009a0:	f003 f804 	bl	80039ac <HAL_FLASHEx_Erase>
	  {
	  }

	  Address = FLASH_USER_ADDR;
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <FlashWritingOne+0x7c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <FlashWritingOne+0x7c>)
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	461c      	mov	r4, r3
 80009b4:	4615      	mov	r5, r2
 80009b6:	4622      	mov	r2, r4
 80009b8:	462b      	mov	r3, r5
 80009ba:	2002      	movs	r0, #2
 80009bc:	f002 fe30 	bl	8003620 <HAL_FLASH_Program>

	  HAL_FLASH_Lock();
 80009c0:	f002 fea4 	bl	800370c <HAL_FLASH_Lock>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	20000830 	.word	0x20000830
 80009d0:	2000082c 	.word	0x2000082c
 80009d4:	2000083c 	.word	0x2000083c
 80009d8:	20000838 	.word	0x20000838
 80009dc:	20000834 	.word	0x20000834

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xac>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a6c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0xb0>)
 8000a7e:	f003 f8d5 	bl	8003c2c <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad2:	f003 fa87 	bl	8003fe4 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f001 fbf4 	bl	80022c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae4:	f003 fff7 	bl	8004ad6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f001 fbeb 	bl	80022c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af6:	f004 f82a 	bl	8004b4e <HAL_I2CEx_ConfigDigitalFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f001 fbe2 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000850 	.word	0x20000850
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_I2C_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12c      	bne.n	8000b90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <HAL_I2C_MspInit+0x8c>)
 8000b70:	f003 f85c 	bl	8003c2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <I2C_Scan>:
#include "lcd.h"
#include "i2c.h"
HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <I2C_Scan+0xc0>)
 8000bac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	6020      	str	r0, [r4, #0]
 8000bbc:	3404      	adds	r4, #4
 8000bbe:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb1d 	bl	8000204 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <I2C_Scan+0xc4>)
 8000bd8:	f006 fa57 	bl	800708a <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000be2:	e030      	b.n	8000c46 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b299      	uxth	r1, r3
 8000bec:	230a      	movs	r3, #10
 8000bee:	2201      	movs	r2, #1
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <I2C_Scan+0xc8>)
 8000bf2:	f003 fc39 	bl	8004468 <HAL_I2C_IsDeviceReady>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <I2C_Scan+0xcc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <I2C_Scan+0xcc>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d113      	bne.n	8000c2e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8000c06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <I2C_Scan+0xd0>)
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	f007 fac2 	bl	8008198 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff faf4 	bl	8000204 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4639      	mov	r1, r7
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <I2C_Scan+0xc4>)
 8000c28:	f006 fa2f 	bl	800708a <HAL_UART_Transmit>
 8000c2c:	e006      	b.n	8000c3c <I2C_Scan+0x98>
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2201      	movs	r2, #1
 8000c34:	4910      	ldr	r1, [pc, #64]	; (8000c78 <I2C_Scan+0xd4>)
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <I2C_Scan+0xc4>)
 8000c38:	f006 fa27 	bl	800708a <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000c3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000c46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4c:	d9ca      	bls.n	8000be4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	2202      	movs	r2, #2
 8000c54:	4909      	ldr	r1, [pc, #36]	; (8000c7c <I2C_Scan+0xd8>)
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <I2C_Scan+0xc4>)
 8000c58:	f006 fa17 	bl	800708a <HAL_UART_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3758      	adds	r7, #88	; 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	08009464 	.word	0x08009464
 8000c68:	20000a7c 	.word	0x20000a7c
 8000c6c:	20000850 	.word	0x20000850
 8000c70:	200008a4 	.word	0x200008a4
 8000c74:	08009454 	.word	0x08009454
 8000c78:	0800945c 	.word	0x0800945c
 8000c7c:	08009460 	.word	0x08009460

08000c80 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000c9e:	f003 fbe3 	bl	8004468 <HAL_I2C_IsDeviceReady>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000cac:	e7f1      	b.n	8000c92 <LCD_SendInternal+0x12>
			break;
 8000cae:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f043 030c 	orr.w	r3, r3, #12
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000cce:	7bba      	ldrb	r2, [r7, #14]
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000cde:	7b7a      	ldrb	r2, [r7, #13]
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 030c 	orr.w	r3, r3, #12
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 0208 	add.w	r2, r7, #8
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <LCD_SendInternal+0xa8>)
 8000d10:	f003 faac 	bl	800426c <HAL_I2C_Master_Transmit>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000d18:	2005      	movs	r0, #5
 8000d1a:	f001 ff35 	bl	8002b88 <HAL_Delay>
	return res;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000850 	.word	0x20000850

08000d2c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000d3c:	79b9      	ldrb	r1, [r7, #6]
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff9c 	bl	8000c80 <LCD_SendInternal>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000d60:	79b9      	ldrb	r1, [r7, #6]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff8a 	bl	8000c80 <LCD_SendInternal>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2130      	movs	r1, #48	; 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffd2 	bl	8000d2c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffcd 	bl	8000d2c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	210c      	movs	r1, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffc8 	bl	8000d2c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc3 	bl	8000d2c <LCD_SendCommand>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	6039      	str	r1, [r7, #0]
 8000db8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000dba:	e009      	b.n	8000dd0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffc3 	bl	8000d50 <LCD_SendData>
		str++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f1      	bne.n	8000dbc <LCD_SendString+0xe>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <init>:

void init() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000de8:	f7ff fedc 	bl	8000ba4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000dec:	204e      	movs	r0, #78	; 0x4e
 8000dee:	f7ff ffc1 	bl	8000d74 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	204e      	movs	r0, #78	; 0x4e
 8000df6:	f7ff ff99 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000dfa:	4907      	ldr	r1, [pc, #28]	; (8000e18 <init+0x34>)
 8000dfc:	204e      	movs	r0, #78	; 0x4e
 8000dfe:	f7ff ffd6 	bl	8000dae <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000e02:	21c0      	movs	r1, #192	; 0xc0
 8000e04:	204e      	movs	r0, #78	; 0x4e
 8000e06:	f7ff ff91 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000e0a:	4904      	ldr	r1, [pc, #16]	; (8000e1c <init+0x38>)
 8000e0c:	204e      	movs	r0, #78	; 0x4e
 8000e0e:	f7ff ffce 	bl	8000dae <LCD_SendString>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	0800947c 	.word	0x0800947c
 8000e1c:	0800948c 	.word	0x0800948c

08000e20 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000e28:	1d39      	adds	r1, r7, #4
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <__io_putchar+0x20>)
 8000e30:	f006 f92b 	bl	800708a <HAL_UART_Transmit>
	return ch;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000a7c 	.word	0x20000a7c

08000e44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e48:	f001 fe2c 	bl	8002aa4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e4c:	f000 f84c 	bl	8000ee8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e50:	f7ff fdc6 	bl	80009e0 <MX_GPIO_Init>
	MX_RTC_Init();
 8000e54:	f001 fa3e 	bl	80022d4 <MX_RTC_Init>
	MX_I2C1_Init();
 8000e58:	f7ff fe1c 	bl	8000a94 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8000e5c:	f001 fd86 	bl	800296c <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000e60:	f7ff fbb0 	bl	80005c4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000e64:	f001 fc38 	bl	80026d8 <MX_TIM3_Init>
	MX_TIM2_Init();
 8000e68:	f001 fbe8 	bl	800263c <MX_TIM2_Init>
	MX_TIM4_Init();
 8000e6c:	f001 fcaa 	bl	80027c4 <MX_TIM4_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000e70:	f000 f8ac 	bl	8000fcc <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000e74:	4815      	ldr	r0, [pc, #84]	; (8000ecc <main+0x88>)
 8000e76:	f005 f85f 	bl	8005f38 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <main+0x8c>)
 8000e7c:	f005 f85c 	bl	8005f38 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	init();
 8000e80:	f7ff ffb0 	bl	8000de4 <init>
	LCD_Init(LCD_ADDR);
 8000e84:	204e      	movs	r0, #78	; 0x4e
 8000e86:	f7ff ff75 	bl	8000d74 <LCD_Init>
	up = 0;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <main+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <main+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <main+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <main+0x9c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <main+0xa0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <main+0xa0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <main+0xa0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <main+0xa0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	70da      	strb	r2, [r3, #3]

		//Main loop
		mode_func_Normal();
 8000eba:	f000 fef9 	bl	8001cb0 <mode_func_Normal>
		mode_func_SetTime();
 8000ebe:	f001 f81f 	bl	8001f00 <mode_func_SetTime>
		mode_func_SetAlarm();
 8000ec2:	f001 f899 	bl	8001ff8 <mode_func_SetAlarm>
		mode_func_SetSong();
 8000ec6:	f001 f91f 	bl	8002108 <mode_func_SetSong>
		sTime_temp.Hours = 0;
 8000eca:	e7ea      	b.n	8000ea2 <main+0x5e>
 8000ecc:	200009a4 	.word	0x200009a4
 8000ed0:	20000a34 	.word	0x20000a34
 8000ed4:	20000900 	.word	0x20000900
 8000ed8:	20000901 	.word	0x20000901
 8000edc:	20000902 	.word	0x20000902
 8000ee0:	20000903 	.word	0x20000903
 8000ee4:	20000944 	.word	0x20000944

08000ee8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2230      	movs	r2, #48	; 0x30
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 f8b8 	bl	800806c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <SystemClock_Config+0xdc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <SystemClock_Config+0xdc>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <SystemClock_Config+0xdc>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <SystemClock_Config+0xe0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <SystemClock_Config+0xe0>)
 8000f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <SystemClock_Config+0xe0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000f44:	2306      	movs	r3, #6
 8000f46:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f50:	2310      	movs	r3, #16
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f54:	2302      	movs	r3, #2
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000f60:	23b4      	movs	r3, #180	; 0xb4
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fe7b 	bl	8004c6c <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x98>
		Error_Handler();
 8000f7c:	f001 f9a4 	bl	80022c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000f80:	f003 fe24 	bl	8004bcc <HAL_PWREx_EnableOverDrive>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xa6>
		Error_Handler();
 8000f8a:	f001 f99d 	bl	80022c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2302      	movs	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2105      	movs	r1, #5
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f8d5 	bl	800515c <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xd4>
		Error_Handler();
 8000fb8:	f001 f986 	bl	80022c8 <Error_Handler>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	; 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2027      	movs	r0, #39	; 0x27
 8000fd6:	f002 fa5a 	bl	800348e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fda:	2027      	movs	r0, #39	; 0x27
 8000fdc:	f002 fa73 	bl	80034c6 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2028      	movs	r0, #40	; 0x28
 8000fe6:	f002 fa52 	bl	800348e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f002 fa6b 	bl	80034c6 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f002 fa4a 	bl	800348e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f002 fa63 	bl	80034c6 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	201e      	movs	r0, #30
 8001006:	f002 fa42 	bl	800348e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800100a:	201e      	movs	r0, #30
 800100c:	f002 fa5b 	bl	80034c6 <HAL_NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <InitFlag>:

/* USER CODE BEGIN 4 */
//init user button & LCD
void InitFlag(int num) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	LCD_Init(LCD_ADDR);
 800101c:	204e      	movs	r0, #78	; 0x4e
 800101e:	f7ff fea9 	bl	8000d74 <LCD_Init>
	apply_flag = 0;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <InitFlag+0x3c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
	get_time_apply = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <InitFlag+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	rising_edge = 0;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <InitFlag+0x44>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
	falling_edge = 0;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <InitFlag+0x48>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	mode = num;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <InitFlag+0x4c>)
 8001040:	701a      	strb	r2, [r3, #0]
	strcpy(lcdup, "");
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <InitFlag+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200008c8 	.word	0x200008c8
 8001054:	200008cc 	.word	0x200008cc
 8001058:	200008e9 	.word	0x200008e9
 800105c:	200008ea 	.word	0x200008ea
 8001060:	200008eb 	.word	0x200008eb
 8001064:	200008d8 	.word	0x200008d8

08001068 <button_status>:
ADC_StatusTypeDef button_status(uint32_t value) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b63      	cmp	r3, #99	; 0x63
 8001074:	d801      	bhi.n	800107a <button_status+0x12>
		return UP;
 8001076:	2302      	movs	r3, #2
 8001078:	e029      	b.n	80010ce <button_status+0x66>
	if (800 < value && value < 900)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001080:	d905      	bls.n	800108e <button_status+0x26>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001088:	d201      	bcs.n	800108e <button_status+0x26>
		return DOWN;
 800108a:	2303      	movs	r3, #3
 800108c:	e01f      	b.n	80010ce <button_status+0x66>
	if (1800 < value && value < 2000)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001094:	d905      	bls.n	80010a2 <button_status+0x3a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800109c:	d201      	bcs.n	80010a2 <button_status+0x3a>
		return LEFT;
 800109e:	2304      	movs	r3, #4
 80010a0:	e015      	b.n	80010ce <button_status+0x66>
	if (2800 < value && value < 3200)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80010a8:	d905      	bls.n	80010b6 <button_status+0x4e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80010b0:	d201      	bcs.n	80010b6 <button_status+0x4e>
		return RIGHT;
 80010b2:	2305      	movs	r3, #5
 80010b4:	e00b      	b.n	80010ce <button_status+0x66>
	if (4000 < value && value < 5000)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80010bc:	d906      	bls.n	80010cc <button_status+0x64>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d801      	bhi.n	80010cc <button_status+0x64>
		return SELECT;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <button_status+0x66>

	return NONE;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <screen>:

void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 80010dc:	b084      	sub	sp, #16
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	f107 001c 	add.w	r0, r7, #28
 80010ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	4a16      	ldr	r2, [pc, #88]	; (8001154 <screen+0x78>)
 80010fa:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 80010fc:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 80010fe:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8001100:	7f7b      	ldrb	r3, [r7, #29]
 8001102:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001104:	9101      	str	r1, [sp, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4603      	mov	r3, r0
 800110a:	4913      	ldr	r1, [pc, #76]	; (8001158 <screen+0x7c>)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <screen+0x80>)
 800110e:	f007 f843 	bl	8008198 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001112:	21c0      	movs	r1, #192	; 0xc0
 8001114:	204e      	movs	r0, #78	; 0x4e
 8001116:	f7ff fe09 	bl	8000d2c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 800111a:	4910      	ldr	r1, [pc, #64]	; (800115c <screen+0x80>)
 800111c:	204e      	movs	r0, #78	; 0x4e
 800111e:	f7ff fe46 	bl	8000dae <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e006      	b.n	8001136 <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001128:	2110      	movs	r1, #16
 800112a:	204e      	movs	r0, #78	; 0x4e
 800112c:	f7ff fdfe 	bl	8000d2c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f1c3 030b 	rsb	r3, r3, #11
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbf2      	blt.n	8001128 <screen+0x4c>
	}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114e:	b004      	add	sp, #16
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000750 	.word	0x20000750
 8001158:	080094dc 	.word	0x080094dc
 800115c:	20000930 	.word	0x20000930

08001160 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001170:	f002 ff08 	bl	8003f84 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d114      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x44>
		rising_edge++;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x88>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001184:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <HAL_GPIO_EXTI_Callback+0x8c>)
 800118e:	f006 ff75 	bl	800807c <iprintf>
		if (rising_edge == 1) {
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d104      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x44>
			start_tick = HAL_GetTick();
 800119a:	f001 fce9 	bl	8002b70 <HAL_GetTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x90>)
 80011a2:	6013      	str	r3, [r2, #0]
		}
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x84>)
 80011aa:	f002 feeb 	bl	8003f84 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d113      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x7c>
		if (rising_edge == 0) {
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x88>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <HAL_GPIO_EXTI_Callback+0x64>
			falling_edge = 0;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e005      	b.n	80011d0 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			falling_edge++;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80011ce:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x94>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x98>)
 80011d8:	f006 ff50 	bl	800807c <iprintf>
	}

}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020800 	.word	0x40020800
 80011e8:	200008e9 	.word	0x200008e9
 80011ec:	080094f0 	.word	0x080094f0
 80011f0:	200008ec 	.word	0x200008ec
 80011f4:	200008ea 	.word	0x200008ea
 80011f8:	08009504 	.word	0x08009504

080011fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d15d      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0xce>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 800120e:	483b      	ldr	r0, [pc, #236]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001210:	f001 fe27 	bl	8002e62 <HAL_ADC_GetValue>
 8001214:	4603      	mov	r3, r0
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001218:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800121a:	4838      	ldr	r0, [pc, #224]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x100>)
 800121c:	f001 fdee 	bl	8002dfc <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff1f 	bl	8001068 <button_status>
 800122a:	4603      	mov	r3, r0
 800122c:	2b02      	cmp	r3, #2
 800122e:	d105      	bne.n	800123c <HAL_TIM_PeriodElapsedCallback+0x40>
			up++;
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800123a:	701a      	strb	r2, [r3, #0]
//			printf("UP : %d\r\n", up);
		}
		if (button_status(ADC_value) == DOWN) {
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff11 	bl	8001068 <button_status>
 8001246:	4603      	mov	r3, r0
 8001248:	2b03      	cmp	r3, #3
 800124a:	d105      	bne.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x5c>
			down++;
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001256:	701a      	strb	r2, [r3, #0]
//			printf("DOWN : %d\r\n", down);
		}
		if (button_status(ADC_value) == LEFT) {
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff03 	bl	8001068 <button_status>
 8001262:	4603      	mov	r3, r0
 8001264:	2b04      	cmp	r3, #4
 8001266:	d105      	bne.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x78>
			left++;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001272:	701a      	strb	r2, [r3, #0]
//			printf("LEFT : %d\r\n", left);
		}
		if (button_status(ADC_value) == RIGHT) {
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fef5 	bl	8001068 <button_status>
 800127e:	4603      	mov	r3, r0
 8001280:	2b05      	cmp	r3, #5
 8001282:	d105      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0x94>
			right++;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800128e:	701a      	strb	r2, [r3, #0]
//			printf("RIGHT : %d\r\n", right);
		}

		if (apply_flag > 0) {
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			get_time_apply++;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012a0:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0xb8>
			get_time_exit++;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80012b2:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012bc:	6013      	str	r3, [r2, #0]
		printf("%d\r\n", ADC_value);
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012c6:	f006 fed9 	bl	800807c <iprintf>
	}

	if (htim->Instance == TIM4) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10f      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0xf8>
		if (flag_alarm > 0) {
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0xec>
			count_bit++;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e002      	b.n	80012ee <HAL_TIM_PeriodElapsedCallback+0xf2>
		} else {
			count_bit = 0;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
		}
		flag_bit_1ms = 1;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
	}

}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200007e4 	.word	0x200007e4
 8001300:	200008fc 	.word	0x200008fc
 8001304:	20000900 	.word	0x20000900
 8001308:	20000901 	.word	0x20000901
 800130c:	20000902 	.word	0x20000902
 8001310:	20000903 	.word	0x20000903
 8001314:	200008c8 	.word	0x200008c8
 8001318:	200008cc 	.word	0x200008cc
 800131c:	200008d0 	.word	0x200008d0
 8001320:	200008d4 	.word	0x200008d4
 8001324:	200008c4 	.word	0x200008c4
 8001328:	08009518 	.word	0x08009518
 800132c:	40000800 	.word	0x40000800
 8001330:	200008b0 	.word	0x200008b0
 8001334:	200008a8 	.word	0x200008a8
 8001338:	200008ac 	.word	0x200008ac

0800133c <note>:

void note(char pitch_text, char octave_text, char temp_text, int time,
		int volume) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	71bb      	strb	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	717b      	strb	r3, [r7, #5]

	if (flag_bit_1ms == 1) {
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <note+0xb8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d148      	bne.n	80013ea <note+0xae>
		int pitch = pitch_change(pitch_text);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f84e 	bl	80013fc <pitch_change>
 8001360:	4603      	mov	r3, r0
 8001362:	61fb      	str	r3, [r7, #28]
		int octave = octave_change(octave_text);
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f883 	bl	8001472 <octave_change>
 800136c:	4603      	mov	r3, r0
 800136e:	613b      	str	r3, [r7, #16]
		int temp = temp_change(temp_text);
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f88a 	bl	800148c <temp_change>
 8001378:	4603      	mov	r3, r0
 800137a:	60fb      	str	r3, [r7, #12]

		// avoid error(ARR == CCR)
		if (volume <= 2) {
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	2b02      	cmp	r3, #2
 8001380:	dc01      	bgt.n	8001386 <note+0x4a>
			volume = 2;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// setting the octave
		if (octave != 4) {
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d022      	beq.n	80013d2 <note+0x96>
			if (octave < 4) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b03      	cmp	r3, #3
 8001390:	dc0f      	bgt.n	80013b2 <note+0x76>
				for (int i = 0; i < 4 - octave; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	e005      	b.n	80013a4 <note+0x68>
					pitch *= 2;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < 4 - octave; i++) {
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f1c3 0304 	rsb	r3, r3, #4
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf3      	blt.n	8001398 <note+0x5c>
 80013b0:	e00f      	b.n	80013d2 <note+0x96>
				}
			} else {
				for (int i = 0; i < octave - 4; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e007      	b.n	80013c8 <note+0x8c>
					pitch /= 2;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	0fda      	lsrs	r2, r3, #31
 80013bc:	4413      	add	r3, r2
 80013be:	105b      	asrs	r3, r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < octave - 4; i++) {
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3b04      	subs	r3, #4
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbf2      	blt.n	80013b8 <note+0x7c>
				}
			}
		}

		TIM3->ARR = pitch;
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <note+0xbc>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR3 = pitch / volume;
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <note+0xbc>)
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c

		flag_bit_1ms = 0;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <note+0xb8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
	}
}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200008ac 	.word	0x200008ac
 80013f8:	40000400 	.word	0x40000400

080013fc <pitch_change>:
uint32_t pitch_change(char pitch_text) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b4e      	cmp	r3, #78	; 0x4e
 800140a:	d101      	bne.n	8001410 <pitch_change+0x14>
		return N;
 800140c:	2300      	movs	r3, #0
 800140e:	e02a      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'C') {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b43      	cmp	r3, #67	; 0x43
 8001414:	d102      	bne.n	800141c <pitch_change+0x20>
		return C;
 8001416:	f642 53f2 	movw	r3, #11762	; 0x2df2
 800141a:	e024      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'D') {
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b44      	cmp	r3, #68	; 0x44
 8001420:	d102      	bne.n	8001428 <pitch_change+0x2c>
		return D;
 8001422:	f642 03e5 	movw	r3, #10469	; 0x28e5
 8001426:	e01e      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'E') {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b45      	cmp	r3, #69	; 0x45
 800142c:	d102      	bne.n	8001434 <pitch_change+0x38>
		return E;
 800142e:	f242 4366 	movw	r3, #9318	; 0x2466
 8001432:	e018      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'F') {
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b46      	cmp	r3, #70	; 0x46
 8001438:	d102      	bne.n	8001440 <pitch_change+0x44>
		return F;
 800143a:	f242 2357 	movw	r3, #8791	; 0x2257
 800143e:	e012      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'G') {
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b47      	cmp	r3, #71	; 0x47
 8001444:	d102      	bne.n	800144c <pitch_change+0x50>
		return G;
 8001446:	f641 6391 	movw	r3, #7825	; 0x1e91
 800144a:	e00c      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'A') {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b41      	cmp	r3, #65	; 0x41
 8001450:	d102      	bne.n	8001458 <pitch_change+0x5c>
		return A;
 8001452:	f641 3336 	movw	r3, #6966	; 0x1b36
 8001456:	e006      	b.n	8001466 <pitch_change+0x6a>
	} else if (pitch_text == 'B') {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b42      	cmp	r3, #66	; 0x42
 800145c:	d102      	bne.n	8001464 <pitch_change+0x68>
		return B;
 800145e:	f641 0338 	movw	r3, #6200	; 0x1838
 8001462:	e000      	b.n	8001466 <pitch_change+0x6a>
	} else {
		return N;
 8001464:	2300      	movs	r3, #0
	}
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <octave_change>:
uint32_t octave_change(char octave_text) {
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3b30      	subs	r3, #48	; 0x30
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <temp_change>:
uint32_t temp_change(char temp_text) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b4e      	cmp	r3, #78	; 0x4e
 800149a:	d101      	bne.n	80014a0 <temp_change+0x14>
		return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e00b      	b.n	80014b8 <temp_change+0x2c>
	} else if (temp_text == 'S') {
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b53      	cmp	r3, #83	; 0x53
 80014a4:	d101      	bne.n	80014aa <temp_change+0x1e>
		return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e006      	b.n	80014b8 <temp_change+0x2c>
	} else if (temp_text == 'F') {
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b46      	cmp	r3, #70	; 0x46
 80014ae:	d102      	bne.n	80014b6 <temp_change+0x2a>
		return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e000      	b.n	80014b8 <temp_change+0x2c>
	} else {
		return 0;
 80014b6:	2300      	movs	r3, #0
	}
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <note_address>:

char* note_address(int song_num, int count_note) {
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	char *song_temp_note;

	if (song_num == 1) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <note_address+0x1c>
		song_temp_note = &song_note_1[count_note][0];
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <note_address+0x3c>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e007      	b.n	80014f0 <note_address+0x2c>
	} else if (song_num == 2) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d104      	bne.n	80014f0 <note_address+0x2c>
		song_temp_note = &song_note_2[count_note][0];
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <note_address+0x40>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	60fb      	str	r3, [r7, #12]
	}

	return song_temp_note;
 80014f0:	68fb      	ldr	r3, [r7, #12]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000018 	.word	0x20000018
 8001504:	200005fc 	.word	0x200005fc

08001508 <time_value>:

int time_value(int song_num, int count_note) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	int song_time;

	if (song_num == 1) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <time_value+0x1c>
		song_time = song_time_1[count_note];
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <time_value+0x3c>)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e007      	b.n	8001534 <time_value+0x2c>
	}

	else if (song_num == 2) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d104      	bne.n	8001534 <time_value+0x2c>
		song_time = song_time_2[count_note];
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <time_value+0x40>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	60fb      	str	r3, [r7, #12]
	}
	return song_time;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000030c 	.word	0x2000030c
 8001548:	200006a8 	.word	0x200006a8

0800154c <adc_up>:

void adc_up(int up) {
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
 8001552:	6078      	str	r0, [r7, #4]
	if (up > 0) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f340 810d 	ble.w	8001776 <adc_up+0x22a>
		//AM or PM switching
		if (cursor == 0) {
 800155c:	4b88      	ldr	r3, [pc, #544]	; (8001780 <adc_up+0x234>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d13c      	bne.n	80015de <adc_up+0x92>
			if (sTime_AL.TimeFormat == 0) {
 8001564:	4b87      	ldr	r3, [pc, #540]	; (8001784 <adc_up+0x238>)
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d119      	bne.n	80015a0 <adc_up+0x54>
				sTime_AL.TimeFormat = 1;
 800156c:	4b85      	ldr	r3, [pc, #532]	; (8001784 <adc_up+0x238>)
 800156e:	2201      	movs	r2, #1
 8001570:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 0) {
 8001572:	4b84      	ldr	r3, [pc, #528]	; (8001784 <adc_up+0x238>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <adc_up+0x34>
					sTime_AL.Hours = 12;
 800157a:	4b82      	ldr	r3, [pc, #520]	; (8001784 <adc_up+0x238>)
 800157c:	220c      	movs	r2, #12
 800157e:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 8001580:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <adc_up+0x234>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461d      	mov	r5, r3
 8001586:	4b7f      	ldr	r3, [pc, #508]	; (8001784 <adc_up+0x238>)
 8001588:	466c      	mov	r4, sp
 800158a:	f103 020c 	add.w	r2, r3, #12
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	e884 0003 	stmia.w	r4, {r0, r1}
 8001596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001598:	4628      	mov	r0, r5
 800159a:	f7ff fd9f 	bl	80010dc <screen>
 800159e:	e0e8      	b.n	8001772 <adc_up+0x226>

			} else if (sTime_AL.TimeFormat == 1) {
 80015a0:	4b78      	ldr	r3, [pc, #480]	; (8001784 <adc_up+0x238>)
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 80e4 	bne.w	8001772 <adc_up+0x226>
				sTime_AL.TimeFormat = 0;
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <adc_up+0x238>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 12) {
 80015b0:	4b74      	ldr	r3, [pc, #464]	; (8001784 <adc_up+0x238>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d102      	bne.n	80015be <adc_up+0x72>
					sTime_AL.Hours = 0;
 80015b8:	4b72      	ldr	r3, [pc, #456]	; (8001784 <adc_up+0x238>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 80015be:	4b70      	ldr	r3, [pc, #448]	; (8001780 <adc_up+0x234>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461d      	mov	r5, r3
 80015c4:	4b6f      	ldr	r3, [pc, #444]	; (8001784 <adc_up+0x238>)
 80015c6:	466c      	mov	r4, sp
 80015c8:	f103 020c 	add.w	r2, r3, #12
 80015cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	4628      	mov	r0, r5
 80015d8:	f7ff fd80 	bl	80010dc <screen>
 80015dc:	e0c9      	b.n	8001772 <adc_up+0x226>
			}
		}

		// 10H switching
		else if (cursor == 3) {
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <adc_up+0x234>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d119      	bne.n	800161a <adc_up+0xce>

			if (sTime_AL.Hours < 3) {
 80015e6:	4b67      	ldr	r3, [pc, #412]	; (8001784 <adc_up+0x238>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d805      	bhi.n	80015fa <adc_up+0xae>
				sTime_AL.Hours += 10;
 80015ee:	4b65      	ldr	r3, [pc, #404]	; (8001784 <adc_up+0x238>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	330a      	adds	r3, #10
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b63      	ldr	r3, [pc, #396]	; (8001784 <adc_up+0x238>)
 80015f8:	701a      	strb	r2, [r3, #0]
			}
			screen(cursor, sTime_AL);
 80015fa:	4b61      	ldr	r3, [pc, #388]	; (8001780 <adc_up+0x234>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461d      	mov	r5, r3
 8001600:	4b60      	ldr	r3, [pc, #384]	; (8001784 <adc_up+0x238>)
 8001602:	466c      	mov	r4, sp
 8001604:	f103 020c 	add.w	r2, r3, #12
 8001608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001612:	4628      	mov	r0, r5
 8001614:	f7ff fd62 	bl	80010dc <screen>
 8001618:	e0ab      	b.n	8001772 <adc_up+0x226>
		}

		// 1H switching
		else if (cursor == 4) {
 800161a:	4b59      	ldr	r3, [pc, #356]	; (8001780 <adc_up+0x234>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b04      	cmp	r3, #4
 8001620:	d130      	bne.n	8001684 <adc_up+0x138>

			//AM
			if (sTime_AL.TimeFormat == 0) {
 8001622:	4b58      	ldr	r3, [pc, #352]	; (8001784 <adc_up+0x238>)
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10a      	bne.n	8001640 <adc_up+0xf4>
				// 0 ~ 11
				if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 800162a:	4b56      	ldr	r3, [pc, #344]	; (8001784 <adc_up+0x238>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d818      	bhi.n	8001664 <adc_up+0x118>
					sTime_AL.Hours++;
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <adc_up+0x238>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <adc_up+0x238>)
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e011      	b.n	8001664 <adc_up+0x118>
				}
			}
			//PM
			else if (sTime_AL.TimeFormat == 1) {
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <adc_up+0x238>)
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10d      	bne.n	8001664 <adc_up+0x118>

				// 1 ~ 12
				if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 8001648:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <adc_up+0x238>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <adc_up+0x118>
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <adc_up+0x238>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0b      	cmp	r3, #11
 8001656:	d805      	bhi.n	8001664 <adc_up+0x118>
					sTime_AL.Hours++;
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <adc_up+0x238>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <adc_up+0x238>)
 8001662:	701a      	strb	r2, [r3, #0]
				}
			}
			screen(cursor, sTime_AL);
 8001664:	4b46      	ldr	r3, [pc, #280]	; (8001780 <adc_up+0x234>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461d      	mov	r5, r3
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <adc_up+0x238>)
 800166c:	466c      	mov	r4, sp
 800166e:	f103 020c 	add.w	r2, r3, #12
 8001672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001676:	e884 0003 	stmia.w	r4, {r0, r1}
 800167a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167c:	4628      	mov	r0, r5
 800167e:	f7ff fd2d 	bl	80010dc <screen>
 8001682:	e076      	b.n	8001772 <adc_up+0x226>
		}

		// 10M switching
		else if (cursor == 6) {
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <adc_up+0x234>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b06      	cmp	r3, #6
 800168a:	d119      	bne.n	80016c0 <adc_up+0x174>
			if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <adc_up+0x238>)
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	2b31      	cmp	r3, #49	; 0x31
 8001692:	d805      	bhi.n	80016a0 <adc_up+0x154>
				sTime_AL.Minutes += 10;
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <adc_up+0x238>)
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	330a      	adds	r3, #10
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <adc_up+0x238>)
 800169e:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <adc_up+0x234>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461d      	mov	r5, r3
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <adc_up+0x238>)
 80016a8:	466c      	mov	r4, sp
 80016aa:	f103 020c 	add.w	r2, r3, #12
 80016ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80016b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b8:	4628      	mov	r0, r5
 80016ba:	f7ff fd0f 	bl	80010dc <screen>
 80016be:	e058      	b.n	8001772 <adc_up+0x226>
		}
		// 1M switching
		else if (cursor == 7) {
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <adc_up+0x234>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d119      	bne.n	80016fc <adc_up+0x1b0>
			if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <adc_up+0x238>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b3a      	cmp	r3, #58	; 0x3a
 80016ce:	d805      	bhi.n	80016dc <adc_up+0x190>
				sTime_AL.Minutes += 1;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <adc_up+0x238>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <adc_up+0x238>)
 80016da:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <adc_up+0x234>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461d      	mov	r5, r3
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <adc_up+0x238>)
 80016e4:	466c      	mov	r4, sp
 80016e6:	f103 020c 	add.w	r2, r3, #12
 80016ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80016f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f4:	4628      	mov	r0, r5
 80016f6:	f7ff fcf1 	bl	80010dc <screen>
 80016fa:	e03a      	b.n	8001772 <adc_up+0x226>
		}

		// 10S switching
		else if (cursor == 9) {
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <adc_up+0x234>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d119      	bne.n	8001738 <adc_up+0x1ec>
			if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <adc_up+0x238>)
 8001706:	789b      	ldrb	r3, [r3, #2]
 8001708:	2b31      	cmp	r3, #49	; 0x31
 800170a:	d805      	bhi.n	8001718 <adc_up+0x1cc>
				sTime_AL.Seconds += 10;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <adc_up+0x238>)
 800170e:	789b      	ldrb	r3, [r3, #2]
 8001710:	330a      	adds	r3, #10
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <adc_up+0x238>)
 8001716:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <adc_up+0x234>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461d      	mov	r5, r3
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <adc_up+0x238>)
 8001720:	466c      	mov	r4, sp
 8001722:	f103 020c 	add.w	r2, r3, #12
 8001726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172a:	e884 0003 	stmia.w	r4, {r0, r1}
 800172e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001730:	4628      	mov	r0, r5
 8001732:	f7ff fcd3 	bl	80010dc <screen>
 8001736:	e01c      	b.n	8001772 <adc_up+0x226>
		}
		// 1S switching
		else if (cursor == 10) {
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <adc_up+0x234>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b0a      	cmp	r3, #10
 800173e:	d118      	bne.n	8001772 <adc_up+0x226>
			if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <adc_up+0x238>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	2b3a      	cmp	r3, #58	; 0x3a
 8001746:	d805      	bhi.n	8001754 <adc_up+0x208>
				sTime_AL.Seconds += 1;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <adc_up+0x238>)
 800174a:	789b      	ldrb	r3, [r3, #2]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <adc_up+0x238>)
 8001752:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <adc_up+0x234>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461d      	mov	r5, r3
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <adc_up+0x238>)
 800175c:	466c      	mov	r4, sp
 800175e:	f103 020c 	add.w	r2, r3, #12
 8001762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001766:	e884 0003 	stmia.w	r4, {r0, r1}
 800176a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176c:	4628      	mov	r0, r5
 800176e:	f7ff fcb5 	bl	80010dc <screen>
		}

		// clear the up flag
		up = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
	}
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}
 800177e:	bf00      	nop
 8001780:	200008f8 	.word	0x200008f8
 8001784:	2000096c 	.word	0x2000096c

08001788 <adc_down>:

void adc_down(int down) {
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af02      	add	r7, sp, #8
 800178e:	6078      	str	r0, [r7, #4]
	if (down > 0) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f340 80e8 	ble.w	8001968 <adc_down+0x1e0>

		//AM or PM switching
		if (cursor == 0) {
 8001798:	4b75      	ldr	r3, [pc, #468]	; (8001970 <adc_down+0x1e8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d13c      	bne.n	800181a <adc_down+0x92>
			if (sTime_AL.TimeFormat == 0) {
 80017a0:	4b74      	ldr	r3, [pc, #464]	; (8001974 <adc_down+0x1ec>)
 80017a2:	78db      	ldrb	r3, [r3, #3]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d119      	bne.n	80017dc <adc_down+0x54>
				sTime_AL.TimeFormat = 1;
 80017a8:	4b72      	ldr	r3, [pc, #456]	; (8001974 <adc_down+0x1ec>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 0) {
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <adc_down+0x1ec>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <adc_down+0x34>
					sTime_AL.Hours = 12;
 80017b6:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <adc_down+0x1ec>)
 80017b8:	220c      	movs	r2, #12
 80017ba:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 80017bc:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <adc_down+0x1e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461d      	mov	r5, r3
 80017c2:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <adc_down+0x1ec>)
 80017c4:	466c      	mov	r4, sp
 80017c6:	f103 020c 	add.w	r2, r3, #12
 80017ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80017d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d4:	4628      	mov	r0, r5
 80017d6:	f7ff fc81 	bl	80010dc <screen>
 80017da:	e0c3      	b.n	8001964 <adc_down+0x1dc>
			} else if (sTime_AL.TimeFormat == 1) {
 80017dc:	4b65      	ldr	r3, [pc, #404]	; (8001974 <adc_down+0x1ec>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 80bf 	bne.w	8001964 <adc_down+0x1dc>
				sTime_AL.TimeFormat = 0;
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <adc_down+0x1ec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	70da      	strb	r2, [r3, #3]
				if (sTime_AL.Hours == 12) {
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <adc_down+0x1ec>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d102      	bne.n	80017fa <adc_down+0x72>
					sTime_AL.Hours = 0;
 80017f4:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <adc_down+0x1ec>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
				}
				screen(cursor, sTime_AL);
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <adc_down+0x1e8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461d      	mov	r5, r3
 8001800:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <adc_down+0x1ec>)
 8001802:	466c      	mov	r4, sp
 8001804:	f103 020c 	add.w	r2, r3, #12
 8001808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001812:	4628      	mov	r0, r5
 8001814:	f7ff fc62 	bl	80010dc <screen>
 8001818:	e0a4      	b.n	8001964 <adc_down+0x1dc>
			}
		}

		// 1H switching
		else if (cursor == 4) {
 800181a:	4b55      	ldr	r3, [pc, #340]	; (8001970 <adc_down+0x1e8>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d119      	bne.n	8001856 <adc_down+0xce>
			if (sTime_AL.Hours > 0) {
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <adc_down+0x1ec>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <adc_down+0xae>
				sTime_AL.Hours--;
 800182a:	4b52      	ldr	r3, [pc, #328]	; (8001974 <adc_down+0x1ec>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <adc_down+0x1ec>)
 8001834:	701a      	strb	r2, [r3, #0]
			}
			screen(cursor, sTime_AL);
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <adc_down+0x1e8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461d      	mov	r5, r3
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <adc_down+0x1ec>)
 800183e:	466c      	mov	r4, sp
 8001840:	f103 020c 	add.w	r2, r3, #12
 8001844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001848:	e884 0003 	stmia.w	r4, {r0, r1}
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	4628      	mov	r0, r5
 8001850:	f7ff fc44 	bl	80010dc <screen>
 8001854:	e086      	b.n	8001964 <adc_down+0x1dc>
		}

		// 10M switching
		else if (cursor == 6) {
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <adc_down+0x1e8>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d11d      	bne.n	800189a <adc_down+0x112>
			if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 800185e:	4b45      	ldr	r3, [pc, #276]	; (8001974 <adc_down+0x1ec>)
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <adc_down+0xf2>
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <adc_down+0x1ec>)
 8001868:	785b      	ldrb	r3, [r3, #1]
 800186a:	2b32      	cmp	r3, #50	; 0x32
 800186c:	d805      	bhi.n	800187a <adc_down+0xf2>
				sTime_AL.Minutes -= 10;
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <adc_down+0x1ec>)
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	3b0a      	subs	r3, #10
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <adc_down+0x1ec>)
 8001878:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <adc_down+0x1e8>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461d      	mov	r5, r3
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <adc_down+0x1ec>)
 8001882:	466c      	mov	r4, sp
 8001884:	f103 020c 	add.w	r2, r3, #12
 8001888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001892:	4628      	mov	r0, r5
 8001894:	f7ff fc22 	bl	80010dc <screen>
 8001898:	e064      	b.n	8001964 <adc_down+0x1dc>
		}
		// 1M switching
		else if (cursor == 7) {
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <adc_down+0x1e8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b07      	cmp	r3, #7
 80018a0:	d11d      	bne.n	80018de <adc_down+0x156>
			if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <adc_down+0x1ec>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <adc_down+0x136>
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <adc_down+0x1ec>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	2b3b      	cmp	r3, #59	; 0x3b
 80018b0:	d805      	bhi.n	80018be <adc_down+0x136>
				sTime_AL.Minutes -= 1;
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <adc_down+0x1ec>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <adc_down+0x1ec>)
 80018bc:	705a      	strb	r2, [r3, #1]
			}
			screen(cursor, sTime_AL);
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <adc_down+0x1e8>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461d      	mov	r5, r3
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <adc_down+0x1ec>)
 80018c6:	466c      	mov	r4, sp
 80018c8:	f103 020c 	add.w	r2, r3, #12
 80018cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80018d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fc00 	bl	80010dc <screen>
 80018dc:	e042      	b.n	8001964 <adc_down+0x1dc>
		}

		// 10S switching
		else if (cursor == 9) {
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <adc_down+0x1e8>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d11d      	bne.n	8001922 <adc_down+0x19a>
			if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <adc_down+0x1ec>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <adc_down+0x17a>
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <adc_down+0x1ec>)
 80018f0:	789b      	ldrb	r3, [r3, #2]
 80018f2:	2b32      	cmp	r3, #50	; 0x32
 80018f4:	d805      	bhi.n	8001902 <adc_down+0x17a>
				sTime_AL.Seconds -= 10;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <adc_down+0x1ec>)
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	3b0a      	subs	r3, #10
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <adc_down+0x1ec>)
 8001900:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <adc_down+0x1e8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461d      	mov	r5, r3
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <adc_down+0x1ec>)
 800190a:	466c      	mov	r4, sp
 800190c:	f103 020c 	add.w	r2, r3, #12
 8001910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001914:	e884 0003 	stmia.w	r4, {r0, r1}
 8001918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191a:	4628      	mov	r0, r5
 800191c:	f7ff fbde 	bl	80010dc <screen>
 8001920:	e020      	b.n	8001964 <adc_down+0x1dc>
		}
		// 1S switching
		else if (cursor == 10) {
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <adc_down+0x1e8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d11c      	bne.n	8001964 <adc_down+0x1dc>
			if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <adc_down+0x1ec>)
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <adc_down+0x1be>
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <adc_down+0x1ec>)
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	2b3b      	cmp	r3, #59	; 0x3b
 8001938:	d805      	bhi.n	8001946 <adc_down+0x1be>
				sTime_AL.Seconds -= 1;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <adc_down+0x1ec>)
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	3b01      	subs	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <adc_down+0x1ec>)
 8001944:	709a      	strb	r2, [r3, #2]
			}
			screen(cursor, sTime_AL);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <adc_down+0x1e8>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461d      	mov	r5, r3
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <adc_down+0x1ec>)
 800194e:	466c      	mov	r4, sp
 8001950:	f103 020c 	add.w	r2, r3, #12
 8001954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001958:	e884 0003 	stmia.w	r4, {r0, r1}
 800195c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195e:	4628      	mov	r0, r5
 8001960:	f7ff fbbc 	bl	80010dc <screen>
		}

		// clear the down flag
		down = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
	}
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	200008f8 	.word	0x200008f8
 8001974:	2000096c 	.word	0x2000096c

08001978 <adc_left>:

void adc_left(int left) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	if (left > 0) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	dd3d      	ble.n	8001a02 <adc_left+0x8a>
		if (cursor > 0) {
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <adc_left+0x94>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d037      	beq.n	80019fe <adc_left+0x86>
			cursor--;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <adc_left+0x94>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <adc_left+0x94>)
 8001998:	701a      	strb	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 800199a:	2110      	movs	r1, #16
 800199c:	204e      	movs	r0, #78	; 0x4e
 800199e:	f7ff f9c5 	bl	8000d2c <LCD_SendCommand>

			if (cursor == 8) {
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <adc_left+0x94>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d109      	bne.n	80019be <adc_left+0x46>
				cursor--;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <adc_left+0x94>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <adc_left+0x94>)
 80019b4:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80019b6:	2110      	movs	r1, #16
 80019b8:	204e      	movs	r0, #78	; 0x4e
 80019ba:	f7ff f9b7 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 5) {
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <adc_left+0x94>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d109      	bne.n	80019da <adc_left+0x62>
				cursor--;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <adc_left+0x94>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <adc_left+0x94>)
 80019d0:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80019d2:	2110      	movs	r1, #16
 80019d4:	204e      	movs	r0, #78	; 0x4e
 80019d6:	f7ff f9a9 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 2) {
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <adc_left+0x94>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d10d      	bne.n	80019fe <adc_left+0x86>
				cursor -= 2;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <adc_left+0x94>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3b02      	subs	r3, #2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <adc_left+0x94>)
 80019ec:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80019ee:	2110      	movs	r1, #16
 80019f0:	204e      	movs	r0, #78	; 0x4e
 80019f2:	f7ff f99b 	bl	8000d2c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80019f6:	2110      	movs	r1, #16
 80019f8:	204e      	movs	r0, #78	; 0x4e
 80019fa:	f7ff f997 	bl	8000d2c <LCD_SendCommand>
			}
		}

		// clear the left flag
		left = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
	}
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200008f8 	.word	0x200008f8

08001a10 <adc_right>:

void adc_right(int right) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (right > 0) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd3d      	ble.n	8001a9a <adc_right+0x8a>

		if (cursor < 10) {
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <adc_right+0x94>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d837      	bhi.n	8001a96 <adc_right+0x86>
			cursor++;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <adc_right+0x94>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <adc_right+0x94>)
 8001a30:	701a      	strb	r2, [r3, #0]
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a32:	2114      	movs	r1, #20
 8001a34:	204e      	movs	r0, #78	; 0x4e
 8001a36:	f7ff f979 	bl	8000d2c <LCD_SendCommand>

			if (cursor == 8) {
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <adc_right+0x94>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d109      	bne.n	8001a56 <adc_right+0x46>
				cursor++;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <adc_right+0x94>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <adc_right+0x94>)
 8001a4c:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a4e:	2114      	movs	r1, #20
 8001a50:	204e      	movs	r0, #78	; 0x4e
 8001a52:	f7ff f96b 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 5) {
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <adc_right+0x94>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d109      	bne.n	8001a72 <adc_right+0x62>
				cursor++;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <adc_right+0x94>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <adc_right+0x94>)
 8001a68:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a6a:	2114      	movs	r1, #20
 8001a6c:	204e      	movs	r0, #78	; 0x4e
 8001a6e:	f7ff f95d 	bl	8000d2c <LCD_SendCommand>
			}

			if (cursor == 1) {
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <adc_right+0x94>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10d      	bne.n	8001a96 <adc_right+0x86>
				cursor += 2;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <adc_right+0x94>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <adc_right+0x94>)
 8001a84:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a86:	2114      	movs	r1, #20
 8001a88:	204e      	movs	r0, #78	; 0x4e
 8001a8a:	f7ff f94f 	bl	8000d2c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a8e:	2114      	movs	r1, #20
 8001a90:	204e      	movs	r0, #78	; 0x4e
 8001a92:	f7ff f94b 	bl	8000d2c <LCD_SendCommand>
			}
		}

		//clear the right flag
		right = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200008f8 	.word	0x200008f8

08001aa8 <mode_choice>:
	else if (DATA_32 == 0x00000002) {
		song_choice_flag = 1;
	}
}

void mode_choice() {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af02      	add	r7, sp, #8
			//mode choose while loop
			while (rising_edge >= 1) {
 8001aae:	e0d4      	b.n	8001c5a <mode_choice+0x1b2>
				cur_tick = HAL_GetTick();
 8001ab0:	f001 f85e 	bl	8002b70 <HAL_GetTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a6d      	ldr	r2, [pc, #436]	; (8001c6c <mode_choice+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8001aba:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <mode_choice+0x1c4>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <mode_choice+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <mode_choice+0x1cc>)
 8001ac6:	6013      	str	r3, [r2, #0]

				//remove bounce effect
				if (tick_gap < 100 && rising_edge > 1) {
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <mode_choice+0x1cc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b63      	cmp	r3, #99	; 0x63
 8001ace:	d806      	bhi.n	8001ade <mode_choice+0x36>
 8001ad0:	4b69      	ldr	r3, [pc, #420]	; (8001c78 <mode_choice+0x1d0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d902      	bls.n	8001ade <mode_choice+0x36>
					rising_edge = 1;
 8001ad8:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <mode_choice+0x1d0>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
				}

				if (tick_gap >= 300) {
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <mode_choice+0x1cc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ae6:	f0c0 80b8 	bcc.w	8001c5a <mode_choice+0x1b2>

					if (rising_edge == 1 && falling_edge >= 1) {
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <mode_choice+0x1d0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d142      	bne.n	8001b78 <mode_choice+0xd0>
 8001af2:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <mode_choice+0x1d4>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03e      	beq.n	8001b78 <mode_choice+0xd0>

						// init the temp
						sTime_temp.Hours = 0;
 8001afa:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <mode_choice+0x1d8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 8001b00:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <mode_choice+0x1d8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <mode_choice+0x1d8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 8001b0c:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <mode_choice+0x1d8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 8001b12:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <mode_choice+0x1dc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8001b18:	204e      	movs	r0, #78	; 0x4e
 8001b1a:	f7ff f92b 	bl	8000d74 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	204e      	movs	r0, #78	; 0x4e
 8001b22:	f7ff f903 	bl	8000d2c <LCD_SendCommand>
						strcpy(lcdup, "Set Time Mode");
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <mode_choice+0x1e0>)
 8001b28:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <mode_choice+0x1e4>)
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001b30:	8023      	strh	r3, [r4, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 8001b32:	4955      	ldr	r1, [pc, #340]	; (8001c88 <mode_choice+0x1e0>)
 8001b34:	204e      	movs	r0, #78	; 0x4e
 8001b36:	f7ff f93a 	bl	8000dae <LCD_SendString>
						// LCD down
						screen(cursor, sTime_temp);
 8001b3a:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <mode_choice+0x1dc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <mode_choice+0x1d8>)
 8001b42:	466c      	mov	r4, sp
 8001b44:	f103 020c 	add.w	r2, r3, #12
 8001b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7ff fac2 	bl	80010dc <screen>

						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001b58:	210f      	movs	r1, #15
 8001b5a:	204e      	movs	r0, #78	; 0x4e
 8001b5c:	f7ff f8e6 	bl	8000d2c <LCD_SendCommand>

						//init the user button
						rising_edge = 0;
 8001b60:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <mode_choice+0x1d0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <mode_choice+0x1d4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
						mode = 1;
 8001b6c:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <mode_choice+0x1e8>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
						printf("one click==========================\r\n");
 8001b72:	4848      	ldr	r0, [pc, #288]	; (8001c94 <mode_choice+0x1ec>)
 8001b74:	f006 fb08 	bl	8008188 <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <mode_choice+0x1d0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d944      	bls.n	8001c0a <mode_choice+0x162>
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <mode_choice+0x1d4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d040      	beq.n	8001c0a <mode_choice+0x162>
						// init the temp
						sTime_AL.Hours = 0;
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <mode_choice+0x1f0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
						sTime_AL.Minutes = 0;
 8001b8e:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <mode_choice+0x1f0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	705a      	strb	r2, [r3, #1]
						sTime_AL.Seconds = 0;
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <mode_choice+0x1f0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	709a      	strb	r2, [r3, #2]
						sTime_AL.TimeFormat = 0;
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <mode_choice+0x1f0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <mode_choice+0x1dc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8001ba6:	204e      	movs	r0, #78	; 0x4e
 8001ba8:	f7ff f8e4 	bl	8000d74 <LCD_Init>
						//blink on
						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8001bac:	210f      	movs	r1, #15
 8001bae:	204e      	movs	r0, #78	; 0x4e
 8001bb0:	f7ff f8bc 	bl	8000d2c <LCD_SendCommand>

						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	204e      	movs	r0, #78	; 0x4e
 8001bb8:	f7ff f8b8 	bl	8000d2c <LCD_SendCommand>
						strcpy(lcdup, "Alarm Mode");
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <mode_choice+0x1e0>)
 8001bbe:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <mode_choice+0x1f4>)
 8001bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc2:	c303      	stmia	r3!, {r0, r1}
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	0c12      	lsrs	r2, r2, #16
 8001bca:	701a      	strb	r2, [r3, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 8001bcc:	492e      	ldr	r1, [pc, #184]	; (8001c88 <mode_choice+0x1e0>)
 8001bce:	204e      	movs	r0, #78	; 0x4e
 8001bd0:	f7ff f8ed 	bl	8000dae <LCD_SendString>
						// LCD down
						screen(cursor, sTime_AL);
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <mode_choice+0x1dc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461d      	mov	r5, r3
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <mode_choice+0x1f0>)
 8001bdc:	466c      	mov	r4, sp
 8001bde:	f103 020c 	add.w	r2, r3, #12
 8001be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff fa75 	bl	80010dc <screen>

						//init the user button
						rising_edge = 0;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <mode_choice+0x1d0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <mode_choice+0x1d4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
						mode = 2;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <mode_choice+0x1e8>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	701a      	strb	r2, [r3, #0]

						printf("two click++++++++++++++++++++++++++\r\n");
 8001c04:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <mode_choice+0x1f8>)
 8001c06:	f006 fabf 	bl	8008188 <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <mode_choice+0x1cc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c12:	d322      	bcc.n	8001c5a <mode_choice+0x1b2>
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <mode_choice+0x1d4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11e      	bne.n	8001c5a <mode_choice+0x1b2>

						LCD_Init(LCD_ADDR);
 8001c1c:	204e      	movs	r0, #78	; 0x4e
 8001c1e:	f7ff f8a9 	bl	8000d74 <LCD_Init>

						// set address to 0x00
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	204e      	movs	r0, #78	; 0x4e
 8001c26:	f7ff f881 	bl	8000d2c <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "Music Setting");
 8001c2a:	491e      	ldr	r1, [pc, #120]	; (8001ca4 <mode_choice+0x1fc>)
 8001c2c:	204e      	movs	r0, #78	; 0x4e
 8001c2e:	f7ff f8be 	bl	8000dae <LCD_SendString>

						// set address to 0x40
						LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001c32:	21c0      	movs	r1, #192	; 0xc0
 8001c34:	204e      	movs	r0, #78	; 0x4e
 8001c36:	f7ff f879 	bl	8000d2c <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "1.Traffic Light");
 8001c3a:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <mode_choice+0x200>)
 8001c3c:	204e      	movs	r0, #78	; 0x4e
 8001c3e:	f7ff f8b6 	bl	8000dae <LCD_SendString>

						rising_edge = 0;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <mode_choice+0x1d0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <mode_choice+0x1d4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <mode_choice+0x1e8>)
 8001c50:	2203      	movs	r2, #3
 8001c52:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8001c54:	4815      	ldr	r0, [pc, #84]	; (8001cac <mode_choice+0x204>)
 8001c56:	f006 fa97 	bl	8008188 <puts>
			while (rising_edge >= 1) {
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <mode_choice+0x1d0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f af26 	bne.w	8001ab0 <mode_choice+0x8>
					}
				}
			}
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6c:	200008f0 	.word	0x200008f0
 8001c70:	200008ec 	.word	0x200008ec
 8001c74:	200008f4 	.word	0x200008f4
 8001c78:	200008e9 	.word	0x200008e9
 8001c7c:	200008ea 	.word	0x200008ea
 8001c80:	20000944 	.word	0x20000944
 8001c84:	200008f8 	.word	0x200008f8
 8001c88:	200008d8 	.word	0x200008d8
 8001c8c:	08009520 	.word	0x08009520
 8001c90:	200008eb 	.word	0x200008eb
 8001c94:	08009530 	.word	0x08009530
 8001c98:	2000096c 	.word	0x2000096c
 8001c9c:	08009558 	.word	0x08009558
 8001ca0:	08009564 	.word	0x08009564
 8001ca4:	0800958c 	.word	0x0800958c
 8001ca8:	0800959c 	.word	0x0800959c
 8001cac:	080095ac 	.word	0x080095ac

08001cb0 <mode_func_Normal>:

void mode_func_Normal() {
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af02      	add	r7, sp, #8
		while (mode == 0) {
 8001cb6:	e0f0      	b.n	8001e9a <mode_func_Normal+0x1ea>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	497d      	ldr	r1, [pc, #500]	; (8001eb0 <mode_func_Normal+0x200>)
 8001cbc:	487d      	ldr	r0, [pc, #500]	; (8001eb4 <mode_func_Normal+0x204>)
 8001cbe:	f003 fefd 	bl	8005abc <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	497c      	ldr	r1, [pc, #496]	; (8001eb8 <mode_func_Normal+0x208>)
 8001cc6:	487b      	ldr	r0, [pc, #492]	; (8001eb4 <mode_func_Normal+0x204>)
 8001cc8:	f003 ffda 	bl	8005c80 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8001ccc:	487b      	ldr	r0, [pc, #492]	; (8001ebc <mode_func_Normal+0x20c>)
 8001cce:	f000 ffc3 	bl	8002c58 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <mode_func_Normal+0x200>)
 8001cd4:	78db      	ldrb	r3, [r3, #3]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <mode_func_Normal+0x210>)
 8001ce0:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <mode_func_Normal+0x200>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001ce6:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <mode_func_Normal+0x200>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001cec:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001cee:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <mode_func_Normal+0x200>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9100      	str	r1, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4972      	ldr	r1, [pc, #456]	; (8001ec4 <mode_func_Normal+0x214>)
 8001cfa:	4873      	ldr	r0, [pc, #460]	; (8001ec8 <mode_func_Normal+0x218>)
 8001cfc:	f006 fa4c 	bl	8008198 <siprintf>

			if (strcmp(lcdup, "Park Jung Hwan") != 0) {
 8001d00:	4972      	ldr	r1, [pc, #456]	; (8001ecc <mode_func_Normal+0x21c>)
 8001d02:	4873      	ldr	r0, [pc, #460]	; (8001ed0 <mode_func_Normal+0x220>)
 8001d04:	f7fe fa74 	bl	80001f0 <strcmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d032      	beq.n	8001d74 <mode_func_Normal+0xc4>
				LCD_Init(LCD_ADDR);
 8001d0e:	204e      	movs	r0, #78	; 0x4e
 8001d10:	f7ff f830 	bl	8000d74 <LCD_Init>
				strcpy(lcdup, "Park Jung Hwan");
 8001d14:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <mode_func_Normal+0x220>)
 8001d16:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <mode_func_Normal+0x21c>)
 8001d18:	4614      	mov	r4, r2
 8001d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d1e:	8023      	strh	r3, [r4, #0]
 8001d20:	3402      	adds	r4, #2
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	7023      	strb	r3, [r4, #0]
				// LCD up
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	204e      	movs	r0, #78	; 0x4e
 8001d2a:	f7fe ffff 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, lcdup);
 8001d2e:	4968      	ldr	r1, [pc, #416]	; (8001ed0 <mode_func_Normal+0x220>)
 8001d30:	204e      	movs	r0, #78	; 0x4e
 8001d32:	f7ff f83c 	bl	8000dae <LCD_SendString>

				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001d36:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <mode_func_Normal+0x200>)
 8001d38:	78db      	ldrb	r3, [r3, #3]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	4a5f      	ldr	r2, [pc, #380]	; (8001ec0 <mode_func_Normal+0x210>)
 8001d44:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <mode_func_Normal+0x200>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001d4a:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d4c:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <mode_func_Normal+0x200>)
 8001d4e:	785b      	ldrb	r3, [r3, #1]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001d50:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <mode_func_Normal+0x200>)
 8001d54:	789b      	ldrb	r3, [r3, #2]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	9100      	str	r1, [sp, #0]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4959      	ldr	r1, [pc, #356]	; (8001ec4 <mode_func_Normal+0x214>)
 8001d5e:	485a      	ldr	r0, [pc, #360]	; (8001ec8 <mode_func_Normal+0x218>)
 8001d60:	f006 fa1a 	bl	8008198 <siprintf>

				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001d64:	21c0      	movs	r1, #192	; 0xc0
 8001d66:	204e      	movs	r0, #78	; 0x4e
 8001d68:	f7fe ffe0 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8001d6c:	4956      	ldr	r1, [pc, #344]	; (8001ec8 <mode_func_Normal+0x218>)
 8001d6e:	204e      	movs	r0, #78	; 0x4e
 8001d70:	f7ff f81d 	bl	8000dae <LCD_SendString>
			}

			sTimestart = sTimecur;
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <mode_func_Normal+0x224>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <mode_func_Normal+0x228>)
 8001d7a:	6013      	str	r3, [r2, #0]
			sTimecur = sTime.Seconds;
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <mode_func_Normal+0x200>)
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <mode_func_Normal+0x224>)
 8001d84:	601a      	str	r2, [r3, #0]

			if (sTimecur != sTimestart) {
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <mode_func_Normal+0x224>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <mode_func_Normal+0x228>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d007      	beq.n	8001da2 <mode_func_Normal+0xf2>
				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001d92:	21c0      	movs	r1, #192	; 0xc0
 8001d94:	204e      	movs	r0, #78	; 0x4e
 8001d96:	f7fe ffc9 	bl	8000d2c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8001d9a:	494b      	ldr	r1, [pc, #300]	; (8001ec8 <mode_func_Normal+0x218>)
 8001d9c:	204e      	movs	r0, #78	; 0x4e
 8001d9e:	f7ff f806 	bl	8000dae <LCD_SendString>
			}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////
			if (strcmp(Time, Time_AL) == 0) {
 8001da2:	494e      	ldr	r1, [pc, #312]	; (8001edc <mode_func_Normal+0x22c>)
 8001da4:	4848      	ldr	r0, [pc, #288]	; (8001ec8 <mode_func_Normal+0x218>)
 8001da6:	f7fe fa23 	bl	80001f0 <strcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <mode_func_Normal+0x112>
				flag_alarm++;
 8001db0:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <mode_func_Normal+0x230>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a4a      	ldr	r2, [pc, #296]	; (8001ee0 <mode_func_Normal+0x230>)
 8001db8:	6013      	str	r3, [r2, #0]
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001dba:	2108      	movs	r1, #8
 8001dbc:	4849      	ldr	r0, [pc, #292]	; (8001ee4 <mode_func_Normal+0x234>)
 8001dbe:	f004 f985 	bl	80060cc <HAL_TIM_PWM_Start>

			}
			if (flag_alarm > 0) {
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <mode_func_Normal+0x230>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d065      	beq.n	8001e96 <mode_func_Normal+0x1e6>
				int song_temp_time = time_value(song_flag, count_note);
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <mode_func_Normal+0x238>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b46      	ldr	r3, [pc, #280]	; (8001eec <mode_func_Normal+0x23c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7ff fb96 	bl	8001508 <time_value>
 8001ddc:	60f8      	str	r0, [r7, #12]
				char *song_temp_note = note_address(song_flag, count_note);
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <mode_func_Normal+0x238>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <mode_func_Normal+0x23c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7ff fb6a 	bl	80014c4 <note_address>
 8001df0:	60b8      	str	r0, [r7, #8]

				song_time_division = 2000 / song_temp_time;
 8001df2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <mode_func_Normal+0x240>)
 8001e00:	601a      	str	r2, [r3, #0]

				if (song_temp_note[count_note] != '0' && song_time_division >= count_bit) {
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <mode_func_Normal+0x23c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b30      	cmp	r3, #48	; 0x30
 8001e0e:	d020      	beq.n	8001e52 <mode_func_Normal+0x1a2>
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <mode_func_Normal+0x240>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <mode_func_Normal+0x244>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d31a      	bcc.n	8001e52 <mode_func_Normal+0x1a2>

					char tempP;
					char tempO;
					char tempT;

					tempP = song_temp_note[0];
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	71fb      	strb	r3, [r7, #7]
					tempO = song_temp_note[1];
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	71bb      	strb	r3, [r7, #6]
					tempT = song_temp_note[2];
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	717b      	strb	r3, [r7, #5]

					note(tempP, tempO, tempT, 2000 / song_time_division, 2 + (count_bit));
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <mode_func_Normal+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <mode_func_Normal+0x244>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3302      	adds	r3, #2
 8001e42:	797a      	ldrb	r2, [r7, #5]
 8001e44:	79b9      	ldrb	r1, [r7, #6]
 8001e46:	79f8      	ldrb	r0, [r7, #7]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	f7ff fa76 	bl	800133c <note>
				if (song_temp_note[count_note] != '0' && song_time_division >= count_bit) {
 8001e50:	e013      	b.n	8001e7a <mode_func_Normal+0x1ca>

				} else if (song_temp_note[count_note] == '0') {
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <mode_func_Normal+0x23c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b30      	cmp	r3, #48	; 0x30
 8001e5e:	d10c      	bne.n	8001e7a <mode_func_Normal+0x1ca>
					TIM3->CCR3 = 0;
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <mode_func_Normal+0x248>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
					count_note = 0;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <mode_func_Normal+0x23c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
					flag_alarm = 0;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <mode_func_Normal+0x230>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001e72:	2108      	movs	r1, #8
 8001e74:	481b      	ldr	r0, [pc, #108]	; (8001ee4 <mode_func_Normal+0x234>)
 8001e76:	f004 f9f1 	bl	800625c <HAL_TIM_PWM_Stop>
				}

				if (song_time_division < count_bit) {
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <mode_func_Normal+0x240>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <mode_func_Normal+0x244>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d207      	bcs.n	8001e96 <mode_func_Normal+0x1e6>
					count_note++;
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <mode_func_Normal+0x23c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <mode_func_Normal+0x23c>)
 8001e8e:	6013      	str	r3, [r2, #0]
					count_bit = 0;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <mode_func_Normal+0x244>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

				////////////////////////////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			//==========================================================================================================
			mode_choice();
 8001e96:	f7ff fe07 	bl	8001aa8 <mode_choice>
		while (mode == 0) {
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <mode_func_Normal+0x24c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f43f af0a 	beq.w	8001cb8 <mode_func_Normal+0x8>
		}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000918 	.word	0x20000918
 8001eb4:	20000980 	.word	0x20000980
 8001eb8:	2000092c 	.word	0x2000092c
 8001ebc:	200007e4 	.word	0x200007e4
 8001ec0:	20000750 	.word	0x20000750
 8001ec4:	080094dc 	.word	0x080094dc
 8001ec8:	20000904 	.word	0x20000904
 8001ecc:	080095d4 	.word	0x080095d4
 8001ed0:	200008d8 	.word	0x200008d8
 8001ed4:	200008c0 	.word	0x200008c0
 8001ed8:	200008bc 	.word	0x200008bc
 8001edc:	20000958 	.word	0x20000958
 8001ee0:	200008b0 	.word	0x200008b0
 8001ee4:	200009ec 	.word	0x200009ec
 8001ee8:	200008a5 	.word	0x200008a5
 8001eec:	200008b4 	.word	0x200008b4
 8001ef0:	200008b8 	.word	0x200008b8
 8001ef4:	200008a8 	.word	0x200008a8
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	200008eb 	.word	0x200008eb

08001f00 <mode_func_SetTime>:

void mode_func_SetTime() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8001f04:	e051      	b.n	8001faa <mode_func_SetTime+0xaa>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <mode_func_SetTime+0xb8>)
 8001f08:	f000 fea6 	bl	8002c58 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <mode_func_SetTime+0xbc>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02f      	beq.n	8001f74 <mode_func_SetTime+0x74>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <mode_func_SetTime+0xc0>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <mode_func_SetTime+0xc4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <mode_func_SetTime+0x2e>
					InitFlag(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff f876 	bl	8001014 <InitFlag>
					printf("MODE1 exit\r\n");
 8001f28:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <mode_func_SetTime+0xc8>)
 8001f2a:	f006 f92d 	bl	8008188 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <mode_func_SetTime+0xc4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d11e      	bne.n	8001f74 <mode_func_SetTime+0x74>
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <mode_func_SetTime+0xcc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d91a      	bls.n	8001f74 <mode_func_SetTime+0x74>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <mode_func_SetTime+0xd0>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <mode_func_SetTime+0xd4>)
 8001f44:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <mode_func_SetTime+0xd0>)
 8001f48:	785a      	ldrb	r2, [r3, #1]
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <mode_func_SetTime+0xd4>)
 8001f4c:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <mode_func_SetTime+0xd0>)
 8001f50:	789a      	ldrb	r2, [r3, #2]
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <mode_func_SetTime+0xd4>)
 8001f54:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <mode_func_SetTime+0xd0>)
 8001f58:	78da      	ldrb	r2, [r3, #3]
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <mode_func_SetTime+0xd4>)
 8001f5c:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	491c      	ldr	r1, [pc, #112]	; (8001fd4 <mode_func_SetTime+0xd4>)
 8001f62:	481d      	ldr	r0, [pc, #116]	; (8001fd8 <mode_func_SetTime+0xd8>)
 8001f64:	f003 fd10 	bl	8005988 <HAL_RTC_SetTime>

					InitFlag(0);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff f853 	bl	8001014 <InitFlag>
					printf("MODE1 APPLY\r\n");
 8001f6e:	481b      	ldr	r0, [pc, #108]	; (8001fdc <mode_func_SetTime+0xdc>)
 8001f70:	f006 f90a 	bl	8008188 <puts>
				}
			}

			if (get_time > 0) {
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <mode_func_SetTime+0xe0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <mode_func_SetTime+0xaa>

				adc_up(up);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <mode_func_SetTime+0xe4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fae3 	bl	800154c <adc_up>
				adc_down(down);
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <mode_func_SetTime+0xe8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fbfc 	bl	8001788 <adc_down>
				adc_left(left);
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <mode_func_SetTime+0xec>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fcef 	bl	8001978 <adc_left>
				adc_right(right);
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <mode_func_SetTime+0xf0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fd36 	bl	8001a10 <adc_right>

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <mode_func_SetTime+0xe0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <mode_func_SetTime+0xf4>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d0a9      	beq.n	8001f06 <mode_func_SetTime+0x6>

			}
		}

		//==========================================================================================================
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200007e4 	.word	0x200007e4
 8001fbc:	200008e9 	.word	0x200008e9
 8001fc0:	200008c8 	.word	0x200008c8
 8001fc4:	200008ea 	.word	0x200008ea
 8001fc8:	080095e4 	.word	0x080095e4
 8001fcc:	200008cc 	.word	0x200008cc
 8001fd0:	20000944 	.word	0x20000944
 8001fd4:	20000918 	.word	0x20000918
 8001fd8:	20000980 	.word	0x20000980
 8001fdc:	080095f0 	.word	0x080095f0
 8001fe0:	200008c4 	.word	0x200008c4
 8001fe4:	20000900 	.word	0x20000900
 8001fe8:	20000901 	.word	0x20000901
 8001fec:	20000902 	.word	0x20000902
 8001ff0:	20000903 	.word	0x20000903
 8001ff4:	200008eb 	.word	0x200008eb

08001ff8 <mode_func_SetAlarm>:
void mode_func_SetAlarm() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af02      	add	r7, sp, #8
		//AL loop
		while (mode == 2) {
 8001ffe:	e057      	b.n	80020b0 <mode_func_SetAlarm+0xb8>
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8002000:	482f      	ldr	r0, [pc, #188]	; (80020c0 <mode_func_SetAlarm+0xc8>)
 8002002:	f000 fe29 	bl	8002c58 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <mode_func_SetAlarm+0xcc>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d035      	beq.n	800207a <mode_func_SetAlarm+0x82>

				// Alarm init
				sprintf(Time_AL, "");
 800200e:	492e      	ldr	r1, [pc, #184]	; (80020c8 <mode_func_SetAlarm+0xd0>)
 8002010:	482e      	ldr	r0, [pc, #184]	; (80020cc <mode_func_SetAlarm+0xd4>)
 8002012:	f006 f8c1 	bl	8008198 <siprintf>

				// this flag is check the exit or apply
				apply_flag = 1;
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <mode_func_SetAlarm+0xd8>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <mode_func_SetAlarm+0xdc>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <mode_func_SetAlarm+0x38>
					// ===========================================init func

					InitFlag(0);
 8002024:	2000      	movs	r0, #0
 8002026:	f7fe fff5 	bl	8001014 <InitFlag>
					printf("MODE exit\r\n");
 800202a:	482b      	ldr	r0, [pc, #172]	; (80020d8 <mode_func_SetAlarm+0xe0>)
 800202c:	f006 f8ac 	bl	8008188 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <mode_func_SetAlarm+0xdc>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d120      	bne.n	800207a <mode_func_SetAlarm+0x82>
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <mode_func_SetAlarm+0xe4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d91c      	bls.n	800207a <mode_func_SetAlarm+0x82>

					sprintf(Time_AL, "%s %02d:%02d:%02d",
							ampm[sTime_AL.TimeFormat], sTime_AL.Hours,
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <mode_func_SetAlarm+0xe8>)
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <mode_func_SetAlarm+0xec>)
 800204e:	441a      	add	r2, r3
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <mode_func_SetAlarm+0xe8>)
 8002052:	781b      	ldrb	r3, [r3, #0]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 8002054:	4618      	mov	r0, r3
							sTime_AL.Minutes, sTime_AL.Seconds);
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <mode_func_SetAlarm+0xe8>)
 8002058:	785b      	ldrb	r3, [r3, #1]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 800205a:	4619      	mov	r1, r3
							sTime_AL.Minutes, sTime_AL.Seconds);
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <mode_func_SetAlarm+0xe8>)
 800205e:	789b      	ldrb	r3, [r3, #2]
					sprintf(Time_AL, "%s %02d:%02d:%02d",
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9100      	str	r1, [sp, #0]
 8002064:	4603      	mov	r3, r0
 8002066:	4920      	ldr	r1, [pc, #128]	; (80020e8 <mode_func_SetAlarm+0xf0>)
 8002068:	4818      	ldr	r0, [pc, #96]	; (80020cc <mode_func_SetAlarm+0xd4>)
 800206a:	f006 f895 	bl	8008198 <siprintf>

					// ===========================================init func
					InitFlag(0);
 800206e:	2000      	movs	r0, #0
 8002070:	f7fe ffd0 	bl	8001014 <InitFlag>
					printf("MODE APPLY\r\n");
 8002074:	481d      	ldr	r0, [pc, #116]	; (80020ec <mode_func_SetAlarm+0xf4>)
 8002076:	f006 f887 	bl	8008188 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <mode_func_SetAlarm+0xf8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <mode_func_SetAlarm+0xb8>

				adc_up(up);
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <mode_func_SetAlarm+0xfc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fa60 	bl	800154c <adc_up>
				adc_down(down);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <mode_func_SetAlarm+0x100>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fb79 	bl	8001788 <adc_down>
				adc_left(left);
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <mode_func_SetAlarm+0x104>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fc6c 	bl	8001978 <adc_left>
				adc_right(right);
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <mode_func_SetAlarm+0x108>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fcb3 	bl	8001a10 <adc_right>

				// clear the get_time flag (to measure the time)
				get_time = 0;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <mode_func_SetAlarm+0xf8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <mode_func_SetAlarm+0x10c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d0a3      	beq.n	8002000 <mode_func_SetAlarm+0x8>

			}
		}
		//==========================================================================================================
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200007e4 	.word	0x200007e4
 80020c4:	200008e9 	.word	0x200008e9
 80020c8:	08009600 	.word	0x08009600
 80020cc:	20000958 	.word	0x20000958
 80020d0:	200008c8 	.word	0x200008c8
 80020d4:	200008ea 	.word	0x200008ea
 80020d8:	08009604 	.word	0x08009604
 80020dc:	200008cc 	.word	0x200008cc
 80020e0:	2000096c 	.word	0x2000096c
 80020e4:	20000750 	.word	0x20000750
 80020e8:	080094dc 	.word	0x080094dc
 80020ec:	08009610 	.word	0x08009610
 80020f0:	200008c4 	.word	0x200008c4
 80020f4:	20000900 	.word	0x20000900
 80020f8:	20000901 	.word	0x20000901
 80020fc:	20000902 	.word	0x20000902
 8002100:	20000903 	.word	0x20000903
 8002104:	200008eb 	.word	0x200008eb

08002108 <mode_func_SetSong>:
void mode_func_SetSong() {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
		//Song choice loop
		while (mode == 3) {
 800210e:	e072      	b.n	80021f6 <mode_func_SetSong+0xee>
			HAL_ADC_Start(&hadc1);
 8002110:	483d      	ldr	r0, [pc, #244]	; (8002208 <mode_func_SetSong+0x100>)
 8002112:	f000 fda1 	bl	8002c58 <HAL_ADC_Start>



			if (up > 0) {
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <mode_func_SetSong+0x104>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <mode_func_SetSong+0x28>
				song_flag++;
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <mode_func_SetSong+0x108>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <mode_func_SetSong+0x108>)
 8002128:	701a      	strb	r2, [r3, #0]
				up = 0;
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <mode_func_SetSong+0x104>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
			}
			if (down > 0) {
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <mode_func_SetSong+0x10c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <mode_func_SetSong+0x42>
				song_flag--;
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <mode_func_SetSong+0x108>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3b01      	subs	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <mode_func_SetSong+0x108>)
 8002142:	701a      	strb	r2, [r3, #0]
				down = 0;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <mode_func_SetSong+0x10c>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
			}

			if (song_flag <= 0) {
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <mode_func_SetSong+0x108>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <mode_func_SetSong+0x52>
				song_flag = 1;
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <mode_func_SetSong+0x108>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e006      	b.n	8002168 <mode_func_SetSong+0x60>
			}
			else if (song_flag > 2) {
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <mode_func_SetSong+0x108>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d902      	bls.n	8002168 <mode_func_SetSong+0x60>
				song_flag = 2;
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <mode_func_SetSong+0x108>)
 8002164:	2202      	movs	r2, #2
 8002166:	701a      	strb	r2, [r3, #0]
			}

			uint32_t DATA_32 = song_Set(song_flag);
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <mode_func_SetSong+0x108>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f86b 	bl	8002248 <song_Set>
 8002172:	6078      	str	r0, [r7, #4]




			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <mode_func_SetSong+0x110>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d039      	beq.n	80021f0 <mode_func_SetSong+0xe8>

				// this flag is check the exit or apply
				apply_flag = 1;
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <mode_func_SetSong+0x114>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <mode_func_SetSong+0x118>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <mode_func_SetSong+0x8e>
					InitFlag(0);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe ff42 	bl	8001014 <InitFlag>
					printf("MODE3 exit\r\n");
 8002190:	4824      	ldr	r0, [pc, #144]	; (8002224 <mode_func_SetSong+0x11c>)
 8002192:	f005 fff9 	bl	8008188 <puts>
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <mode_func_SetSong+0x118>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d128      	bne.n	80021f0 <mode_func_SetSong+0xe8>
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <mode_func_SetSong+0x120>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d924      	bls.n	80021f0 <mode_func_SetSong+0xe8>

					LCD_Init(LCD_ADDR);
 80021a6:	204e      	movs	r0, #78	; 0x4e
 80021a8:	f7fe fde4 	bl	8000d74 <LCD_Init>

					// set address to 0x00
					LCD_SendCommand(LCD_ADDR, 0b10000000);
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	204e      	movs	r0, #78	; 0x4e
 80021b0:	f7fe fdbc 	bl	8000d2c <LCD_SendCommand>
					strcpy(lcdup, "Flash Writing");
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <mode_func_SetSong+0x124>)
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <mode_func_SetSong+0x128>)
 80021b8:	4614      	mov	r4, r2
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	c407      	stmia	r4!, {r0, r1, r2}
 80021be:	8023      	strh	r3, [r4, #0]
					LCD_SendString(LCD_ADDR, lcdup);
 80021c0:	491a      	ldr	r1, [pc, #104]	; (800222c <mode_func_SetSong+0x124>)
 80021c2:	204e      	movs	r0, #78	; 0x4e
 80021c4:	f7fe fdf3 	bl	8000dae <LCD_SendString>

					// set address to 0x40
					LCD_SendCommand(LCD_ADDR, 0b11000000);
 80021c8:	21c0      	movs	r1, #192	; 0xc0
 80021ca:	204e      	movs	r0, #78	; 0x4e
 80021cc:	f7fe fdae 	bl	8000d2c <LCD_SendCommand>
					LCD_SendString(LCD_ADDR, "Wait for a Sec");
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <mode_func_SetSong+0x12c>)
 80021d2:	204e      	movs	r0, #78	; 0x4e
 80021d4:	f7fe fdeb 	bl	8000dae <LCD_SendString>

					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					uint32_t ADDR_FLASH_SECTOR = ADDR_FLASH_SECTOR_3;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <mode_func_SetSong+0x130>)
 80021da:	603b      	str	r3, [r7, #0]
					FlashWritingOne(ADDR_FLASH_SECTOR, DATA_32);
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	6838      	ldr	r0, [r7, #0]
 80021e0:	f7fe fbbe 	bl	8000960 <FlashWritingOne>

					// Flash Writing Course--------------------------------------------------------------------------------------------------------------------------------------------------
					InitFlag(0);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe ff15 	bl	8001014 <InitFlag>
					printf("MODE3 APPLY\r\n");
 80021ea:	4814      	ldr	r0, [pc, #80]	; (800223c <mode_func_SetSong+0x134>)
 80021ec:	f005 ffcc 	bl	8008188 <puts>
				}
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <mode_func_SetSong+0x138>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <mode_func_SetSong+0x13c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d088      	beq.n	8002110 <mode_func_SetSong+0x8>
		}
		//==========================================================================================================
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	200007e4 	.word	0x200007e4
 800220c:	20000900 	.word	0x20000900
 8002210:	200008a5 	.word	0x200008a5
 8002214:	20000901 	.word	0x20000901
 8002218:	200008e9 	.word	0x200008e9
 800221c:	200008c8 	.word	0x200008c8
 8002220:	200008ea 	.word	0x200008ea
 8002224:	0800961c 	.word	0x0800961c
 8002228:	200008cc 	.word	0x200008cc
 800222c:	200008d8 	.word	0x200008d8
 8002230:	08009628 	.word	0x08009628
 8002234:	08009638 	.word	0x08009638
 8002238:	0800c000 	.word	0x0800c000
 800223c:	08009648 	.word	0x08009648
 8002240:	200008c4 	.word	0x200008c4
 8002244:	200008eb 	.word	0x200008eb

08002248 <song_Set>:

uint32_t song_Set(int flag) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	uint32_t DATA_32;
	if (flag == 1) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d114      	bne.n	8002280 <song_Set+0x38>
		DATA_32 = 0x00000001;
 8002256:	2301      	movs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]

		LCD_Init(LCD_ADDR);
 800225a:	204e      	movs	r0, #78	; 0x4e
 800225c:	f7fe fd8a 	bl	8000d74 <LCD_Init>

		// set address to 0x00
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	204e      	movs	r0, #78	; 0x4e
 8002264:	f7fe fd62 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Music Setting");
 8002268:	4914      	ldr	r1, [pc, #80]	; (80022bc <song_Set+0x74>)
 800226a:	204e      	movs	r0, #78	; 0x4e
 800226c:	f7fe fd9f 	bl	8000dae <LCD_SendString>

		// set address to 0x40
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8002270:	21c0      	movs	r1, #192	; 0xc0
 8002272:	204e      	movs	r0, #78	; 0x4e
 8002274:	f7fe fd5a 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, song_title_1);
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <song_Set+0x78>)
 800227a:	204e      	movs	r0, #78	; 0x4e
 800227c:	f7fe fd97 	bl	8000dae <LCD_SendString>
	}
	if (flag == 2) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d114      	bne.n	80022b0 <song_Set+0x68>
		DATA_32 = 0x00000002;
 8002286:	2302      	movs	r3, #2
 8002288:	60fb      	str	r3, [r7, #12]

		LCD_Init(LCD_ADDR);
 800228a:	204e      	movs	r0, #78	; 0x4e
 800228c:	f7fe fd72 	bl	8000d74 <LCD_Init>

		// set address to 0x00
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	204e      	movs	r0, #78	; 0x4e
 8002294:	f7fe fd4a 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Music Setting");
 8002298:	4908      	ldr	r1, [pc, #32]	; (80022bc <song_Set+0x74>)
 800229a:	204e      	movs	r0, #78	; 0x4e
 800229c:	f7fe fd87 	bl	8000dae <LCD_SendString>

		// set address to 0x40
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 80022a0:	21c0      	movs	r1, #192	; 0xc0
 80022a2:	204e      	movs	r0, #78	; 0x4e
 80022a4:	f7fe fd42 	bl	8000d2c <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, song_title_2);
 80022a8:	4906      	ldr	r1, [pc, #24]	; (80022c4 <song_Set+0x7c>)
 80022aa:	204e      	movs	r0, #78	; 0x4e
 80022ac:	f7fe fd7f 	bl	8000dae <LCD_SendString>
	}

	return DATA_32;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	0800958c 	.word	0x0800958c
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000010 	.word	0x20000010

080022c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>
	...

080022d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <MX_RTC_Init+0xb0>)
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <MX_RTC_Init+0xb4>)
 80022f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <MX_RTC_Init+0xb0>)
 80022f4:	2240      	movs	r2, #64	; 0x40
 80022f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <MX_RTC_Init+0xb0>)
 80022fa:	227f      	movs	r2, #127	; 0x7f
 80022fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <MX_RTC_Init+0xb0>)
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_RTC_Init+0xb0>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <MX_RTC_Init+0xb0>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_RTC_Init+0xb0>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002316:	481b      	ldr	r0, [pc, #108]	; (8002384 <MX_RTC_Init+0xb0>)
 8002318:	f003 fac0 	bl	800589c <HAL_RTC_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002322:	f7ff ffd1 	bl	80022c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002332:	2301      	movs	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	480f      	ldr	r0, [pc, #60]	; (8002384 <MX_RTC_Init+0xb0>)
 8002346:	f003 fb1f 	bl	8005988 <HAL_RTC_SetTime>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002350:	f7ff ffba 	bl	80022c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002354:	2301      	movs	r3, #1
 8002356:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002358:	2301      	movs	r3, #1
 800235a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800235c:	2301      	movs	r3, #1
 800235e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_RTC_Init+0xb0>)
 800236c:	f003 fc04 	bl	8005b78 <HAL_RTC_SetDate>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002376:	f7ff ffa7 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000980 	.word	0x20000980
 8002388:	40002800 	.word	0x40002800

0800238c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	2230      	movs	r2, #48	; 0x30
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fe65 	bl	800806c <memset>
  if(rtcHandle->Instance==RTC)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_RTC_MspInit+0x4c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023ac:	2320      	movs	r3, #32
 80023ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 f8ae 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023c6:	f7ff ff7f 	bl	80022c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RTC_MspInit+0x50>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023d0:	bf00      	nop
 80023d2:	3738      	adds	r7, #56	; 0x38
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40002800 	.word	0x40002800
 80023dc:	42470e3c 	.word	0x42470e3c

080023e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_MspInit+0x4c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_MspInit+0x4c>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_MspInit+0x4c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_MspInit+0x4c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_MspInit+0x4c>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_MspInit+0x4c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <NMI_Handler+0x4>

08002436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <MemManage_Handler+0x4>

08002442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <UsageFault_Handler+0x4>

0800244e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247c:	f000 fb64 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <TIM2_IRQHandler+0x10>)
 800248a:	f003 ff57 	bl	800633c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200009a4 	.word	0x200009a4

08002498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <TIM4_IRQHandler+0x10>)
 800249e:	f003 ff4d 	bl	800633c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000a34 	.word	0x20000a34

080024ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <USART3_IRQHandler+0x10>)
 80024b2:	f004 fe7d 	bl	80071b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000a7c 	.word	0x20000a7c

080024c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024c8:	f001 fd74 	bl	8003fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00a      	b.n	80024f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024e2:	f3af 8000 	nop.w
 80024e6:	4601      	mov	r1, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbf0      	blt.n	80024e2 <_read+0x12>
	}

return len;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e009      	b.n	8002530 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fc7b 	bl	8000e20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf1      	blt.n	800251c <_write+0x12>
	}
	return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f005 fd1c 	bl	8008018 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20030000 	.word	0x20030000
 800260c:	00000400 	.word	0x00000400
 8002610:	200009a0 	.word	0x200009a0
 8002614:	20000af8 	.word	0x20000af8

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	463b      	mov	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <MX_TIM2_Init+0x98>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <MX_TIM2_Init+0x98>)
 8002662:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_TIM2_Init+0x98>)
 800266a:	2210      	movs	r2, #16
 800266c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <MX_TIM2_Init+0x98>)
 8002670:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <MX_TIM2_Init+0x98>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <MX_TIM2_Init+0x98>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <MX_TIM2_Init+0x98>)
 8002684:	f003 fc08 	bl	8005e98 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800268e:	f7ff fe1b 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	4619      	mov	r1, r3
 800269e:	480d      	ldr	r0, [pc, #52]	; (80026d4 <MX_TIM2_Init+0x98>)
 80026a0:	f004 f816 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026aa:	f7ff fe0d 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <MX_TIM2_Init+0x98>)
 80026bc:	f004 fc08 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026c6:	f7ff fdff 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200009a4 	.word	0x200009a4

080026d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	; 0x38
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */

  htim3.Instance = TIM3;
 8002708:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <MX_TIM3_Init+0xe4>)
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <MX_TIM3_Init+0xe8>)
 800270c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <MX_TIM3_Init+0xe4>)
 8002710:	221d      	movs	r2, #29
 8002712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <MX_TIM3_Init+0xe4>)
 8002716:	2210      	movs	r2, #16
 8002718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <MX_TIM3_Init+0xe4>)
 800271c:	f641 0238 	movw	r2, #6200	; 0x1838
 8002720:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <MX_TIM3_Init+0xe4>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <MX_TIM3_Init+0xe4>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800272e:	4823      	ldr	r0, [pc, #140]	; (80027bc <MX_TIM3_Init+0xe4>)
 8002730:	f003 fbb2 	bl	8005e98 <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800273a:	f7ff fdc5 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002748:	4619      	mov	r1, r3
 800274a:	481c      	ldr	r0, [pc, #112]	; (80027bc <MX_TIM3_Init+0xe4>)
 800274c:	f003 ffc0 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002756:	f7ff fdb7 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800275a:	4818      	ldr	r0, [pc, #96]	; (80027bc <MX_TIM3_Init+0xe4>)
 800275c:	f003 fc5c 	bl	8006018 <HAL_TIM_PWM_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002766:	f7ff fdaf 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800276a:	2320      	movs	r3, #32
 800276c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002772:	f107 0320 	add.w	r3, r7, #32
 8002776:	4619      	mov	r1, r3
 8002778:	4810      	ldr	r0, [pc, #64]	; (80027bc <MX_TIM3_Init+0xe4>)
 800277a:	f004 fba9 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002784:	f7ff fda0 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002788:	2360      	movs	r3, #96	; 0x60
 800278a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2208      	movs	r2, #8
 800279c:	4619      	mov	r1, r3
 800279e:	4807      	ldr	r0, [pc, #28]	; (80027bc <MX_TIM3_Init+0xe4>)
 80027a0:	f003 fed4 	bl	800654c <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80027aa:	f7ff fd8d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <MX_TIM3_Init+0xe4>)
 80027b0:	f000 f8a2 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80027b4:	bf00      	nop
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200009ec 	.word	0x200009ec
 80027c0:	40000400 	.word	0x40000400

080027c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d8:	463b      	mov	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <MX_TIM4_Init+0x94>)
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <MX_TIM4_Init+0x98>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <MX_TIM4_Init+0x94>)
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <MX_TIM4_Init+0x94>)
 80027ee:	2210      	movs	r2, #16
 80027f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <MX_TIM4_Init+0x94>)
 80027f4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80027f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <MX_TIM4_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <MX_TIM4_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002806:	4814      	ldr	r0, [pc, #80]	; (8002858 <MX_TIM4_Init+0x94>)
 8002808:	f003 fb46 	bl	8005e98 <HAL_TIM_Base_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002812:	f7ff fd59 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800281c:	f107 0308 	add.w	r3, r7, #8
 8002820:	4619      	mov	r1, r3
 8002822:	480d      	ldr	r0, [pc, #52]	; (8002858 <MX_TIM4_Init+0x94>)
 8002824:	f003 ff54 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800282e:	f7ff fd4b 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800283a:	463b      	mov	r3, r7
 800283c:	4619      	mov	r1, r3
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <MX_TIM4_Init+0x94>)
 8002840:	f004 fb46 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800284a:	f7ff fd3d 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000a34 	.word	0x20000a34
 800285c:	40000800 	.word	0x40000800

08002860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800288e:	e026      	b.n	80028de <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_Base_MspInit+0x90>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	e012      	b.n	80028de <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_TIM_Base_MspInit+0x94>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10d      	bne.n	80028de <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_TIM_Base_MspInit+0x8c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a12      	ldr	r2, [pc, #72]	; (8002960 <HAL_TIM_MspPostInit+0x68>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11d      	bne.n	8002956 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_TIM_MspPostInit+0x6c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_TIM_MspPostInit+0x6c>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_TIM_MspPostInit+0x6c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002936:	2301      	movs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002946:	2302      	movs	r3, #2
 8002948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_TIM_MspPostInit+0x70>)
 8002952:	f001 f96b 	bl	8003c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40000400 	.word	0x40000400
 8002964:	40023800 	.word	0x40023800
 8002968:	40020400 	.word	0x40020400

0800296c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <MX_USART3_UART_Init+0x50>)
 8002974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USART3_UART_Init+0x4c>)
 80029a4:	f004 fb24 	bl	8006ff0 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ae:	f7ff fc8b 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000a7c 	.word	0x20000a7c
 80029bc:	40004800 	.word	0x40004800

080029c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0x84>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12c      	bne.n	8002a3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_UART_MspInit+0x88>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_UART_MspInit+0x88>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_UART_MspInit+0x88>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_UART_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_UART_MspInit+0x88>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_UART_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_UART_MspInit+0x8c>)
 8002a38:	f001 f8f8 	bl	8003c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40004800 	.word	0x40004800
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020c00 	.word	0x40020c00

08002a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a56:	490e      	ldr	r1, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a6c:	4c0b      	ldr	r4, [pc, #44]	; (8002a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a7a:	f7ff fdcd 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f005 fad1 	bl	8008024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a82:	f7fe f9df 	bl	8000e44 <main>
  bx  lr    
 8002a86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a90:	200007c8 	.word	0x200007c8
  ldr r2, =_sidata
 8002a94:	08009718 	.word	0x08009718
  ldr r2, =_sbss
 8002a98:	200007c8 	.word	0x200007c8
  ldr r4, =_ebss
 8002a9c:	20000af4 	.word	0x20000af4

08002aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC_IRQHandler>
	...

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_Init+0x40>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_Init+0x40>)
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_Init+0x40>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 fcd3 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad2:	200f      	movs	r0, #15
 8002ad4:	f000 f808 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad8:	f7ff fc82 	bl	80023e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fceb 	bl	80034e2 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f000 fcb3 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000758 	.word	0x20000758
 8002b40:	20000760 	.word	0x20000760
 8002b44:	2000075c 	.word	0x2000075c

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000760 	.word	0x20000760
 8002b6c:	20000ac0 	.word	0x20000ac0

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000ac0 	.word	0x20000ac0

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000760 	.word	0x20000760

08002bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e033      	b.n	8002c4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fd3a 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c16:	f023 0302 	bic.w	r3, r3, #2
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa5c 	bl	80030e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f023 0303 	bic.w	r3, r3, #3
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3e:	e001      	b.n	8002c44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_Start+0x1a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0b2      	b.n	8002dd8 <HAL_ADC_Start+0x180>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d018      	beq.n	8002cba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c98:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <HAL_ADC_Start+0x18c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_ADC_Start+0x190>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0c9a      	lsrs	r2, r3, #18
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d17a      	bne.n	8002dbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d106      	bne.n	8002d16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f023 0206 	bic.w	r2, r3, #6
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
 8002d14:	e002      	b.n	8002d1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_ADC_Start+0x194>)
 8002d26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d12a      	bne.n	8002d94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_ADC_Start+0x198>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d015      	beq.n	8002d74 <HAL_ADC_Start+0x11c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_ADC_Start+0x19c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_Start+0x106>
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_ADC_Start+0x194>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_ADC_Start+0x1a0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d136      	bne.n	8002dd6 <HAL_ADC_Start+0x17e>
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_ADC_Start+0x194>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d130      	bne.n	8002dd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d129      	bne.n	8002dd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	e020      	b.n	8002dd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_ADC_Start+0x198>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d11b      	bne.n	8002dd6 <HAL_ADC_Start+0x17e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d114      	bne.n	8002dd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e00b      	b.n	8002dd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20000758 	.word	0x20000758
 8002de8:	431bde83 	.word	0x431bde83
 8002dec:	40012300 	.word	0x40012300
 8002df0:	40012000 	.word	0x40012000
 8002df4:	40012100 	.word	0x40012100
 8002df8:	40012200 	.word	0x40012200

08002dfc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Stop+0x16>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e021      	b.n	8002e56 <HAL_ADC_Stop+0x5a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1c>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e113      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x244>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	d925      	bls.n	8002ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68d9      	ldr	r1, [r3, #12]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b1e      	subs	r3, #30
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	400a      	ands	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68d9      	ldr	r1, [r3, #12]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3b1e      	subs	r3, #30
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e022      	b.n	8002f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	2207      	movs	r2, #7
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	400a      	ands	r2, r1
 8002f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4403      	add	r3, r0
 8002f30:	409a      	lsls	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d824      	bhi.n	8002f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	3b05      	subs	r3, #5
 8002f54:	221f      	movs	r2, #31
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	400a      	ands	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b05      	subs	r3, #5
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8a:	e04c      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d824      	bhi.n	8002fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b23      	subs	r3, #35	; 0x23
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43da      	mvns	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b23      	subs	r3, #35	; 0x23
 8002fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
 8002fdc:	e023      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	3b41      	subs	r3, #65	; 0x41
 8002ff0:	221f      	movs	r2, #31
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	4618      	mov	r0, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b41      	subs	r3, #65	; 0x41
 800301a:	fa00 f203 	lsl.w	r2, r0, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_ADC_ConfigChannel+0x250>)
 8003028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_ADC_ConfigChannel+0x254>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10f      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1d8>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b12      	cmp	r3, #18
 800303a:	d10b      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_ADC_ConfigChannel+0x254>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d12b      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x23a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_ADC_ConfigChannel+0x258>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x1f4>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b11      	cmp	r3, #17
 800306e:	d122      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <HAL_ADC_ConfigChannel+0x258>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d111      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_ADC_ConfigChannel+0x260>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0c9a      	lsrs	r2, r3, #18
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40012300 	.word	0x40012300
 80030d0:	40012000 	.word	0x40012000
 80030d4:	10000012 	.word	0x10000012
 80030d8:	20000758 	.word	0x20000758
 80030dc:	431bde83 	.word	0x431bde83

080030e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e8:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <ADC_Init+0x1f0>)
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <ADC_Init+0x1f4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d022      	beq.n	80031be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6899      	ldr	r1, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	e00f      	b.n	80031de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0202 	bic.w	r2, r2, #2
 80031ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7e1b      	ldrb	r3, [r3, #24]
 80031f8:	005a      	lsls	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800322a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	3b01      	subs	r3, #1
 8003238:	035a      	lsls	r2, r3, #13
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e007      	b.n	8003254 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	3b01      	subs	r3, #1
 8003270:	051a      	lsls	r2, r3, #20
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003296:	025a      	lsls	r2, r3, #9
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	029a      	lsls	r2, r3, #10
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012300 	.word	0x40012300
 80032d4:	0f000001 	.word	0x0f000001

080032d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	60d3      	str	r3, [r2, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <__NVIC_GetPriorityGrouping+0x18>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0b      	blt.n	8003366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <__NVIC_EnableIRQ+0x38>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff8e 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff29 	bl	80032d8 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff3e 	bl	8003320 <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff8e 	bl	80033cc <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff5d 	bl	8003378 <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff31 	bl	800333c <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffa2 	bl	8003434 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fb32 	bl	8002b70 <HAL_GetTick>
 800350c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d008      	beq.n	800352c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e052      	b.n	80035d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0216 	bic.w	r2, r2, #22
 800353a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_DMA_Abort+0x62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0208 	bic.w	r2, r2, #8
 800356a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	e013      	b.n	80035a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357e:	f7ff faf7 	bl	8002b70 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b05      	cmp	r3, #5
 800358a:	d90c      	bls.n	80035a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2203      	movs	r2, #3
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e015      	b.n	80035d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e4      	bne.n	800357e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	223f      	movs	r2, #63	; 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00c      	b.n	8003612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2205      	movs	r2, #5
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_FLASH_Program+0xa0>)
 8003634:	7e1b      	ldrb	r3, [r3, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_FLASH_Program+0x1e>
 800363a:	2302      	movs	r3, #2
 800363c:	e03b      	b.n	80036b6 <HAL_FLASH_Program+0x96>
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_FLASH_Program+0xa0>)
 8003640:	2201      	movs	r2, #1
 8003642:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003648:	f000 f870 	bl	800372c <FLASH_WaitForLastOperation>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d12b      	bne.n	80036ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800365c:	783b      	ldrb	r3, [r7, #0]
 800365e:	4619      	mov	r1, r3
 8003660:	68b8      	ldr	r0, [r7, #8]
 8003662:	f000 f91b 	bl	800389c <FLASH_Program_Byte>
 8003666:	e016      	b.n	8003696 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800366e:	883b      	ldrh	r3, [r7, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	f000 f8ee 	bl	8003854 <FLASH_Program_HalfWord>
 8003678:	e00d      	b.n	8003696 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d105      	bne.n	800368c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	f000 f8c3 	bl	8003810 <FLASH_Program_Word>
 800368a:	e004      	b.n	8003696 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800368c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003690:	68b8      	ldr	r0, [r7, #8]
 8003692:	f000 f88b 	bl	80037ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003696:	f24c 3050 	movw	r0, #50000	; 0xc350
 800369a:	f000 f847 	bl	800372c <FLASH_WaitForLastOperation>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_FLASH_Program+0xa4>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_FLASH_Program+0xa4>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_FLASH_Program+0xa0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000ac4 	.word	0x20000ac4
 80036c4:	40023c00 	.word	0x40023c00

080036c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_FLASH_Unlock+0x38>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da0b      	bge.n	80036f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_FLASH_Unlock+0x38>)
 80036dc:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_FLASH_Unlock+0x3c>)
 80036de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_FLASH_Unlock+0x38>)
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <HAL_FLASH_Unlock+0x40>)
 80036e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_FLASH_Unlock+0x38>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da01      	bge.n	80036f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80036f2:	79fb      	ldrb	r3, [r7, #7]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40023c00 	.word	0x40023c00
 8003704:	45670123 	.word	0x45670123
 8003708:	cdef89ab 	.word	0xcdef89ab

0800370c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_FLASH_Lock+0x1c>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_FLASH_Lock+0x1c>)
 8003716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40023c00 	.word	0x40023c00

0800372c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <FLASH_WaitForLastOperation+0x78>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800373e:	f7ff fa17 	bl	8002b70 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003744:	e010      	b.n	8003768 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d00c      	beq.n	8003768 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <FLASH_WaitForLastOperation+0x38>
 8003754:	f7ff fa0c 	bl	8002b70 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d201      	bcs.n	8003768 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e019      	b.n	800379c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <FLASH_WaitForLastOperation+0x7c>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e8      	bne.n	8003746 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <FLASH_WaitForLastOperation+0x7c>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <FLASH_WaitForLastOperation+0x7c>)
 8003782:	2201      	movs	r2, #1
 8003784:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <FLASH_WaitForLastOperation+0x7c>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003792:	f000 f8a5 	bl	80038e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
  
}  
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000ac4 	.word	0x20000ac4
 80037a8:	40023c00 	.word	0x40023c00

080037ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <FLASH_Program_DoubleWord+0x60>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80037e2:	f3bf 8f6f 	isb	sy
}
 80037e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80037e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	000a      	movs	r2, r1
 80037f6:	2300      	movs	r3, #0
 80037f8:	68f9      	ldr	r1, [r7, #12]
 80037fa:	3104      	adds	r1, #4
 80037fc:	4613      	mov	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40023c00 	.word	0x40023c00

08003810 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <FLASH_Program_Word+0x40>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <FLASH_Program_Word+0x40>)
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <FLASH_Program_Word+0x40>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <FLASH_Program_Word+0x40>)
 800382c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003830:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <FLASH_Program_Word+0x40>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	4a06      	ldr	r2, [pc, #24]	; (8003850 <FLASH_Program_Word+0x40>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40023c00 	.word	0x40023c00

08003854 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	4a09      	ldr	r2, [pc, #36]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <FLASH_Program_HalfWord+0x44>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	801a      	strh	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00

0800389c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4a06      	ldr	r2, [pc, #24]	; (80038dc <FLASH_Program_Byte+0x40>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	701a      	strb	r2, [r3, #0]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00

080038e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80038e4:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 80038fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 80038fe:	2210      	movs	r2, #16
 8003900:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f043 0308 	orr.w	r3, r3, #8
 8003916:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003918:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 800391c:	2220      	movs	r2, #32
 800391e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003920:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003936:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003954:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003972:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f043 0320 	orr.w	r3, r3, #32
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <FLASH_SetErrorCode+0xc8>)
 8003992:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <FLASH_SetErrorCode+0xc4>)
 8003996:	2202      	movs	r2, #2
 8003998:	60da      	str	r2, [r3, #12]
  }
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	20000ac4 	.word	0x20000ac4

080039ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_FLASHEx_Erase+0xdc>)
 80039c0:	7e1b      	ldrb	r3, [r3, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_FLASHEx_Erase+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e05a      	b.n	8003a80 <HAL_FLASHEx_Erase+0xd4>
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_FLASHEx_Erase+0xdc>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039d4:	f7ff feaa 	bl	800372c <FLASH_WaitForLastOperation>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d14a      	bne.n	8003a78 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d117      	bne.n	8003a22 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 f846 	bl	8003a90 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a08:	f7ff fe90 	bl	800372c <FLASH_WaitForLastOperation>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_FLASHEx_Erase+0xe0>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <HAL_FLASHEx_Erase+0xe0>)
 8003a16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6113      	str	r3, [r2, #16]
 8003a20:	e028      	b.n	8003a74 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e01c      	b.n	8003a64 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	68b8      	ldr	r0, [r7, #8]
 8003a34:	f000 f866 	bl	8003b04 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a3c:	f7ff fe76 	bl	800372c <FLASH_WaitForLastOperation>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_FLASHEx_Erase+0xe0>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <HAL_FLASHEx_Erase+0xe0>)
 8003a4a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003a4e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	601a      	str	r2, [r3, #0]
          break;
 8003a5c:	e00a      	b.n	8003a74 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3da      	bcc.n	8003a2a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a74:	f000 f894 	bl	8003ba0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_FLASHEx_Erase+0xdc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	761a      	strb	r2, [r3, #24]

  return status;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000ac4 	.word	0x20000ac4
 8003a8c:	40023c00 	.word	0x40023c00

08003a90 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <FLASH_MassErase+0x70>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <FLASH_MassErase+0x70>)
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d108      	bne.n	8003ac0 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	6113      	str	r3, [r2, #16]
 8003abe:	e00f      	b.n	8003ae0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <FLASH_MassErase+0x70>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6113      	str	r3, [r2, #16]
 8003ad2:	e005      	b.n	8003ae0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <FLASH_MassErase+0x70>)
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <FLASH_MassErase+0x70>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6113      	str	r3, [r2, #16]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40023c00 	.word	0x40023c00

08003b04 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e010      	b.n	8003b42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d103      	bne.n	8003b2e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e009      	b.n	8003b42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d103      	bne.n	8003b3c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e002      	b.n	8003b42 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	d902      	bls.n	8003b4e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	490f      	ldr	r1, [pc, #60]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b7e:	f043 0302 	orr.w	r3, r3, #2
 8003b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <FLASH_Erase_Sector+0x98>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	6113      	str	r3, [r2, #16]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40023c00 	.word	0x40023c00

08003ba0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d017      	beq.n	8003be0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bde:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <FLASH_FlushCaches+0x88>)
 8003c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c1a:	6013      	str	r3, [r2, #0]
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	e177      	b.n	8003f38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f040 8166 	bne.w	8003f32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d005      	beq.n	8003c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d130      	bne.n	8003ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2203      	movs	r2, #3
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 0201 	and.w	r2, r3, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d017      	beq.n	8003d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d123      	bne.n	8003d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3208      	adds	r2, #8
 8003d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	220f      	movs	r2, #15
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	08da      	lsrs	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3208      	adds	r2, #8
 8003d6a:	69b9      	ldr	r1, [r7, #24]
 8003d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0203 	and.w	r2, r3, #3
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80c0 	beq.w	8003f32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b66      	ldr	r3, [pc, #408]	; (8003f50 <HAL_GPIO_Init+0x324>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_GPIO_Init+0x324>)
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc2:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <HAL_GPIO_Init+0x324>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dce:	4a61      	ldr	r2, [pc, #388]	; (8003f54 <HAL_GPIO_Init+0x328>)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	220f      	movs	r2, #15
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_GPIO_Init+0x32c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d037      	beq.n	8003e6a <HAL_GPIO_Init+0x23e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <HAL_GPIO_Init+0x330>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d031      	beq.n	8003e66 <HAL_GPIO_Init+0x23a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_GPIO_Init+0x334>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02b      	beq.n	8003e62 <HAL_GPIO_Init+0x236>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a55      	ldr	r2, [pc, #340]	; (8003f64 <HAL_GPIO_Init+0x338>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d025      	beq.n	8003e5e <HAL_GPIO_Init+0x232>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_GPIO_Init+0x33c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01f      	beq.n	8003e5a <HAL_GPIO_Init+0x22e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a53      	ldr	r2, [pc, #332]	; (8003f6c <HAL_GPIO_Init+0x340>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_GPIO_Init+0x22a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_GPIO_Init+0x344>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_GPIO_Init+0x226>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a51      	ldr	r2, [pc, #324]	; (8003f74 <HAL_GPIO_Init+0x348>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00d      	beq.n	8003e4e <HAL_GPIO_Init+0x222>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a50      	ldr	r2, [pc, #320]	; (8003f78 <HAL_GPIO_Init+0x34c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <HAL_GPIO_Init+0x21e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4f      	ldr	r2, [pc, #316]	; (8003f7c <HAL_GPIO_Init+0x350>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_GPIO_Init+0x21a>
 8003e42:	2309      	movs	r3, #9
 8003e44:	e012      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e46:	230a      	movs	r3, #10
 8003e48:	e010      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	e00e      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e00c      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e52:	2306      	movs	r3, #6
 8003e54:	e00a      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e56:	2305      	movs	r3, #5
 8003e58:	e008      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	e006      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e004      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e002      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_GPIO_Init+0x240>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f002 0203 	and.w	r2, r2, #3
 8003e72:	0092      	lsls	r2, r2, #2
 8003e74:	4093      	lsls	r3, r2
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e7c:	4935      	ldr	r1, [pc, #212]	; (8003f54 <HAL_GPIO_Init+0x328>)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eb4:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <HAL_GPIO_Init+0x354>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	f67f ae84 	bls.w	8003c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3724      	adds	r7, #36	; 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020c00 	.word	0x40020c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40021400 	.word	0x40021400
 8003f70:	40021800 	.word	0x40021800
 8003f74:	40021c00 	.word	0x40021c00
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40022400 	.word	0x40022400
 8003f80:	40013c00 	.word	0x40013c00

08003f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e001      	b.n	8003fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd f8c4 	bl	8001160 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc fd82 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004048:	f001 fa40 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	; (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	; (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	; (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	460b      	mov	r3, r1
 800427a:	817b      	strh	r3, [r7, #10]
 800427c:	4613      	mov	r3, r2
 800427e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fe fc76 	bl	8002b70 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 80e0 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2319      	movs	r3, #25
 800429a:	2201      	movs	r2, #1
 800429c:	4970      	ldr	r1, [pc, #448]	; (8004460 <HAL_I2C_Master_Transmit+0x1f4>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fa92 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0d3      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2C_Master_Transmit+0x50>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0cc      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d007      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2210      	movs	r2, #16
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	893a      	ldrh	r2, [r7, #8]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_I2C_Master_Transmit+0x1f8>)
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f9ca 	bl	80046c4 <I2C_MasterRequestWrite>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004350:	e066      	b.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fb0c 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fafc 	bl	80049f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d194      	bne.n	8004352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000

08004468 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004478:	f7fe fb7a 	bl	8002b70 <HAL_GetTick>
 800447c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	f040 8111 	bne.w	80046b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2319      	movs	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	4988      	ldr	r1, [pc, #544]	; (80046bc <HAL_I2C_IsDeviceReady+0x254>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f994 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	e104      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2C_IsDeviceReady+0x50>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e0fd      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d007      	beq.n	80044de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2224      	movs	r2, #36	; 0x24
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a70      	ldr	r2, [pc, #448]	; (80046c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f952 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d103      	bne.n	8004542 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0b6      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004554:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004556:	f7fe fb0b 	bl	8002b70 <HAL_GetTick>
 800455a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800458a:	e025      	b.n	80045d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fe faf0 	bl	8002b70 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <HAL_I2C_IsDeviceReady+0x13a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22a0      	movs	r2, #160	; 0xa0
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2ba0      	cmp	r3, #160	; 0xa0
 80045e2:	d005      	beq.n	80045f0 <HAL_I2C_IsDeviceReady+0x188>
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <HAL_I2C_IsDeviceReady+0x188>
 80045ea:	7dbb      	ldrb	r3, [r7, #22]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0cd      	beq.n	800458c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d129      	bne.n	800465a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2319      	movs	r3, #25
 8004632:	2201      	movs	r2, #1
 8004634:	4921      	ldr	r1, [pc, #132]	; (80046bc <HAL_I2C_IsDeviceReady+0x254>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8c6 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e036      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e02c      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004668:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004672:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2319      	movs	r3, #25
 800467a:	2201      	movs	r2, #1
 800467c:	490f      	ldr	r1, [pc, #60]	; (80046bc <HAL_I2C_IsDeviceReady+0x254>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8a2 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e012      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	3301      	adds	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	f4ff af32 	bcc.w	8004502 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	00100002 	.word	0x00100002
 80046c0:	ffff0000 	.word	0xffff0000

080046c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	460b      	mov	r3, r1
 80046d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d006      	beq.n	80046ee <I2C_MasterRequestWrite+0x2a>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d003      	beq.n	80046ee <I2C_MasterRequestWrite+0x2a>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e00b      	b.n	8004718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b12      	cmp	r3, #18
 8004706:	d107      	bne.n	8004718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f84f 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e035      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d108      	bne.n	8004768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e01b      	b.n	80047a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	11db      	asrs	r3, r3, #7
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f063 030f 	orn	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <I2C_MasterRequestWrite+0xfc>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f875 	bl	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e010      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4907      	ldr	r1, [pc, #28]	; (80047c4 <I2C_MasterRequestWrite+0x100>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f865 	bl	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	00010008 	.word	0x00010008
 80047c4:	00010002 	.word	0x00010002

080047c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d8:	e025      	b.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d021      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe f9c5 	bl	8002b70 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d116      	bne.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e023      	b.n	800486e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10d      	bne.n	800484c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	e00c      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0b6      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004884:	e051      	b.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004894:	d123      	bne.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e046      	b.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d021      	beq.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	f7fe f943 	bl	8002b70 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e020      	b.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10c      	bne.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e00b      	b.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	43da      	mvns	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d18d      	bne.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004980:	e02d      	b.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f878 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e02d      	b.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d021      	beq.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe f8e9 	bl	8002b70 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e007      	b.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d1ca      	bne.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a02:	e02d      	b.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f837 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e02d      	b.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d021      	beq.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fe f8a8 	bl	8002b70 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e007      	b.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d1ca      	bne.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d11b      	bne.n	8004ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f043 0204 	orr.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d129      	bne.n	8004b40 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0210 	bic.w	r2, r2, #16
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d12a      	bne.n	8004bbe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	f023 030f 	bic.w	r3, r3, #15
 8004b8e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	89fa      	ldrh	r2, [r7, #14]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x90>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x90>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x90>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x94>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf8:	f7fd ffba 	bl	8002b70 <HAL_GetTick>
 8004bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bfe:	e009      	b.n	8004c14 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c00:	f7fd ffb6 	bl	8002b70 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c0e:	d901      	bls.n	8004c14 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e01f      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d1ee      	bne.n	8004c00 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c28:	f7fd ffa2 	bl	8002b70 <HAL_GetTick>
 8004c2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c2e:	e009      	b.n	8004c44 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c30:	f7fd ff9e 	bl	8002b70 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3e:	d901      	bls.n	8004c44 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e007      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c50:	d1ee      	bne.n	8004c30 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	420e0040 	.word	0x420e0040
 8004c64:	40007000 	.word	0x40007000
 8004c68:	420e0044 	.word	0x420e0044

08004c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e267      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d075      	beq.n	8004d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8a:	4b88      	ldr	r3, [pc, #544]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d00c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b85      	ldr	r3, [pc, #532]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d112      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca2:	4b82      	ldr	r3, [pc, #520]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	4b7e      	ldr	r3, [pc, #504]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05b      	beq.n	8004d74 <HAL_RCC_OscConfig+0x108>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d157      	bne.n	8004d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e242      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d106      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x74>
 8004cd2:	4b76      	ldr	r3, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e01d      	b.n	8004d1c <HAL_RCC_OscConfig+0xb0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x98>
 8004cea:	4b70      	ldr	r3, [pc, #448]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6f      	ldr	r2, [pc, #444]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6c      	ldr	r2, [pc, #432]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0xb0>
 8004d04:	4b69      	ldr	r3, [pc, #420]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a68      	ldr	r2, [pc, #416]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b66      	ldr	r3, [pc, #408]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a65      	ldr	r2, [pc, #404]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fd ff24 	bl	8002b70 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fd ff20 	bl	8002b70 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e207      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	4b5b      	ldr	r3, [pc, #364]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0xc0>
 8004d4a:	e014      	b.n	8004d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd ff10 	bl	8002b70 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fd ff0c 	bl	8002b70 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1f3      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d66:	4b51      	ldr	r3, [pc, #324]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0xe8>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d82:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8e:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d11c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b44      	ldr	r3, [pc, #272]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d116      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCC_OscConfig+0x152>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e1c7      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4937      	ldr	r1, [pc, #220]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	e03a      	b.n	8004e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ddc:	4b34      	ldr	r3, [pc, #208]	; (8004eb0 <HAL_RCC_OscConfig+0x244>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fd fec5 	bl	8002b70 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fd fec1 	bl	8002b70 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1a8      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b28      	ldr	r3, [pc, #160]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4925      	ldr	r1, [pc, #148]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
 8004e1c:	e015      	b.n	8004e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCC_OscConfig+0x244>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd fea4 	bl	8002b70 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fea0 	bl	8002b70 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e187      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d036      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCC_OscConfig+0x248>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fd fe84 	bl	8002b70 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fd fe80 	bl	8002b70 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e167      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x200>
 8004e8a:	e01b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCC_OscConfig+0x248>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fd fe6d 	bl	8002b70 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	e00e      	b.n	8004eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fe69 	bl	8002b70 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d907      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e150      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	42470000 	.word	0x42470000
 8004eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	4b88      	ldr	r3, [pc, #544]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ea      	bne.n	8004e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8097 	beq.w	8005000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed6:	4b81      	ldr	r3, [pc, #516]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	4b7d      	ldr	r3, [pc, #500]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	4a7c      	ldr	r2, [pc, #496]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f02:	4b77      	ldr	r3, [pc, #476]	; (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d118      	bne.n	8004f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0e:	4b74      	ldr	r3, [pc, #464]	; (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a73      	ldr	r2, [pc, #460]	; (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1a:	f7fd fe29 	bl	8002b70 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f22:	f7fd fe25 	bl	8002b70 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e10c      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2ea>
 8004f48:	4b64      	ldr	r3, [pc, #400]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a63      	ldr	r2, [pc, #396]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
 8004f54:	e01c      	b.n	8004f90 <HAL_RCC_OscConfig+0x324>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x30c>
 8004f5e:	4b5f      	ldr	r3, [pc, #380]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a5e      	ldr	r2, [pc, #376]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6a:	4b5c      	ldr	r3, [pc, #368]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a5b      	ldr	r2, [pc, #364]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0x324>
 8004f78:	4b58      	ldr	r3, [pc, #352]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	4a57      	ldr	r2, [pc, #348]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	; 0x70
 8004f84:	4b55      	ldr	r3, [pc, #340]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a54      	ldr	r2, [pc, #336]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd fdea 	bl	8002b70 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fd fde6 	bl	8002b70 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0cb      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb6:	4b49      	ldr	r3, [pc, #292]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ee      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x334>
 8004fc2:	e014      	b.n	8004fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc4:	f7fd fdd4 	bl	8002b70 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fdd0 	bl	8002b70 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0b5      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ee      	bne.n	8004fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d105      	bne.n	8005000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff4:	4b39      	ldr	r3, [pc, #228]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	4a38      	ldr	r2, [pc, #224]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a1 	beq.w	800514c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800500a:	4b34      	ldr	r3, [pc, #208]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b08      	cmp	r3, #8
 8005014:	d05c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d141      	bne.n	80050a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_OscConfig+0x478>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fd fda4 	bl	8002b70 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502c:	f7fd fda0 	bl	8002b70 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e087      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b27      	ldr	r3, [pc, #156]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	3b01      	subs	r3, #1
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	491b      	ldr	r1, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x478>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fd fd79 	bl	8002b70 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005082:	f7fd fd75 	bl	8002b70 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e05c      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x416>
 80050a0:	e054      	b.n	800514c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCC_OscConfig+0x478>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fd fd62 	bl	8002b70 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fd fd5e 	bl	8002b70 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e045      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCC_OscConfig+0x470>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x444>
 80050ce:	e03d      	b.n	800514c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e038      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
 80050e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_RCC_OscConfig+0x4ec>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d028      	beq.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d121      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d11a      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800511e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005120:	4293      	cmp	r3, r2
 8005122:	d111      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	3b01      	subs	r3, #1
 8005132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800

0800515c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0cc      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b68      	ldr	r3, [pc, #416]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d90c      	bls.n	8005198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b63      	ldr	r3, [pc, #396]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0b8      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d020      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a58      	ldr	r2, [pc, #352]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c8:	4b53      	ldr	r3, [pc, #332]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a52      	ldr	r2, [pc, #328]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	494d      	ldr	r1, [pc, #308]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d044      	beq.n	800527c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d119      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d003      	beq.n	800521a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005216:	2b03      	cmp	r3, #3
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e06f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e067      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4934      	ldr	r1, [pc, #208]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800524c:	f7fd fc90 	bl	8002b70 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fd fc8c 	bl	8002b70 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e04f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d20c      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e032      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4916      	ldr	r1, [pc, #88]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	490e      	ldr	r1, [pc, #56]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052e2:	f000 f821 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80052e6:	4602      	mov	r2, r0
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	490a      	ldr	r1, [pc, #40]	; (800531c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	5ccb      	ldrb	r3, [r1, r3]
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCC_ClockConfig+0x1c8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd fbf0 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40023c00 	.word	0x40023c00
 8005318:	40023800 	.word	0x40023800
 800531c:	08009658 	.word	0x08009658
 8005320:	20000758 	.word	0x20000758
 8005324:	2000075c 	.word	0x2000075c

08005328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b090      	sub	sp, #64	; 0x40
 800532e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005338:	2300      	movs	r3, #0
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005340:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b08      	cmp	r3, #8
 800534a:	d00d      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x40>
 800534c:	2b08      	cmp	r3, #8
 800534e:	f200 80a1 	bhi.w	8005494 <HAL_RCC_GetSysClockFreq+0x16c>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x34>
 8005356:	2b04      	cmp	r3, #4
 8005358:	d003      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x3a>
 800535a:	e09b      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b53      	ldr	r3, [pc, #332]	; (80054ac <HAL_RCC_GetSysClockFreq+0x184>)
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005360:	e09b      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005362:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005366:	e098      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005368:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005372:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d028      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	2200      	movs	r2, #0
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	627a      	str	r2, [r7, #36]	; 0x24
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005390:	2100      	movs	r1, #0
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005394:	fb03 f201 	mul.w	r2, r3, r1
 8005398:	2300      	movs	r3, #0
 800539a:	fb00 f303 	mul.w	r3, r0, r3
 800539e:	4413      	add	r3, r2
 80053a0:	4a43      	ldr	r2, [pc, #268]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a2:	fba0 1202 	umull	r1, r2, r0, r2
 80053a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053a8:	460a      	mov	r2, r1
 80053aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80053ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ae:	4413      	add	r3, r2
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	2200      	movs	r2, #0
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	61fa      	str	r2, [r7, #28]
 80053ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053c2:	f7fa ff7d 	bl	80002c0 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4613      	mov	r3, r2
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ce:	e053      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	2200      	movs	r2, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	617a      	str	r2, [r7, #20]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053e2:	f04f 0b00 	mov.w	fp, #0
 80053e6:	4652      	mov	r2, sl
 80053e8:	465b      	mov	r3, fp
 80053ea:	f04f 0000 	mov.w	r0, #0
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	0159      	lsls	r1, r3, #5
 80053f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f8:	0150      	lsls	r0, r2, #5
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	ebb2 080a 	subs.w	r8, r2, sl
 8005402:	eb63 090b 	sbc.w	r9, r3, fp
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005412:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005416:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800541a:	ebb2 0408 	subs.w	r4, r2, r8
 800541e:	eb63 0509 	sbc.w	r5, r3, r9
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	00eb      	lsls	r3, r5, #3
 800542c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005430:	00e2      	lsls	r2, r4, #3
 8005432:	4614      	mov	r4, r2
 8005434:	461d      	mov	r5, r3
 8005436:	eb14 030a 	adds.w	r3, r4, sl
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	eb45 030b 	adc.w	r3, r5, fp
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800544e:	4629      	mov	r1, r5
 8005450:	028b      	lsls	r3, r1, #10
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005458:	4621      	mov	r1, r4
 800545a:	028a      	lsls	r2, r1, #10
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	2200      	movs	r2, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800546c:	f7fa ff28 	bl	80002c0 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4613      	mov	r3, r2
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	3301      	adds	r3, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005492:	e002      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetSysClockFreq+0x184>)
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800549c:	4618      	mov	r0, r3
 800549e:	3740      	adds	r7, #64	; 0x40
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	017d7840 	.word	0x017d7840

080054b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000758 	.word	0x20000758

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d0:	f7ff fff0 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	08009668 	.word	0x08009668

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f8:	f7ff ffdc 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0b5b      	lsrs	r3, r3, #13
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	08009668 	.word	0x08009668

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800554c:	2b00      	cmp	r3, #0
 800554e:	d075      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005550:	4b91      	ldr	r3, [pc, #580]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005556:	f7fd fb0b 	bl	8002b70 <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555e:	f7fd fb07 	bl	8002b70 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e189      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	071b      	lsls	r3, r3, #28
 8005594:	4981      	ldr	r1, [pc, #516]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055a8:	4b7c      	ldr	r3, [pc, #496]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ae:	0f1b      	lsrs	r3, r3, #28
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	019a      	lsls	r2, r3, #6
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	431a      	orrs	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	071b      	lsls	r3, r3, #28
 80055c8:	4974      	ldr	r1, [pc, #464]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055d0:	4b72      	ldr	r3, [pc, #456]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d6:	f023 021f 	bic.w	r2, r3, #31
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	3b01      	subs	r3, #1
 80055e0:	496e      	ldr	r1, [pc, #440]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4964      	ldr	r1, [pc, #400]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005610:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005616:	f7fd faab 	bl	8002b70 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800561e:	f7fd faa7 	bl	8002b70 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e129      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005630:	4b5a      	ldr	r3, [pc, #360]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d079      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005654:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fd fa89 	bl	8002b70 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005662:	f7fd fa85 	bl	8002b70 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e107      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005674:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005680:	d0ef      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	0f1b      	lsrs	r3, r3, #28
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	019a      	lsls	r2, r3, #6
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	493b      	ldr	r1, [pc, #236]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	4934      	ldr	r1, [pc, #208]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	0e1b      	lsrs	r3, r3, #24
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	019a      	lsls	r2, r3, #6
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	071b      	lsls	r3, r3, #28
 80056fc:	4927      	ldr	r1, [pc, #156]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	4922      	ldr	r1, [pc, #136]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005720:	f7fd fa26 	bl	8002b70 <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005728:	f7fd fa22 	bl	8002b70 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0a4      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005746:	d1ef      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 808b 	beq.w	800586c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	4a0f      	ldr	r2, [pc, #60]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	; 0x40
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577e:	f7fd f9f7 	bl	8002b70 <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005784:	e010      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fd f9f3 	bl	8002b70 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d909      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e075      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005798:	42470068 	.word	0x42470068
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470070 	.word	0x42470070
 80057a4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a8:	4b38      	ldr	r3, [pc, #224]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0e8      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b4:	4b36      	ldr	r3, [pc, #216]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02f      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d028      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d2:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057dc:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057e2:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e8:	4a29      	ldr	r2, [pc, #164]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d114      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fd f9b9 	bl	8002b70 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fd f9b5 	bl	8002b70 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e035      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ee      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d10d      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	4912      	ldr	r1, [pc, #72]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]
 800584c:	e005      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005854:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800585c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	490a      	ldr	r1, [pc, #40]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005868:	4313      	orrs	r3, r2
 800586a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005880:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40007000 	.word	0x40007000
 8005890:	40023800 	.word	0x40023800
 8005894:	42470e40 	.word	0x42470e40
 8005898:	424711e0 	.word	0x424711e0

0800589c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e066      	b.n	8005980 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7f5b      	ldrb	r3, [r3, #29]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fd62 	bl	800238c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	22ca      	movs	r2, #202	; 0xca
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2253      	movs	r2, #83	; 0x53
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa45 	bl	8005d6e <RTC_EnterInitMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d12c      	bne.n	8005948 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68d2      	ldr	r2, [r2, #12]
 8005928:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6919      	ldr	r1, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	041a      	lsls	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa4c 	bl	8005ddc <RTC_ExitInitMode>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d113      	bne.n	8005976 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7f1b      	ldrb	r3, [r3, #28]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_RTC_SetTime+0x1c>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e087      	b.n	8005ab4 <HAL_RTC_SetTime+0x12c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2202      	movs	r2, #2
 80059ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d126      	bne.n	8005a04 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fa29 	bl	8005e26 <RTC_ByteToBcd2>
 80059d4:	4603      	mov	r3, r0
 80059d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fa22 	bl	8005e26 <RTC_ByteToBcd2>
 80059e2:	4603      	mov	r3, r0
 80059e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	789b      	ldrb	r3, [r3, #2]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fa1a 	bl	8005e26 <RTC_ByteToBcd2>
 80059f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	78db      	ldrb	r3, [r3, #3]
 80059fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e018      	b.n	8005a36 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a24:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a2a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	22ca      	movs	r2, #202	; 0xca
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2253      	movs	r2, #83	; 0x53
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f991 	bl	8005d6e <RTC_EnterInitMode>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d120      	bne.n	8005a98 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a60:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a64:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f9a4 	bl	8005ddc <RTC_ExitInitMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	22ff      	movs	r2, #255	; 0xff
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	771a      	strb	r2, [r3, #28]

  return status;
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd90      	pop	{r4, r7, pc}

08005abc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005aee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005af2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	0d9b      	lsrs	r3, r3, #22
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11a      	bne.n	8005b6e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f98f 	bl	8005e60 <RTC_Bcd2ToByte>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f986 	bl	8005e60 <RTC_Bcd2ToByte>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	789b      	ldrb	r3, [r3, #2]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f97d 	bl	8005e60 <RTC_Bcd2ToByte>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	7f1b      	ldrb	r3, [r3, #28]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_RTC_SetDate+0x1c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e071      	b.n	8005c78 <HAL_RTC_SetDate+0x100>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_RTC_SetDate+0x4c>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	330a      	adds	r3, #10
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11c      	bne.n	8005c04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f929 	bl	8005e26 <RTC_ByteToBcd2>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f922 	bl	8005e26 <RTC_ByteToBcd2>
 8005be2:	4603      	mov	r3, r0
 8005be4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005be6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	789b      	ldrb	r3, [r3, #2]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f91a 	bl	8005e26 <RTC_ByteToBcd2>
 8005bf2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bf4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e00e      	b.n	8005c22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	22ca      	movs	r2, #202	; 0xca
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2253      	movs	r2, #83	; 0x53
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f89b 	bl	8005d6e <RTC_EnterInitMode>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10c      	bne.n	8005c5c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f8c2 	bl	8005ddc <RTC_ExitInitMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	771a      	strb	r2, [r3, #28]

  return status;
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd90      	pop	{r4, r7, pc}

08005c80 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	0b5b      	lsrs	r3, r3, #13
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11a      	bne.n	8005d14 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f8bc 	bl	8005e60 <RTC_Bcd2ToByte>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 f8b3 	bl	8005e60 <RTC_Bcd2ToByte>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	789b      	ldrb	r3, [r3, #2]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f8aa 	bl	8005e60 <RTC_Bcd2ToByte>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d38:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d3a:	f7fc ff19 	bl	8002b70 <HAL_GetTick>
 8005d3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d40:	e009      	b.n	8005d56 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d42:	f7fc ff15 	bl	8002b70 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d50:	d901      	bls.n	8005d56 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e007      	b.n	8005d66 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ee      	beq.n	8005d42 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d122      	bne.n	8005dd2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9c:	f7fc fee8 	bl	8002b70 <HAL_GetTick>
 8005da0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005da2:	e00c      	b.n	8005dbe <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005da4:	f7fc fee4 	bl	8002b70 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db2:	d904      	bls.n	8005dbe <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2204      	movs	r2, #4
 8005db8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <RTC_EnterInitMode+0x64>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d1e8      	bne.n	8005da4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ff89 	bl	8005d1e <HAL_RTC_WaitForSynchro>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e34:	e005      	b.n	8005e42 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	3b0a      	subs	r3, #10
 8005e40:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d8f6      	bhi.n	8005e36 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b2db      	uxtb	r3, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	4413      	add	r3, r2
 8005e8a:	b2db      	uxtb	r3, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e041      	b.n	8005f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fcce 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f000 fcea 	bl	80068b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d001      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e04e      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a23      	ldr	r2, [pc, #140]	; (8005ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <HAL_TIM_Base_Start_IT+0xd8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a18      	ldr	r2, [pc, #96]	; (8006014 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d010      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	e007      	b.n	8005fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40001800 	.word	0x40001800

08006018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e041      	b.n	80060ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f839 	bl	80060b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 fc2a 	bl	80068b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_TIM_PWM_Start+0x24>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	bf14      	ite	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	2300      	moveq	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e022      	b.n	8006136 <HAL_TIM_PWM_Start+0x6a>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d109      	bne.n	800610a <HAL_TIM_PWM_Start+0x3e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e015      	b.n	8006136 <HAL_TIM_PWM_Start+0x6a>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d109      	bne.n	8006124 <HAL_TIM_PWM_Start+0x58>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	bf14      	ite	ne
 800611c:	2301      	movne	r3, #1
 800611e:	2300      	moveq	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e008      	b.n	8006136 <HAL_TIM_PWM_Start+0x6a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	bf14      	ite	ne
 8006130:	2301      	movne	r3, #1
 8006132:	2300      	moveq	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07c      	b.n	8006238 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0x82>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	e013      	b.n	8006176 <HAL_TIM_PWM_Start+0xaa>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b04      	cmp	r3, #4
 8006152:	d104      	bne.n	800615e <HAL_TIM_PWM_Start+0x92>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615c:	e00b      	b.n	8006176 <HAL_TIM_PWM_Start+0xaa>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d104      	bne.n	800616e <HAL_TIM_PWM_Start+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616c:	e003      	b.n	8006176 <HAL_TIM_PWM_Start+0xaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fe80 	bl	8006e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <HAL_TIM_PWM_Start+0x174>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIM_PWM_Start+0xcc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2c      	ldr	r2, [pc, #176]	; (8006244 <HAL_TIM_PWM_Start+0x178>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d101      	bne.n	800619c <HAL_TIM_PWM_Start+0xd0>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_TIM_PWM_Start+0xd2>
 800619c:	2300      	movs	r3, #0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a22      	ldr	r2, [pc, #136]	; (8006240 <HAL_TIM_PWM_Start+0x174>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c4:	d01d      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <HAL_TIM_PWM_Start+0x17c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	; (800624c <HAL_TIM_PWM_Start+0x180>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <HAL_TIM_PWM_Start+0x184>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_TIM_PWM_Start+0x178>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a18      	ldr	r2, [pc, #96]	; (8006254 <HAL_TIM_PWM_Start+0x188>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIM_PWM_Start+0x136>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a16      	ldr	r2, [pc, #88]	; (8006258 <HAL_TIM_PWM_Start+0x18c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d010      	beq.n	8006236 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	e007      	b.n	8006236 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40010000 	.word	0x40010000
 8006244:	40010400 	.word	0x40010400
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40014000 	.word	0x40014000
 8006258:	40001800 	.word	0x40001800

0800625c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fe08 	bl	8006e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2e      	ldr	r2, [pc, #184]	; (8006334 <HAL_TIM_PWM_Stop+0xd8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_PWM_Stop+0x2c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_TIM_PWM_Stop+0xdc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Stop+0x30>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_TIM_PWM_Stop+0x32>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d017      	beq.n	80062c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	f241 1311 	movw	r3, #4369	; 0x1111
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10f      	bne.n	80062c2 <HAL_TIM_PWM_Stop+0x66>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	f240 4344 	movw	r3, #1092	; 0x444
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_PWM_Stop+0x66>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10f      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x96>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	f240 4344 	movw	r3, #1092	; 0x444
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x96>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Stop+0xa6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	e013      	b.n	800632a <HAL_TIM_PWM_Stop+0xce>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Stop+0xb6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	e00b      	b.n	800632a <HAL_TIM_PWM_Stop+0xce>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d104      	bne.n	8006322 <HAL_TIM_PWM_Stop+0xc6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	e003      	b.n	800632a <HAL_TIM_PWM_Stop+0xce>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40010000 	.word	0x40010000
 8006338:	40010400 	.word	0x40010400

0800633c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d122      	bne.n	8006398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d11b      	bne.n	8006398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0202 	mvn.w	r2, #2
 8006368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa77 	bl	8006872 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa69 	bl	800685e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fa7a 	bl	8006886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d122      	bne.n	80063ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d11b      	bne.n	80063ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0204 	mvn.w	r2, #4
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa4d 	bl	8006872 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa3f 	bl	800685e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa50 	bl	8006886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d122      	bne.n	8006440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d11b      	bne.n	8006440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0208 	mvn.w	r2, #8
 8006410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2204      	movs	r2, #4
 8006416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa23 	bl	8006872 <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa15 	bl	800685e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa26 	bl	8006886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b10      	cmp	r3, #16
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b10      	cmp	r3, #16
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0210 	mvn.w	r2, #16
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2208      	movs	r2, #8
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9f9 	bl	8006872 <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9eb 	bl	800685e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f9fc 	bl	8006886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10e      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d107      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0201 	mvn.w	r2, #1
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fa fe9e 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b80      	cmp	r3, #128	; 0x80
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fd78 	bl	8006fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d10e      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d107      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9c1 	bl	800689a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b20      	cmp	r3, #32
 8006524:	d10e      	bne.n	8006544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b20      	cmp	r3, #32
 8006532:	d107      	bne.n	8006544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0220 	mvn.w	r2, #32
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fd42 	bl	8006fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006566:	2302      	movs	r3, #2
 8006568:	e0ae      	b.n	80066c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b0c      	cmp	r3, #12
 8006576:	f200 809f 	bhi.w	80066b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065b5 	.word	0x080065b5
 8006584:	080066b9 	.word	0x080066b9
 8006588:	080066b9 	.word	0x080066b9
 800658c:	080066b9 	.word	0x080066b9
 8006590:	080065f5 	.word	0x080065f5
 8006594:	080066b9 	.word	0x080066b9
 8006598:	080066b9 	.word	0x080066b9
 800659c:	080066b9 	.word	0x080066b9
 80065a0:	08006637 	.word	0x08006637
 80065a4:	080066b9 	.word	0x080066b9
 80065a8:	080066b9 	.word	0x080066b9
 80065ac:	080066b9 	.word	0x080066b9
 80065b0:	08006677 	.word	0x08006677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fa18 	bl	80069f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6999      	ldr	r1, [r3, #24]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	619a      	str	r2, [r3, #24]
      break;
 80065f2:	e064      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fa68 	bl	8006ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800660e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	619a      	str	r2, [r3, #24]
      break;
 8006634:	e043      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fabd 	bl	8006bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0208 	orr.w	r2, r2, #8
 8006650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0204 	bic.w	r2, r2, #4
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	61da      	str	r2, [r3, #28]
      break;
 8006674:	e023      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fb11 	bl	8006ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69d9      	ldr	r1, [r3, #28]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	021a      	lsls	r2, r3, #8
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	61da      	str	r2, [r3, #28]
      break;
 80066b6:	e002      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIM_ConfigClockSource+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0b4      	b.n	8006856 <HAL_TIM_ConfigClockSource+0x186>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800670a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006724:	d03e      	beq.n	80067a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672a:	f200 8087 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x16c>
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006732:	f000 8086 	beq.w	8006842 <HAL_TIM_ConfigClockSource+0x172>
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673a:	d87f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 800673c:	2b70      	cmp	r3, #112	; 0x70
 800673e:	d01a      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0xa6>
 8006740:	2b70      	cmp	r3, #112	; 0x70
 8006742:	d87b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 8006744:	2b60      	cmp	r3, #96	; 0x60
 8006746:	d050      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x11a>
 8006748:	2b60      	cmp	r3, #96	; 0x60
 800674a:	d877      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 800674c:	2b50      	cmp	r3, #80	; 0x50
 800674e:	d03c      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0xfa>
 8006750:	2b50      	cmp	r3, #80	; 0x50
 8006752:	d873      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d058      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x13a>
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d86f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b30      	cmp	r3, #48	; 0x30
 800675e:	d064      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	2b30      	cmp	r3, #48	; 0x30
 8006762:	d86b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d060      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15a>
 8006768:	2b20      	cmp	r3, #32
 800676a:	d867      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05c      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15a>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d05a      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15a>
 8006774:	e062      	b.n	800683c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6899      	ldr	r1, [r3, #8]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f000 fb5d 	bl	8006e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	609a      	str	r2, [r3, #8]
      break;
 80067a2:	e04f      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	6899      	ldr	r1, [r3, #8]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f000 fb46 	bl	8006e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c6:	609a      	str	r2, [r3, #8]
      break;
 80067c8:	e03c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f000 faba 	bl	8006d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2150      	movs	r1, #80	; 0x50
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb13 	bl	8006e0e <TIM_ITRx_SetConfig>
      break;
 80067e8:	e02c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 fad9 	bl	8006dae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2160      	movs	r1, #96	; 0x60
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fb03 	bl	8006e0e <TIM_ITRx_SetConfig>
      break;
 8006808:	e01c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fa9a 	bl	8006d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2140      	movs	r1, #64	; 0x40
 8006822:	4618      	mov	r0, r3
 8006824:	f000 faf3 	bl	8006e0e <TIM_ITRx_SetConfig>
      break;
 8006828:	e00c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f000 faea 	bl	8006e0e <TIM_ITRx_SetConfig>
      break;
 800683a:	e003      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e000      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a40      	ldr	r2, [pc, #256]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d00f      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d007      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3a      	ldr	r2, [pc, #232]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d027      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d023      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01f      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d017      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a28      	ldr	r2, [pc, #160]	; (80069d8 <TIM_Base_SetConfig+0x128>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a27      	ldr	r2, [pc, #156]	; (80069dc <TIM_Base_SetConfig+0x12c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <TIM_Base_SetConfig+0x130>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <TIM_Base_SetConfig+0x134>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <TIM_Base_SetConfig+0x138>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a23      	ldr	r2, [pc, #140]	; (80069ec <TIM_Base_SetConfig+0x13c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d108      	bne.n	8006974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800
 80069e4:	40001800 	.word	0x40001800
 80069e8:	40001c00 	.word	0x40001c00
 80069ec:	40002000 	.word	0x40002000

080069f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f023 0302 	bic.w	r3, r3, #2
 8006a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <TIM_OC1_SetConfig+0xd8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC1_SetConfig+0x64>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <TIM_OC1_SetConfig+0xdc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10c      	bne.n	8006a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0308 	bic.w	r3, r3, #8
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <TIM_OC1_SetConfig+0xd8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_OC1_SetConfig+0x8e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a14      	ldr	r2, [pc, #80]	; (8006acc <TIM_OC1_SetConfig+0xdc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d111      	bne.n	8006aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	621a      	str	r2, [r3, #32]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40010400 	.word	0x40010400

08006ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0210 	bic.w	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0320 	bic.w	r3, r3, #32
 8006b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <TIM_OC2_SetConfig+0xe4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_OC2_SetConfig+0x68>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <TIM_OC2_SetConfig+0xe8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d10d      	bne.n	8006b54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <TIM_OC2_SetConfig+0xe4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC2_SetConfig+0x94>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <TIM_OC2_SetConfig+0xe8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d113      	bne.n	8006b8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40010400 	.word	0x40010400

08006bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <TIM_OC3_SetConfig+0xe0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC3_SetConfig+0x66>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <TIM_OC3_SetConfig+0xe4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10d      	bne.n	8006c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a16      	ldr	r2, [pc, #88]	; (8006c9c <TIM_OC3_SetConfig+0xe0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC3_SetConfig+0x92>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <TIM_OC3_SetConfig+0xe4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d113      	bne.n	8006c76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <TIM_OC4_SetConfig+0xa4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC4_SetConfig+0x68>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <TIM_OC4_SetConfig+0xa8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d109      	bne.n	8006d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40010400 	.word	0x40010400

08006d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f023 0201 	bic.w	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f023 030a 	bic.w	r3, r3, #10
 8006d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	621a      	str	r2, [r3, #32]
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b087      	sub	sp, #28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0210 	bic.w	r2, r3, #16
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	031b      	lsls	r3, r3, #12
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f043 0307 	orr.w	r3, r3, #7
 8006e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	021a      	lsls	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	2201      	movs	r2, #1
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1a      	ldr	r2, [r3, #32]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	401a      	ands	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1a      	ldr	r2, [r3, #32]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e05a      	b.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a21      	ldr	r2, [pc, #132]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f34:	d01d      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1a      	ldr	r2, [pc, #104]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10c      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40001800 	.word	0x40001800

08006fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e03f      	b.n	8007082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb fcd2 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	; 0x24
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fd7b 	bl	8007b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08a      	sub	sp, #40	; 0x28
 800708e:	af02      	add	r7, sp, #8
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d17c      	bne.n	80071a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_UART_Transmit+0x2c>
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e075      	b.n	80071a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_UART_Transmit+0x3e>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e06e      	b.n	80071a6 <HAL_UART_Transmit+0x11c>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2221      	movs	r2, #33	; 0x21
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070de:	f7fb fd47 	bl	8002b70 <HAL_GetTick>
 80070e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f8:	d108      	bne.n	800710c <HAL_UART_Transmit+0x82>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e003      	b.n	8007114 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800711c:	e02a      	b.n	8007174 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2200      	movs	r2, #0
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 faf9 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e036      	b.n	80071a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800714c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3302      	adds	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e007      	b.n	8007166 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1cf      	bne.n	800711e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2200      	movs	r2, #0
 8007186:	2140      	movs	r1, #64	; 0x40
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fac9 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e006      	b.n	80071a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e000      	b.n	80071a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071a4:	2302      	movs	r3, #2
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b0ba      	sub	sp, #232	; 0xe8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10f      	bne.n	8007216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_UART_IRQHandler+0x66>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fbd3 	bl	80079ba <UART_Receive_IT>
      return;
 8007214:	e256      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80de 	beq.w	80073dc <HAL_UART_IRQHandler+0x22c>
 8007220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80d1 	beq.w	80073dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <HAL_UART_IRQHandler+0xae>
 8007246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f043 0201 	orr.w	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <HAL_UART_IRQHandler+0xd2>
 800726a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f043 0202 	orr.w	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <HAL_UART_IRQHandler+0xf6>
 800728e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f043 0204 	orr.w	r2, r3, #4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d011      	beq.n	80072d6 <HAL_UART_IRQHandler+0x126>
 80072b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f043 0208 	orr.w	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 81ed 	beq.w	80076ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_UART_IRQHandler+0x14e>
 80072ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fb5e 	bl	80079ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <HAL_UART_IRQHandler+0x17a>
 8007322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04f      	beq.n	80073ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa66 	bl	80077fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d141      	bne.n	80073c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3314      	adds	r3, #20
 8007344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800736a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800736e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1d9      	bne.n	800733e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	2b00      	cmp	r3, #0
 8007390:	d013      	beq.n	80073ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	4a7d      	ldr	r2, [pc, #500]	; (800758c <HAL_UART_IRQHandler+0x3dc>)
 8007398:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fc f91b 	bl	80035da <HAL_DMA_Abort_IT>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	e00e      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f99a 	bl	80076f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e00a      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f996 	bl	80076f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	e006      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f992 	bl	80076f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073d6:	e170      	b.n	80076ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	bf00      	nop
    return;
 80073da:	e16e      	b.n	80076ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f040 814a 	bne.w	800767a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8143 	beq.w	800767a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 813c 	beq.w	800767a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	f040 80b4 	bne.w	8007590 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8140 	beq.w	80076be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007446:	429a      	cmp	r2, r3
 8007448:	f080 8139 	bcs.w	80076be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	f000 8088 	beq.w	8007572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800747c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800748e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800749a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d9      	bne.n	8007462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3314      	adds	r3, #20
 80074ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e1      	bne.n	80074ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800750e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800751c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e3      	bne.n	80074ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007554:	65ba      	str	r2, [r7, #88]	; 0x58
 8007556:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800755a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e3      	bne.n	8007530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	4618      	mov	r0, r3
 800756e:	f7fb ffc4 	bl	80034fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800757a:	b29b      	uxth	r3, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f8c0 	bl	8007708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007588:	e099      	b.n	80076be <HAL_UART_IRQHandler+0x50e>
 800758a:	bf00      	nop
 800758c:	080078c3 	.word	0x080078c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007598:	b29b      	uxth	r3, r3
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 808b 	beq.w	80076c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8086 	beq.w	80076c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075da:	647a      	str	r2, [r7, #68]	; 0x44
 80075dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e3      	bne.n	80075b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	623b      	str	r3, [r7, #32]
   return(result);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007612:	633a      	str	r2, [r7, #48]	; 0x30
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e3      	bne.n	80075ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	60fb      	str	r3, [r7, #12]
   return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0310 	bic.w	r3, r3, #16
 800764a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007658:	61fa      	str	r2, [r7, #28]
 800765a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	617b      	str	r3, [r7, #20]
   return(result);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e3      	bne.n	8007634 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800766c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f848 	bl	8007708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007678:	e023      	b.n	80076c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <HAL_UART_IRQHandler+0x4ea>
 8007686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f929 	bl	80078ea <UART_Transmit_IT>
    return;
 8007698:	e014      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00e      	beq.n	80076c4 <HAL_UART_IRQHandler+0x514>
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f969 	bl	800798a <UART_EndTransmit_IT>
    return;
 80076b8:	e004      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
    return;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
      return;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
      return;
 80076c2:	bf00      	nop
  }
}
 80076c4:	37e8      	adds	r7, #232	; 0xe8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b090      	sub	sp, #64	; 0x40
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	4613      	mov	r3, r2
 800772e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007730:	e050      	b.n	80077d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d04c      	beq.n	80077d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800773a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <UART_WaitOnFlagUntilTimeout+0x30>
 8007740:	f7fb fa16 	bl	8002b70 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774c:	429a      	cmp	r2, r3
 800774e:	d241      	bcs.n	80077d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007770:	637a      	str	r2, [r7, #52]	; 0x34
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3314      	adds	r3, #20
 800778a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	613b      	str	r3, [r7, #16]
   return(result);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a4:	623a      	str	r2, [r7, #32]
 80077a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	69f9      	ldr	r1, [r7, #28]
 80077aa:	6a3a      	ldr	r2, [r7, #32]
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e00f      	b.n	80077f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4013      	ands	r3, r2
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d09f      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3740      	adds	r7, #64	; 0x40
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b095      	sub	sp, #84	; 0x54
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007824:	643a      	str	r2, [r7, #64]	; 0x40
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800782a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	61fb      	str	r3, [r7, #28]
   return(result);
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3314      	adds	r3, #20
 8007856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	2b01      	cmp	r3, #1
 8007872:	d119      	bne.n	80078a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007894:	61ba      	str	r2, [r7, #24]
 8007896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078b6:	bf00      	nop
 80078b8:	3754      	adds	r7, #84	; 0x54
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7ff ff09 	bl	80076f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b21      	cmp	r3, #33	; 0x21
 80078fc:	d13e      	bne.n	800797c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007906:	d114      	bne.n	8007932 <UART_Transmit_IT+0x48>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d110      	bne.n	8007932 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007924:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	1c9a      	adds	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]
 8007930:	e008      	b.n	8007944 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6211      	str	r1, [r2, #32]
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10f      	bne.n	8007978 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007966:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007976:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800797c:	2302      	movs	r3, #2
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fe8e 	bl	80076cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b08c      	sub	sp, #48	; 0x30
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b22      	cmp	r3, #34	; 0x22
 80079cc:	f040 80ab 	bne.w	8007b26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d8:	d117      	bne.n	8007a0a <UART_Receive_IT+0x50>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d113      	bne.n	8007a0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	629a      	str	r2, [r3, #40]	; 0x28
 8007a08:	e026      	b.n	8007a58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1c:	d007      	beq.n	8007a2e <UART_Receive_IT+0x74>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <UART_Receive_IT+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e008      	b.n	8007a4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4619      	mov	r1, r3
 8007a66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d15a      	bne.n	8007b22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0220 	bic.w	r2, r2, #32
 8007a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0201 	bic.w	r2, r2, #1
 8007a9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d135      	bne.n	8007b18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f023 0310 	bic.w	r3, r3, #16
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	330c      	adds	r3, #12
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad2:	623a      	str	r2, [r7, #32]
 8007ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	69f9      	ldr	r1, [r7, #28]
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d10a      	bne.n	8007b0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fdf9 	bl	8007708 <HAL_UARTEx_RxEventCallback>
 8007b16:	e002      	b.n	8007b1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fde1 	bl	80076e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e002      	b.n	8007b28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e000      	b.n	8007b28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b26:	2302      	movs	r3, #2
  }
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3730      	adds	r7, #48	; 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b34:	b0c0      	sub	sp, #256	; 0x100
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	68d9      	ldr	r1, [r3, #12]
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	ea40 0301 	orr.w	r3, r0, r1
 8007b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b88:	f021 010c 	bic.w	r1, r1, #12
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b96:	430b      	orrs	r3, r1
 8007b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	6999      	ldr	r1, [r3, #24]
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	ea40 0301 	orr.w	r3, r0, r1
 8007bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b8f      	ldr	r3, [pc, #572]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d005      	beq.n	8007bd0 <UART_SetConfig+0xa0>
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b8d      	ldr	r3, [pc, #564]	; (8007e00 <UART_SetConfig+0x2d0>)
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d104      	bne.n	8007bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bd0:	f7fd fc90 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 8007bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007bd8:	e003      	b.n	8007be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bda:	f7fd fc77 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8007bde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bec:	f040 810c 	bne.w	8007e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c02:	4622      	mov	r2, r4
 8007c04:	462b      	mov	r3, r5
 8007c06:	1891      	adds	r1, r2, r2
 8007c08:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c0a:	415b      	adcs	r3, r3
 8007c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c12:	4621      	mov	r1, r4
 8007c14:	eb12 0801 	adds.w	r8, r2, r1
 8007c18:	4629      	mov	r1, r5
 8007c1a:	eb43 0901 	adc.w	r9, r3, r1
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c32:	4690      	mov	r8, r2
 8007c34:	4699      	mov	r9, r3
 8007c36:	4623      	mov	r3, r4
 8007c38:	eb18 0303 	adds.w	r3, r8, r3
 8007c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c40:	462b      	mov	r3, r5
 8007c42:	eb49 0303 	adc.w	r3, r9, r3
 8007c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c5e:	460b      	mov	r3, r1
 8007c60:	18db      	adds	r3, r3, r3
 8007c62:	653b      	str	r3, [r7, #80]	; 0x50
 8007c64:	4613      	mov	r3, r2
 8007c66:	eb42 0303 	adc.w	r3, r2, r3
 8007c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c74:	f7f8 fb24 	bl	80002c0 <__aeabi_uldivmod>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	011c      	lsls	r4, r3, #4
 8007c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ca8:	4641      	mov	r1, r8
 8007caa:	eb12 0a01 	adds.w	sl, r2, r1
 8007cae:	4649      	mov	r1, r9
 8007cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cc8:	4692      	mov	sl, r2
 8007cca:	469b      	mov	fp, r3
 8007ccc:	4643      	mov	r3, r8
 8007cce:	eb1a 0303 	adds.w	r3, sl, r3
 8007cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	18db      	adds	r3, r3, r3
 8007cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	eb42 0303 	adc.w	r3, r2, r3
 8007d00:	647b      	str	r3, [r7, #68]	; 0x44
 8007d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d0a:	f7f8 fad9 	bl	80002c0 <__aeabi_uldivmod>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	4b3b      	ldr	r3, [pc, #236]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007d16:	fba3 2301 	umull	r2, r3, r3, r1
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	2264      	movs	r2, #100	; 0x64
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	1acb      	subs	r3, r1, r3
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d2a:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d38:	441c      	add	r4, r3
 8007d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	1891      	adds	r1, r2, r2
 8007d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d54:	415b      	adcs	r3, r3
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	1851      	adds	r1, r2, r1
 8007d60:	6339      	str	r1, [r7, #48]	; 0x30
 8007d62:	4649      	mov	r1, r9
 8007d64:	414b      	adcs	r3, r1
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d74:	4659      	mov	r1, fp
 8007d76:	00cb      	lsls	r3, r1, #3
 8007d78:	4651      	mov	r1, sl
 8007d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d7e:	4651      	mov	r1, sl
 8007d80:	00ca      	lsls	r2, r1, #3
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	4603      	mov	r3, r0
 8007d88:	4642      	mov	r2, r8
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d90:	464b      	mov	r3, r9
 8007d92:	460a      	mov	r2, r1
 8007d94:	eb42 0303 	adc.w	r3, r2, r3
 8007d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007da8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007db0:	460b      	mov	r3, r1
 8007db2:	18db      	adds	r3, r3, r3
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007db6:	4613      	mov	r3, r2
 8007db8:	eb42 0303 	adc.w	r3, r2, r3
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dc6:	f7f8 fa7b 	bl	80002c0 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	f003 0207 	and.w	r2, r3, #7
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4422      	add	r2, r4
 8007df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007df8:	e105      	b.n	8008006 <UART_SetConfig+0x4d6>
 8007dfa:	bf00      	nop
 8007dfc:	40011000 	.word	0x40011000
 8007e00:	40011400 	.word	0x40011400
 8007e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	1891      	adds	r1, r2, r2
 8007e20:	6239      	str	r1, [r7, #32]
 8007e22:	415b      	adcs	r3, r3
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
 8007e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	1854      	adds	r4, r2, r1
 8007e2e:	4649      	mov	r1, r9
 8007e30:	eb43 0501 	adc.w	r5, r3, r1
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	00eb      	lsls	r3, r5, #3
 8007e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e42:	00e2      	lsls	r2, r4, #3
 8007e44:	4614      	mov	r4, r2
 8007e46:	461d      	mov	r5, r3
 8007e48:	4643      	mov	r3, r8
 8007e4a:	18e3      	adds	r3, r4, r3
 8007e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e50:	464b      	mov	r3, r9
 8007e52:	eb45 0303 	adc.w	r3, r5, r3
 8007e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	f04f 0300 	mov.w	r3, #0
 8007e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e76:	4629      	mov	r1, r5
 8007e78:	008b      	lsls	r3, r1, #2
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e80:	4621      	mov	r1, r4
 8007e82:	008a      	lsls	r2, r1, #2
 8007e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e88:	f7f8 fa1a 	bl	80002c0 <__aeabi_uldivmod>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4b60      	ldr	r3, [pc, #384]	; (8008014 <UART_SetConfig+0x4e4>)
 8007e92:	fba3 2302 	umull	r2, r3, r3, r2
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	011c      	lsls	r4, r3, #4
 8007e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	1891      	adds	r1, r2, r2
 8007eb2:	61b9      	str	r1, [r7, #24]
 8007eb4:	415b      	adcs	r3, r3
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	1851      	adds	r1, r2, r1
 8007ec0:	6139      	str	r1, [r7, #16]
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	414b      	adcs	r3, r1
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	f04f 0300 	mov.w	r3, #0
 8007ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	00cb      	lsls	r3, r1, #3
 8007ed8:	4651      	mov	r1, sl
 8007eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ede:	4651      	mov	r1, sl
 8007ee0:	00ca      	lsls	r2, r1, #3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4642      	mov	r2, r8
 8007eea:	189b      	adds	r3, r3, r2
 8007eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	eb42 0303 	adc.w	r3, r2, r3
 8007ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f14:	4649      	mov	r1, r9
 8007f16:	008b      	lsls	r3, r1, #2
 8007f18:	4641      	mov	r1, r8
 8007f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f1e:	4641      	mov	r1, r8
 8007f20:	008a      	lsls	r2, r1, #2
 8007f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f26:	f7f8 f9cb 	bl	80002c0 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4b39      	ldr	r3, [pc, #228]	; (8008014 <UART_SetConfig+0x4e4>)
 8007f30:	fba3 1302 	umull	r1, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	2164      	movs	r1, #100	; 0x64
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	3332      	adds	r3, #50	; 0x32
 8007f42:	4a34      	ldr	r2, [pc, #208]	; (8008014 <UART_SetConfig+0x4e4>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f4e:	441c      	add	r4, r3
 8007f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f54:	2200      	movs	r2, #0
 8007f56:	673b      	str	r3, [r7, #112]	; 0x70
 8007f58:	677a      	str	r2, [r7, #116]	; 0x74
 8007f5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f5e:	4642      	mov	r2, r8
 8007f60:	464b      	mov	r3, r9
 8007f62:	1891      	adds	r1, r2, r2
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	415b      	adcs	r3, r3
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f6e:	4641      	mov	r1, r8
 8007f70:	1851      	adds	r1, r2, r1
 8007f72:	6039      	str	r1, [r7, #0]
 8007f74:	4649      	mov	r1, r9
 8007f76:	414b      	adcs	r3, r1
 8007f78:	607b      	str	r3, [r7, #4]
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f86:	4659      	mov	r1, fp
 8007f88:	00cb      	lsls	r3, r1, #3
 8007f8a:	4651      	mov	r1, sl
 8007f8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f90:	4651      	mov	r1, sl
 8007f92:	00ca      	lsls	r2, r1, #3
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	eb42 0303 	adc.w	r3, r2, r3
 8007fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007fb4:	667a      	str	r2, [r7, #100]	; 0x64
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	008b      	lsls	r3, r1, #2
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fcc:	4641      	mov	r1, r8
 8007fce:	008a      	lsls	r2, r1, #2
 8007fd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fd4:	f7f8 f974 	bl	80002c0 <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <UART_SetConfig+0x4e4>)
 8007fde:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	2164      	movs	r1, #100	; 0x64
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	3332      	adds	r3, #50	; 0x32
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <UART_SetConfig+0x4e4>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4422      	add	r2, r4
 8008004:	609a      	str	r2, [r3, #8]
}
 8008006:	bf00      	nop
 8008008:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800800c:	46bd      	mov	sp, r7
 800800e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008012:	bf00      	nop
 8008014:	51eb851f 	.word	0x51eb851f

08008018 <__errno>:
 8008018:	4b01      	ldr	r3, [pc, #4]	; (8008020 <__errno+0x8>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000764 	.word	0x20000764

08008024 <__libc_init_array>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	4d0d      	ldr	r5, [pc, #52]	; (800805c <__libc_init_array+0x38>)
 8008028:	4c0d      	ldr	r4, [pc, #52]	; (8008060 <__libc_init_array+0x3c>)
 800802a:	1b64      	subs	r4, r4, r5
 800802c:	10a4      	asrs	r4, r4, #2
 800802e:	2600      	movs	r6, #0
 8008030:	42a6      	cmp	r6, r4
 8008032:	d109      	bne.n	8008048 <__libc_init_array+0x24>
 8008034:	4d0b      	ldr	r5, [pc, #44]	; (8008064 <__libc_init_array+0x40>)
 8008036:	4c0c      	ldr	r4, [pc, #48]	; (8008068 <__libc_init_array+0x44>)
 8008038:	f001 fa00 	bl	800943c <_init>
 800803c:	1b64      	subs	r4, r4, r5
 800803e:	10a4      	asrs	r4, r4, #2
 8008040:	2600      	movs	r6, #0
 8008042:	42a6      	cmp	r6, r4
 8008044:	d105      	bne.n	8008052 <__libc_init_array+0x2e>
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	f855 3b04 	ldr.w	r3, [r5], #4
 800804c:	4798      	blx	r3
 800804e:	3601      	adds	r6, #1
 8008050:	e7ee      	b.n	8008030 <__libc_init_array+0xc>
 8008052:	f855 3b04 	ldr.w	r3, [r5], #4
 8008056:	4798      	blx	r3
 8008058:	3601      	adds	r6, #1
 800805a:	e7f2      	b.n	8008042 <__libc_init_array+0x1e>
 800805c:	08009710 	.word	0x08009710
 8008060:	08009710 	.word	0x08009710
 8008064:	08009710 	.word	0x08009710
 8008068:	08009714 	.word	0x08009714

0800806c <memset>:
 800806c:	4402      	add	r2, r0
 800806e:	4603      	mov	r3, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <iprintf>:
 800807c:	b40f      	push	{r0, r1, r2, r3}
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <iprintf+0x2c>)
 8008080:	b513      	push	{r0, r1, r4, lr}
 8008082:	681c      	ldr	r4, [r3, #0]
 8008084:	b124      	cbz	r4, 8008090 <iprintf+0x14>
 8008086:	69a3      	ldr	r3, [r4, #24]
 8008088:	b913      	cbnz	r3, 8008090 <iprintf+0x14>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fa7e 	bl	800858c <__sinit>
 8008090:	ab05      	add	r3, sp, #20
 8008092:	9a04      	ldr	r2, [sp, #16]
 8008094:	68a1      	ldr	r1, [r4, #8]
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fde3 	bl	8008c64 <_vfiprintf_r>
 800809e:	b002      	add	sp, #8
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a4:	b004      	add	sp, #16
 80080a6:	4770      	bx	lr
 80080a8:	20000764 	.word	0x20000764

080080ac <_puts_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460e      	mov	r6, r1
 80080b0:	4605      	mov	r5, r0
 80080b2:	b118      	cbz	r0, 80080bc <_puts_r+0x10>
 80080b4:	6983      	ldr	r3, [r0, #24]
 80080b6:	b90b      	cbnz	r3, 80080bc <_puts_r+0x10>
 80080b8:	f000 fa68 	bl	800858c <__sinit>
 80080bc:	69ab      	ldr	r3, [r5, #24]
 80080be:	68ac      	ldr	r4, [r5, #8]
 80080c0:	b913      	cbnz	r3, 80080c8 <_puts_r+0x1c>
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 fa62 	bl	800858c <__sinit>
 80080c8:	4b2c      	ldr	r3, [pc, #176]	; (800817c <_puts_r+0xd0>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d120      	bne.n	8008110 <_puts_r+0x64>
 80080ce:	686c      	ldr	r4, [r5, #4]
 80080d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d405      	bmi.n	80080e2 <_puts_r+0x36>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	0598      	lsls	r0, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_puts_r+0x36>
 80080dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080de:	f000 faf3 	bl	80086c8 <__retarget_lock_acquire_recursive>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	0719      	lsls	r1, r3, #28
 80080e6:	d51d      	bpl.n	8008124 <_puts_r+0x78>
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	b1db      	cbz	r3, 8008124 <_puts_r+0x78>
 80080ec:	3e01      	subs	r6, #1
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	bb39      	cbnz	r1, 800814a <_puts_r+0x9e>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da38      	bge.n	8008170 <_puts_r+0xc4>
 80080fe:	4622      	mov	r2, r4
 8008100:	210a      	movs	r1, #10
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f868 	bl	80081d8 <__swbuf_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d011      	beq.n	8008130 <_puts_r+0x84>
 800810c:	250a      	movs	r5, #10
 800810e:	e011      	b.n	8008134 <_puts_r+0x88>
 8008110:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <_puts_r+0xd4>)
 8008112:	429c      	cmp	r4, r3
 8008114:	d101      	bne.n	800811a <_puts_r+0x6e>
 8008116:	68ac      	ldr	r4, [r5, #8]
 8008118:	e7da      	b.n	80080d0 <_puts_r+0x24>
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <_puts_r+0xd8>)
 800811c:	429c      	cmp	r4, r3
 800811e:	bf08      	it	eq
 8008120:	68ec      	ldreq	r4, [r5, #12]
 8008122:	e7d5      	b.n	80080d0 <_puts_r+0x24>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f8a8 	bl	800827c <__swsetup_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	d0dd      	beq.n	80080ec <_puts_r+0x40>
 8008130:	f04f 35ff 	mov.w	r5, #4294967295
 8008134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d405      	bmi.n	8008146 <_puts_r+0x9a>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	059b      	lsls	r3, r3, #22
 800813e:	d402      	bmi.n	8008146 <_puts_r+0x9a>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f000 fac2 	bl	80086ca <__retarget_lock_release_recursive>
 8008146:	4628      	mov	r0, r5
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	2b00      	cmp	r3, #0
 800814c:	da04      	bge.n	8008158 <_puts_r+0xac>
 800814e:	69a2      	ldr	r2, [r4, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	dc06      	bgt.n	8008162 <_puts_r+0xb6>
 8008154:	290a      	cmp	r1, #10
 8008156:	d004      	beq.n	8008162 <_puts_r+0xb6>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	7019      	strb	r1, [r3, #0]
 8008160:	e7c5      	b.n	80080ee <_puts_r+0x42>
 8008162:	4622      	mov	r2, r4
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f837 	bl	80081d8 <__swbuf_r>
 800816a:	3001      	adds	r0, #1
 800816c:	d1bf      	bne.n	80080ee <_puts_r+0x42>
 800816e:	e7df      	b.n	8008130 <_puts_r+0x84>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	250a      	movs	r5, #10
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	701d      	strb	r5, [r3, #0]
 800817a:	e7db      	b.n	8008134 <_puts_r+0x88>
 800817c:	08009694 	.word	0x08009694
 8008180:	080096b4 	.word	0x080096b4
 8008184:	08009674 	.word	0x08009674

08008188 <puts>:
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <puts+0xc>)
 800818a:	4601      	mov	r1, r0
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f7ff bf8d 	b.w	80080ac <_puts_r>
 8008192:	bf00      	nop
 8008194:	20000764 	.word	0x20000764

08008198 <siprintf>:
 8008198:	b40e      	push	{r1, r2, r3}
 800819a:	b500      	push	{lr}
 800819c:	b09c      	sub	sp, #112	; 0x70
 800819e:	ab1d      	add	r3, sp, #116	; 0x74
 80081a0:	9002      	str	r0, [sp, #8]
 80081a2:	9006      	str	r0, [sp, #24]
 80081a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081a8:	4809      	ldr	r0, [pc, #36]	; (80081d0 <siprintf+0x38>)
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	9104      	str	r1, [sp, #16]
 80081ae:	4909      	ldr	r1, [pc, #36]	; (80081d4 <siprintf+0x3c>)
 80081b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b4:	9105      	str	r1, [sp, #20]
 80081b6:	6800      	ldr	r0, [r0, #0]
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	a902      	add	r1, sp, #8
 80081bc:	f000 fc28 	bl	8008a10 <_svfiprintf_r>
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	b01c      	add	sp, #112	; 0x70
 80081c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081cc:	b003      	add	sp, #12
 80081ce:	4770      	bx	lr
 80081d0:	20000764 	.word	0x20000764
 80081d4:	ffff0208 	.word	0xffff0208

080081d8 <__swbuf_r>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	460e      	mov	r6, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	4605      	mov	r5, r0
 80081e0:	b118      	cbz	r0, 80081ea <__swbuf_r+0x12>
 80081e2:	6983      	ldr	r3, [r0, #24]
 80081e4:	b90b      	cbnz	r3, 80081ea <__swbuf_r+0x12>
 80081e6:	f000 f9d1 	bl	800858c <__sinit>
 80081ea:	4b21      	ldr	r3, [pc, #132]	; (8008270 <__swbuf_r+0x98>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	d12b      	bne.n	8008248 <__swbuf_r+0x70>
 80081f0:	686c      	ldr	r4, [r5, #4]
 80081f2:	69a3      	ldr	r3, [r4, #24]
 80081f4:	60a3      	str	r3, [r4, #8]
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	071a      	lsls	r2, r3, #28
 80081fa:	d52f      	bpl.n	800825c <__swbuf_r+0x84>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	b36b      	cbz	r3, 800825c <__swbuf_r+0x84>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	6820      	ldr	r0, [r4, #0]
 8008204:	1ac0      	subs	r0, r0, r3
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	b2f6      	uxtb	r6, r6
 800820a:	4283      	cmp	r3, r0
 800820c:	4637      	mov	r7, r6
 800820e:	dc04      	bgt.n	800821a <__swbuf_r+0x42>
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f926 	bl	8008464 <_fflush_r>
 8008218:	bb30      	cbnz	r0, 8008268 <__swbuf_r+0x90>
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	3b01      	subs	r3, #1
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	701e      	strb	r6, [r3, #0]
 8008228:	6963      	ldr	r3, [r4, #20]
 800822a:	3001      	adds	r0, #1
 800822c:	4283      	cmp	r3, r0
 800822e:	d004      	beq.n	800823a <__swbuf_r+0x62>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d506      	bpl.n	8008244 <__swbuf_r+0x6c>
 8008236:	2e0a      	cmp	r6, #10
 8008238:	d104      	bne.n	8008244 <__swbuf_r+0x6c>
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f000 f911 	bl	8008464 <_fflush_r>
 8008242:	b988      	cbnz	r0, 8008268 <__swbuf_r+0x90>
 8008244:	4638      	mov	r0, r7
 8008246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <__swbuf_r+0x9c>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swbuf_r+0x7a>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7cf      	b.n	80081f2 <__swbuf_r+0x1a>
 8008252:	4b09      	ldr	r3, [pc, #36]	; (8008278 <__swbuf_r+0xa0>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7ca      	b.n	80081f2 <__swbuf_r+0x1a>
 800825c:	4621      	mov	r1, r4
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f80c 	bl	800827c <__swsetup_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	d0cb      	beq.n	8008200 <__swbuf_r+0x28>
 8008268:	f04f 37ff 	mov.w	r7, #4294967295
 800826c:	e7ea      	b.n	8008244 <__swbuf_r+0x6c>
 800826e:	bf00      	nop
 8008270:	08009694 	.word	0x08009694
 8008274:	080096b4 	.word	0x080096b4
 8008278:	08009674 	.word	0x08009674

0800827c <__swsetup_r>:
 800827c:	4b32      	ldr	r3, [pc, #200]	; (8008348 <__swsetup_r+0xcc>)
 800827e:	b570      	push	{r4, r5, r6, lr}
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	4606      	mov	r6, r0
 8008284:	460c      	mov	r4, r1
 8008286:	b125      	cbz	r5, 8008292 <__swsetup_r+0x16>
 8008288:	69ab      	ldr	r3, [r5, #24]
 800828a:	b913      	cbnz	r3, 8008292 <__swsetup_r+0x16>
 800828c:	4628      	mov	r0, r5
 800828e:	f000 f97d 	bl	800858c <__sinit>
 8008292:	4b2e      	ldr	r3, [pc, #184]	; (800834c <__swsetup_r+0xd0>)
 8008294:	429c      	cmp	r4, r3
 8008296:	d10f      	bne.n	80082b8 <__swsetup_r+0x3c>
 8008298:	686c      	ldr	r4, [r5, #4]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082a0:	0719      	lsls	r1, r3, #28
 80082a2:	d42c      	bmi.n	80082fe <__swsetup_r+0x82>
 80082a4:	06dd      	lsls	r5, r3, #27
 80082a6:	d411      	bmi.n	80082cc <__swsetup_r+0x50>
 80082a8:	2309      	movs	r3, #9
 80082aa:	6033      	str	r3, [r6, #0]
 80082ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	e03e      	b.n	8008336 <__swsetup_r+0xba>
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <__swsetup_r+0xd4>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	d101      	bne.n	80082c2 <__swsetup_r+0x46>
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	e7eb      	b.n	800829a <__swsetup_r+0x1e>
 80082c2:	4b24      	ldr	r3, [pc, #144]	; (8008354 <__swsetup_r+0xd8>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	bf08      	it	eq
 80082c8:	68ec      	ldreq	r4, [r5, #12]
 80082ca:	e7e6      	b.n	800829a <__swsetup_r+0x1e>
 80082cc:	0758      	lsls	r0, r3, #29
 80082ce:	d512      	bpl.n	80082f6 <__swsetup_r+0x7a>
 80082d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082d2:	b141      	cbz	r1, 80082e6 <__swsetup_r+0x6a>
 80082d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d8:	4299      	cmp	r1, r3
 80082da:	d002      	beq.n	80082e2 <__swsetup_r+0x66>
 80082dc:	4630      	mov	r0, r6
 80082de:	f000 fa5b 	bl	8008798 <_free_r>
 80082e2:	2300      	movs	r3, #0
 80082e4:	6363      	str	r3, [r4, #52]	; 0x34
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	2300      	movs	r3, #0
 80082f0:	6063      	str	r3, [r4, #4]
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f043 0308 	orr.w	r3, r3, #8
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	b94b      	cbnz	r3, 8008316 <__swsetup_r+0x9a>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800830c:	d003      	beq.n	8008316 <__swsetup_r+0x9a>
 800830e:	4621      	mov	r1, r4
 8008310:	4630      	mov	r0, r6
 8008312:	f000 fa01 	bl	8008718 <__smakebuf_r>
 8008316:	89a0      	ldrh	r0, [r4, #12]
 8008318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800831c:	f010 0301 	ands.w	r3, r0, #1
 8008320:	d00a      	beq.n	8008338 <__swsetup_r+0xbc>
 8008322:	2300      	movs	r3, #0
 8008324:	60a3      	str	r3, [r4, #8]
 8008326:	6963      	ldr	r3, [r4, #20]
 8008328:	425b      	negs	r3, r3
 800832a:	61a3      	str	r3, [r4, #24]
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	b943      	cbnz	r3, 8008342 <__swsetup_r+0xc6>
 8008330:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008334:	d1ba      	bne.n	80082ac <__swsetup_r+0x30>
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	0781      	lsls	r1, r0, #30
 800833a:	bf58      	it	pl
 800833c:	6963      	ldrpl	r3, [r4, #20]
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	e7f4      	b.n	800832c <__swsetup_r+0xb0>
 8008342:	2000      	movs	r0, #0
 8008344:	e7f7      	b.n	8008336 <__swsetup_r+0xba>
 8008346:	bf00      	nop
 8008348:	20000764 	.word	0x20000764
 800834c:	08009694 	.word	0x08009694
 8008350:	080096b4 	.word	0x080096b4
 8008354:	08009674 	.word	0x08009674

08008358 <__sflush_r>:
 8008358:	898a      	ldrh	r2, [r1, #12]
 800835a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	4605      	mov	r5, r0
 8008360:	0710      	lsls	r0, r2, #28
 8008362:	460c      	mov	r4, r1
 8008364:	d458      	bmi.n	8008418 <__sflush_r+0xc0>
 8008366:	684b      	ldr	r3, [r1, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc05      	bgt.n	8008378 <__sflush_r+0x20>
 800836c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	dc02      	bgt.n	8008378 <__sflush_r+0x20>
 8008372:	2000      	movs	r0, #0
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800837a:	2e00      	cmp	r6, #0
 800837c:	d0f9      	beq.n	8008372 <__sflush_r+0x1a>
 800837e:	2300      	movs	r3, #0
 8008380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008384:	682f      	ldr	r7, [r5, #0]
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	d032      	beq.n	80083f0 <__sflush_r+0x98>
 800838a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	075a      	lsls	r2, r3, #29
 8008390:	d505      	bpl.n	800839e <__sflush_r+0x46>
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	1ac0      	subs	r0, r0, r3
 8008396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008398:	b10b      	cbz	r3, 800839e <__sflush_r+0x46>
 800839a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800839c:	1ac0      	subs	r0, r0, r3
 800839e:	2300      	movs	r3, #0
 80083a0:	4602      	mov	r2, r0
 80083a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a4:	6a21      	ldr	r1, [r4, #32]
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b0      	blx	r6
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	d106      	bne.n	80083be <__sflush_r+0x66>
 80083b0:	6829      	ldr	r1, [r5, #0]
 80083b2:	291d      	cmp	r1, #29
 80083b4:	d82c      	bhi.n	8008410 <__sflush_r+0xb8>
 80083b6:	4a2a      	ldr	r2, [pc, #168]	; (8008460 <__sflush_r+0x108>)
 80083b8:	40ca      	lsrs	r2, r1
 80083ba:	07d6      	lsls	r6, r2, #31
 80083bc:	d528      	bpl.n	8008410 <__sflush_r+0xb8>
 80083be:	2200      	movs	r2, #0
 80083c0:	6062      	str	r2, [r4, #4]
 80083c2:	04d9      	lsls	r1, r3, #19
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	6022      	str	r2, [r4, #0]
 80083c8:	d504      	bpl.n	80083d4 <__sflush_r+0x7c>
 80083ca:	1c42      	adds	r2, r0, #1
 80083cc:	d101      	bne.n	80083d2 <__sflush_r+0x7a>
 80083ce:	682b      	ldr	r3, [r5, #0]
 80083d0:	b903      	cbnz	r3, 80083d4 <__sflush_r+0x7c>
 80083d2:	6560      	str	r0, [r4, #84]	; 0x54
 80083d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d6:	602f      	str	r7, [r5, #0]
 80083d8:	2900      	cmp	r1, #0
 80083da:	d0ca      	beq.n	8008372 <__sflush_r+0x1a>
 80083dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d002      	beq.n	80083ea <__sflush_r+0x92>
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 f9d7 	bl	8008798 <_free_r>
 80083ea:	2000      	movs	r0, #0
 80083ec:	6360      	str	r0, [r4, #52]	; 0x34
 80083ee:	e7c1      	b.n	8008374 <__sflush_r+0x1c>
 80083f0:	6a21      	ldr	r1, [r4, #32]
 80083f2:	2301      	movs	r3, #1
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b0      	blx	r6
 80083f8:	1c41      	adds	r1, r0, #1
 80083fa:	d1c7      	bne.n	800838c <__sflush_r+0x34>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0c4      	beq.n	800838c <__sflush_r+0x34>
 8008402:	2b1d      	cmp	r3, #29
 8008404:	d001      	beq.n	800840a <__sflush_r+0xb2>
 8008406:	2b16      	cmp	r3, #22
 8008408:	d101      	bne.n	800840e <__sflush_r+0xb6>
 800840a:	602f      	str	r7, [r5, #0]
 800840c:	e7b1      	b.n	8008372 <__sflush_r+0x1a>
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	e7ad      	b.n	8008374 <__sflush_r+0x1c>
 8008418:	690f      	ldr	r7, [r1, #16]
 800841a:	2f00      	cmp	r7, #0
 800841c:	d0a9      	beq.n	8008372 <__sflush_r+0x1a>
 800841e:	0793      	lsls	r3, r2, #30
 8008420:	680e      	ldr	r6, [r1, #0]
 8008422:	bf08      	it	eq
 8008424:	694b      	ldreq	r3, [r1, #20]
 8008426:	600f      	str	r7, [r1, #0]
 8008428:	bf18      	it	ne
 800842a:	2300      	movne	r3, #0
 800842c:	eba6 0807 	sub.w	r8, r6, r7
 8008430:	608b      	str	r3, [r1, #8]
 8008432:	f1b8 0f00 	cmp.w	r8, #0
 8008436:	dd9c      	ble.n	8008372 <__sflush_r+0x1a>
 8008438:	6a21      	ldr	r1, [r4, #32]
 800843a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800843c:	4643      	mov	r3, r8
 800843e:	463a      	mov	r2, r7
 8008440:	4628      	mov	r0, r5
 8008442:	47b0      	blx	r6
 8008444:	2800      	cmp	r0, #0
 8008446:	dc06      	bgt.n	8008456 <__sflush_r+0xfe>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	e78e      	b.n	8008374 <__sflush_r+0x1c>
 8008456:	4407      	add	r7, r0
 8008458:	eba8 0800 	sub.w	r8, r8, r0
 800845c:	e7e9      	b.n	8008432 <__sflush_r+0xda>
 800845e:	bf00      	nop
 8008460:	20400001 	.word	0x20400001

08008464 <_fflush_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	690b      	ldr	r3, [r1, #16]
 8008468:	4605      	mov	r5, r0
 800846a:	460c      	mov	r4, r1
 800846c:	b913      	cbnz	r3, 8008474 <_fflush_r+0x10>
 800846e:	2500      	movs	r5, #0
 8008470:	4628      	mov	r0, r5
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	b118      	cbz	r0, 800847e <_fflush_r+0x1a>
 8008476:	6983      	ldr	r3, [r0, #24]
 8008478:	b90b      	cbnz	r3, 800847e <_fflush_r+0x1a>
 800847a:	f000 f887 	bl	800858c <__sinit>
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <_fflush_r+0x6c>)
 8008480:	429c      	cmp	r4, r3
 8008482:	d11b      	bne.n	80084bc <_fflush_r+0x58>
 8008484:	686c      	ldr	r4, [r5, #4]
 8008486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0ef      	beq.n	800846e <_fflush_r+0xa>
 800848e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008490:	07d0      	lsls	r0, r2, #31
 8008492:	d404      	bmi.n	800849e <_fflush_r+0x3a>
 8008494:	0599      	lsls	r1, r3, #22
 8008496:	d402      	bmi.n	800849e <_fflush_r+0x3a>
 8008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849a:	f000 f915 	bl	80086c8 <__retarget_lock_acquire_recursive>
 800849e:	4628      	mov	r0, r5
 80084a0:	4621      	mov	r1, r4
 80084a2:	f7ff ff59 	bl	8008358 <__sflush_r>
 80084a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084a8:	07da      	lsls	r2, r3, #31
 80084aa:	4605      	mov	r5, r0
 80084ac:	d4e0      	bmi.n	8008470 <_fflush_r+0xc>
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	059b      	lsls	r3, r3, #22
 80084b2:	d4dd      	bmi.n	8008470 <_fflush_r+0xc>
 80084b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084b6:	f000 f908 	bl	80086ca <__retarget_lock_release_recursive>
 80084ba:	e7d9      	b.n	8008470 <_fflush_r+0xc>
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <_fflush_r+0x70>)
 80084be:	429c      	cmp	r4, r3
 80084c0:	d101      	bne.n	80084c6 <_fflush_r+0x62>
 80084c2:	68ac      	ldr	r4, [r5, #8]
 80084c4:	e7df      	b.n	8008486 <_fflush_r+0x22>
 80084c6:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <_fflush_r+0x74>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	bf08      	it	eq
 80084cc:	68ec      	ldreq	r4, [r5, #12]
 80084ce:	e7da      	b.n	8008486 <_fflush_r+0x22>
 80084d0:	08009694 	.word	0x08009694
 80084d4:	080096b4 	.word	0x080096b4
 80084d8:	08009674 	.word	0x08009674

080084dc <std>:
 80084dc:	2300      	movs	r3, #0
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	e9c0 3300 	strd	r3, r3, [r0]
 80084e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ea:	6083      	str	r3, [r0, #8]
 80084ec:	8181      	strh	r1, [r0, #12]
 80084ee:	6643      	str	r3, [r0, #100]	; 0x64
 80084f0:	81c2      	strh	r2, [r0, #14]
 80084f2:	6183      	str	r3, [r0, #24]
 80084f4:	4619      	mov	r1, r3
 80084f6:	2208      	movs	r2, #8
 80084f8:	305c      	adds	r0, #92	; 0x5c
 80084fa:	f7ff fdb7 	bl	800806c <memset>
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x38>)
 8008500:	6263      	str	r3, [r4, #36]	; 0x24
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <std+0x3c>)
 8008504:	62a3      	str	r3, [r4, #40]	; 0x28
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <std+0x40>)
 8008508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800850a:	4b05      	ldr	r3, [pc, #20]	; (8008520 <std+0x44>)
 800850c:	6224      	str	r4, [r4, #32]
 800850e:	6323      	str	r3, [r4, #48]	; 0x30
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	0800920d 	.word	0x0800920d
 8008518:	0800922f 	.word	0x0800922f
 800851c:	08009267 	.word	0x08009267
 8008520:	0800928b 	.word	0x0800928b

08008524 <_cleanup_r>:
 8008524:	4901      	ldr	r1, [pc, #4]	; (800852c <_cleanup_r+0x8>)
 8008526:	f000 b8af 	b.w	8008688 <_fwalk_reent>
 800852a:	bf00      	nop
 800852c:	08008465 	.word	0x08008465

08008530 <__sfmoreglue>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	2268      	movs	r2, #104	; 0x68
 8008534:	1e4d      	subs	r5, r1, #1
 8008536:	4355      	muls	r5, r2
 8008538:	460e      	mov	r6, r1
 800853a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800853e:	f000 f997 	bl	8008870 <_malloc_r>
 8008542:	4604      	mov	r4, r0
 8008544:	b140      	cbz	r0, 8008558 <__sfmoreglue+0x28>
 8008546:	2100      	movs	r1, #0
 8008548:	e9c0 1600 	strd	r1, r6, [r0]
 800854c:	300c      	adds	r0, #12
 800854e:	60a0      	str	r0, [r4, #8]
 8008550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008554:	f7ff fd8a 	bl	800806c <memset>
 8008558:	4620      	mov	r0, r4
 800855a:	bd70      	pop	{r4, r5, r6, pc}

0800855c <__sfp_lock_acquire>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sfp_lock_acquire+0x8>)
 800855e:	f000 b8b3 	b.w	80086c8 <__retarget_lock_acquire_recursive>
 8008562:	bf00      	nop
 8008564:	20000ae5 	.word	0x20000ae5

08008568 <__sfp_lock_release>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__sfp_lock_release+0x8>)
 800856a:	f000 b8ae 	b.w	80086ca <__retarget_lock_release_recursive>
 800856e:	bf00      	nop
 8008570:	20000ae5 	.word	0x20000ae5

08008574 <__sinit_lock_acquire>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__sinit_lock_acquire+0x8>)
 8008576:	f000 b8a7 	b.w	80086c8 <__retarget_lock_acquire_recursive>
 800857a:	bf00      	nop
 800857c:	20000ae6 	.word	0x20000ae6

08008580 <__sinit_lock_release>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__sinit_lock_release+0x8>)
 8008582:	f000 b8a2 	b.w	80086ca <__retarget_lock_release_recursive>
 8008586:	bf00      	nop
 8008588:	20000ae6 	.word	0x20000ae6

0800858c <__sinit>:
 800858c:	b510      	push	{r4, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	f7ff fff0 	bl	8008574 <__sinit_lock_acquire>
 8008594:	69a3      	ldr	r3, [r4, #24]
 8008596:	b11b      	cbz	r3, 80085a0 <__sinit+0x14>
 8008598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859c:	f7ff bff0 	b.w	8008580 <__sinit_lock_release>
 80085a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085a4:	6523      	str	r3, [r4, #80]	; 0x50
 80085a6:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <__sinit+0x68>)
 80085a8:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <__sinit+0x6c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	bf04      	itt	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	61a3      	streq	r3, [r4, #24]
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 f820 	bl	80085fc <__sfp>
 80085bc:	6060      	str	r0, [r4, #4]
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 f81c 	bl	80085fc <__sfp>
 80085c4:	60a0      	str	r0, [r4, #8]
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 f818 	bl	80085fc <__sfp>
 80085cc:	2200      	movs	r2, #0
 80085ce:	60e0      	str	r0, [r4, #12]
 80085d0:	2104      	movs	r1, #4
 80085d2:	6860      	ldr	r0, [r4, #4]
 80085d4:	f7ff ff82 	bl	80084dc <std>
 80085d8:	68a0      	ldr	r0, [r4, #8]
 80085da:	2201      	movs	r2, #1
 80085dc:	2109      	movs	r1, #9
 80085de:	f7ff ff7d 	bl	80084dc <std>
 80085e2:	68e0      	ldr	r0, [r4, #12]
 80085e4:	2202      	movs	r2, #2
 80085e6:	2112      	movs	r1, #18
 80085e8:	f7ff ff78 	bl	80084dc <std>
 80085ec:	2301      	movs	r3, #1
 80085ee:	61a3      	str	r3, [r4, #24]
 80085f0:	e7d2      	b.n	8008598 <__sinit+0xc>
 80085f2:	bf00      	nop
 80085f4:	08009670 	.word	0x08009670
 80085f8:	08008525 	.word	0x08008525

080085fc <__sfp>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	4607      	mov	r7, r0
 8008600:	f7ff ffac 	bl	800855c <__sfp_lock_acquire>
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <__sfp+0x84>)
 8008606:	681e      	ldr	r6, [r3, #0]
 8008608:	69b3      	ldr	r3, [r6, #24]
 800860a:	b913      	cbnz	r3, 8008612 <__sfp+0x16>
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff ffbd 	bl	800858c <__sinit>
 8008612:	3648      	adds	r6, #72	; 0x48
 8008614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008618:	3b01      	subs	r3, #1
 800861a:	d503      	bpl.n	8008624 <__sfp+0x28>
 800861c:	6833      	ldr	r3, [r6, #0]
 800861e:	b30b      	cbz	r3, 8008664 <__sfp+0x68>
 8008620:	6836      	ldr	r6, [r6, #0]
 8008622:	e7f7      	b.n	8008614 <__sfp+0x18>
 8008624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008628:	b9d5      	cbnz	r5, 8008660 <__sfp+0x64>
 800862a:	4b16      	ldr	r3, [pc, #88]	; (8008684 <__sfp+0x88>)
 800862c:	60e3      	str	r3, [r4, #12]
 800862e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008632:	6665      	str	r5, [r4, #100]	; 0x64
 8008634:	f000 f847 	bl	80086c6 <__retarget_lock_init_recursive>
 8008638:	f7ff ff96 	bl	8008568 <__sfp_lock_release>
 800863c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008644:	6025      	str	r5, [r4, #0]
 8008646:	61a5      	str	r5, [r4, #24]
 8008648:	2208      	movs	r2, #8
 800864a:	4629      	mov	r1, r5
 800864c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008650:	f7ff fd0c 	bl	800806c <memset>
 8008654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800865c:	4620      	mov	r0, r4
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008660:	3468      	adds	r4, #104	; 0x68
 8008662:	e7d9      	b.n	8008618 <__sfp+0x1c>
 8008664:	2104      	movs	r1, #4
 8008666:	4638      	mov	r0, r7
 8008668:	f7ff ff62 	bl	8008530 <__sfmoreglue>
 800866c:	4604      	mov	r4, r0
 800866e:	6030      	str	r0, [r6, #0]
 8008670:	2800      	cmp	r0, #0
 8008672:	d1d5      	bne.n	8008620 <__sfp+0x24>
 8008674:	f7ff ff78 	bl	8008568 <__sfp_lock_release>
 8008678:	230c      	movs	r3, #12
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	e7ee      	b.n	800865c <__sfp+0x60>
 800867e:	bf00      	nop
 8008680:	08009670 	.word	0x08009670
 8008684:	ffff0001 	.word	0xffff0001

08008688 <_fwalk_reent>:
 8008688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800868c:	4606      	mov	r6, r0
 800868e:	4688      	mov	r8, r1
 8008690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008694:	2700      	movs	r7, #0
 8008696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800869a:	f1b9 0901 	subs.w	r9, r9, #1
 800869e:	d505      	bpl.n	80086ac <_fwalk_reent+0x24>
 80086a0:	6824      	ldr	r4, [r4, #0]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d1f7      	bne.n	8008696 <_fwalk_reent+0xe>
 80086a6:	4638      	mov	r0, r7
 80086a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ac:	89ab      	ldrh	r3, [r5, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d907      	bls.n	80086c2 <_fwalk_reent+0x3a>
 80086b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086b6:	3301      	adds	r3, #1
 80086b8:	d003      	beq.n	80086c2 <_fwalk_reent+0x3a>
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	47c0      	blx	r8
 80086c0:	4307      	orrs	r7, r0
 80086c2:	3568      	adds	r5, #104	; 0x68
 80086c4:	e7e9      	b.n	800869a <_fwalk_reent+0x12>

080086c6 <__retarget_lock_init_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <__retarget_lock_acquire_recursive>:
 80086c8:	4770      	bx	lr

080086ca <__retarget_lock_release_recursive>:
 80086ca:	4770      	bx	lr

080086cc <__swhatbuf_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	460e      	mov	r6, r1
 80086d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d4:	2900      	cmp	r1, #0
 80086d6:	b096      	sub	sp, #88	; 0x58
 80086d8:	4614      	mov	r4, r2
 80086da:	461d      	mov	r5, r3
 80086dc:	da08      	bge.n	80086f0 <__swhatbuf_r+0x24>
 80086de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	061a      	lsls	r2, r3, #24
 80086e8:	d410      	bmi.n	800870c <__swhatbuf_r+0x40>
 80086ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ee:	e00e      	b.n	800870e <__swhatbuf_r+0x42>
 80086f0:	466a      	mov	r2, sp
 80086f2:	f000 fdf1 	bl	80092d8 <_fstat_r>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	dbf1      	blt.n	80086de <__swhatbuf_r+0x12>
 80086fa:	9a01      	ldr	r2, [sp, #4]
 80086fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008704:	425a      	negs	r2, r3
 8008706:	415a      	adcs	r2, r3
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	e7ee      	b.n	80086ea <__swhatbuf_r+0x1e>
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	2000      	movs	r0, #0
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	b016      	add	sp, #88	; 0x58
 8008714:	bd70      	pop	{r4, r5, r6, pc}
	...

08008718 <__smakebuf_r>:
 8008718:	898b      	ldrh	r3, [r1, #12]
 800871a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800871c:	079d      	lsls	r5, r3, #30
 800871e:	4606      	mov	r6, r0
 8008720:	460c      	mov	r4, r1
 8008722:	d507      	bpl.n	8008734 <__smakebuf_r+0x1c>
 8008724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	2301      	movs	r3, #1
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	b002      	add	sp, #8
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	ab01      	add	r3, sp, #4
 8008736:	466a      	mov	r2, sp
 8008738:	f7ff ffc8 	bl	80086cc <__swhatbuf_r>
 800873c:	9900      	ldr	r1, [sp, #0]
 800873e:	4605      	mov	r5, r0
 8008740:	4630      	mov	r0, r6
 8008742:	f000 f895 	bl	8008870 <_malloc_r>
 8008746:	b948      	cbnz	r0, 800875c <__smakebuf_r+0x44>
 8008748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874c:	059a      	lsls	r2, r3, #22
 800874e:	d4ef      	bmi.n	8008730 <__smakebuf_r+0x18>
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	f043 0302 	orr.w	r3, r3, #2
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	e7e3      	b.n	8008724 <__smakebuf_r+0xc>
 800875c:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <__smakebuf_r+0x7c>)
 800875e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	9b00      	ldr	r3, [sp, #0]
 800876c:	6163      	str	r3, [r4, #20]
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	6120      	str	r0, [r4, #16]
 8008772:	b15b      	cbz	r3, 800878c <__smakebuf_r+0x74>
 8008774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008778:	4630      	mov	r0, r6
 800877a:	f000 fdbf 	bl	80092fc <_isatty_r>
 800877e:	b128      	cbz	r0, 800878c <__smakebuf_r+0x74>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	89a0      	ldrh	r0, [r4, #12]
 800878e:	4305      	orrs	r5, r0
 8008790:	81a5      	strh	r5, [r4, #12]
 8008792:	e7cd      	b.n	8008730 <__smakebuf_r+0x18>
 8008794:	08008525 	.word	0x08008525

08008798 <_free_r>:
 8008798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800879a:	2900      	cmp	r1, #0
 800879c:	d044      	beq.n	8008828 <_free_r+0x90>
 800879e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a2:	9001      	str	r0, [sp, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f1a1 0404 	sub.w	r4, r1, #4
 80087aa:	bfb8      	it	lt
 80087ac:	18e4      	addlt	r4, r4, r3
 80087ae:	f000 fdef 	bl	8009390 <__malloc_lock>
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <_free_r+0x94>)
 80087b4:	9801      	ldr	r0, [sp, #4]
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	b933      	cbnz	r3, 80087c8 <_free_r+0x30>
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	b003      	add	sp, #12
 80087c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c4:	f000 bdea 	b.w	800939c <__malloc_unlock>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d908      	bls.n	80087de <_free_r+0x46>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	1961      	adds	r1, r4, r5
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf01      	itttt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	1949      	addeq	r1, r1, r5
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	e7ed      	b.n	80087ba <_free_r+0x22>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x50>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x46>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x70>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1e0      	bne.n	80087be <_free_r+0x26>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	4421      	add	r1, r4
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	e7da      	b.n	80087be <_free_r+0x26>
 8008808:	d902      	bls.n	8008810 <_free_r+0x78>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d6      	b.n	80087be <_free_r+0x26>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7ca      	b.n	80087be <_free_r+0x26>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	20000ae8 	.word	0x20000ae8

08008830 <sbrk_aligned>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4e0e      	ldr	r6, [pc, #56]	; (800886c <sbrk_aligned+0x3c>)
 8008834:	460c      	mov	r4, r1
 8008836:	6831      	ldr	r1, [r6, #0]
 8008838:	4605      	mov	r5, r0
 800883a:	b911      	cbnz	r1, 8008842 <sbrk_aligned+0x12>
 800883c:	f000 fcd6 	bl	80091ec <_sbrk_r>
 8008840:	6030      	str	r0, [r6, #0]
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f000 fcd1 	bl	80091ec <_sbrk_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d00a      	beq.n	8008864 <sbrk_aligned+0x34>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d007      	beq.n	8008868 <sbrk_aligned+0x38>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4628      	mov	r0, r5
 800885c:	f000 fcc6 	bl	80091ec <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d101      	bne.n	8008868 <sbrk_aligned+0x38>
 8008864:	f04f 34ff 	mov.w	r4, #4294967295
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	20000aec 	.word	0x20000aec

08008870 <_malloc_r>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	1ccd      	adds	r5, r1, #3
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	2d00      	cmp	r5, #0
 8008884:	4607      	mov	r7, r0
 8008886:	db01      	blt.n	800888c <_malloc_r+0x1c>
 8008888:	42a9      	cmp	r1, r5
 800888a:	d905      	bls.n	8008898 <_malloc_r+0x28>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	2600      	movs	r6, #0
 8008892:	4630      	mov	r0, r6
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	4e2e      	ldr	r6, [pc, #184]	; (8008954 <_malloc_r+0xe4>)
 800889a:	f000 fd79 	bl	8009390 <__malloc_lock>
 800889e:	6833      	ldr	r3, [r6, #0]
 80088a0:	461c      	mov	r4, r3
 80088a2:	bb34      	cbnz	r4, 80088f2 <_malloc_r+0x82>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff ffc2 	bl	8008830 <sbrk_aligned>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	4604      	mov	r4, r0
 80088b0:	d14d      	bne.n	800894e <_malloc_r+0xde>
 80088b2:	6834      	ldr	r4, [r6, #0]
 80088b4:	4626      	mov	r6, r4
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d140      	bne.n	800893c <_malloc_r+0xcc>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	4631      	mov	r1, r6
 80088be:	4638      	mov	r0, r7
 80088c0:	eb04 0803 	add.w	r8, r4, r3
 80088c4:	f000 fc92 	bl	80091ec <_sbrk_r>
 80088c8:	4580      	cmp	r8, r0
 80088ca:	d13a      	bne.n	8008942 <_malloc_r+0xd2>
 80088cc:	6821      	ldr	r1, [r4, #0]
 80088ce:	3503      	adds	r5, #3
 80088d0:	1a6d      	subs	r5, r5, r1
 80088d2:	f025 0503 	bic.w	r5, r5, #3
 80088d6:	3508      	adds	r5, #8
 80088d8:	2d0c      	cmp	r5, #12
 80088da:	bf38      	it	cc
 80088dc:	250c      	movcc	r5, #12
 80088de:	4629      	mov	r1, r5
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ffa5 	bl	8008830 <sbrk_aligned>
 80088e6:	3001      	adds	r0, #1
 80088e8:	d02b      	beq.n	8008942 <_malloc_r+0xd2>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	442b      	add	r3, r5
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	e00e      	b.n	8008910 <_malloc_r+0xa0>
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	1b52      	subs	r2, r2, r5
 80088f6:	d41e      	bmi.n	8008936 <_malloc_r+0xc6>
 80088f8:	2a0b      	cmp	r2, #11
 80088fa:	d916      	bls.n	800892a <_malloc_r+0xba>
 80088fc:	1961      	adds	r1, r4, r5
 80088fe:	42a3      	cmp	r3, r4
 8008900:	6025      	str	r5, [r4, #0]
 8008902:	bf18      	it	ne
 8008904:	6059      	strne	r1, [r3, #4]
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	bf08      	it	eq
 800890a:	6031      	streq	r1, [r6, #0]
 800890c:	5162      	str	r2, [r4, r5]
 800890e:	604b      	str	r3, [r1, #4]
 8008910:	4638      	mov	r0, r7
 8008912:	f104 060b 	add.w	r6, r4, #11
 8008916:	f000 fd41 	bl	800939c <__malloc_unlock>
 800891a:	f026 0607 	bic.w	r6, r6, #7
 800891e:	1d23      	adds	r3, r4, #4
 8008920:	1af2      	subs	r2, r6, r3
 8008922:	d0b6      	beq.n	8008892 <_malloc_r+0x22>
 8008924:	1b9b      	subs	r3, r3, r6
 8008926:	50a3      	str	r3, [r4, r2]
 8008928:	e7b3      	b.n	8008892 <_malloc_r+0x22>
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	42a3      	cmp	r3, r4
 800892e:	bf0c      	ite	eq
 8008930:	6032      	streq	r2, [r6, #0]
 8008932:	605a      	strne	r2, [r3, #4]
 8008934:	e7ec      	b.n	8008910 <_malloc_r+0xa0>
 8008936:	4623      	mov	r3, r4
 8008938:	6864      	ldr	r4, [r4, #4]
 800893a:	e7b2      	b.n	80088a2 <_malloc_r+0x32>
 800893c:	4634      	mov	r4, r6
 800893e:	6876      	ldr	r6, [r6, #4]
 8008940:	e7b9      	b.n	80088b6 <_malloc_r+0x46>
 8008942:	230c      	movs	r3, #12
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	4638      	mov	r0, r7
 8008948:	f000 fd28 	bl	800939c <__malloc_unlock>
 800894c:	e7a1      	b.n	8008892 <_malloc_r+0x22>
 800894e:	6025      	str	r5, [r4, #0]
 8008950:	e7de      	b.n	8008910 <_malloc_r+0xa0>
 8008952:	bf00      	nop
 8008954:	20000ae8 	.word	0x20000ae8

08008958 <__ssputs_r>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	688e      	ldr	r6, [r1, #8]
 800895e:	429e      	cmp	r6, r3
 8008960:	4682      	mov	sl, r0
 8008962:	460c      	mov	r4, r1
 8008964:	4690      	mov	r8, r2
 8008966:	461f      	mov	r7, r3
 8008968:	d838      	bhi.n	80089dc <__ssputs_r+0x84>
 800896a:	898a      	ldrh	r2, [r1, #12]
 800896c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008970:	d032      	beq.n	80089d8 <__ssputs_r+0x80>
 8008972:	6825      	ldr	r5, [r4, #0]
 8008974:	6909      	ldr	r1, [r1, #16]
 8008976:	eba5 0901 	sub.w	r9, r5, r1
 800897a:	6965      	ldr	r5, [r4, #20]
 800897c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008984:	3301      	adds	r3, #1
 8008986:	444b      	add	r3, r9
 8008988:	106d      	asrs	r5, r5, #1
 800898a:	429d      	cmp	r5, r3
 800898c:	bf38      	it	cc
 800898e:	461d      	movcc	r5, r3
 8008990:	0553      	lsls	r3, r2, #21
 8008992:	d531      	bpl.n	80089f8 <__ssputs_r+0xa0>
 8008994:	4629      	mov	r1, r5
 8008996:	f7ff ff6b 	bl	8008870 <_malloc_r>
 800899a:	4606      	mov	r6, r0
 800899c:	b950      	cbnz	r0, 80089b4 <__ssputs_r+0x5c>
 800899e:	230c      	movs	r3, #12
 80089a0:	f8ca 3000 	str.w	r3, [sl]
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	464a      	mov	r2, r9
 80089b8:	f000 fcc2 	bl	8009340 <memcpy>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	6126      	str	r6, [r4, #16]
 80089ca:	6165      	str	r5, [r4, #20]
 80089cc:	444e      	add	r6, r9
 80089ce:	eba5 0509 	sub.w	r5, r5, r9
 80089d2:	6026      	str	r6, [r4, #0]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	463e      	mov	r6, r7
 80089d8:	42be      	cmp	r6, r7
 80089da:	d900      	bls.n	80089de <__ssputs_r+0x86>
 80089dc:	463e      	mov	r6, r7
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4632      	mov	r2, r6
 80089e2:	4641      	mov	r1, r8
 80089e4:	f000 fcba 	bl	800935c <memmove>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	1b9b      	subs	r3, r3, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4433      	add	r3, r6
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7db      	b.n	80089b0 <__ssputs_r+0x58>
 80089f8:	462a      	mov	r2, r5
 80089fa:	f000 fcd5 	bl	80093a8 <_realloc_r>
 80089fe:	4606      	mov	r6, r0
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d1e1      	bne.n	80089c8 <__ssputs_r+0x70>
 8008a04:	6921      	ldr	r1, [r4, #16]
 8008a06:	4650      	mov	r0, sl
 8008a08:	f7ff fec6 	bl	8008798 <_free_r>
 8008a0c:	e7c7      	b.n	800899e <__ssputs_r+0x46>
	...

08008a10 <_svfiprintf_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	4698      	mov	r8, r3
 8008a16:	898b      	ldrh	r3, [r1, #12]
 8008a18:	061b      	lsls	r3, r3, #24
 8008a1a:	b09d      	sub	sp, #116	; 0x74
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	d50e      	bpl.n	8008a42 <_svfiprintf_r+0x32>
 8008a24:	690b      	ldr	r3, [r1, #16]
 8008a26:	b963      	cbnz	r3, 8008a42 <_svfiprintf_r+0x32>
 8008a28:	2140      	movs	r1, #64	; 0x40
 8008a2a:	f7ff ff21 	bl	8008870 <_malloc_r>
 8008a2e:	6028      	str	r0, [r5, #0]
 8008a30:	6128      	str	r0, [r5, #16]
 8008a32:	b920      	cbnz	r0, 8008a3e <_svfiprintf_r+0x2e>
 8008a34:	230c      	movs	r3, #12
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3c:	e0d1      	b.n	8008be2 <_svfiprintf_r+0x1d2>
 8008a3e:	2340      	movs	r3, #64	; 0x40
 8008a40:	616b      	str	r3, [r5, #20]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9309      	str	r3, [sp, #36]	; 0x24
 8008a46:	2320      	movs	r3, #32
 8008a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a50:	2330      	movs	r3, #48	; 0x30
 8008a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bfc <_svfiprintf_r+0x1ec>
 8008a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a5a:	f04f 0901 	mov.w	r9, #1
 8008a5e:	4623      	mov	r3, r4
 8008a60:	469a      	mov	sl, r3
 8008a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a66:	b10a      	cbz	r2, 8008a6c <_svfiprintf_r+0x5c>
 8008a68:	2a25      	cmp	r2, #37	; 0x25
 8008a6a:	d1f9      	bne.n	8008a60 <_svfiprintf_r+0x50>
 8008a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a70:	d00b      	beq.n	8008a8a <_svfiprintf_r+0x7a>
 8008a72:	465b      	mov	r3, fp
 8008a74:	4622      	mov	r2, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7ff ff6d 	bl	8008958 <__ssputs_r>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	f000 80aa 	beq.w	8008bd8 <_svfiprintf_r+0x1c8>
 8008a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a86:	445a      	add	r2, fp
 8008a88:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80a2 	beq.w	8008bd8 <_svfiprintf_r+0x1c8>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a9e:	f10a 0a01 	add.w	sl, sl, #1
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	9307      	str	r3, [sp, #28]
 8008aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8008aac:	4654      	mov	r4, sl
 8008aae:	2205      	movs	r2, #5
 8008ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab4:	4851      	ldr	r0, [pc, #324]	; (8008bfc <_svfiprintf_r+0x1ec>)
 8008ab6:	f7f7 fbb3 	bl	8000220 <memchr>
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	b9d8      	cbnz	r0, 8008af6 <_svfiprintf_r+0xe6>
 8008abe:	06d0      	lsls	r0, r2, #27
 8008ac0:	bf44      	itt	mi
 8008ac2:	2320      	movmi	r3, #32
 8008ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac8:	0711      	lsls	r1, r2, #28
 8008aca:	bf44      	itt	mi
 8008acc:	232b      	movmi	r3, #43	; 0x2b
 8008ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad8:	d015      	beq.n	8008b06 <_svfiprintf_r+0xf6>
 8008ada:	9a07      	ldr	r2, [sp, #28]
 8008adc:	4654      	mov	r4, sl
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f04f 0c0a 	mov.w	ip, #10
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aea:	3b30      	subs	r3, #48	; 0x30
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d94e      	bls.n	8008b8e <_svfiprintf_r+0x17e>
 8008af0:	b1b0      	cbz	r0, 8008b20 <_svfiprintf_r+0x110>
 8008af2:	9207      	str	r2, [sp, #28]
 8008af4:	e014      	b.n	8008b20 <_svfiprintf_r+0x110>
 8008af6:	eba0 0308 	sub.w	r3, r0, r8
 8008afa:	fa09 f303 	lsl.w	r3, r9, r3
 8008afe:	4313      	orrs	r3, r2
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	46a2      	mov	sl, r4
 8008b04:	e7d2      	b.n	8008aac <_svfiprintf_r+0x9c>
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	1d19      	adds	r1, r3, #4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	9103      	str	r1, [sp, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bfbb      	ittet	lt
 8008b12:	425b      	neglt	r3, r3
 8008b14:	f042 0202 	orrlt.w	r2, r2, #2
 8008b18:	9307      	strge	r3, [sp, #28]
 8008b1a:	9307      	strlt	r3, [sp, #28]
 8008b1c:	bfb8      	it	lt
 8008b1e:	9204      	strlt	r2, [sp, #16]
 8008b20:	7823      	ldrb	r3, [r4, #0]
 8008b22:	2b2e      	cmp	r3, #46	; 0x2e
 8008b24:	d10c      	bne.n	8008b40 <_svfiprintf_r+0x130>
 8008b26:	7863      	ldrb	r3, [r4, #1]
 8008b28:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2a:	d135      	bne.n	8008b98 <_svfiprintf_r+0x188>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	1d1a      	adds	r2, r3, #4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	9203      	str	r2, [sp, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfb8      	it	lt
 8008b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b3c:	3402      	adds	r4, #2
 8008b3e:	9305      	str	r3, [sp, #20]
 8008b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c0c <_svfiprintf_r+0x1fc>
 8008b44:	7821      	ldrb	r1, [r4, #0]
 8008b46:	2203      	movs	r2, #3
 8008b48:	4650      	mov	r0, sl
 8008b4a:	f7f7 fb69 	bl	8000220 <memchr>
 8008b4e:	b140      	cbz	r0, 8008b62 <_svfiprintf_r+0x152>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	eba0 000a 	sub.w	r0, r0, sl
 8008b56:	fa03 f000 	lsl.w	r0, r3, r0
 8008b5a:	9b04      	ldr	r3, [sp, #16]
 8008b5c:	4303      	orrs	r3, r0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b66:	4826      	ldr	r0, [pc, #152]	; (8008c00 <_svfiprintf_r+0x1f0>)
 8008b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b6c:	2206      	movs	r2, #6
 8008b6e:	f7f7 fb57 	bl	8000220 <memchr>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d038      	beq.n	8008be8 <_svfiprintf_r+0x1d8>
 8008b76:	4b23      	ldr	r3, [pc, #140]	; (8008c04 <_svfiprintf_r+0x1f4>)
 8008b78:	bb1b      	cbnz	r3, 8008bc2 <_svfiprintf_r+0x1b2>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	3308      	adds	r3, #8
 8008b84:	9303      	str	r3, [sp, #12]
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	4433      	add	r3, r6
 8008b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8c:	e767      	b.n	8008a5e <_svfiprintf_r+0x4e>
 8008b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b92:	460c      	mov	r4, r1
 8008b94:	2001      	movs	r0, #1
 8008b96:	e7a5      	b.n	8008ae4 <_svfiprintf_r+0xd4>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f04f 0c0a 	mov.w	ip, #10
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008baa:	3a30      	subs	r2, #48	; 0x30
 8008bac:	2a09      	cmp	r2, #9
 8008bae:	d903      	bls.n	8008bb8 <_svfiprintf_r+0x1a8>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0c5      	beq.n	8008b40 <_svfiprintf_r+0x130>
 8008bb4:	9105      	str	r1, [sp, #20]
 8008bb6:	e7c3      	b.n	8008b40 <_svfiprintf_r+0x130>
 8008bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e7f0      	b.n	8008ba4 <_svfiprintf_r+0x194>
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <_svfiprintf_r+0x1f8>)
 8008bca:	a904      	add	r1, sp, #16
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f3af 8000 	nop.w
 8008bd2:	1c42      	adds	r2, r0, #1
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	d1d6      	bne.n	8008b86 <_svfiprintf_r+0x176>
 8008bd8:	89ab      	ldrh	r3, [r5, #12]
 8008bda:	065b      	lsls	r3, r3, #25
 8008bdc:	f53f af2c 	bmi.w	8008a38 <_svfiprintf_r+0x28>
 8008be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be2:	b01d      	add	sp, #116	; 0x74
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	ab03      	add	r3, sp, #12
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	462a      	mov	r2, r5
 8008bee:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <_svfiprintf_r+0x1f8>)
 8008bf0:	a904      	add	r1, sp, #16
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f000 f9d4 	bl	8008fa0 <_printf_i>
 8008bf8:	e7eb      	b.n	8008bd2 <_svfiprintf_r+0x1c2>
 8008bfa:	bf00      	nop
 8008bfc:	080096d4 	.word	0x080096d4
 8008c00:	080096de 	.word	0x080096de
 8008c04:	00000000 	.word	0x00000000
 8008c08:	08008959 	.word	0x08008959
 8008c0c:	080096da 	.word	0x080096da

08008c10 <__sfputc_r>:
 8008c10:	6893      	ldr	r3, [r2, #8]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	b410      	push	{r4}
 8008c18:	6093      	str	r3, [r2, #8]
 8008c1a:	da08      	bge.n	8008c2e <__sfputc_r+0x1e>
 8008c1c:	6994      	ldr	r4, [r2, #24]
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	db01      	blt.n	8008c26 <__sfputc_r+0x16>
 8008c22:	290a      	cmp	r1, #10
 8008c24:	d103      	bne.n	8008c2e <__sfputc_r+0x1e>
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	f7ff bad5 	b.w	80081d8 <__swbuf_r>
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	1c58      	adds	r0, r3, #1
 8008c32:	6010      	str	r0, [r2, #0]
 8008c34:	7019      	strb	r1, [r3, #0]
 8008c36:	4608      	mov	r0, r1
 8008c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <__sfputs_r>:
 8008c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	460f      	mov	r7, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	18d5      	adds	r5, r2, r3
 8008c48:	42ac      	cmp	r4, r5
 8008c4a:	d101      	bne.n	8008c50 <__sfputs_r+0x12>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e007      	b.n	8008c60 <__sfputs_r+0x22>
 8008c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c54:	463a      	mov	r2, r7
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ffda 	bl	8008c10 <__sfputc_r>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d1f3      	bne.n	8008c48 <__sfputs_r+0xa>
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c64 <_vfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	460d      	mov	r5, r1
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	4698      	mov	r8, r3
 8008c70:	4606      	mov	r6, r0
 8008c72:	b118      	cbz	r0, 8008c7c <_vfiprintf_r+0x18>
 8008c74:	6983      	ldr	r3, [r0, #24]
 8008c76:	b90b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x18>
 8008c78:	f7ff fc88 	bl	800858c <__sinit>
 8008c7c:	4b89      	ldr	r3, [pc, #548]	; (8008ea4 <_vfiprintf_r+0x240>)
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	d11b      	bne.n	8008cba <_vfiprintf_r+0x56>
 8008c82:	6875      	ldr	r5, [r6, #4]
 8008c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c86:	07d9      	lsls	r1, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	059a      	lsls	r2, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c92:	f7ff fd19 	bl	80086c8 <__retarget_lock_acquire_recursive>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <_vfiprintf_r+0x3c>
 8008c9c:	692b      	ldr	r3, [r5, #16]
 8008c9e:	b9eb      	cbnz	r3, 8008cdc <_vfiprintf_r+0x78>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff faea 	bl	800827c <__swsetup_r>
 8008ca8:	b1c0      	cbz	r0, 8008cdc <_vfiprintf_r+0x78>
 8008caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cac:	07dc      	lsls	r4, r3, #31
 8008cae:	d50e      	bpl.n	8008cce <_vfiprintf_r+0x6a>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b01d      	add	sp, #116	; 0x74
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	4b7b      	ldr	r3, [pc, #492]	; (8008ea8 <_vfiprintf_r+0x244>)
 8008cbc:	429d      	cmp	r5, r3
 8008cbe:	d101      	bne.n	8008cc4 <_vfiprintf_r+0x60>
 8008cc0:	68b5      	ldr	r5, [r6, #8]
 8008cc2:	e7df      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cc4:	4b79      	ldr	r3, [pc, #484]	; (8008eac <_vfiprintf_r+0x248>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	bf08      	it	eq
 8008cca:	68f5      	ldreq	r5, [r6, #12]
 8008ccc:	e7da      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	0598      	lsls	r0, r3, #22
 8008cd2:	d4ed      	bmi.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd6:	f7ff fcf8 	bl	80086ca <__retarget_lock_release_recursive>
 8008cda:	e7e9      	b.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cea:	2330      	movs	r3, #48	; 0x30
 8008cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008eb0 <_vfiprintf_r+0x24c>
 8008cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf4:	f04f 0901 	mov.w	r9, #1
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d00:	b10a      	cbz	r2, 8008d06 <_vfiprintf_r+0xa2>
 8008d02:	2a25      	cmp	r2, #37	; 0x25
 8008d04:	d1f9      	bne.n	8008cfa <_vfiprintf_r+0x96>
 8008d06:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0a:	d00b      	beq.n	8008d24 <_vfiprintf_r+0xc0>
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ff93 	bl	8008c3e <__sfputs_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f000 80aa 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d20:	445a      	add	r2, fp
 8008d22:	9209      	str	r2, [sp, #36]	; 0x24
 8008d24:	f89a 3000 	ldrb.w	r3, [sl]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80a2 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d44:	931a      	str	r3, [sp, #104]	; 0x68
 8008d46:	4654      	mov	r4, sl
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	4858      	ldr	r0, [pc, #352]	; (8008eb0 <_vfiprintf_r+0x24c>)
 8008d50:	f7f7 fa66 	bl	8000220 <memchr>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	b9d8      	cbnz	r0, 8008d90 <_vfiprintf_r+0x12c>
 8008d58:	06d1      	lsls	r1, r2, #27
 8008d5a:	bf44      	itt	mi
 8008d5c:	2320      	movmi	r3, #32
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d62:	0713      	lsls	r3, r2, #28
 8008d64:	bf44      	itt	mi
 8008d66:	232b      	movmi	r3, #43	; 0x2b
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d015      	beq.n	8008da0 <_vfiprintf_r+0x13c>
 8008d74:	9a07      	ldr	r2, [sp, #28]
 8008d76:	4654      	mov	r4, sl
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f04f 0c0a 	mov.w	ip, #10
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d84:	3b30      	subs	r3, #48	; 0x30
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d94e      	bls.n	8008e28 <_vfiprintf_r+0x1c4>
 8008d8a:	b1b0      	cbz	r0, 8008dba <_vfiprintf_r+0x156>
 8008d8c:	9207      	str	r2, [sp, #28]
 8008d8e:	e014      	b.n	8008dba <_vfiprintf_r+0x156>
 8008d90:	eba0 0308 	sub.w	r3, r0, r8
 8008d94:	fa09 f303 	lsl.w	r3, r9, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	46a2      	mov	sl, r4
 8008d9e:	e7d2      	b.n	8008d46 <_vfiprintf_r+0xe2>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	1d19      	adds	r1, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9103      	str	r1, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbb      	ittet	lt
 8008dac:	425b      	neglt	r3, r3
 8008dae:	f042 0202 	orrlt.w	r2, r2, #2
 8008db2:	9307      	strge	r3, [sp, #28]
 8008db4:	9307      	strlt	r3, [sp, #28]
 8008db6:	bfb8      	it	lt
 8008db8:	9204      	strlt	r2, [sp, #16]
 8008dba:	7823      	ldrb	r3, [r4, #0]
 8008dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008dbe:	d10c      	bne.n	8008dda <_vfiprintf_r+0x176>
 8008dc0:	7863      	ldrb	r3, [r4, #1]
 8008dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc4:	d135      	bne.n	8008e32 <_vfiprintf_r+0x1ce>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9203      	str	r2, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dd6:	3402      	adds	r4, #2
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ec0 <_vfiprintf_r+0x25c>
 8008dde:	7821      	ldrb	r1, [r4, #0]
 8008de0:	2203      	movs	r2, #3
 8008de2:	4650      	mov	r0, sl
 8008de4:	f7f7 fa1c 	bl	8000220 <memchr>
 8008de8:	b140      	cbz	r0, 8008dfc <_vfiprintf_r+0x198>
 8008dea:	2340      	movs	r3, #64	; 0x40
 8008dec:	eba0 000a 	sub.w	r0, r0, sl
 8008df0:	fa03 f000 	lsl.w	r0, r3, r0
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	4303      	orrs	r3, r0
 8008df8:	3401      	adds	r4, #1
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	482c      	ldr	r0, [pc, #176]	; (8008eb4 <_vfiprintf_r+0x250>)
 8008e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e06:	2206      	movs	r2, #6
 8008e08:	f7f7 fa0a 	bl	8000220 <memchr>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d03f      	beq.n	8008e90 <_vfiprintf_r+0x22c>
 8008e10:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <_vfiprintf_r+0x254>)
 8008e12:	bb1b      	cbnz	r3, 8008e5c <_vfiprintf_r+0x1f8>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	3307      	adds	r3, #7
 8008e18:	f023 0307 	bic.w	r3, r3, #7
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	443b      	add	r3, r7
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	e767      	b.n	8008cf8 <_vfiprintf_r+0x94>
 8008e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	2001      	movs	r0, #1
 8008e30:	e7a5      	b.n	8008d7e <_vfiprintf_r+0x11a>
 8008e32:	2300      	movs	r3, #0
 8008e34:	3401      	adds	r4, #1
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f04f 0c0a 	mov.w	ip, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	3a30      	subs	r2, #48	; 0x30
 8008e46:	2a09      	cmp	r2, #9
 8008e48:	d903      	bls.n	8008e52 <_vfiprintf_r+0x1ee>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c5      	beq.n	8008dda <_vfiprintf_r+0x176>
 8008e4e:	9105      	str	r1, [sp, #20]
 8008e50:	e7c3      	b.n	8008dda <_vfiprintf_r+0x176>
 8008e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e56:	4604      	mov	r4, r0
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e7f0      	b.n	8008e3e <_vfiprintf_r+0x1da>
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	462a      	mov	r2, r5
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4630      	mov	r0, r6
 8008e68:	f3af 8000 	nop.w
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	1c78      	adds	r0, r7, #1
 8008e70:	d1d6      	bne.n	8008e20 <_vfiprintf_r+0x1bc>
 8008e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e74:	07d9      	lsls	r1, r3, #31
 8008e76:	d405      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	059a      	lsls	r2, r3, #22
 8008e7c:	d402      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e80:	f7ff fc23 	bl	80086ca <__retarget_lock_release_recursive>
 8008e84:	89ab      	ldrh	r3, [r5, #12]
 8008e86:	065b      	lsls	r3, r3, #25
 8008e88:	f53f af12 	bmi.w	8008cb0 <_vfiprintf_r+0x4c>
 8008e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8e:	e711      	b.n	8008cb4 <_vfiprintf_r+0x50>
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f000 f880 	bl	8008fa0 <_printf_i>
 8008ea0:	e7e4      	b.n	8008e6c <_vfiprintf_r+0x208>
 8008ea2:	bf00      	nop
 8008ea4:	08009694 	.word	0x08009694
 8008ea8:	080096b4 	.word	0x080096b4
 8008eac:	08009674 	.word	0x08009674
 8008eb0:	080096d4 	.word	0x080096d4
 8008eb4:	080096de 	.word	0x080096de
 8008eb8:	00000000 	.word	0x00000000
 8008ebc:	08008c3f 	.word	0x08008c3f
 8008ec0:	080096da 	.word	0x080096da

08008ec4 <_printf_common>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4616      	mov	r6, r2
 8008eca:	4699      	mov	r9, r3
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bfb8      	it	lt
 8008ed8:	4613      	movlt	r3, r2
 8008eda:	6033      	str	r3, [r6, #0]
 8008edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b10a      	cbz	r2, 8008eea <_printf_common+0x26>
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	0699      	lsls	r1, r3, #26
 8008eee:	bf42      	ittt	mi
 8008ef0:	6833      	ldrmi	r3, [r6, #0]
 8008ef2:	3302      	addmi	r3, #2
 8008ef4:	6033      	strmi	r3, [r6, #0]
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	f015 0506 	ands.w	r5, r5, #6
 8008efc:	d106      	bne.n	8008f0c <_printf_common+0x48>
 8008efe:	f104 0a19 	add.w	sl, r4, #25
 8008f02:	68e3      	ldr	r3, [r4, #12]
 8008f04:	6832      	ldr	r2, [r6, #0]
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dc26      	bgt.n	8008f5a <_printf_common+0x96>
 8008f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f10:	1e13      	subs	r3, r2, #0
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	0692      	lsls	r2, r2, #26
 8008f1a:	d42b      	bmi.n	8008f74 <_printf_common+0xb0>
 8008f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f20:	4649      	mov	r1, r9
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c0      	blx	r8
 8008f26:	3001      	adds	r0, #1
 8008f28:	d01e      	beq.n	8008f68 <_printf_common+0xa4>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	68e5      	ldr	r5, [r4, #12]
 8008f2e:	6832      	ldr	r2, [r6, #0]
 8008f30:	f003 0306 	and.w	r3, r3, #6
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	bf08      	it	eq
 8008f38:	1aad      	subeq	r5, r5, r2
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	6922      	ldr	r2, [r4, #16]
 8008f3e:	bf0c      	ite	eq
 8008f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f44:	2500      	movne	r5, #0
 8008f46:	4293      	cmp	r3, r2
 8008f48:	bfc4      	itt	gt
 8008f4a:	1a9b      	subgt	r3, r3, r2
 8008f4c:	18ed      	addgt	r5, r5, r3
 8008f4e:	2600      	movs	r6, #0
 8008f50:	341a      	adds	r4, #26
 8008f52:	42b5      	cmp	r5, r6
 8008f54:	d11a      	bne.n	8008f8c <_printf_common+0xc8>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e008      	b.n	8008f6c <_printf_common+0xa8>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4638      	mov	r0, r7
 8008f62:	47c0      	blx	r8
 8008f64:	3001      	adds	r0, #1
 8008f66:	d103      	bne.n	8008f70 <_printf_common+0xac>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7c6      	b.n	8008f02 <_printf_common+0x3e>
 8008f74:	18e1      	adds	r1, r4, r3
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	2030      	movs	r0, #48	; 0x30
 8008f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f7e:	4422      	add	r2, r4
 8008f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f88:	3302      	adds	r3, #2
 8008f8a:	e7c7      	b.n	8008f1c <_printf_common+0x58>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4649      	mov	r1, r9
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c0      	blx	r8
 8008f96:	3001      	adds	r0, #1
 8008f98:	d0e6      	beq.n	8008f68 <_printf_common+0xa4>
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7d9      	b.n	8008f52 <_printf_common+0x8e>
	...

08008fa0 <_printf_i>:
 8008fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	7e0f      	ldrb	r7, [r1, #24]
 8008fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fa8:	2f78      	cmp	r7, #120	; 0x78
 8008faa:	4691      	mov	r9, r2
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fb6:	d807      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fb8:	2f62      	cmp	r7, #98	; 0x62
 8008fba:	d80a      	bhi.n	8008fd2 <_printf_i+0x32>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	f000 80d8 	beq.w	8009172 <_printf_i+0x1d2>
 8008fc2:	2f58      	cmp	r7, #88	; 0x58
 8008fc4:	f000 80a3 	beq.w	800910e <_printf_i+0x16e>
 8008fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fd0:	e03a      	b.n	8009048 <_printf_i+0xa8>
 8008fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fd6:	2b15      	cmp	r3, #21
 8008fd8:	d8f6      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fda:	a101      	add	r1, pc, #4	; (adr r1, 8008fe0 <_printf_i+0x40>)
 8008fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	08008fc9 	.word	0x08008fc9
 8008fec:	08008fc9 	.word	0x08008fc9
 8008ff0:	08008fc9 	.word	0x08008fc9
 8008ff4:	08008fc9 	.word	0x08008fc9
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008fc9 	.word	0x08008fc9
 8009000:	08008fc9 	.word	0x08008fc9
 8009004:	08008fc9 	.word	0x08008fc9
 8009008:	08008fc9 	.word	0x08008fc9
 800900c:	08009159 	.word	0x08009159
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800913b 	.word	0x0800913b
 8009018:	08008fc9 	.word	0x08008fc9
 800901c:	08008fc9 	.word	0x08008fc9
 8009020:	0800917b 	.word	0x0800917b
 8009024:	08008fc9 	.word	0x08008fc9
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08008fc9 	.word	0x08008fc9
 8009030:	08008fc9 	.word	0x08008fc9
 8009034:	08009143 	.word	0x08009143
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	602a      	str	r2, [r5, #0]
 8009040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009048:	2301      	movs	r3, #1
 800904a:	e0a3      	b.n	8009194 <_printf_i+0x1f4>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	6829      	ldr	r1, [r5, #0]
 8009050:	0606      	lsls	r6, r0, #24
 8009052:	f101 0304 	add.w	r3, r1, #4
 8009056:	d50a      	bpl.n	800906e <_printf_i+0xce>
 8009058:	680e      	ldr	r6, [r1, #0]
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	2e00      	cmp	r6, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xc8>
 8009060:	232d      	movs	r3, #45	; 0x2d
 8009062:	4276      	negs	r6, r6
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009068:	485e      	ldr	r0, [pc, #376]	; (80091e4 <_printf_i+0x244>)
 800906a:	230a      	movs	r3, #10
 800906c:	e019      	b.n	80090a2 <_printf_i+0x102>
 800906e:	680e      	ldr	r6, [r1, #0]
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009076:	bf18      	it	ne
 8009078:	b236      	sxthne	r6, r6
 800907a:	e7ef      	b.n	800905c <_printf_i+0xbc>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	1d19      	adds	r1, r3, #4
 8009082:	6029      	str	r1, [r5, #0]
 8009084:	0601      	lsls	r1, r0, #24
 8009086:	d501      	bpl.n	800908c <_printf_i+0xec>
 8009088:	681e      	ldr	r6, [r3, #0]
 800908a:	e002      	b.n	8009092 <_printf_i+0xf2>
 800908c:	0646      	lsls	r6, r0, #25
 800908e:	d5fb      	bpl.n	8009088 <_printf_i+0xe8>
 8009090:	881e      	ldrh	r6, [r3, #0]
 8009092:	4854      	ldr	r0, [pc, #336]	; (80091e4 <_printf_i+0x244>)
 8009094:	2f6f      	cmp	r7, #111	; 0x6f
 8009096:	bf0c      	ite	eq
 8009098:	2308      	moveq	r3, #8
 800909a:	230a      	movne	r3, #10
 800909c:	2100      	movs	r1, #0
 800909e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090a2:	6865      	ldr	r5, [r4, #4]
 80090a4:	60a5      	str	r5, [r4, #8]
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	bfa2      	ittt	ge
 80090aa:	6821      	ldrge	r1, [r4, #0]
 80090ac:	f021 0104 	bicge.w	r1, r1, #4
 80090b0:	6021      	strge	r1, [r4, #0]
 80090b2:	b90e      	cbnz	r6, 80090b8 <_printf_i+0x118>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d04d      	beq.n	8009154 <_printf_i+0x1b4>
 80090b8:	4615      	mov	r5, r2
 80090ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80090be:	fb03 6711 	mls	r7, r3, r1, r6
 80090c2:	5dc7      	ldrb	r7, [r0, r7]
 80090c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090c8:	4637      	mov	r7, r6
 80090ca:	42bb      	cmp	r3, r7
 80090cc:	460e      	mov	r6, r1
 80090ce:	d9f4      	bls.n	80090ba <_printf_i+0x11a>
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d10b      	bne.n	80090ec <_printf_i+0x14c>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	07de      	lsls	r6, r3, #31
 80090d8:	d508      	bpl.n	80090ec <_printf_i+0x14c>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	bfde      	ittt	le
 80090e2:	2330      	movle	r3, #48	; 0x30
 80090e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090ec:	1b52      	subs	r2, r2, r5
 80090ee:	6122      	str	r2, [r4, #16]
 80090f0:	f8cd a000 	str.w	sl, [sp]
 80090f4:	464b      	mov	r3, r9
 80090f6:	aa03      	add	r2, sp, #12
 80090f8:	4621      	mov	r1, r4
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff fee2 	bl	8008ec4 <_printf_common>
 8009100:	3001      	adds	r0, #1
 8009102:	d14c      	bne.n	800919e <_printf_i+0x1fe>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b004      	add	sp, #16
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	4835      	ldr	r0, [pc, #212]	; (80091e4 <_printf_i+0x244>)
 8009110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009114:	6829      	ldr	r1, [r5, #0]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f851 6b04 	ldr.w	r6, [r1], #4
 800911c:	6029      	str	r1, [r5, #0]
 800911e:	061d      	lsls	r5, r3, #24
 8009120:	d514      	bpl.n	800914c <_printf_i+0x1ac>
 8009122:	07df      	lsls	r7, r3, #31
 8009124:	bf44      	itt	mi
 8009126:	f043 0320 	orrmi.w	r3, r3, #32
 800912a:	6023      	strmi	r3, [r4, #0]
 800912c:	b91e      	cbnz	r6, 8009136 <_printf_i+0x196>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	f023 0320 	bic.w	r3, r3, #32
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	2310      	movs	r3, #16
 8009138:	e7b0      	b.n	800909c <_printf_i+0xfc>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	f043 0320 	orr.w	r3, r3, #32
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	2378      	movs	r3, #120	; 0x78
 8009144:	4828      	ldr	r0, [pc, #160]	; (80091e8 <_printf_i+0x248>)
 8009146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800914a:	e7e3      	b.n	8009114 <_printf_i+0x174>
 800914c:	0659      	lsls	r1, r3, #25
 800914e:	bf48      	it	mi
 8009150:	b2b6      	uxthmi	r6, r6
 8009152:	e7e6      	b.n	8009122 <_printf_i+0x182>
 8009154:	4615      	mov	r5, r2
 8009156:	e7bb      	b.n	80090d0 <_printf_i+0x130>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6826      	ldr	r6, [r4, #0]
 800915c:	6961      	ldr	r1, [r4, #20]
 800915e:	1d18      	adds	r0, r3, #4
 8009160:	6028      	str	r0, [r5, #0]
 8009162:	0635      	lsls	r5, r6, #24
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	d501      	bpl.n	800916c <_printf_i+0x1cc>
 8009168:	6019      	str	r1, [r3, #0]
 800916a:	e002      	b.n	8009172 <_printf_i+0x1d2>
 800916c:	0670      	lsls	r0, r6, #25
 800916e:	d5fb      	bpl.n	8009168 <_printf_i+0x1c8>
 8009170:	8019      	strh	r1, [r3, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	6123      	str	r3, [r4, #16]
 8009176:	4615      	mov	r5, r2
 8009178:	e7ba      	b.n	80090f0 <_printf_i+0x150>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	1d1a      	adds	r2, r3, #4
 800917e:	602a      	str	r2, [r5, #0]
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	6862      	ldr	r2, [r4, #4]
 8009184:	2100      	movs	r1, #0
 8009186:	4628      	mov	r0, r5
 8009188:	f7f7 f84a 	bl	8000220 <memchr>
 800918c:	b108      	cbz	r0, 8009192 <_printf_i+0x1f2>
 800918e:	1b40      	subs	r0, r0, r5
 8009190:	6060      	str	r0, [r4, #4]
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	2300      	movs	r3, #0
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	e7a8      	b.n	80090f0 <_printf_i+0x150>
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	462a      	mov	r2, r5
 80091a2:	4649      	mov	r1, r9
 80091a4:	4640      	mov	r0, r8
 80091a6:	47d0      	blx	sl
 80091a8:	3001      	adds	r0, #1
 80091aa:	d0ab      	beq.n	8009104 <_printf_i+0x164>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	079b      	lsls	r3, r3, #30
 80091b0:	d413      	bmi.n	80091da <_printf_i+0x23a>
 80091b2:	68e0      	ldr	r0, [r4, #12]
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	4298      	cmp	r0, r3
 80091b8:	bfb8      	it	lt
 80091ba:	4618      	movlt	r0, r3
 80091bc:	e7a4      	b.n	8009108 <_printf_i+0x168>
 80091be:	2301      	movs	r3, #1
 80091c0:	4632      	mov	r2, r6
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d09b      	beq.n	8009104 <_printf_i+0x164>
 80091cc:	3501      	adds	r5, #1
 80091ce:	68e3      	ldr	r3, [r4, #12]
 80091d0:	9903      	ldr	r1, [sp, #12]
 80091d2:	1a5b      	subs	r3, r3, r1
 80091d4:	42ab      	cmp	r3, r5
 80091d6:	dcf2      	bgt.n	80091be <_printf_i+0x21e>
 80091d8:	e7eb      	b.n	80091b2 <_printf_i+0x212>
 80091da:	2500      	movs	r5, #0
 80091dc:	f104 0619 	add.w	r6, r4, #25
 80091e0:	e7f5      	b.n	80091ce <_printf_i+0x22e>
 80091e2:	bf00      	nop
 80091e4:	080096e5 	.word	0x080096e5
 80091e8:	080096f6 	.word	0x080096f6

080091ec <_sbrk_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d06      	ldr	r5, [pc, #24]	; (8009208 <_sbrk_r+0x1c>)
 80091f0:	2300      	movs	r3, #0
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	f7f9 f9d8 	bl	80025ac <_sbrk>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_sbrk_r+0x1a>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_sbrk_r+0x1a>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20000af0 	.word	0x20000af0

0800920c <__sread>:
 800920c:	b510      	push	{r4, lr}
 800920e:	460c      	mov	r4, r1
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	f000 f8f8 	bl	8009408 <_read_r>
 8009218:	2800      	cmp	r0, #0
 800921a:	bfab      	itete	ge
 800921c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800921e:	89a3      	ldrhlt	r3, [r4, #12]
 8009220:	181b      	addge	r3, r3, r0
 8009222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009226:	bfac      	ite	ge
 8009228:	6563      	strge	r3, [r4, #84]	; 0x54
 800922a:	81a3      	strhlt	r3, [r4, #12]
 800922c:	bd10      	pop	{r4, pc}

0800922e <__swrite>:
 800922e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	461f      	mov	r7, r3
 8009234:	898b      	ldrh	r3, [r1, #12]
 8009236:	05db      	lsls	r3, r3, #23
 8009238:	4605      	mov	r5, r0
 800923a:	460c      	mov	r4, r1
 800923c:	4616      	mov	r6, r2
 800923e:	d505      	bpl.n	800924c <__swrite+0x1e>
 8009240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009244:	2302      	movs	r3, #2
 8009246:	2200      	movs	r2, #0
 8009248:	f000 f868 	bl	800931c <_lseek_r>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	4628      	mov	r0, r5
 800925e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009262:	f000 b817 	b.w	8009294 <_write_r>

08009266 <__sseek>:
 8009266:	b510      	push	{r4, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926e:	f000 f855 	bl	800931c <_lseek_r>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	bf15      	itete	ne
 8009278:	6560      	strne	r0, [r4, #84]	; 0x54
 800927a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800927e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009282:	81a3      	strheq	r3, [r4, #12]
 8009284:	bf18      	it	ne
 8009286:	81a3      	strhne	r3, [r4, #12]
 8009288:	bd10      	pop	{r4, pc}

0800928a <__sclose>:
 800928a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928e:	f000 b813 	b.w	80092b8 <_close_r>
	...

08009294 <_write_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d07      	ldr	r5, [pc, #28]	; (80092b4 <_write_r+0x20>)
 8009298:	4604      	mov	r4, r0
 800929a:	4608      	mov	r0, r1
 800929c:	4611      	mov	r1, r2
 800929e:	2200      	movs	r2, #0
 80092a0:	602a      	str	r2, [r5, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f7f9 f931 	bl	800250a <_write>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_write_r+0x1e>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_write_r+0x1e>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000af0 	.word	0x20000af0

080092b8 <_close_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	; (80092d4 <_close_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f9 f93d 	bl	8002542 <_close>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_close_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_close_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000af0 	.word	0x20000af0

080092d8 <_fstat_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_fstat_r+0x20>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	f7f9 f938 	bl	800255a <_fstat>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d102      	bne.n	80092f4 <_fstat_r+0x1c>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	b103      	cbz	r3, 80092f4 <_fstat_r+0x1c>
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	bf00      	nop
 80092f8:	20000af0 	.word	0x20000af0

080092fc <_isatty_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d06      	ldr	r5, [pc, #24]	; (8009318 <_isatty_r+0x1c>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	f7f9 f937 	bl	800257a <_isatty>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_isatty_r+0x1a>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_isatty_r+0x1a>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20000af0 	.word	0x20000af0

0800931c <_lseek_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	; (800933c <_lseek_r+0x20>)
 8009320:	4604      	mov	r4, r0
 8009322:	4608      	mov	r0, r1
 8009324:	4611      	mov	r1, r2
 8009326:	2200      	movs	r2, #0
 8009328:	602a      	str	r2, [r5, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	f7f9 f930 	bl	8002590 <_lseek>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_lseek_r+0x1e>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_lseek_r+0x1e>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20000af0 	.word	0x20000af0

08009340 <memcpy>:
 8009340:	440a      	add	r2, r1
 8009342:	4291      	cmp	r1, r2
 8009344:	f100 33ff 	add.w	r3, r0, #4294967295
 8009348:	d100      	bne.n	800934c <memcpy+0xc>
 800934a:	4770      	bx	lr
 800934c:	b510      	push	{r4, lr}
 800934e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009356:	4291      	cmp	r1, r2
 8009358:	d1f9      	bne.n	800934e <memcpy+0xe>
 800935a:	bd10      	pop	{r4, pc}

0800935c <memmove>:
 800935c:	4288      	cmp	r0, r1
 800935e:	b510      	push	{r4, lr}
 8009360:	eb01 0402 	add.w	r4, r1, r2
 8009364:	d902      	bls.n	800936c <memmove+0x10>
 8009366:	4284      	cmp	r4, r0
 8009368:	4623      	mov	r3, r4
 800936a:	d807      	bhi.n	800937c <memmove+0x20>
 800936c:	1e43      	subs	r3, r0, #1
 800936e:	42a1      	cmp	r1, r4
 8009370:	d008      	beq.n	8009384 <memmove+0x28>
 8009372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800937a:	e7f8      	b.n	800936e <memmove+0x12>
 800937c:	4402      	add	r2, r0
 800937e:	4601      	mov	r1, r0
 8009380:	428a      	cmp	r2, r1
 8009382:	d100      	bne.n	8009386 <memmove+0x2a>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800938a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800938e:	e7f7      	b.n	8009380 <memmove+0x24>

08009390 <__malloc_lock>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__malloc_lock+0x8>)
 8009392:	f7ff b999 	b.w	80086c8 <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	20000ae4 	.word	0x20000ae4

0800939c <__malloc_unlock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_unlock+0x8>)
 800939e:	f7ff b994 	b.w	80086ca <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	20000ae4 	.word	0x20000ae4

080093a8 <_realloc_r>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	4680      	mov	r8, r0
 80093ae:	4614      	mov	r4, r2
 80093b0:	460e      	mov	r6, r1
 80093b2:	b921      	cbnz	r1, 80093be <_realloc_r+0x16>
 80093b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	4611      	mov	r1, r2
 80093ba:	f7ff ba59 	b.w	8008870 <_malloc_r>
 80093be:	b92a      	cbnz	r2, 80093cc <_realloc_r+0x24>
 80093c0:	f7ff f9ea 	bl	8008798 <_free_r>
 80093c4:	4625      	mov	r5, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093cc:	f000 f82e 	bl	800942c <_malloc_usable_size_r>
 80093d0:	4284      	cmp	r4, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	d802      	bhi.n	80093dc <_realloc_r+0x34>
 80093d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093da:	d812      	bhi.n	8009402 <_realloc_r+0x5a>
 80093dc:	4621      	mov	r1, r4
 80093de:	4640      	mov	r0, r8
 80093e0:	f7ff fa46 	bl	8008870 <_malloc_r>
 80093e4:	4605      	mov	r5, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0ed      	beq.n	80093c6 <_realloc_r+0x1e>
 80093ea:	42bc      	cmp	r4, r7
 80093ec:	4622      	mov	r2, r4
 80093ee:	4631      	mov	r1, r6
 80093f0:	bf28      	it	cs
 80093f2:	463a      	movcs	r2, r7
 80093f4:	f7ff ffa4 	bl	8009340 <memcpy>
 80093f8:	4631      	mov	r1, r6
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff f9cc 	bl	8008798 <_free_r>
 8009400:	e7e1      	b.n	80093c6 <_realloc_r+0x1e>
 8009402:	4635      	mov	r5, r6
 8009404:	e7df      	b.n	80093c6 <_realloc_r+0x1e>
	...

08009408 <_read_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_read_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f9 f85a 	bl	80024d0 <_read>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_read_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_read_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20000af0 	.word	0x20000af0

0800942c <_malloc_usable_size_r>:
 800942c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009430:	1f18      	subs	r0, r3, #4
 8009432:	2b00      	cmp	r3, #0
 8009434:	bfbc      	itt	lt
 8009436:	580b      	ldrlt	r3, [r1, r0]
 8009438:	18c0      	addlt	r0, r0, r3
 800943a:	4770      	bx	lr

0800943c <_init>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr

08009448 <_fini>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	bf00      	nop
 800944c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944e:	bc08      	pop	{r3}
 8009450:	469e      	mov	lr, r3
 8009452:	4770      	bx	lr
