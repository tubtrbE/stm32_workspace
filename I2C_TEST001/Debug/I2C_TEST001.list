
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b0  080074b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000022c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017125  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003367  00000000  00000000  000371cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d85  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019957  00000000  00000000  0006481d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0872  00000000  00000000  0007e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e9e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a98  00000000  00000000  0016ea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007280 	.word	0x08007280

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007280 	.word	0x08007280

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x9c>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x9c>)
 800060a:	f001 f8ff 	bl	800180c <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000614:	f000 fda8 	bl	8001168 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000618:	2303      	movs	r3, #3
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x9c>)
 800062a:	f001 fa45 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000634:	f000 fd98 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012000 	.word	0x40012000

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 fdd1 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_GPIO_Init+0xac>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xac>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0xac>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_GPIO_Init+0xac>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_GPIO_Init+0xac>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xb0>)
 800076e:	f001 fd75 	bl	800225c <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f001 ff27 	bl	8002614 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fccc 	bl	8001168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f002 fc97 	bl	8003106 <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f000 fcc3 	bl	8001168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f002 fcca 	bl	800317e <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 fcba 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 8000860:	f001 fcfc 	bl	800225c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <__io_putchar+0x20>)
 80008a4:	f004 fadf 	bl	8004e66 <HAL_UART_Transmit>
	return ch;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000024c 	.word	0x2000024c

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 ff0f 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f985 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff03 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80008ca:	f000 fc53 	bl	8001174 <MX_RTC_Init>
  MX_I2C1_Init();
 80008ce:	f7ff ff59 	bl	8000784 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80008d2:	f000 fe69 	bl	80015a8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008d6:	f7ff fe65 	bl	80005a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008da:	f000 fdf5 	bl	80014c8 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008de:	f000 f9e9 	bl	8000cb4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80008e2:	489d      	ldr	r0, [pc, #628]	; (8000b58 <main+0x2a0>)
 80008e4:	f003 fe40 	bl	8004568 <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 80008e8:	f000 fb5a 	bl	8000fa0 <init>
	LCD_Init(LCD_ADDR);
 80008ec:	204e      	movs	r0, #78	; 0x4e
 80008ee:	f000 fb1f 	bl	8000f30 <LCD_Init>
//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//Main loop
		while (mode == 0) {
 80008f2:	e096      	b.n	8000a22 <main+0x16a>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80008f4:	2201      	movs	r2, #1
 80008f6:	4999      	ldr	r1, [pc, #612]	; (8000b5c <main+0x2a4>)
 80008f8:	4899      	ldr	r0, [pc, #612]	; (8000b60 <main+0x2a8>)
 80008fa:	f003 fbf7 	bl	80040ec <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80008fe:	2201      	movs	r2, #1
 8000900:	4998      	ldr	r1, [pc, #608]	; (8000b64 <main+0x2ac>)
 8000902:	4897      	ldr	r0, [pc, #604]	; (8000b60 <main+0x2a8>)
 8000904:	f003 fcd4 	bl	80042b0 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000908:	4897      	ldr	r0, [pc, #604]	; (8000b68 <main+0x2b0>)
 800090a:	f000 ffc3 	bl	8001894 <HAL_ADC_Start>

			sprintf(Time, " %s%02x:%02x:%02x", ampm[sTime.TimeFormat],
 800090e:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <main+0x2a4>)
 8000910:	78db      	ldrb	r3, [r3, #3]
 8000912:	461a      	mov	r2, r3
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	4a94      	ldr	r2, [pc, #592]	; (8000b6c <main+0x2b4>)
 800091c:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800091e:	4b8f      	ldr	r3, [pc, #572]	; (8000b5c <main+0x2a4>)
 8000920:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, " %s%02x:%02x:%02x", ampm[sTime.TimeFormat],
 8000922:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000924:	4b8d      	ldr	r3, [pc, #564]	; (8000b5c <main+0x2a4>)
 8000926:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, " %s%02x:%02x:%02x", ampm[sTime.TimeFormat],
 8000928:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800092a:	4b8c      	ldr	r3, [pc, #560]	; (8000b5c <main+0x2a4>)
 800092c:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, " %s%02x:%02x:%02x", ampm[sTime.TimeFormat],
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	9100      	str	r1, [sp, #0]
 8000932:	4603      	mov	r3, r0
 8000934:	498e      	ldr	r1, [pc, #568]	; (8000b70 <main+0x2b8>)
 8000936:	488f      	ldr	r0, [pc, #572]	; (8000b74 <main+0x2bc>)
 8000938:	f005 fb50 	bl	8005fdc <siprintf>

			// LCD up
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	204e      	movs	r0, #78	; 0x4e
 8000940:	f000 fad2 	bl	8000ee8 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " Park Jung Hwan");
 8000944:	498c      	ldr	r1, [pc, #560]	; (8000b78 <main+0x2c0>)
 8000946:	204e      	movs	r0, #78	; 0x4e
 8000948:	f000 fb0f 	bl	8000f6a <LCD_SendString>

			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 800094c:	21c0      	movs	r1, #192	; 0xc0
 800094e:	204e      	movs	r0, #78	; 0x4e
 8000950:	f000 faca 	bl	8000ee8 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 8000954:	4987      	ldr	r1, [pc, #540]	; (8000b74 <main+0x2bc>)
 8000956:	204e      	movs	r0, #78	; 0x4e
 8000958:	f000 fb07 	bl	8000f6a <LCD_SendString>

			//mode choose while loop
			while (rising_edge >= 1) {
 800095c:	e05d      	b.n	8000a1a <main+0x162>
				cur_tick = HAL_GetTick();
 800095e:	f000 ff25 	bl	80017ac <HAL_GetTick>
 8000962:	4603      	mov	r3, r0
 8000964:	4a85      	ldr	r2, [pc, #532]	; (8000b7c <main+0x2c4>)
 8000966:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8000968:	4b84      	ldr	r3, [pc, #528]	; (8000b7c <main+0x2c4>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b84      	ldr	r3, [pc, #528]	; (8000b80 <main+0x2c8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	4a84      	ldr	r2, [pc, #528]	; (8000b84 <main+0x2cc>)
 8000974:	6013      	str	r3, [r2, #0]

				if (tick_gap >= 300) {
 8000976:	4b83      	ldr	r3, [pc, #524]	; (8000b84 <main+0x2cc>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800097e:	d34c      	bcc.n	8000a1a <main+0x162>

					if (rising_edge == 1 && falling_edge >= 1) {
 8000980:	4b81      	ldr	r3, [pc, #516]	; (8000b88 <main+0x2d0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d11f      	bne.n	80009c8 <main+0x110>
 8000988:	4b80      	ldr	r3, [pc, #512]	; (8000b8c <main+0x2d4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01b      	beq.n	80009c8 <main+0x110>
						rising_edge = 0;
 8000990:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <main+0x2d0>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000996:	4b7d      	ldr	r3, [pc, #500]	; (8000b8c <main+0x2d4>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
						mode = 1;
 800099c:	4b7c      	ldr	r3, [pc, #496]	; (8000b90 <main+0x2d8>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
						sprintf(Time_temp, "AM 00:00:00");
 80009a2:	497c      	ldr	r1, [pc, #496]	; (8000b94 <main+0x2dc>)
 80009a4:	487c      	ldr	r0, [pc, #496]	; (8000b98 <main+0x2e0>)
 80009a6:	f005 fb19 	bl	8005fdc <siprintf>
						LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009aa:	21c0      	movs	r1, #192	; 0xc0
 80009ac:	204e      	movs	r0, #78	; 0x4e
 80009ae:	f000 fa9b 	bl	8000ee8 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, Time_temp);
 80009b2:	4979      	ldr	r1, [pc, #484]	; (8000b98 <main+0x2e0>)
 80009b4:	204e      	movs	r0, #78	; 0x4e
 80009b6:	f000 fad8 	bl	8000f6a <LCD_SendString>
						LCD_SendCommand(LCD_ADDR, 0b00001111);
 80009ba:	210f      	movs	r1, #15
 80009bc:	204e      	movs	r0, #78	; 0x4e
 80009be:	f000 fa93 	bl	8000ee8 <LCD_SendCommand>
//						for (int i = 0; i < 11; i++) {
//							LCD_SendCommand(LCD_ADDR, 0b00010000);
//						}
						printf("one click==========================\r\n");
 80009c2:	4876      	ldr	r0, [pc, #472]	; (8000b9c <main+0x2e4>)
 80009c4:	f005 face 	bl	8005f64 <puts>
					}
					if (rising_edge >= 2 && falling_edge >= 1) {
 80009c8:	4b6f      	ldr	r3, [pc, #444]	; (8000b88 <main+0x2d0>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d90f      	bls.n	80009f0 <main+0x138>
 80009d0:	4b6e      	ldr	r3, [pc, #440]	; (8000b8c <main+0x2d4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00b      	beq.n	80009f0 <main+0x138>
						rising_edge = 0;
 80009d8:	4b6b      	ldr	r3, [pc, #428]	; (8000b88 <main+0x2d0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 80009de:	4b6b      	ldr	r3, [pc, #428]	; (8000b8c <main+0x2d4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
						mode = 2;
 80009e4:	4b6a      	ldr	r3, [pc, #424]	; (8000b90 <main+0x2d8>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	701a      	strb	r2, [r3, #0]
						printf("two click++++++++++++++++++++++++++\r\n");
 80009ea:	486d      	ldr	r0, [pc, #436]	; (8000ba0 <main+0x2e8>)
 80009ec:	f005 faba 	bl	8005f64 <puts>
					}
					if (tick_gap >= 2000 && falling_edge == 0) {
 80009f0:	4b64      	ldr	r3, [pc, #400]	; (8000b84 <main+0x2cc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009f8:	d30f      	bcc.n	8000a1a <main+0x162>
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <main+0x2d4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10b      	bne.n	8000a1a <main+0x162>
						rising_edge = 0;
 8000a02:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <main+0x2d0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a08:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <main+0x2d4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8000a0e:	4b60      	ldr	r3, [pc, #384]	; (8000b90 <main+0x2d8>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8000a14:	4863      	ldr	r0, [pc, #396]	; (8000ba4 <main+0x2ec>)
 8000a16:	f005 faa5 	bl	8005f64 <puts>
			while (rising_edge >= 1) {
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <main+0x2d0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d19d      	bne.n	800095e <main+0xa6>
		while (mode == 0) {
 8000a22:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <main+0x2d8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f43f af64 	beq.w	80008f4 <main+0x3c>
				}
			}
		}

		//Set Time loop
		while (mode == 1) {
 8000a2c:	e051      	b.n	8000ad2 <main+0x21a>
			HAL_ADC_Start(&hadc1);
 8000a2e:	484e      	ldr	r0, [pc, #312]	; (8000b68 <main+0x2b0>)
 8000a30:	f000 ff30 	bl	8001894 <HAL_ADC_Start>
			if (rising_edge >= 1 && falling_edge >= 1) {
 8000a34:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <main+0x2d0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <main+0x1ac>
 8000a3c:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <main+0x2d4>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00f      	beq.n	8000a64 <main+0x1ac>
				rising_edge = 0;
 8000a44:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <main+0x2d0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8000a4a:	4b50      	ldr	r3, [pc, #320]	; (8000b8c <main+0x2d4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8000a50:	4b4f      	ldr	r3, [pc, #316]	; (8000b90 <main+0x2d8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
				LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000a56:	210e      	movs	r1, #14
 8000a58:	204e      	movs	r0, #78	; 0x4e
 8000a5a:	f000 fa45 	bl	8000ee8 <LCD_SendCommand>
				printf("mode reset\r\n");
 8000a5e:	4852      	ldr	r0, [pc, #328]	; (8000ba8 <main+0x2f0>)
 8000a60:	f005 fa80 	bl	8005f64 <puts>
			}

			if (get_time > 6) {
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <main+0x2f4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d932      	bls.n	8000ad2 <main+0x21a>
				if (up > 0) {
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <main+0x2f8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <main+0x1c2>

					up = 0;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <main+0x2f8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8000a7a:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <main+0x2fc>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <main+0x1d0>

					down = 0;
 8000a82:	4b4c      	ldr	r3, [pc, #304]	; (8000bb4 <main+0x2fc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
				}
				if (left > 0) {
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <main+0x300>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00c      	beq.n	8000aaa <main+0x1f2>
					cursor--;
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <main+0x304>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <main+0x304>)
 8000a9a:	701a      	strb	r2, [r3, #0]
					LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	204e      	movs	r0, #78	; 0x4e
 8000aa0:	f000 fa22 	bl	8000ee8 <LCD_SendCommand>

					left = 0;
 8000aa4:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <main+0x300>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
				}
				if (right > 0) {
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <main+0x308>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00c      	beq.n	8000acc <main+0x214>
					cursor++;
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <main+0x304>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <main+0x304>)
 8000abc:	701a      	strb	r2, [r3, #0]
					LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000abe:	2114      	movs	r1, #20
 8000ac0:	204e      	movs	r0, #78	; 0x4e
 8000ac2:	f000 fa11 	bl	8000ee8 <LCD_SendCommand>
					right = 0;
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <main+0x308>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
				}
				get_time = 0;
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <main+0x2f4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <main+0x2d8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d0a9      	beq.n	8000a2e <main+0x176>
			}

		}

		//AL loop
		while (mode == 2) {
 8000ada:	e013      	b.n	8000b04 <main+0x24c>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <main+0x2d0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00f      	beq.n	8000b04 <main+0x24c>
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <main+0x2d4>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00b      	beq.n	8000b04 <main+0x24c>
				rising_edge = 0;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <main+0x2d0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <main+0x2d4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <main+0x2d8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8000afe:	482a      	ldr	r0, [pc, #168]	; (8000ba8 <main+0x2f0>)
 8000b00:	f005 fa30 	bl	8005f64 <puts>
		while (mode == 2) {
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <main+0x2d8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d0e7      	beq.n	8000adc <main+0x224>


		}

		//Song choice loop
		while (mode == 3) {
 8000b0c:	e013      	b.n	8000b36 <main+0x27e>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <main+0x2d0>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00f      	beq.n	8000b36 <main+0x27e>
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <main+0x2d4>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00b      	beq.n	8000b36 <main+0x27e>
				rising_edge = 0;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <main+0x2d0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <main+0x2d4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0x2d8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0x2f0>)
 8000b32:	f005 fa17 	bl	8005f64 <puts>
		while (mode == 3) {
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <main+0x2d8>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d0e7      	beq.n	8000b0e <main+0x256>
			}


		}

		memset(buf, 0, sizeof(buf));
 8000b3e:	2250      	movs	r2, #80	; 0x50
 8000b40:	2100      	movs	r1, #0
 8000b42:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <main+0x30c>)
 8000b44:	f005 f980 	bl	8005e48 <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <main+0x310>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	491f      	ldr	r1, [pc, #124]	; (8000bcc <main+0x314>)
 8000b50:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <main+0x30c>)
 8000b52:	f005 fa43 	bl	8005fdc <siprintf>
	while (1) {
 8000b56:	e6cc      	b.n	80008f2 <main+0x3a>
 8000b58:	20000204 	.word	0x20000204
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	200001e0 	.word	0x200001e0
 8000b64:	2000018c 	.word	0x2000018c
 8000b68:	20000094 	.word	0x20000094
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	08007298 	.word	0x08007298
 8000b74:	20000150 	.word	0x20000150
 8000b78:	080072ac 	.word	0x080072ac
 8000b7c:	2000013c 	.word	0x2000013c
 8000b80:	20000138 	.word	0x20000138
 8000b84:	20000140 	.word	0x20000140
 8000b88:	20000135 	.word	0x20000135
 8000b8c:	20000136 	.word	0x20000136
 8000b90:	20000137 	.word	0x20000137
 8000b94:	080072bc 	.word	0x080072bc
 8000b98:	20000164 	.word	0x20000164
 8000b9c:	080072c8 	.word	0x080072c8
 8000ba0:	080072f0 	.word	0x080072f0
 8000ba4:	08007318 	.word	0x08007318
 8000ba8:	08007340 	.word	0x08007340
 8000bac:	20000130 	.word	0x20000130
 8000bb0:	2000014c 	.word	0x2000014c
 8000bb4:	2000014d 	.word	0x2000014d
 8000bb8:	2000014e 	.word	0x2000014e
 8000bbc:	20000144 	.word	0x20000144
 8000bc0:	2000014f 	.word	0x2000014f
 8000bc4:	20000190 	.word	0x20000190
 8000bc8:	20000148 	.word	0x20000148
 8000bcc:	0800734c 	.word	0x0800734c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2230      	movs	r2, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 f932 	bl	8005e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <SystemClock_Config+0xdc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <SystemClock_Config+0xdc>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <SystemClock_Config+0xdc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <SystemClock_Config+0xe0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <SystemClock_Config+0xe0>)
 8000c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <SystemClock_Config+0xe0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c44:	2308      	movs	r3, #8
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c48:	23b4      	movs	r3, #180	; 0xb4
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c50:	2304      	movs	r3, #4
 8000c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fb1f 	bl	800329c <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c64:	f000 fa80 	bl	8001168 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c68:	f002 fac8 	bl	80031fc <HAL_PWREx_EnableOverDrive>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c72:	f000 fa79 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2105      	movs	r1, #5
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fd79 	bl	800378c <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ca0:	f000 fa62 	bl	8001168 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3750      	adds	r7, #80	; 0x50
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2027      	movs	r0, #39	; 0x27
 8000cbe:	f001 fa04 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc2:	2027      	movs	r0, #39	; 0x27
 8000cc4:	f001 fa1d 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2028      	movs	r0, #40	; 0x28
 8000cce:	f001 f9fc 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f001 fa15 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	201d      	movs	r0, #29
 8000cde:	f001 f9f4 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ce2:	201d      	movs	r0, #29
 8000ce4:	f001 fa0d 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b63      	cmp	r3, #99	; 0x63
 8000cf8:	d801      	bhi.n	8000cfe <button_status+0x12>
		return UP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e02a      	b.n	8000d54 <button_status+0x68>
	if (800 < value && value < 900)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000d04:	d905      	bls.n	8000d12 <button_status+0x26>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000d0c:	d201      	bcs.n	8000d12 <button_status+0x26>
		return DOWN;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e020      	b.n	8000d54 <button_status+0x68>
	if (1800 < value && value < 2000)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000d18:	d905      	bls.n	8000d26 <button_status+0x3a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d20:	d201      	bcs.n	8000d26 <button_status+0x3a>
		return LEFT;
 8000d22:	2304      	movs	r3, #4
 8000d24:	e016      	b.n	8000d54 <button_status+0x68>
	if (2800 < value && value < 3000)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000d2c:	d906      	bls.n	8000d3c <button_status+0x50>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d801      	bhi.n	8000d3c <button_status+0x50>
		return RIGHT;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	e00b      	b.n	8000d54 <button_status+0x68>
	if (4000 < value && value < 5000)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d42:	d906      	bls.n	8000d52 <button_status+0x66>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d801      	bhi.n	8000d52 <button_status+0x66>
		return SELECT;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <button_status+0x68>

	return NONE;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <I2C_Scan>:

void I2C_Scan() {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <I2C_Scan+0xc0>)
 8000d68:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d76:	6020      	str	r0, [r4, #0]
 8000d78:	3404      	adds	r4, #4
 8000d7a:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000d7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fa35 	bl	80001f0 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <I2C_Scan+0xc4>)
 8000d94:	f004 f867 	bl	8004e66 <HAL_UART_Transmit>


	for (uint16_t i = 0; i < 128; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000d9e:	e030      	b.n	8000e02 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000da0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	b299      	uxth	r1, r3
 8000da8:	230a      	movs	r3, #10
 8000daa:	2201      	movs	r2, #1
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <I2C_Scan+0xc8>)
 8000dae:	f001 fe73 	bl	8002a98 <HAL_I2C_IsDeviceReady>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <I2C_Scan+0xcc>)
 8000db8:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <I2C_Scan+0xcc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d113      	bne.n	8000dea <I2C_Scan+0x8a>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000dc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <I2C_Scan+0xd0>)
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	f005 f8d2 	bl	8005f74 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa0c 	bl	80001f0 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4639      	mov	r1, r7
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <I2C_Scan+0xc4>)
 8000de4:	f004 f83f 	bl	8004e66 <HAL_UART_Transmit>
 8000de8:	e006      	b.n	8000df8 <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2201      	movs	r2, #1
 8000df0:	4910      	ldr	r1, [pc, #64]	; (8000e34 <I2C_Scan+0xd4>)
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <I2C_Scan+0xc4>)
 8000df4:	f004 f837 	bl	8004e66 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000df8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000e02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d9ca      	bls.n	8000da0 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <I2C_Scan+0xd8>)
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <I2C_Scan+0xc4>)
 8000e14:	f004 f827 	bl	8004e66 <HAL_UART_Transmit>
}
 8000e18:	bf00      	nop
 8000e1a:	3758      	adds	r7, #88	; 0x58
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e20:	08007364 	.word	0x08007364
 8000e24:	2000024c 	.word	0x2000024c
 8000e28:	200000dc 	.word	0x200000dc
 8000e2c:	20000134 	.word	0x20000134
 8000e30:	08007354 	.word	0x08007354
 8000e34:	0800735c 	.word	0x0800735c
 8000e38:	08007360 	.word	0x08007360

08000e3c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	460b      	mov	r3, r1
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	2201      	movs	r2, #1
 8000e58:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <LCD_SendInternal+0xa8>)
 8000e5a:	f001 fe1d 	bl	8002a98 <HAL_I2C_IsDeviceReady>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d000      	beq.n	8000e6a <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e68:	e7f1      	b.n	8000e4e <LCD_SendInternal+0x12>
			break;
 8000e6a:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	f023 030f 	bic.w	r3, r3, #15
 8000e72:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000e7a:	7bba      	ldrb	r2, [r7, #14]
 8000e7c:	797b      	ldrb	r3, [r7, #5]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000e8a:	7bba      	ldrb	r2, [r7, #14]
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f043 030c 	orr.w	r3, r3, #12
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000eaa:	7b7a      	ldrb	r2, [r7, #13]
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2304      	movs	r3, #4
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <LCD_SendInternal+0xa8>)
 8000ecc:	f001 fce6 	bl	800289c <HAL_I2C_Master_Transmit>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f000 fc75 	bl	80017c4 <HAL_Delay>
	return res;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000dc 	.word	0x200000dc

08000ee8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000ef8:	79b9      	ldrb	r1, [r7, #6]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2200      	movs	r2, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff9c 	bl	8000e3c <LCD_SendInternal>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000f1c:	79b9      	ldrb	r1, [r7, #6]
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff8a 	bl	8000e3c <LCD_SendInternal>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2130      	movs	r1, #48	; 0x30
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffd2 	bl	8000ee8 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2102      	movs	r1, #2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffcd 	bl	8000ee8 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	210c      	movs	r1, #12
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffc8 	bl	8000ee8 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffc3 	bl	8000ee8 <LCD_SendCommand>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	6039      	str	r1, [r7, #0]
 8000f74:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000f76:	e009      	b.n	8000f8c <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffc3 	bl	8000f0c <LCD_SendData>
		str++;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f1      	bne.n	8000f78 <LCD_SendString+0xe>
	}
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <init>:

void init() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000fa4:	f7ff fedc 	bl	8000d60 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000fa8:	204e      	movs	r0, #78	; 0x4e
 8000faa:	f7ff ffc1 	bl	8000f30 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	204e      	movs	r0, #78	; 0x4e
 8000fb2:	f7ff ff99 	bl	8000ee8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000fb6:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <init+0x34>)
 8000fb8:	204e      	movs	r0, #78	; 0x4e
 8000fba:	f7ff ffd6 	bl	8000f6a <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000fbe:	21c0      	movs	r1, #192	; 0xc0
 8000fc0:	204e      	movs	r0, #78	; 0x4e
 8000fc2:	f7ff ff91 	bl	8000ee8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000fc6:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <init+0x38>)
 8000fc8:	204e      	movs	r0, #78	; 0x4e
 8000fca:	f7ff ffce 	bl	8000f6a <LCD_SendString>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0800737c 	.word	0x0800737c
 8000fd8:	0800738c 	.word	0x0800738c

08000fdc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4817      	ldr	r0, [pc, #92]	; (8001048 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fec:	f001 fae2 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d110      	bne.n	8001018 <HAL_GPIO_EXTI_Callback+0x3c>
		rising_edge++;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_GPIO_EXTI_Callback+0x70>)
 8001000:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_GPIO_EXTI_Callback+0x70>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <HAL_GPIO_EXTI_Callback+0x74>)
 800100a:	f004 ff25 	bl	8005e58 <iprintf>
		start_tick = HAL_GetTick();
 800100e:	f000 fbcd 	bl	80017ac <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_GPIO_EXTI_Callback+0x78>)
 8001016:	6013      	str	r3, [r2, #0]
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <HAL_GPIO_EXTI_Callback+0x6c>)
 800101e:	f001 fac9 	bl	80025b4 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10b      	bne.n	8001040 <HAL_GPIO_EXTI_Callback+0x64>
		falling_edge++;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_GPIO_EXTI_Callback+0x7c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001032:	701a      	strb	r2, [r3, #0]
		printf("falling edge : %d\r\n", falling_edge);
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <HAL_GPIO_EXTI_Callback+0x80>)
 800103c:	f004 ff0c 	bl	8005e58 <iprintf>
	}

}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020800 	.word	0x40020800
 800104c:	20000135 	.word	0x20000135
 8001050:	0800739c 	.word	0x0800739c
 8001054:	20000138 	.word	0x20000138
 8001058:	20000136 	.word	0x20000136
 800105c:	080073b0 	.word	0x080073b0

08001060 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a32      	ldr	r2, [pc, #200]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d15d      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0xce>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001072:	4832      	ldr	r0, [pc, #200]	; (800113c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001074:	f000 fd13 	bl	8001a9e <HAL_ADC_GetValue>
 8001078:	4603      	mov	r3, r0
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800107c:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800107e:	482f      	ldr	r0, [pc, #188]	; (800113c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001080:	f000 fcda 	bl	8001a38 <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe2f 	bl	8000cec <button_status>
 800108e:	4603      	mov	r3, r0
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10b      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800109e:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4828      	ldr	r0, [pc, #160]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010a8:	f004 fed6 	bl	8005e58 <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe1b 	bl	8000cec <button_status>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d10b      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010c6:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4820      	ldr	r0, [pc, #128]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010d0:	f004 fec2 	bl	8005e58 <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe07 	bl	8000cec <button_status>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d10b      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010ee:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010f8:	f004 feae 	bl	8005e58 <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdf3 	bl	8000cec <button_status>
 8001106:	4603      	mov	r3, r0
 8001108:	2b05      	cmp	r3, #5
 800110a:	d10b      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001116:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001120:	f004 fe9a 	bl	8005e58 <iprintf>
		}

		get_time++;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800112c:	6013      	str	r3, [r2, #0]
	}
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40000400 	.word	0x40000400
 800113c:	20000094 	.word	0x20000094
 8001140:	20000148 	.word	0x20000148
 8001144:	2000014c 	.word	0x2000014c
 8001148:	080073c4 	.word	0x080073c4
 800114c:	2000014d 	.word	0x2000014d
 8001150:	080073d0 	.word	0x080073d0
 8001154:	2000014e 	.word	0x2000014e
 8001158:	080073dc 	.word	0x080073dc
 800115c:	2000014f 	.word	0x2000014f
 8001160:	080073e8 	.word	0x080073e8
 8001164:	20000130 	.word	0x20000130

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_RTC_Init+0xb0>)
 800118e:	4a26      	ldr	r2, [pc, #152]	; (8001228 <MX_RTC_Init+0xb4>)
 8001190:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_RTC_Init+0xb0>)
 8001194:	2240      	movs	r2, #64	; 0x40
 8001196:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_RTC_Init+0xb0>)
 800119a:	227f      	movs	r2, #127	; 0x7f
 800119c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_RTC_Init+0xb0>)
 80011a0:	22ff      	movs	r2, #255	; 0xff
 80011a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_RTC_Init+0xb0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_RTC_Init+0xb0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_RTC_Init+0xb0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_RTC_Init+0xb0>)
 80011b8:	f002 fe88 	bl	8003ecc <HAL_RTC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011c2:	f7ff ffd1 	bl	8001168 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <MX_RTC_Init+0xb0>)
 80011e6:	f002 fee7 	bl	8003fb8 <HAL_RTC_SetTime>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80011f0:	f7ff ffba 	bl	8001168 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011f4:	2301      	movs	r3, #1
 80011f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011f8:	2301      	movs	r3, #1
 80011fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	2201      	movs	r2, #1
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_RTC_Init+0xb0>)
 800120c:	f002 ffcc 	bl	80041a8 <HAL_RTC_SetDate>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001216:	f7ff ffa7 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200001e0 	.word	0x200001e0
 8001228:	40002800 	.word	0x40002800

0800122c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2230      	movs	r2, #48	; 0x30
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fe03 	bl	8005e48 <memset>
  if(rtcHandle->Instance==RTC)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <HAL_RTC_MspInit+0x4c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d111      	bne.n	8001270 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800124c:	2320      	movs	r3, #32
 800124e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fc76 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001266:	f7ff ff7f 	bl	8001168 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RTC_MspInit+0x50>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3738      	adds	r7, #56	; 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40002800 	.word	0x40002800
 800127c:	42470e3c 	.word	0x42470e3c

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 fa32 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM3_IRQHandler+0x10>)
 800132a:	f003 f98d 	bl	8004648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000204 	.word	0x20000204

08001338 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USART3_IRQHandler+0x10>)
 800133e:	f003 fe25 	bl	8004f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000024c 	.word	0x2000024c

0800134c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001354:	f001 f946 	bl	80025e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800136e:	f3af 8000 	nop.w
 8001372:	4601      	mov	r1, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf0      	blt.n	800136e <_read+0x12>
	}

return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fa6f 	bl	8000894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x12>
	}
	return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
	return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f004 fcc4 	bl	8005df4 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20030000 	.word	0x20030000
 8001498:	00000400 	.word	0x00000400
 800149c:	20000200 	.word	0x20000200
 80014a0:	200002a8 	.word	0x200002a8

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM3_Init+0x94>)
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <MX_TIM3_Init+0x98>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM3_Init+0x94>)
 80014ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80014f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM3_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM3_Init+0x94>)
 80014fa:	f44f 7261 	mov.w	r2, #900	; 0x384
 80014fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_TIM3_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM3_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_TIM3_Init+0x94>)
 800150e:	f002 ffdb 	bl	80044c8 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001518:	f7ff fe26 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_TIM3_Init+0x94>)
 800152a:	f003 f995 	bl	8004858 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001534:	f7ff fe18 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001538:	2320      	movs	r3, #32
 800153a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_TIM3_Init+0x94>)
 8001546:	f003 fbb1 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001550:	f7ff fe0a 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000204 	.word	0x20000204
 8001560:	40000400 	.word	0x40000400

08001564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10d      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40000400 	.word	0x40000400
 80015a4:	40023800 	.word	0x40023800

080015a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART3_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015e0:	f003 fbf4 	bl	8004dcc <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f7ff fdbd 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000024c 	.word	0x2000024c
 80015f8:	40004800 	.word	0x40004800

080015fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_UART_MspInit+0x84>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12c      	bne.n	8001678 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_UART_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001668:	2307      	movs	r3, #7
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_UART_MspInit+0x8c>)
 8001674:	f000 fdf2 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40004800 	.word	0x40004800
 8001684:	40023800 	.word	0x40023800
 8001688:	40020c00 	.word	0x40020c00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b6:	f7ff fef5 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f004 fba1 	bl	8005e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff f8fb 	bl	80008b8 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016d0:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 80016d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016d8:	200002a4 	.word	0x200002a4

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 fcd3 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fdb4 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fceb 	bl	800211e <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 fcb3 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008
 800177c:	20000010 	.word	0x20000010
 8001780:	2000000c 	.word	0x2000000c

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000290 	.word	0x20000290

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000290 	.word	0x20000290

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000010 	.word	0x20000010

0800180c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e033      	b.n	800188a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ff0c 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fa5c 	bl	8001d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start+0x1a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0b2      	b.n	8001a14 <HAL_ADC_Start+0x180>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d018      	beq.n	80018f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_ADC_Start+0x18c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_ADC_Start+0x190>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9a      	lsrs	r2, r3, #18
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018e8:	e002      	b.n	80018f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f9      	bne.n	80018ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d17a      	bne.n	80019fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_ADC_Start+0x194>)
 8001962:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12a      	bne.n	80019d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_ADC_Start+0x198>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d015      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_ADC_Start+0x19c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_ADC_Start+0x106>
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_ADC_Start+0x194>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_ADC_Start+0x1a0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d136      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_ADC_Start+0x194>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d130      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d129      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e020      	b.n	8001a12 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_ADC_Start+0x198>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11b      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d114      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e00b      	b.n	8001a12 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000008 	.word	0x20000008
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012100 	.word	0x40012100
 8001a34:	40012200 	.word	0x40012200

08001a38 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Stop+0x16>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e021      	b.n	8001a92 <HAL_ADC_Stop+0x5a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1c>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e113      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x244>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d925      	bls.n	8001b30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68d9      	ldr	r1, [r3, #12]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	3b1e      	subs	r3, #30
 8001afa:	2207      	movs	r2, #7
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43da      	mvns	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	400a      	ands	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68d9      	ldr	r1, [r3, #12]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4403      	add	r3, r0
 8001b22:	3b1e      	subs	r3, #30
 8001b24:	409a      	lsls	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	e022      	b.n	8001b76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	2207      	movs	r2, #7
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	400a      	ands	r2, r1
 8001b52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4403      	add	r3, r0
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d824      	bhi.n	8001bc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b05      	subs	r3, #5
 8001b90:	221f      	movs	r2, #31
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b05      	subs	r3, #5
 8001bba:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	e04c      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d824      	bhi.n	8001c1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	3b23      	subs	r3, #35	; 0x23
 8001be2:	221f      	movs	r2, #31
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43da      	mvns	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	400a      	ands	r2, r1
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
 8001c18:	e023      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b41      	subs	r3, #65	; 0x41
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	400a      	ands	r2, r1
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b41      	subs	r3, #65	; 0x41
 8001c56:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_ADC_ConfigChannel+0x250>)
 8001c64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_ADC_ConfigChannel+0x254>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d10f      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1d8>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b12      	cmp	r3, #18
 8001c76:	d10b      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_ADC_ConfigChannel+0x254>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12b      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x23a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_ADC_ConfigChannel+0x258>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x1f4>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	d122      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_ADC_ConfigChannel+0x258>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d111      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_ADC_ConfigChannel+0x25c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_ADC_ConfigChannel+0x260>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	0c9a      	lsrs	r2, r3, #18
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f9      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40012300 	.word	0x40012300
 8001d0c:	40012000 	.word	0x40012000
 8001d10:	10000012 	.word	0x10000012
 8001d14:	20000008 	.word	0x20000008
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d24:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <ADC_Init+0x1f0>)
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	021a      	lsls	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6899      	ldr	r1, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <ADC_Init+0x1f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e00f      	b.n	8001e1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0202 	bic.w	r2, r2, #2
 8001e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e1b      	ldrb	r3, [r3, #24]
 8001e34:	005a      	lsls	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	035a      	lsls	r2, r3, #13
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e007      	b.n	8001e90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	051a      	lsls	r2, r3, #20
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed2:	025a      	lsls	r2, r3, #9
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6899      	ldr	r1, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	029a      	lsls	r2, r3, #10
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	609a      	str	r2, [r3, #8]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	0f000001 	.word	0x0f000001

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fb32 	bl	80017ac <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d008      	beq.n	8002168 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e052      	b.n	800220e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0216 	bic.w	r2, r2, #22
 8002176:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002186:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <HAL_DMA_Abort+0x62>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0208 	bic.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b8:	e013      	b.n	80021e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ba:	f7ff faf7 	bl	80017ac <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d90c      	bls.n	80021e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e015      	b.n	800220e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e4      	bne.n	80021ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	223f      	movs	r2, #63	; 0x3f
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d004      	beq.n	8002234 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e00c      	b.n	800224e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e177      	b.n	8002568 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8166 	bne.w	8002562 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80c0 	beq.w	8002562 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_GPIO_Init+0x324>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a61      	ldr	r2, [pc, #388]	; (8002584 <HAL_GPIO_Init+0x328>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_GPIO_Init+0x32c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d037      	beq.n	800249a <HAL_GPIO_Init+0x23e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a57      	ldr	r2, [pc, #348]	; (800258c <HAL_GPIO_Init+0x330>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d031      	beq.n	8002496 <HAL_GPIO_Init+0x23a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <HAL_GPIO_Init+0x236>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a55      	ldr	r2, [pc, #340]	; (8002594 <HAL_GPIO_Init+0x338>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x232>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_GPIO_Init+0x33c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x22e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_GPIO_Init+0x340>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x22a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_GPIO_Init+0x344>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x348>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_GPIO_Init+0x34c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x350>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x21a>
 8002472:	2309      	movs	r3, #9
 8002474:	e012      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002476:	230a      	movs	r3, #10
 8002478:	e010      	b.n	800249c <HAL_GPIO_Init+0x240>
 800247a:	2308      	movs	r3, #8
 800247c:	e00e      	b.n	800249c <HAL_GPIO_Init+0x240>
 800247e:	2307      	movs	r3, #7
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002482:	2306      	movs	r3, #6
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x240>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x240>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x240>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x240>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	; (8002584 <HAL_GPIO_Init+0x328>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a34      	ldr	r2, [pc, #208]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_GPIO_Init+0x354>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_GPIO_Init+0x354>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_GPIO_Init+0x354>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <HAL_GPIO_Init+0x354>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f ae84 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021800 	.word	0x40021800
 80025a4:	40021c00 	.word	0x40021c00
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40022400 	.word	0x40022400
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fcea 	bl	8000fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e12b      	b.n	800287e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f8e2 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002678:	f001 fa40 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 800267c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a81      	ldr	r2, [pc, #516]	; (8002888 <HAL_I2C_Init+0x274>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d807      	bhi.n	8002698 <HAL_I2C_Init+0x84>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a80      	ldr	r2, [pc, #512]	; (800288c <HAL_I2C_Init+0x278>)
 800268c:	4293      	cmp	r3, r2
 800268e:	bf94      	ite	ls
 8002690:	2301      	movls	r3, #1
 8002692:	2300      	movhi	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e006      	b.n	80026a6 <HAL_I2C_Init+0x92>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a7d      	ldr	r2, [pc, #500]	; (8002890 <HAL_I2C_Init+0x27c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0e7      	b.n	800287e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a78      	ldr	r2, [pc, #480]	; (8002894 <HAL_I2C_Init+0x280>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a6a      	ldr	r2, [pc, #424]	; (8002888 <HAL_I2C_Init+0x274>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d802      	bhi.n	80026e8 <HAL_I2C_Init+0xd4>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3301      	adds	r3, #1
 80026e6:	e009      	b.n	80026fc <HAL_I2C_Init+0xe8>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_I2C_Init+0x284>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	3301      	adds	r3, #1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800270e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	495c      	ldr	r1, [pc, #368]	; (8002888 <HAL_I2C_Init+0x274>)
 8002718:	428b      	cmp	r3, r1
 800271a:	d819      	bhi.n	8002750 <HAL_I2C_Init+0x13c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e59      	subs	r1, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fbb1 f3f3 	udiv	r3, r1, r3
 800272a:	1c59      	adds	r1, r3, #1
 800272c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002730:	400b      	ands	r3, r1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_I2C_Init+0x138>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1e59      	subs	r1, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fbb1 f3f3 	udiv	r3, r1, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274a:	e051      	b.n	80027f0 <HAL_I2C_Init+0x1dc>
 800274c:	2304      	movs	r3, #4
 800274e:	e04f      	b.n	80027f0 <HAL_I2C_Init+0x1dc>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <HAL_I2C_Init+0x168>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e012      	b.n	80027a2 <HAL_I2C_Init+0x18e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	0099      	lsls	r1, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Init+0x196>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e022      	b.n	80027f0 <HAL_I2C_Init+0x1dc>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10e      	bne.n	80027d0 <HAL_I2C_Init+0x1bc>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e58      	subs	r0, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	440b      	add	r3, r1
 80027c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ce:	e00f      	b.n	80027f0 <HAL_I2C_Init+0x1dc>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1e58      	subs	r0, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	0099      	lsls	r1, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	6809      	ldr	r1, [r1, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800281e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6911      	ldr	r1, [r2, #16]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68d2      	ldr	r2, [r2, #12]
 800282a:	4311      	orrs	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	000186a0 	.word	0x000186a0
 800288c:	001e847f 	.word	0x001e847f
 8002890:	003d08ff 	.word	0x003d08ff
 8002894:	431bde83 	.word	0x431bde83
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	460b      	mov	r3, r1
 80028aa:	817b      	strh	r3, [r7, #10]
 80028ac:	4613      	mov	r3, r2
 80028ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028b0:	f7fe ff7c 	bl	80017ac <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	f040 80e0 	bne.w	8002a84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2319      	movs	r3, #25
 80028ca:	2201      	movs	r2, #1
 80028cc:	4970      	ldr	r1, [pc, #448]	; (8002a90 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa92 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	e0d3      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_I2C_Master_Transmit+0x50>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0cc      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d007      	beq.n	8002912 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002920:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2210      	movs	r2, #16
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002954:	8979      	ldrh	r1, [r7, #10]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f9ca 	bl	8002cf4 <I2C_MasterRequestWrite>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e08d      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002980:	e066      	b.n	8002a50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fb0c 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11b      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x188>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	6a39      	ldr	r1, [r7, #32]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fafc 	bl	8003026 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d107      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e01a      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d194      	bne.n	8002982 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	00100002 	.word	0x00100002
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7fe fe80 	bl	80017ac <HAL_GetTick>
 8002aac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 8111 	bne.w	8002ce2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4988      	ldr	r1, [pc, #544]	; (8002cec <HAL_I2C_IsDeviceReady+0x254>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f994 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e104      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2C_IsDeviceReady+0x50>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0fd      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d007      	beq.n	8002b0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a70      	ldr	r2, [pc, #448]	; (8002cf0 <HAL_I2C_IsDeviceReady+0x258>)
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f952 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b68:	d103      	bne.n	8002b72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b6      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fe11 	bl	80017ac <HAL_GetTick>
 8002b8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bba:	e025      	b.n	8002c08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7fe fdf6 	bl	80017ac <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <HAL_I2C_IsDeviceReady+0x13a>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	22a0      	movs	r2, #160	; 0xa0
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2ba0      	cmp	r3, #160	; 0xa0
 8002c12:	d005      	beq.n	8002c20 <HAL_I2C_IsDeviceReady+0x188>
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <HAL_I2C_IsDeviceReady+0x188>
 8002c1a:	7dbb      	ldrb	r3, [r7, #22]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0cd      	beq.n	8002bbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d129      	bne.n	8002c8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2319      	movs	r3, #25
 8002c62:	2201      	movs	r2, #1
 8002c64:	4921      	ldr	r1, [pc, #132]	; (8002cec <HAL_I2C_IsDeviceReady+0x254>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8c6 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e036      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e02c      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2319      	movs	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	490f      	ldr	r1, [pc, #60]	; (8002cec <HAL_I2C_IsDeviceReady+0x254>)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8a2 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e012      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f4ff af32 	bcc.w	8002b32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000

08002cf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d006      	beq.n	8002d1e <I2C_MasterRequestWrite+0x2a>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d003      	beq.n	8002d1e <I2C_MasterRequestWrite+0x2a>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e00b      	b.n	8002d48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	d107      	bne.n	8002d48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f84f 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6e:	d103      	bne.n	8002d78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e035      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	e01b      	b.n	8002dd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	11db      	asrs	r3, r3, #7
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0306 	and.w	r3, r3, #6
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f063 030f 	orn	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <I2C_MasterRequestWrite+0xfc>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f875 	bl	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e010      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4907      	ldr	r1, [pc, #28]	; (8002df4 <I2C_MasterRequestWrite+0x100>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f865 	bl	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010008 	.word	0x00010008
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e025      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d021      	beq.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fccb 	bl	80017ac <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e023      	b.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10d      	bne.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	e00c      	b.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d0b6      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb4:	e051      	b.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d123      	bne.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ede:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0204 	orr.w	r2, r3, #4
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e046      	b.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d021      	beq.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe fc49 	bl	80017ac <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e020      	b.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10c      	bne.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e00b      	b.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d18d      	bne.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb0:	e02d      	b.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f878 	bl	80030a8 <I2C_IsAcknowledgeFailed>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02d      	b.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d021      	beq.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fca:	f7fe fbef 	bl	80017ac <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d116      	bne.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d1ca      	bne.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003032:	e02d      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f837 	bl	80030a8 <I2C_IsAcknowledgeFailed>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e02d      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d021      	beq.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fbae 	bl	80017ac <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d1ca      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d11b      	bne.n	80030f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	d129      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0210 	bic.w	r2, r2, #16
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	d12a      	bne.n	80031ee <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	f023 030f 	bic.w	r3, r3, #15
 80031be:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	89fa      	ldrh	r2, [r7, #14]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_PWREx_EnableOverDrive+0x90>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_PWREx_EnableOverDrive+0x94>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7fe fac0 	bl	80017ac <HAL_GetTick>
 800322c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800322e:	e009      	b.n	8003244 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003230:	f7fe fabc 	bl	80017ac <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323e:	d901      	bls.n	8003244 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e01f      	b.n	8003284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d1ee      	bne.n	8003230 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7fe faa8 	bl	80017ac <HAL_GetTick>
 800325c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800325e:	e009      	b.n	8003274 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003260:	f7fe faa4 	bl	80017ac <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326e:	d901      	bls.n	8003274 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e007      	b.n	8003284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003280:	d1ee      	bne.n	8003260 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	420e0040 	.word	0x420e0040
 8003294:	40007000 	.word	0x40007000
 8003298:	420e0044 	.word	0x420e0044

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fa2a 	bl	80017ac <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fa26 	bl	80017ac <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fa16 	bl	80017ac <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fa12 	bl	80017ac <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f9cb 	bl	80017ac <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe f9c7 	bl	80017ac <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe f9aa 	bl	80017ac <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe f9a6 	bl	80017ac <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe f98a 	bl	80017ac <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe f986 	bl	80017ac <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe f973 	bl	80017ac <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe f96f 	bl	80017ac <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe f92f 	bl	80017ac <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f92b 	bl	80017ac <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f8f0 	bl	80017ac <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe f8ec 	bl	80017ac <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe f8da 	bl	80017ac <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f8d6 	bl	80017ac <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe f8aa 	bl	80017ac <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f8a6 	bl	80017ac <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f87f 	bl	80017ac <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe f87b 	bl	80017ac <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe f868 	bl	80017ac <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f864 	bl	80017ac <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fd ff96 	bl	80017ac <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd ff92 	bl	80017ac <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fef6 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	080073f8 	.word	0x080073f8
 8003950:	20000008 	.word	0x20000008
 8003954:	2000000c 	.word	0x2000000c

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b090      	sub	sp, #64	; 0x40
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e09b      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003990:	e09b      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003996:	e098      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b4f      	ldr	r3, [pc, #316]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c0:	2100      	movs	r1, #0
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c4:	fb03 f201 	mul.w	r2, r3, r1
 80039c8:	2300      	movs	r3, #0
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d2:	fba0 1202 	umull	r1, r2, r0, r2
 80039d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d8:	460a      	mov	r2, r1
 80039da:	62ba      	str	r2, [r7, #40]	; 0x28
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	4413      	add	r3, r2
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2200      	movs	r2, #0
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f2:	f7fc fc55 	bl	80002a0 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e053      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	2200      	movs	r2, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a12:	f04f 0b00 	mov.w	fp, #0
 8003a16:	4652      	mov	r2, sl
 8003a18:	465b      	mov	r3, fp
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a32:	eb63 090b 	sbc.w	r9, r3, fp
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	00eb      	lsls	r3, r5, #3
 8003a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	4614      	mov	r4, r2
 8003a64:	461d      	mov	r5, r3
 8003a66:	eb14 030a 	adds.w	r3, r4, sl
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	eb45 030b 	adc.w	r3, r5, fp
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	2200      	movs	r2, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9c:	f7fc fc00 	bl	80002a0 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3740      	adds	r7, #64	; 0x40
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	017d7840 	.word	0x017d7840

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08007408 	.word	0x08007408

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08007408 	.word	0x08007408

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d075      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b80:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b86:	f7fd fe11 	bl	80017ac <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b8e:	f7fd fe0d 	bl	80017ac <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e189      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	019a      	lsls	r2, r3, #6
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	071b      	lsls	r3, r3, #28
 8003bc4:	4981      	ldr	r1, [pc, #516]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01f      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bd8:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	0f1b      	lsrs	r3, r3, #28
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	019a      	lsls	r2, r3, #6
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	071b      	lsls	r3, r3, #28
 8003bf8:	4974      	ldr	r1, [pc, #464]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c00:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c06:	f023 021f 	bic.w	r2, r3, #31
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	496e      	ldr	r1, [pc, #440]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	019a      	lsls	r2, r3, #6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	071b      	lsls	r3, r3, #28
 8003c38:	4964      	ldr	r1, [pc, #400]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fdb1 	bl	80017ac <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c4e:	f7fd fdad 	bl	80017ac <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e129      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d079      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c84:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd fd8f 	bl	80017ac <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c92:	f7fd fd8b 	bl	80017ac <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e107      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d0ef      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	0f1b      	lsrs	r3, r3, #28
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	019a      	lsls	r2, r3, #6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	493b      	ldr	r1, [pc, #236]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	0e1b      	lsrs	r3, r3, #24
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	071b      	lsls	r3, r3, #28
 8003d2c:	4927      	ldr	r1, [pc, #156]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fd fd2c 	bl	80017ac <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d58:	f7fd fd28 	bl	80017ac <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0a4      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d76:	d1ef      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 808b 	beq.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fcfd 	bl	80017ac <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003db4:	e010      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fd fcf9 	bl	80017ac <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d909      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e075      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003dc8:	42470068 	.word	0x42470068
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470070 	.word	0x42470070
 8003dd4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd8:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0e8      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02f      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d028      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e02:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e12:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d114      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fd fcbf 	bl	80017ac <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd fcbb 	bl	80017ac <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e035      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e60:	d10d      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
 8003e7c:	e005      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e88:	6093      	str	r3, [r2, #8]
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	490a      	ldr	r1, [pc, #40]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003eb0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470e40 	.word	0x42470e40
 8003ec8:	424711e0 	.word	0x424711e0

08003ecc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e066      	b.n	8003fb0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7f5b      	ldrb	r3, [r3, #29]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd f99a 	bl	800122c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	22ca      	movs	r2, #202	; 0xca
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2253      	movs	r2, #83	; 0x53
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa45 	bl	800439e <RTC_EnterInitMode>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d12c      	bne.n	8003f78 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68d2      	ldr	r2, [r2, #12]
 8003f58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6919      	ldr	r1, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa4c 	bl	800440c <RTC_ExitInitMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	7f1b      	ldrb	r3, [r3, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RTC_SetTime+0x1c>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e087      	b.n	80040e4 <HAL_RTC_SetTime+0x12c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d126      	bne.n	8004034 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fa29 	bl	8004456 <RTC_ByteToBcd2>
 8004004:	4603      	mov	r3, r0
 8004006:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fa22 	bl	8004456 <RTC_ByteToBcd2>
 8004012:	4603      	mov	r3, r0
 8004014:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004016:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	789b      	ldrb	r3, [r3, #2]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fa1a 	bl	8004456 <RTC_ByteToBcd2>
 8004022:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004024:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	78db      	ldrb	r3, [r3, #3]
 800402c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e018      	b.n	8004066 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004054:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800405a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	78db      	ldrb	r3, [r3, #3]
 8004060:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	22ca      	movs	r2, #202	; 0xca
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2253      	movs	r2, #83	; 0x53
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f991 	bl	800439e <RTC_EnterInitMode>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d120      	bne.n	80040c8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004090:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004094:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f9a4 	bl	800440c <RTC_ExitInitMode>
 80040c4:	4603      	mov	r3, r0
 80040c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	771a      	strb	r2, [r3, #28]

  return status;
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}

080040ec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800411e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004122:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0d9b      	lsrs	r3, r3, #22
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11a      	bne.n	800419e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f98f 	bl	8004490 <RTC_Bcd2ToByte>
 8004172:	4603      	mov	r3, r0
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f986 	bl	8004490 <RTC_Bcd2ToByte>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	789b      	ldrb	r3, [r3, #2]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f97d 	bl	8004490 <RTC_Bcd2ToByte>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	7f1b      	ldrb	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_RTC_SetDate+0x1c>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e071      	b.n	80042a8 <HAL_RTC_SetDate+0x100>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2202      	movs	r2, #2
 80041ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10e      	bne.n	80041f4 <HAL_RTC_SetDate+0x4c>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	330a      	adds	r3, #10
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11c      	bne.n	8004234 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	78db      	ldrb	r3, [r3, #3]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f929 	bl	8004456 <RTC_ByteToBcd2>
 8004204:	4603      	mov	r3, r0
 8004206:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f922 	bl	8004456 <RTC_ByteToBcd2>
 8004212:	4603      	mov	r3, r0
 8004214:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004216:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	789b      	ldrb	r3, [r3, #2]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f91a 	bl	8004456 <RTC_ByteToBcd2>
 8004222:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004224:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e00e      	b.n	8004252 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004240:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004246:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	22ca      	movs	r2, #202	; 0xca
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2253      	movs	r2, #83	; 0x53
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f89b 	bl	800439e <RTC_EnterInitMode>
 8004268:	4603      	mov	r3, r0
 800426a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800427c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004280:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8c2 	bl	800440c <RTC_ExitInitMode>
 8004288:	4603      	mov	r3, r0
 800428a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	771a      	strb	r2, [r3, #28]

  return status;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11a      	bne.n	8004344 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	78db      	ldrb	r3, [r3, #3]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f8bc 	bl	8004490 <RTC_Bcd2ToByte>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8b3 	bl	8004490 <RTC_Bcd2ToByte>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	789b      	ldrb	r3, [r3, #2]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f8aa 	bl	8004490 <RTC_Bcd2ToByte>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004368:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800436a:	f7fd fa1f 	bl	80017ac <HAL_GetTick>
 800436e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004370:	e009      	b.n	8004386 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004372:	f7fd fa1b 	bl	80017ac <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004380:	d901      	bls.n	8004386 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e007      	b.n	8004396 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ee      	beq.n	8004372 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d122      	bne.n	8004402 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043cc:	f7fd f9ee 	bl	80017ac <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043d2:	e00c      	b.n	80043ee <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043d4:	f7fd f9ea 	bl	80017ac <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e2:	d904      	bls.n	80043ee <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2204      	movs	r2, #4
 80043e8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <RTC_EnterInitMode+0x64>
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d1e8      	bne.n	80043d4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004426:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff89 	bl	800434e <HAL_RTC_WaitForSynchro>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2204      	movs	r2, #4
 8004446:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004464:	e005      	b.n	8004472 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	3301      	adds	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	3b0a      	subs	r3, #10
 8004470:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	2b09      	cmp	r3, #9
 8004476:	d8f6      	bhi.n	8004466 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	b2da      	uxtb	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4313      	orrs	r3, r2
 8004482:	b2db      	uxtb	r3, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	0092      	lsls	r2, r2, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	4413      	add	r3, r2
 80044ba:	b2db      	uxtb	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e041      	b.n	800455e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd f838 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 fa96 	bl	8004a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04e      	b.n	800461e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_TIM_Base_Start_IT+0xc4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045aa:	d01d      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <HAL_TIM_Base_Start_IT+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_TIM_Base_Start_IT+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <HAL_TIM_Base_Start_IT+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIM_Base_Start_IT+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_TIM_Base_Start_IT+0xd8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x80>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_TIM_Base_Start_IT+0xdc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d111      	bne.n	800460c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d010      	beq.n	800461c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	e007      	b.n	800461c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40010400 	.word	0x40010400
 8004640:	40014000 	.word	0x40014000
 8004644:	40001800 	.word	0x40001800

08004648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0202 	mvn.w	r2, #2
 8004674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9b5 	bl	80049fa <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f9a7 	bl	80049e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9b8 	bl	8004a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0204 	mvn.w	r2, #4
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f98b 	bl	80049fa <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f97d 	bl	80049e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f98e 	bl	8004a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0208 	mvn.w	r2, #8
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f961 	bl	80049fa <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f953 	bl	80049e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f964 	bl	8004a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f937 	bl	80049fa <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f929 	bl	80049e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f93a 	bl	8004a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0201 	mvn.w	r2, #1
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc fc4a 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fae0 	bl	8004db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d10e      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d107      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8ff 	bl	8004a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d10e      	bne.n	8004850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d107      	bne.n	8004850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0220 	mvn.w	r2, #32
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 faaa 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIM_ConfigClockSource+0x1c>
 8004870:	2302      	movs	r3, #2
 8004872:	e0b4      	b.n	80049de <HAL_TIM_ConfigClockSource+0x186>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ac:	d03e      	beq.n	800492c <HAL_TIM_ConfigClockSource+0xd4>
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	f200 8087 	bhi.w	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	f000 8086 	beq.w	80049ca <HAL_TIM_ConfigClockSource+0x172>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d87f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d01a      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xa6>
 80048c8:	2b70      	cmp	r3, #112	; 0x70
 80048ca:	d87b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d050      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x11a>
 80048d0:	2b60      	cmp	r3, #96	; 0x60
 80048d2:	d877      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d03c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xfa>
 80048d8:	2b50      	cmp	r3, #80	; 0x50
 80048da:	d873      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d058      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x13a>
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d86f      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d064      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d86b      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d060      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d867      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05c      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d05a      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	e062      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f000 f9ad 	bl	8004c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	609a      	str	r2, [r3, #8]
      break;
 800492a:	e04f      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f000 f996 	bl	8004c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494e:	609a      	str	r2, [r3, #8]
      break;
 8004950:	e03c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 f90a 	bl	8004b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2150      	movs	r1, #80	; 0x50
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f963 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 8004970:	e02c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	461a      	mov	r2, r3
 8004980:	f000 f929 	bl	8004bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2160      	movs	r1, #96	; 0x60
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f953 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 8004990:	e01c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 f8ea 	bl	8004b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f943 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 80049b0:	e00c      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 f93a 	bl	8004c36 <TIM_ITRx_SetConfig>
      break;
 80049c2:	e003      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e000      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <TIM_Base_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a56:	d00f      	beq.n	8004a78 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3d      	ldr	r2, [pc, #244]	; (8004b50 <TIM_Base_SetConfig+0x118>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3c      	ldr	r2, [pc, #240]	; (8004b54 <TIM_Base_SetConfig+0x11c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3b      	ldr	r2, [pc, #236]	; (8004b58 <TIM_Base_SetConfig+0x120>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3a      	ldr	r2, [pc, #232]	; (8004b5c <TIM_Base_SetConfig+0x124>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d108      	bne.n	8004a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2f      	ldr	r2, [pc, #188]	; (8004b4c <TIM_Base_SetConfig+0x114>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02b      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a98:	d027      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <TIM_Base_SetConfig+0x118>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d023      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <TIM_Base_SetConfig+0x11c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01f      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <TIM_Base_SetConfig+0x120>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01b      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <TIM_Base_SetConfig+0x124>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d017      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <TIM_Base_SetConfig+0x128>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <TIM_Base_SetConfig+0x12c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00f      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <TIM_Base_SetConfig+0x130>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <TIM_Base_SetConfig+0x134>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <TIM_Base_SetConfig+0x138>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <TIM_Base_SetConfig+0x13c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <TIM_Base_SetConfig+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0xf8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	; (8004b5c <TIM_Base_SetConfig+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d103      	bne.n	8004b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	615a      	str	r2, [r3, #20]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40010400 	.word	0x40010400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800
 8004b6c:	40001800 	.word	0x40001800
 8004b70:	40001c00 	.word	0x40001c00
 8004b74:	40002000 	.word	0x40002000

08004b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 030a 	bic.w	r3, r3, #10
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0210 	bic.w	r2, r3, #16
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	031b      	lsls	r3, r3, #12
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f043 0307 	orr.w	r3, r3, #7
 8004c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e05a      	b.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d01d      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10c      	bne.n	8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40010400 	.word	0x40010400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40001800 	.word	0x40001800

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e03f      	b.n	8004e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc fc02 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	; 0x24
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fd7b 	bl	800590c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08a      	sub	sp, #40	; 0x28
 8004e6a:	af02      	add	r7, sp, #8
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d17c      	bne.n	8004f80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Transmit+0x2c>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e075      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit+0x3e>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e06e      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eba:	f7fc fc77 	bl	80017ac <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x82>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ef8:	e02a      	b.n	8004f50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 faf9 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e036      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1cf      	bne.n	8004efa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2140      	movs	r1, #64	; 0x40
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fac9 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e006      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b0ba      	sub	sp, #232	; 0xe8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x66>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fbd3 	bl	8005796 <UART_Receive_IT>
      return;
 8004ff0:	e256      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80de 	beq.w	80051b8 <HAL_UART_IRQHandler+0x22c>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80d1 	beq.w	80051b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_UART_IRQHandler+0xae>
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_UART_IRQHandler+0xd2>
 8005046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <HAL_UART_IRQHandler+0xf6>
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d011      	beq.n	80050b2 <HAL_UART_IRQHandler+0x126>
 800508e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0208 	orr.w	r2, r3, #8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 81ed 	beq.w	8005496 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_UART_IRQHandler+0x14e>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fb5e 	bl	8005796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <HAL_UART_IRQHandler+0x17a>
 80050fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d04f      	beq.n	80051a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa66 	bl	80055d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d141      	bne.n	800519e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3314      	adds	r3, #20
 8005120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005146:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800514a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800515e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d9      	bne.n	800511a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d013      	beq.n	8005196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a7d      	ldr	r2, [pc, #500]	; (8005368 <HAL_UART_IRQHandler+0x3dc>)
 8005174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd f84b 	bl	8002216 <HAL_DMA_Abort_IT>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e00e      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f99a 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	e00a      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f996 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e006      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f992 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051b2:	e170      	b.n	8005496 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	bf00      	nop
    return;
 80051b6:	e16e      	b.n	8005496 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 814a 	bne.w	8005456 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8143 	beq.w	8005456 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 813c 	beq.w	8005456 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	f040 80b4 	bne.w	800536c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8140 	beq.w	800549a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005222:	429a      	cmp	r2, r3
 8005224:	f080 8139 	bcs.w	800549a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800522e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	f000 8088 	beq.w	800534e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800526a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1d9      	bne.n	800523e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e1      	bne.n	800528a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005330:	65ba      	str	r2, [r7, #88]	; 0x58
 8005332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e3      	bne.n	800530c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	4618      	mov	r0, r3
 800534a:	f7fc fef4 	bl	8002136 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005356:	b29b      	uxth	r3, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8c0 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005364:	e099      	b.n	800549a <HAL_UART_IRQHandler+0x50e>
 8005366:	bf00      	nop
 8005368:	0800569f 	.word	0x0800569f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005374:	b29b      	uxth	r3, r3
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 808b 	beq.w	800549e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8086 	beq.w	800549e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053b6:	647a      	str	r2, [r7, #68]	; 0x44
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e3      	bne.n	8005392 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	623b      	str	r3, [r7, #32]
   return(result);
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3314      	adds	r3, #20
 80053ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ee:	633a      	str	r2, [r7, #48]	; 0x30
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	617b      	str	r3, [r7, #20]
   return(result);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e3      	bne.n	8005410 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f848 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005454:	e023      	b.n	800549e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_UART_IRQHandler+0x4ea>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f929 	bl	80056c6 <UART_Transmit_IT>
    return;
 8005474:	e014      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00e      	beq.n	80054a0 <HAL_UART_IRQHandler+0x514>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f969 	bl	8005766 <UART_EndTransmit_IT>
    return;
 8005494:	e004      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
    return;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
      return;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
      return;
 800549e:	bf00      	nop
  }
}
 80054a0:	37e8      	adds	r7, #232	; 0xe8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop

080054a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b090      	sub	sp, #64	; 0x40
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	e050      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d04c      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
 800551c:	f7fc f946 	bl	80017ac <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005528:	429a      	cmp	r2, r3
 800552a:	d241      	bcs.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800554c:	637a      	str	r2, [r7, #52]	; 0x34
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	613b      	str	r3, [r7, #16]
   return(result);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005580:	623a      	str	r2, [r7, #32]
 8005582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	69f9      	ldr	r1, [r7, #28]
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	61bb      	str	r3, [r7, #24]
   return(result);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e00f      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d09f      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3740      	adds	r7, #64	; 0x40
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b095      	sub	sp, #84	; 0x54
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005600:	643a      	str	r2, [r7, #64]	; 0x40
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	61fb      	str	r3, [r7, #28]
   return(result);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d119      	bne.n	8005684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	647b      	str	r3, [r7, #68]	; 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005670:	61ba      	str	r2, [r7, #24]
 8005672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	613b      	str	r3, [r7, #16]
   return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005692:	bf00      	nop
 8005694:	3754      	adds	r7, #84	; 0x54
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff09 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b21      	cmp	r3, #33	; 0x21
 80056d8:	d13e      	bne.n	8005758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d114      	bne.n	800570e <UART_Transmit_IT+0x48>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]
 800570c:	e008      	b.n	8005720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6211      	str	r1, [r2, #32]
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe8e 	bl	80054a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08c      	sub	sp, #48	; 0x30
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b22      	cmp	r3, #34	; 0x22
 80057a8:	f040 80ab 	bne.w	8005902 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d117      	bne.n	80057e6 <UART_Receive_IT+0x50>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d113      	bne.n	80057e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
 80057e4:	e026      	b.n	8005834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d007      	beq.n	800580a <UART_Receive_IT+0x74>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <UART_Receive_IT+0x82>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e008      	b.n	800582a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005844:	2b00      	cmp	r3, #0
 8005846:	d15a      	bne.n	80058fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0220 	bic.w	r2, r2, #32
 8005856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0201 	bic.w	r2, r2, #1
 8005876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	d135      	bne.n	80058f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	623a      	str	r2, [r7, #32]
 80058b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d10a      	bne.n	80058e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fdf9 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
 80058f2:	e002      	b.n	80058fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fde1 	bl	80054bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e002      	b.n	8005904 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3730      	adds	r7, #48	; 0x30
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005910:	b0c0      	sub	sp, #256	; 0x100
 8005912:	af00      	add	r7, sp, #0
 8005914:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	ea40 0301 	orr.w	r3, r0, r1
 8005934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	431a      	orrs	r2, r3
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	431a      	orrs	r2, r3
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005964:	f021 010c 	bic.w	r1, r1, #12
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005972:	430b      	orrs	r3, r1
 8005974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005986:	6999      	ldr	r1, [r3, #24]
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	ea40 0301 	orr.w	r3, r0, r1
 8005992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8f      	ldr	r3, [pc, #572]	; (8005bd8 <UART_SetConfig+0x2cc>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d005      	beq.n	80059ac <UART_SetConfig+0xa0>
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b8d      	ldr	r3, [pc, #564]	; (8005bdc <UART_SetConfig+0x2d0>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d104      	bne.n	80059b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fe f8ba 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 80059b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059b4:	e003      	b.n	80059be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059b6:	f7fe f8a1 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80059ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c8:	f040 810c 	bne.w	8005be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	1891      	adds	r1, r2, r2
 80059e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80059e6:	415b      	adcs	r3, r3
 80059e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059ee:	4621      	mov	r1, r4
 80059f0:	eb12 0801 	adds.w	r8, r2, r1
 80059f4:	4629      	mov	r1, r5
 80059f6:	eb43 0901 	adc.w	r9, r3, r1
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a0e:	4690      	mov	r8, r2
 8005a10:	4699      	mov	r9, r3
 8005a12:	4623      	mov	r3, r4
 8005a14:	eb18 0303 	adds.w	r3, r8, r3
 8005a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	eb49 0303 	adc.w	r3, r9, r3
 8005a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	18db      	adds	r3, r3, r3
 8005a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a40:	4613      	mov	r3, r2
 8005a42:	eb42 0303 	adc.w	r3, r2, r3
 8005a46:	657b      	str	r3, [r7, #84]	; 0x54
 8005a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a50:	f7fa fc26 	bl	80002a0 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	011c      	lsls	r4, r3, #4
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a84:	4641      	mov	r1, r8
 8005a86:	eb12 0a01 	adds.w	sl, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa4:	4692      	mov	sl, r2
 8005aa6:	469b      	mov	fp, r3
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8005aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	18db      	adds	r3, r3, r3
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ae6:	f7fa fbdb 	bl	80002a0 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	4b3b      	ldr	r3, [pc, #236]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005af2:	fba3 2301 	umull	r2, r3, r3, r1
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2264      	movs	r2, #100	; 0x64
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	1acb      	subs	r3, r1, r3
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005b08:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b14:	441c      	add	r4, r3
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b30:	415b      	adcs	r3, r3
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b38:	4641      	mov	r1, r8
 8005b3a:	1851      	adds	r1, r2, r1
 8005b3c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b3e:	4649      	mov	r1, r9
 8005b40:	414b      	adcs	r3, r1
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b50:	4659      	mov	r1, fp
 8005b52:	00cb      	lsls	r3, r1, #3
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	00ca      	lsls	r2, r1, #3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	4642      	mov	r2, r8
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	460a      	mov	r2, r1
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	18db      	adds	r3, r3, r3
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b92:	4613      	mov	r3, r2
 8005b94:	eb42 0303 	adc.w	r3, r2, r3
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ba2:	f7fa fb7d 	bl	80002a0 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	2164      	movs	r1, #100	; 0x64
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	3332      	adds	r3, #50	; 0x32
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <UART_SetConfig+0x2d4>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	f003 0207 	and.w	r2, r3, #7
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4422      	add	r2, r4
 8005bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bd4:	e105      	b.n	8005de2 <UART_SetConfig+0x4d6>
 8005bd6:	bf00      	nop
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	1891      	adds	r1, r2, r2
 8005bfc:	6239      	str	r1, [r7, #32]
 8005bfe:	415b      	adcs	r3, r3
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c06:	4641      	mov	r1, r8
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	eb43 0501 	adc.w	r5, r3, r1
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	00eb      	lsls	r3, r5, #3
 8005c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c1e:	00e2      	lsls	r2, r4, #3
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	18e3      	adds	r3, r4, r3
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	eb45 0303 	adc.w	r3, r5, r3
 8005c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c52:	4629      	mov	r1, r5
 8005c54:	008b      	lsls	r3, r1, #2
 8005c56:	4621      	mov	r1, r4
 8005c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	008a      	lsls	r2, r1, #2
 8005c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c64:	f7fa fb1c 	bl	80002a0 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b60      	ldr	r3, [pc, #384]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	011c      	lsls	r4, r3, #4
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	1891      	adds	r1, r2, r2
 8005c8e:	61b9      	str	r1, [r7, #24]
 8005c90:	415b      	adcs	r3, r3
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c98:	4641      	mov	r1, r8
 8005c9a:	1851      	adds	r1, r2, r1
 8005c9c:	6139      	str	r1, [r7, #16]
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	414b      	adcs	r3, r1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	00cb      	lsls	r3, r1, #3
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cba:	4651      	mov	r1, sl
 8005cbc:	00ca      	lsls	r2, r1, #3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ccc:	464b      	mov	r3, r9
 8005cce:	460a      	mov	r2, r1
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	008b      	lsls	r3, r1, #2
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	008a      	lsls	r2, r1, #2
 8005cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d02:	f7fa facd 	bl	80002a0 <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	2164      	movs	r1, #100	; 0x64
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	3332      	adds	r3, #50	; 0x32
 8005d1e:	4a34      	ldr	r2, [pc, #208]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d2a:	441c      	add	r4, r3
 8005d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d30:	2200      	movs	r2, #0
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70
 8005d34:	677a      	str	r2, [r7, #116]	; 0x74
 8005d36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	1891      	adds	r1, r2, r2
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	415b      	adcs	r3, r3
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d4a:	4641      	mov	r1, r8
 8005d4c:	1851      	adds	r1, r2, r1
 8005d4e:	6039      	str	r1, [r7, #0]
 8005d50:	4649      	mov	r1, r9
 8005d52:	414b      	adcs	r3, r1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d62:	4659      	mov	r1, fp
 8005d64:	00cb      	lsls	r3, r1, #3
 8005d66:	4651      	mov	r1, sl
 8005d68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	00ca      	lsls	r2, r1, #3
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	4642      	mov	r2, r8
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	460a      	mov	r2, r1
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d90:	667a      	str	r2, [r7, #100]	; 0x64
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d9e:	4649      	mov	r1, r9
 8005da0:	008b      	lsls	r3, r1, #2
 8005da2:	4641      	mov	r1, r8
 8005da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da8:	4641      	mov	r1, r8
 8005daa:	008a      	lsls	r2, r1, #2
 8005dac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005db0:	f7fa fa76 	bl	80002a0 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005dba:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2164      	movs	r1, #100	; 0x64
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	3332      	adds	r3, #50	; 0x32
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <UART_SetConfig+0x4e4>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f003 020f 	and.w	r2, r3, #15
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4422      	add	r2, r4
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005de8:	46bd      	mov	sp, r7
 8005dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dee:	bf00      	nop
 8005df0:	51eb851f 	.word	0x51eb851f

08005df4 <__errno>:
 8005df4:	4b01      	ldr	r3, [pc, #4]	; (8005dfc <__errno+0x8>)
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000014 	.word	0x20000014

08005e00 <__libc_init_array>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4d0d      	ldr	r5, [pc, #52]	; (8005e38 <__libc_init_array+0x38>)
 8005e04:	4c0d      	ldr	r4, [pc, #52]	; (8005e3c <__libc_init_array+0x3c>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	d109      	bne.n	8005e24 <__libc_init_array+0x24>
 8005e10:	4d0b      	ldr	r5, [pc, #44]	; (8005e40 <__libc_init_array+0x40>)
 8005e12:	4c0c      	ldr	r4, [pc, #48]	; (8005e44 <__libc_init_array+0x44>)
 8005e14:	f001 fa34 	bl	8007280 <_init>
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	42a6      	cmp	r6, r4
 8005e20:	d105      	bne.n	8005e2e <__libc_init_array+0x2e>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e28:	4798      	blx	r3
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	e7ee      	b.n	8005e0c <__libc_init_array+0xc>
 8005e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7f2      	b.n	8005e1e <__libc_init_array+0x1e>
 8005e38:	080074b0 	.word	0x080074b0
 8005e3c:	080074b0 	.word	0x080074b0
 8005e40:	080074b0 	.word	0x080074b0
 8005e44:	080074b4 	.word	0x080074b4

08005e48 <memset>:
 8005e48:	4402      	add	r2, r0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <memset+0xa>
 8005e50:	4770      	bx	lr
 8005e52:	f803 1b01 	strb.w	r1, [r3], #1
 8005e56:	e7f9      	b.n	8005e4c <memset+0x4>

08005e58 <iprintf>:
 8005e58:	b40f      	push	{r0, r1, r2, r3}
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <iprintf+0x2c>)
 8005e5c:	b513      	push	{r0, r1, r4, lr}
 8005e5e:	681c      	ldr	r4, [r3, #0]
 8005e60:	b124      	cbz	r4, 8005e6c <iprintf+0x14>
 8005e62:	69a3      	ldr	r3, [r4, #24]
 8005e64:	b913      	cbnz	r3, 8005e6c <iprintf+0x14>
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fab2 	bl	80063d0 <__sinit>
 8005e6c:	ab05      	add	r3, sp, #20
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	68a1      	ldr	r1, [r4, #8]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fe17 	bl	8006aa8 <_vfiprintf_r>
 8005e7a:	b002      	add	sp, #8
 8005e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e80:	b004      	add	sp, #16
 8005e82:	4770      	bx	lr
 8005e84:	20000014 	.word	0x20000014

08005e88 <_puts_r>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	460e      	mov	r6, r1
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	b118      	cbz	r0, 8005e98 <_puts_r+0x10>
 8005e90:	6983      	ldr	r3, [r0, #24]
 8005e92:	b90b      	cbnz	r3, 8005e98 <_puts_r+0x10>
 8005e94:	f000 fa9c 	bl	80063d0 <__sinit>
 8005e98:	69ab      	ldr	r3, [r5, #24]
 8005e9a:	68ac      	ldr	r4, [r5, #8]
 8005e9c:	b913      	cbnz	r3, 8005ea4 <_puts_r+0x1c>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fa96 	bl	80063d0 <__sinit>
 8005ea4:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <_puts_r+0xd0>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d120      	bne.n	8005eec <_puts_r+0x64>
 8005eaa:	686c      	ldr	r4, [r5, #4]
 8005eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eae:	07db      	lsls	r3, r3, #31
 8005eb0:	d405      	bmi.n	8005ebe <_puts_r+0x36>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_puts_r+0x36>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eba:	f000 fb27 	bl	800650c <__retarget_lock_acquire_recursive>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	0719      	lsls	r1, r3, #28
 8005ec2:	d51d      	bpl.n	8005f00 <_puts_r+0x78>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b1db      	cbz	r3, 8005f00 <_puts_r+0x78>
 8005ec8:	3e01      	subs	r6, #1
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60a3      	str	r3, [r4, #8]
 8005ed4:	bb39      	cbnz	r1, 8005f26 <_puts_r+0x9e>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da38      	bge.n	8005f4c <_puts_r+0xc4>
 8005eda:	4622      	mov	r2, r4
 8005edc:	210a      	movs	r1, #10
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f89c 	bl	800601c <__swbuf_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d011      	beq.n	8005f0c <_puts_r+0x84>
 8005ee8:	250a      	movs	r5, #10
 8005eea:	e011      	b.n	8005f10 <_puts_r+0x88>
 8005eec:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <_puts_r+0xd4>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d101      	bne.n	8005ef6 <_puts_r+0x6e>
 8005ef2:	68ac      	ldr	r4, [r5, #8]
 8005ef4:	e7da      	b.n	8005eac <_puts_r+0x24>
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <_puts_r+0xd8>)
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	bf08      	it	eq
 8005efc:	68ec      	ldreq	r4, [r5, #12]
 8005efe:	e7d5      	b.n	8005eac <_puts_r+0x24>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f8dc 	bl	80060c0 <__swsetup_r>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d0dd      	beq.n	8005ec8 <_puts_r+0x40>
 8005f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f12:	07da      	lsls	r2, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_puts_r+0x9a>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	059b      	lsls	r3, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_puts_r+0x9a>
 8005f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f1e:	f000 faf6 	bl	800650e <__retarget_lock_release_recursive>
 8005f22:	4628      	mov	r0, r5
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da04      	bge.n	8005f34 <_puts_r+0xac>
 8005f2a:	69a2      	ldr	r2, [r4, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	dc06      	bgt.n	8005f3e <_puts_r+0xb6>
 8005f30:	290a      	cmp	r1, #10
 8005f32:	d004      	beq.n	8005f3e <_puts_r+0xb6>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	7019      	strb	r1, [r3, #0]
 8005f3c:	e7c5      	b.n	8005eca <_puts_r+0x42>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 f86b 	bl	800601c <__swbuf_r>
 8005f46:	3001      	adds	r0, #1
 8005f48:	d1bf      	bne.n	8005eca <_puts_r+0x42>
 8005f4a:	e7df      	b.n	8005f0c <_puts_r+0x84>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	250a      	movs	r5, #10
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	6022      	str	r2, [r4, #0]
 8005f54:	701d      	strb	r5, [r3, #0]
 8005f56:	e7db      	b.n	8005f10 <_puts_r+0x88>
 8005f58:	08007434 	.word	0x08007434
 8005f5c:	08007454 	.word	0x08007454
 8005f60:	08007414 	.word	0x08007414

08005f64 <puts>:
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <puts+0xc>)
 8005f66:	4601      	mov	r1, r0
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f7ff bf8d 	b.w	8005e88 <_puts_r>
 8005f6e:	bf00      	nop
 8005f70:	20000014 	.word	0x20000014

08005f74 <sniprintf>:
 8005f74:	b40c      	push	{r2, r3}
 8005f76:	b530      	push	{r4, r5, lr}
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <sniprintf+0x64>)
 8005f7a:	1e0c      	subs	r4, r1, #0
 8005f7c:	681d      	ldr	r5, [r3, #0]
 8005f7e:	b09d      	sub	sp, #116	; 0x74
 8005f80:	da08      	bge.n	8005f94 <sniprintf+0x20>
 8005f82:	238b      	movs	r3, #139	; 0x8b
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	b01d      	add	sp, #116	; 0x74
 8005f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f90:	b002      	add	sp, #8
 8005f92:	4770      	bx	lr
 8005f94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f9c:	bf14      	ite	ne
 8005f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fa2:	4623      	moveq	r3, r4
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	9307      	str	r3, [sp, #28]
 8005fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fac:	9002      	str	r0, [sp, #8]
 8005fae:	9006      	str	r0, [sp, #24]
 8005fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fb6:	ab21      	add	r3, sp, #132	; 0x84
 8005fb8:	a902      	add	r1, sp, #8
 8005fba:	4628      	mov	r0, r5
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f000 fc49 	bl	8006854 <_svfiprintf_r>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	bfbc      	itt	lt
 8005fc6:	238b      	movlt	r3, #139	; 0x8b
 8005fc8:	602b      	strlt	r3, [r5, #0]
 8005fca:	2c00      	cmp	r4, #0
 8005fcc:	d0dd      	beq.n	8005f8a <sniprintf+0x16>
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e7d9      	b.n	8005f8a <sniprintf+0x16>
 8005fd6:	bf00      	nop
 8005fd8:	20000014 	.word	0x20000014

08005fdc <siprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b500      	push	{lr}
 8005fe0:	b09c      	sub	sp, #112	; 0x70
 8005fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fec:	4809      	ldr	r0, [pc, #36]	; (8006014 <siprintf+0x38>)
 8005fee:	9107      	str	r1, [sp, #28]
 8005ff0:	9104      	str	r1, [sp, #16]
 8005ff2:	4909      	ldr	r1, [pc, #36]	; (8006018 <siprintf+0x3c>)
 8005ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff8:	9105      	str	r1, [sp, #20]
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	a902      	add	r1, sp, #8
 8006000:	f000 fc28 	bl	8006854 <_svfiprintf_r>
 8006004:	9b02      	ldr	r3, [sp, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	b01c      	add	sp, #112	; 0x70
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	20000014 	.word	0x20000014
 8006018:	ffff0208 	.word	0xffff0208

0800601c <__swbuf_r>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	460e      	mov	r6, r1
 8006020:	4614      	mov	r4, r2
 8006022:	4605      	mov	r5, r0
 8006024:	b118      	cbz	r0, 800602e <__swbuf_r+0x12>
 8006026:	6983      	ldr	r3, [r0, #24]
 8006028:	b90b      	cbnz	r3, 800602e <__swbuf_r+0x12>
 800602a:	f000 f9d1 	bl	80063d0 <__sinit>
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <__swbuf_r+0x98>)
 8006030:	429c      	cmp	r4, r3
 8006032:	d12b      	bne.n	800608c <__swbuf_r+0x70>
 8006034:	686c      	ldr	r4, [r5, #4]
 8006036:	69a3      	ldr	r3, [r4, #24]
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	071a      	lsls	r2, r3, #28
 800603e:	d52f      	bpl.n	80060a0 <__swbuf_r+0x84>
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	b36b      	cbz	r3, 80060a0 <__swbuf_r+0x84>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	1ac0      	subs	r0, r0, r3
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	b2f6      	uxtb	r6, r6
 800604e:	4283      	cmp	r3, r0
 8006050:	4637      	mov	r7, r6
 8006052:	dc04      	bgt.n	800605e <__swbuf_r+0x42>
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f926 	bl	80062a8 <_fflush_r>
 800605c:	bb30      	cbnz	r0, 80060ac <__swbuf_r+0x90>
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	60a3      	str	r3, [r4, #8]
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	701e      	strb	r6, [r3, #0]
 800606c:	6963      	ldr	r3, [r4, #20]
 800606e:	3001      	adds	r0, #1
 8006070:	4283      	cmp	r3, r0
 8006072:	d004      	beq.n	800607e <__swbuf_r+0x62>
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	07db      	lsls	r3, r3, #31
 8006078:	d506      	bpl.n	8006088 <__swbuf_r+0x6c>
 800607a:	2e0a      	cmp	r6, #10
 800607c:	d104      	bne.n	8006088 <__swbuf_r+0x6c>
 800607e:	4621      	mov	r1, r4
 8006080:	4628      	mov	r0, r5
 8006082:	f000 f911 	bl	80062a8 <_fflush_r>
 8006086:	b988      	cbnz	r0, 80060ac <__swbuf_r+0x90>
 8006088:	4638      	mov	r0, r7
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <__swbuf_r+0x9c>)
 800608e:	429c      	cmp	r4, r3
 8006090:	d101      	bne.n	8006096 <__swbuf_r+0x7a>
 8006092:	68ac      	ldr	r4, [r5, #8]
 8006094:	e7cf      	b.n	8006036 <__swbuf_r+0x1a>
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <__swbuf_r+0xa0>)
 8006098:	429c      	cmp	r4, r3
 800609a:	bf08      	it	eq
 800609c:	68ec      	ldreq	r4, [r5, #12]
 800609e:	e7ca      	b.n	8006036 <__swbuf_r+0x1a>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 f80c 	bl	80060c0 <__swsetup_r>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d0cb      	beq.n	8006044 <__swbuf_r+0x28>
 80060ac:	f04f 37ff 	mov.w	r7, #4294967295
 80060b0:	e7ea      	b.n	8006088 <__swbuf_r+0x6c>
 80060b2:	bf00      	nop
 80060b4:	08007434 	.word	0x08007434
 80060b8:	08007454 	.word	0x08007454
 80060bc:	08007414 	.word	0x08007414

080060c0 <__swsetup_r>:
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <__swsetup_r+0xcc>)
 80060c2:	b570      	push	{r4, r5, r6, lr}
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	b125      	cbz	r5, 80060d6 <__swsetup_r+0x16>
 80060cc:	69ab      	ldr	r3, [r5, #24]
 80060ce:	b913      	cbnz	r3, 80060d6 <__swsetup_r+0x16>
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 f97d 	bl	80063d0 <__sinit>
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <__swsetup_r+0xd0>)
 80060d8:	429c      	cmp	r4, r3
 80060da:	d10f      	bne.n	80060fc <__swsetup_r+0x3c>
 80060dc:	686c      	ldr	r4, [r5, #4]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e4:	0719      	lsls	r1, r3, #28
 80060e6:	d42c      	bmi.n	8006142 <__swsetup_r+0x82>
 80060e8:	06dd      	lsls	r5, r3, #27
 80060ea:	d411      	bmi.n	8006110 <__swsetup_r+0x50>
 80060ec:	2309      	movs	r3, #9
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	e03e      	b.n	800617a <__swsetup_r+0xba>
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <__swsetup_r+0xd4>)
 80060fe:	429c      	cmp	r4, r3
 8006100:	d101      	bne.n	8006106 <__swsetup_r+0x46>
 8006102:	68ac      	ldr	r4, [r5, #8]
 8006104:	e7eb      	b.n	80060de <__swsetup_r+0x1e>
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <__swsetup_r+0xd8>)
 8006108:	429c      	cmp	r4, r3
 800610a:	bf08      	it	eq
 800610c:	68ec      	ldreq	r4, [r5, #12]
 800610e:	e7e6      	b.n	80060de <__swsetup_r+0x1e>
 8006110:	0758      	lsls	r0, r3, #29
 8006112:	d512      	bpl.n	800613a <__swsetup_r+0x7a>
 8006114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006116:	b141      	cbz	r1, 800612a <__swsetup_r+0x6a>
 8006118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611c:	4299      	cmp	r1, r3
 800611e:	d002      	beq.n	8006126 <__swsetup_r+0x66>
 8006120:	4630      	mov	r0, r6
 8006122:	f000 fa5b 	bl	80065dc <_free_r>
 8006126:	2300      	movs	r3, #0
 8006128:	6363      	str	r3, [r4, #52]	; 0x34
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	2300      	movs	r3, #0
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f043 0308 	orr.w	r3, r3, #8
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	b94b      	cbnz	r3, 800615a <__swsetup_r+0x9a>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800614c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006150:	d003      	beq.n	800615a <__swsetup_r+0x9a>
 8006152:	4621      	mov	r1, r4
 8006154:	4630      	mov	r0, r6
 8006156:	f000 fa01 	bl	800655c <__smakebuf_r>
 800615a:	89a0      	ldrh	r0, [r4, #12]
 800615c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006160:	f010 0301 	ands.w	r3, r0, #1
 8006164:	d00a      	beq.n	800617c <__swsetup_r+0xbc>
 8006166:	2300      	movs	r3, #0
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	6963      	ldr	r3, [r4, #20]
 800616c:	425b      	negs	r3, r3
 800616e:	61a3      	str	r3, [r4, #24]
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b943      	cbnz	r3, 8006186 <__swsetup_r+0xc6>
 8006174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006178:	d1ba      	bne.n	80060f0 <__swsetup_r+0x30>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	0781      	lsls	r1, r0, #30
 800617e:	bf58      	it	pl
 8006180:	6963      	ldrpl	r3, [r4, #20]
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	e7f4      	b.n	8006170 <__swsetup_r+0xb0>
 8006186:	2000      	movs	r0, #0
 8006188:	e7f7      	b.n	800617a <__swsetup_r+0xba>
 800618a:	bf00      	nop
 800618c:	20000014 	.word	0x20000014
 8006190:	08007434 	.word	0x08007434
 8006194:	08007454 	.word	0x08007454
 8006198:	08007414 	.word	0x08007414

0800619c <__sflush_r>:
 800619c:	898a      	ldrh	r2, [r1, #12]
 800619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	0710      	lsls	r0, r2, #28
 80061a6:	460c      	mov	r4, r1
 80061a8:	d458      	bmi.n	800625c <__sflush_r+0xc0>
 80061aa:	684b      	ldr	r3, [r1, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dc05      	bgt.n	80061bc <__sflush_r+0x20>
 80061b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dc02      	bgt.n	80061bc <__sflush_r+0x20>
 80061b6:	2000      	movs	r0, #0
 80061b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d0f9      	beq.n	80061b6 <__sflush_r+0x1a>
 80061c2:	2300      	movs	r3, #0
 80061c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061c8:	682f      	ldr	r7, [r5, #0]
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	d032      	beq.n	8006234 <__sflush_r+0x98>
 80061ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	075a      	lsls	r2, r3, #29
 80061d4:	d505      	bpl.n	80061e2 <__sflush_r+0x46>
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	1ac0      	subs	r0, r0, r3
 80061da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061dc:	b10b      	cbz	r3, 80061e2 <__sflush_r+0x46>
 80061de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	4602      	mov	r2, r0
 80061e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e8:	6a21      	ldr	r1, [r4, #32]
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b0      	blx	r6
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	d106      	bne.n	8006202 <__sflush_r+0x66>
 80061f4:	6829      	ldr	r1, [r5, #0]
 80061f6:	291d      	cmp	r1, #29
 80061f8:	d82c      	bhi.n	8006254 <__sflush_r+0xb8>
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <__sflush_r+0x108>)
 80061fc:	40ca      	lsrs	r2, r1
 80061fe:	07d6      	lsls	r6, r2, #31
 8006200:	d528      	bpl.n	8006254 <__sflush_r+0xb8>
 8006202:	2200      	movs	r2, #0
 8006204:	6062      	str	r2, [r4, #4]
 8006206:	04d9      	lsls	r1, r3, #19
 8006208:	6922      	ldr	r2, [r4, #16]
 800620a:	6022      	str	r2, [r4, #0]
 800620c:	d504      	bpl.n	8006218 <__sflush_r+0x7c>
 800620e:	1c42      	adds	r2, r0, #1
 8006210:	d101      	bne.n	8006216 <__sflush_r+0x7a>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b903      	cbnz	r3, 8006218 <__sflush_r+0x7c>
 8006216:	6560      	str	r0, [r4, #84]	; 0x54
 8006218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800621a:	602f      	str	r7, [r5, #0]
 800621c:	2900      	cmp	r1, #0
 800621e:	d0ca      	beq.n	80061b6 <__sflush_r+0x1a>
 8006220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006224:	4299      	cmp	r1, r3
 8006226:	d002      	beq.n	800622e <__sflush_r+0x92>
 8006228:	4628      	mov	r0, r5
 800622a:	f000 f9d7 	bl	80065dc <_free_r>
 800622e:	2000      	movs	r0, #0
 8006230:	6360      	str	r0, [r4, #52]	; 0x34
 8006232:	e7c1      	b.n	80061b8 <__sflush_r+0x1c>
 8006234:	6a21      	ldr	r1, [r4, #32]
 8006236:	2301      	movs	r3, #1
 8006238:	4628      	mov	r0, r5
 800623a:	47b0      	blx	r6
 800623c:	1c41      	adds	r1, r0, #1
 800623e:	d1c7      	bne.n	80061d0 <__sflush_r+0x34>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0c4      	beq.n	80061d0 <__sflush_r+0x34>
 8006246:	2b1d      	cmp	r3, #29
 8006248:	d001      	beq.n	800624e <__sflush_r+0xb2>
 800624a:	2b16      	cmp	r3, #22
 800624c:	d101      	bne.n	8006252 <__sflush_r+0xb6>
 800624e:	602f      	str	r7, [r5, #0]
 8006250:	e7b1      	b.n	80061b6 <__sflush_r+0x1a>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006258:	81a3      	strh	r3, [r4, #12]
 800625a:	e7ad      	b.n	80061b8 <__sflush_r+0x1c>
 800625c:	690f      	ldr	r7, [r1, #16]
 800625e:	2f00      	cmp	r7, #0
 8006260:	d0a9      	beq.n	80061b6 <__sflush_r+0x1a>
 8006262:	0793      	lsls	r3, r2, #30
 8006264:	680e      	ldr	r6, [r1, #0]
 8006266:	bf08      	it	eq
 8006268:	694b      	ldreq	r3, [r1, #20]
 800626a:	600f      	str	r7, [r1, #0]
 800626c:	bf18      	it	ne
 800626e:	2300      	movne	r3, #0
 8006270:	eba6 0807 	sub.w	r8, r6, r7
 8006274:	608b      	str	r3, [r1, #8]
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	dd9c      	ble.n	80061b6 <__sflush_r+0x1a>
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006280:	4643      	mov	r3, r8
 8006282:	463a      	mov	r2, r7
 8006284:	4628      	mov	r0, r5
 8006286:	47b0      	blx	r6
 8006288:	2800      	cmp	r0, #0
 800628a:	dc06      	bgt.n	800629a <__sflush_r+0xfe>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e78e      	b.n	80061b8 <__sflush_r+0x1c>
 800629a:	4407      	add	r7, r0
 800629c:	eba8 0800 	sub.w	r8, r8, r0
 80062a0:	e7e9      	b.n	8006276 <__sflush_r+0xda>
 80062a2:	bf00      	nop
 80062a4:	20400001 	.word	0x20400001

080062a8 <_fflush_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	690b      	ldr	r3, [r1, #16]
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	b913      	cbnz	r3, 80062b8 <_fflush_r+0x10>
 80062b2:	2500      	movs	r5, #0
 80062b4:	4628      	mov	r0, r5
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	b118      	cbz	r0, 80062c2 <_fflush_r+0x1a>
 80062ba:	6983      	ldr	r3, [r0, #24]
 80062bc:	b90b      	cbnz	r3, 80062c2 <_fflush_r+0x1a>
 80062be:	f000 f887 	bl	80063d0 <__sinit>
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <_fflush_r+0x6c>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d11b      	bne.n	8006300 <_fflush_r+0x58>
 80062c8:	686c      	ldr	r4, [r5, #4]
 80062ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ef      	beq.n	80062b2 <_fflush_r+0xa>
 80062d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062d4:	07d0      	lsls	r0, r2, #31
 80062d6:	d404      	bmi.n	80062e2 <_fflush_r+0x3a>
 80062d8:	0599      	lsls	r1, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_fflush_r+0x3a>
 80062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062de:	f000 f915 	bl	800650c <__retarget_lock_acquire_recursive>
 80062e2:	4628      	mov	r0, r5
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7ff ff59 	bl	800619c <__sflush_r>
 80062ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ec:	07da      	lsls	r2, r3, #31
 80062ee:	4605      	mov	r5, r0
 80062f0:	d4e0      	bmi.n	80062b4 <_fflush_r+0xc>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	059b      	lsls	r3, r3, #22
 80062f6:	d4dd      	bmi.n	80062b4 <_fflush_r+0xc>
 80062f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fa:	f000 f908 	bl	800650e <__retarget_lock_release_recursive>
 80062fe:	e7d9      	b.n	80062b4 <_fflush_r+0xc>
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <_fflush_r+0x70>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d101      	bne.n	800630a <_fflush_r+0x62>
 8006306:	68ac      	ldr	r4, [r5, #8]
 8006308:	e7df      	b.n	80062ca <_fflush_r+0x22>
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <_fflush_r+0x74>)
 800630c:	429c      	cmp	r4, r3
 800630e:	bf08      	it	eq
 8006310:	68ec      	ldreq	r4, [r5, #12]
 8006312:	e7da      	b.n	80062ca <_fflush_r+0x22>
 8006314:	08007434 	.word	0x08007434
 8006318:	08007454 	.word	0x08007454
 800631c:	08007414 	.word	0x08007414

08006320 <std>:
 8006320:	2300      	movs	r3, #0
 8006322:	b510      	push	{r4, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	e9c0 3300 	strd	r3, r3, [r0]
 800632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632e:	6083      	str	r3, [r0, #8]
 8006330:	8181      	strh	r1, [r0, #12]
 8006332:	6643      	str	r3, [r0, #100]	; 0x64
 8006334:	81c2      	strh	r2, [r0, #14]
 8006336:	6183      	str	r3, [r0, #24]
 8006338:	4619      	mov	r1, r3
 800633a:	2208      	movs	r2, #8
 800633c:	305c      	adds	r0, #92	; 0x5c
 800633e:	f7ff fd83 	bl	8005e48 <memset>
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <std+0x38>)
 8006344:	6263      	str	r3, [r4, #36]	; 0x24
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <std+0x3c>)
 8006348:	62a3      	str	r3, [r4, #40]	; 0x28
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <std+0x40>)
 800634c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <std+0x44>)
 8006350:	6224      	str	r4, [r4, #32]
 8006352:	6323      	str	r3, [r4, #48]	; 0x30
 8006354:	bd10      	pop	{r4, pc}
 8006356:	bf00      	nop
 8006358:	08007051 	.word	0x08007051
 800635c:	08007073 	.word	0x08007073
 8006360:	080070ab 	.word	0x080070ab
 8006364:	080070cf 	.word	0x080070cf

08006368 <_cleanup_r>:
 8006368:	4901      	ldr	r1, [pc, #4]	; (8006370 <_cleanup_r+0x8>)
 800636a:	f000 b8af 	b.w	80064cc <_fwalk_reent>
 800636e:	bf00      	nop
 8006370:	080062a9 	.word	0x080062a9

08006374 <__sfmoreglue>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	2268      	movs	r2, #104	; 0x68
 8006378:	1e4d      	subs	r5, r1, #1
 800637a:	4355      	muls	r5, r2
 800637c:	460e      	mov	r6, r1
 800637e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006382:	f000 f997 	bl	80066b4 <_malloc_r>
 8006386:	4604      	mov	r4, r0
 8006388:	b140      	cbz	r0, 800639c <__sfmoreglue+0x28>
 800638a:	2100      	movs	r1, #0
 800638c:	e9c0 1600 	strd	r1, r6, [r0]
 8006390:	300c      	adds	r0, #12
 8006392:	60a0      	str	r0, [r4, #8]
 8006394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006398:	f7ff fd56 	bl	8005e48 <memset>
 800639c:	4620      	mov	r0, r4
 800639e:	bd70      	pop	{r4, r5, r6, pc}

080063a0 <__sfp_lock_acquire>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__sfp_lock_acquire+0x8>)
 80063a2:	f000 b8b3 	b.w	800650c <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	20000295 	.word	0x20000295

080063ac <__sfp_lock_release>:
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <__sfp_lock_release+0x8>)
 80063ae:	f000 b8ae 	b.w	800650e <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	20000295 	.word	0x20000295

080063b8 <__sinit_lock_acquire>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__sinit_lock_acquire+0x8>)
 80063ba:	f000 b8a7 	b.w	800650c <__retarget_lock_acquire_recursive>
 80063be:	bf00      	nop
 80063c0:	20000296 	.word	0x20000296

080063c4 <__sinit_lock_release>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__sinit_lock_release+0x8>)
 80063c6:	f000 b8a2 	b.w	800650e <__retarget_lock_release_recursive>
 80063ca:	bf00      	nop
 80063cc:	20000296 	.word	0x20000296

080063d0 <__sinit>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4604      	mov	r4, r0
 80063d4:	f7ff fff0 	bl	80063b8 <__sinit_lock_acquire>
 80063d8:	69a3      	ldr	r3, [r4, #24]
 80063da:	b11b      	cbz	r3, 80063e4 <__sinit+0x14>
 80063dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e0:	f7ff bff0 	b.w	80063c4 <__sinit_lock_release>
 80063e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063e8:	6523      	str	r3, [r4, #80]	; 0x50
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <__sinit+0x68>)
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <__sinit+0x6c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	bf04      	itt	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	61a3      	streq	r3, [r4, #24]
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 f820 	bl	8006440 <__sfp>
 8006400:	6060      	str	r0, [r4, #4]
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f81c 	bl	8006440 <__sfp>
 8006408:	60a0      	str	r0, [r4, #8]
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f818 	bl	8006440 <__sfp>
 8006410:	2200      	movs	r2, #0
 8006412:	60e0      	str	r0, [r4, #12]
 8006414:	2104      	movs	r1, #4
 8006416:	6860      	ldr	r0, [r4, #4]
 8006418:	f7ff ff82 	bl	8006320 <std>
 800641c:	68a0      	ldr	r0, [r4, #8]
 800641e:	2201      	movs	r2, #1
 8006420:	2109      	movs	r1, #9
 8006422:	f7ff ff7d 	bl	8006320 <std>
 8006426:	68e0      	ldr	r0, [r4, #12]
 8006428:	2202      	movs	r2, #2
 800642a:	2112      	movs	r1, #18
 800642c:	f7ff ff78 	bl	8006320 <std>
 8006430:	2301      	movs	r3, #1
 8006432:	61a3      	str	r3, [r4, #24]
 8006434:	e7d2      	b.n	80063dc <__sinit+0xc>
 8006436:	bf00      	nop
 8006438:	08007410 	.word	0x08007410
 800643c:	08006369 	.word	0x08006369

08006440 <__sfp>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	4607      	mov	r7, r0
 8006444:	f7ff ffac 	bl	80063a0 <__sfp_lock_acquire>
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <__sfp+0x84>)
 800644a:	681e      	ldr	r6, [r3, #0]
 800644c:	69b3      	ldr	r3, [r6, #24]
 800644e:	b913      	cbnz	r3, 8006456 <__sfp+0x16>
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff ffbd 	bl	80063d0 <__sinit>
 8006456:	3648      	adds	r6, #72	; 0x48
 8006458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800645c:	3b01      	subs	r3, #1
 800645e:	d503      	bpl.n	8006468 <__sfp+0x28>
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	b30b      	cbz	r3, 80064a8 <__sfp+0x68>
 8006464:	6836      	ldr	r6, [r6, #0]
 8006466:	e7f7      	b.n	8006458 <__sfp+0x18>
 8006468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800646c:	b9d5      	cbnz	r5, 80064a4 <__sfp+0x64>
 800646e:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <__sfp+0x88>)
 8006470:	60e3      	str	r3, [r4, #12]
 8006472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006476:	6665      	str	r5, [r4, #100]	; 0x64
 8006478:	f000 f847 	bl	800650a <__retarget_lock_init_recursive>
 800647c:	f7ff ff96 	bl	80063ac <__sfp_lock_release>
 8006480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006488:	6025      	str	r5, [r4, #0]
 800648a:	61a5      	str	r5, [r4, #24]
 800648c:	2208      	movs	r2, #8
 800648e:	4629      	mov	r1, r5
 8006490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006494:	f7ff fcd8 	bl	8005e48 <memset>
 8006498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800649c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064a0:	4620      	mov	r0, r4
 80064a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a4:	3468      	adds	r4, #104	; 0x68
 80064a6:	e7d9      	b.n	800645c <__sfp+0x1c>
 80064a8:	2104      	movs	r1, #4
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ff62 	bl	8006374 <__sfmoreglue>
 80064b0:	4604      	mov	r4, r0
 80064b2:	6030      	str	r0, [r6, #0]
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1d5      	bne.n	8006464 <__sfp+0x24>
 80064b8:	f7ff ff78 	bl	80063ac <__sfp_lock_release>
 80064bc:	230c      	movs	r3, #12
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	e7ee      	b.n	80064a0 <__sfp+0x60>
 80064c2:	bf00      	nop
 80064c4:	08007410 	.word	0x08007410
 80064c8:	ffff0001 	.word	0xffff0001

080064cc <_fwalk_reent>:
 80064cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	4606      	mov	r6, r0
 80064d2:	4688      	mov	r8, r1
 80064d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064d8:	2700      	movs	r7, #0
 80064da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064de:	f1b9 0901 	subs.w	r9, r9, #1
 80064e2:	d505      	bpl.n	80064f0 <_fwalk_reent+0x24>
 80064e4:	6824      	ldr	r4, [r4, #0]
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d1f7      	bne.n	80064da <_fwalk_reent+0xe>
 80064ea:	4638      	mov	r0, r7
 80064ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f0:	89ab      	ldrh	r3, [r5, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d907      	bls.n	8006506 <_fwalk_reent+0x3a>
 80064f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064fa:	3301      	adds	r3, #1
 80064fc:	d003      	beq.n	8006506 <_fwalk_reent+0x3a>
 80064fe:	4629      	mov	r1, r5
 8006500:	4630      	mov	r0, r6
 8006502:	47c0      	blx	r8
 8006504:	4307      	orrs	r7, r0
 8006506:	3568      	adds	r5, #104	; 0x68
 8006508:	e7e9      	b.n	80064de <_fwalk_reent+0x12>

0800650a <__retarget_lock_init_recursive>:
 800650a:	4770      	bx	lr

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <__swhatbuf_r>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	460e      	mov	r6, r1
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	2900      	cmp	r1, #0
 800651a:	b096      	sub	sp, #88	; 0x58
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	da08      	bge.n	8006534 <__swhatbuf_r+0x24>
 8006522:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	061a      	lsls	r2, r3, #24
 800652c:	d410      	bmi.n	8006550 <__swhatbuf_r+0x40>
 800652e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006532:	e00e      	b.n	8006552 <__swhatbuf_r+0x42>
 8006534:	466a      	mov	r2, sp
 8006536:	f000 fdf1 	bl	800711c <_fstat_r>
 800653a:	2800      	cmp	r0, #0
 800653c:	dbf1      	blt.n	8006522 <__swhatbuf_r+0x12>
 800653e:	9a01      	ldr	r2, [sp, #4]
 8006540:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006544:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006548:	425a      	negs	r2, r3
 800654a:	415a      	adcs	r2, r3
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	e7ee      	b.n	800652e <__swhatbuf_r+0x1e>
 8006550:	2340      	movs	r3, #64	; 0x40
 8006552:	2000      	movs	r0, #0
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	b016      	add	sp, #88	; 0x58
 8006558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800655c <__smakebuf_r>:
 800655c:	898b      	ldrh	r3, [r1, #12]
 800655e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006560:	079d      	lsls	r5, r3, #30
 8006562:	4606      	mov	r6, r0
 8006564:	460c      	mov	r4, r1
 8006566:	d507      	bpl.n	8006578 <__smakebuf_r+0x1c>
 8006568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	2301      	movs	r3, #1
 8006572:	6163      	str	r3, [r4, #20]
 8006574:	b002      	add	sp, #8
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	ab01      	add	r3, sp, #4
 800657a:	466a      	mov	r2, sp
 800657c:	f7ff ffc8 	bl	8006510 <__swhatbuf_r>
 8006580:	9900      	ldr	r1, [sp, #0]
 8006582:	4605      	mov	r5, r0
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f895 	bl	80066b4 <_malloc_r>
 800658a:	b948      	cbnz	r0, 80065a0 <__smakebuf_r+0x44>
 800658c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006590:	059a      	lsls	r2, r3, #22
 8006592:	d4ef      	bmi.n	8006574 <__smakebuf_r+0x18>
 8006594:	f023 0303 	bic.w	r3, r3, #3
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	e7e3      	b.n	8006568 <__smakebuf_r+0xc>
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <__smakebuf_r+0x7c>)
 80065a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	6020      	str	r0, [r4, #0]
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	6163      	str	r3, [r4, #20]
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	6120      	str	r0, [r4, #16]
 80065b6:	b15b      	cbz	r3, 80065d0 <__smakebuf_r+0x74>
 80065b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 fdbf 	bl	8007140 <_isatty_r>
 80065c2:	b128      	cbz	r0, 80065d0 <__smakebuf_r+0x74>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	89a0      	ldrh	r0, [r4, #12]
 80065d2:	4305      	orrs	r5, r0
 80065d4:	81a5      	strh	r5, [r4, #12]
 80065d6:	e7cd      	b.n	8006574 <__smakebuf_r+0x18>
 80065d8:	08006369 	.word	0x08006369

080065dc <_free_r>:
 80065dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065de:	2900      	cmp	r1, #0
 80065e0:	d044      	beq.n	800666c <_free_r+0x90>
 80065e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e6:	9001      	str	r0, [sp, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f1a1 0404 	sub.w	r4, r1, #4
 80065ee:	bfb8      	it	lt
 80065f0:	18e4      	addlt	r4, r4, r3
 80065f2:	f000 fdef 	bl	80071d4 <__malloc_lock>
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <_free_r+0x94>)
 80065f8:	9801      	ldr	r0, [sp, #4]
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	b933      	cbnz	r3, 800660c <_free_r+0x30>
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	6014      	str	r4, [r2, #0]
 8006602:	b003      	add	sp, #12
 8006604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006608:	f000 bdea 	b.w	80071e0 <__malloc_unlock>
 800660c:	42a3      	cmp	r3, r4
 800660e:	d908      	bls.n	8006622 <_free_r+0x46>
 8006610:	6825      	ldr	r5, [r4, #0]
 8006612:	1961      	adds	r1, r4, r5
 8006614:	428b      	cmp	r3, r1
 8006616:	bf01      	itttt	eq
 8006618:	6819      	ldreq	r1, [r3, #0]
 800661a:	685b      	ldreq	r3, [r3, #4]
 800661c:	1949      	addeq	r1, r1, r5
 800661e:	6021      	streq	r1, [r4, #0]
 8006620:	e7ed      	b.n	80065fe <_free_r+0x22>
 8006622:	461a      	mov	r2, r3
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	b10b      	cbz	r3, 800662c <_free_r+0x50>
 8006628:	42a3      	cmp	r3, r4
 800662a:	d9fa      	bls.n	8006622 <_free_r+0x46>
 800662c:	6811      	ldr	r1, [r2, #0]
 800662e:	1855      	adds	r5, r2, r1
 8006630:	42a5      	cmp	r5, r4
 8006632:	d10b      	bne.n	800664c <_free_r+0x70>
 8006634:	6824      	ldr	r4, [r4, #0]
 8006636:	4421      	add	r1, r4
 8006638:	1854      	adds	r4, r2, r1
 800663a:	42a3      	cmp	r3, r4
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	d1e0      	bne.n	8006602 <_free_r+0x26>
 8006640:	681c      	ldr	r4, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	6053      	str	r3, [r2, #4]
 8006646:	4421      	add	r1, r4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	e7da      	b.n	8006602 <_free_r+0x26>
 800664c:	d902      	bls.n	8006654 <_free_r+0x78>
 800664e:	230c      	movs	r3, #12
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	e7d6      	b.n	8006602 <_free_r+0x26>
 8006654:	6825      	ldr	r5, [r4, #0]
 8006656:	1961      	adds	r1, r4, r5
 8006658:	428b      	cmp	r3, r1
 800665a:	bf04      	itt	eq
 800665c:	6819      	ldreq	r1, [r3, #0]
 800665e:	685b      	ldreq	r3, [r3, #4]
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	bf04      	itt	eq
 8006664:	1949      	addeq	r1, r1, r5
 8006666:	6021      	streq	r1, [r4, #0]
 8006668:	6054      	str	r4, [r2, #4]
 800666a:	e7ca      	b.n	8006602 <_free_r+0x26>
 800666c:	b003      	add	sp, #12
 800666e:	bd30      	pop	{r4, r5, pc}
 8006670:	20000298 	.word	0x20000298

08006674 <sbrk_aligned>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0e      	ldr	r6, [pc, #56]	; (80066b0 <sbrk_aligned+0x3c>)
 8006678:	460c      	mov	r4, r1
 800667a:	6831      	ldr	r1, [r6, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	b911      	cbnz	r1, 8006686 <sbrk_aligned+0x12>
 8006680:	f000 fcd6 	bl	8007030 <_sbrk_r>
 8006684:	6030      	str	r0, [r6, #0]
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 fcd1 	bl	8007030 <_sbrk_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d00a      	beq.n	80066a8 <sbrk_aligned+0x34>
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d007      	beq.n	80066ac <sbrk_aligned+0x38>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fcc6 	bl	8007030 <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d101      	bne.n	80066ac <sbrk_aligned+0x38>
 80066a8:	f04f 34ff 	mov.w	r4, #4294967295
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	2000029c 	.word	0x2000029c

080066b4 <_malloc_r>:
 80066b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b8:	1ccd      	adds	r5, r1, #3
 80066ba:	f025 0503 	bic.w	r5, r5, #3
 80066be:	3508      	adds	r5, #8
 80066c0:	2d0c      	cmp	r5, #12
 80066c2:	bf38      	it	cc
 80066c4:	250c      	movcc	r5, #12
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	4607      	mov	r7, r0
 80066ca:	db01      	blt.n	80066d0 <_malloc_r+0x1c>
 80066cc:	42a9      	cmp	r1, r5
 80066ce:	d905      	bls.n	80066dc <_malloc_r+0x28>
 80066d0:	230c      	movs	r3, #12
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	2600      	movs	r6, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066dc:	4e2e      	ldr	r6, [pc, #184]	; (8006798 <_malloc_r+0xe4>)
 80066de:	f000 fd79 	bl	80071d4 <__malloc_lock>
 80066e2:	6833      	ldr	r3, [r6, #0]
 80066e4:	461c      	mov	r4, r3
 80066e6:	bb34      	cbnz	r4, 8006736 <_malloc_r+0x82>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7ff ffc2 	bl	8006674 <sbrk_aligned>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	4604      	mov	r4, r0
 80066f4:	d14d      	bne.n	8006792 <_malloc_r+0xde>
 80066f6:	6834      	ldr	r4, [r6, #0]
 80066f8:	4626      	mov	r6, r4
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	d140      	bne.n	8006780 <_malloc_r+0xcc>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	4631      	mov	r1, r6
 8006702:	4638      	mov	r0, r7
 8006704:	eb04 0803 	add.w	r8, r4, r3
 8006708:	f000 fc92 	bl	8007030 <_sbrk_r>
 800670c:	4580      	cmp	r8, r0
 800670e:	d13a      	bne.n	8006786 <_malloc_r+0xd2>
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	3503      	adds	r5, #3
 8006714:	1a6d      	subs	r5, r5, r1
 8006716:	f025 0503 	bic.w	r5, r5, #3
 800671a:	3508      	adds	r5, #8
 800671c:	2d0c      	cmp	r5, #12
 800671e:	bf38      	it	cc
 8006720:	250c      	movcc	r5, #12
 8006722:	4629      	mov	r1, r5
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ffa5 	bl	8006674 <sbrk_aligned>
 800672a:	3001      	adds	r0, #1
 800672c:	d02b      	beq.n	8006786 <_malloc_r+0xd2>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	442b      	add	r3, r5
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	e00e      	b.n	8006754 <_malloc_r+0xa0>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	1b52      	subs	r2, r2, r5
 800673a:	d41e      	bmi.n	800677a <_malloc_r+0xc6>
 800673c:	2a0b      	cmp	r2, #11
 800673e:	d916      	bls.n	800676e <_malloc_r+0xba>
 8006740:	1961      	adds	r1, r4, r5
 8006742:	42a3      	cmp	r3, r4
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	bf18      	it	ne
 8006748:	6059      	strne	r1, [r3, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	bf08      	it	eq
 800674e:	6031      	streq	r1, [r6, #0]
 8006750:	5162      	str	r2, [r4, r5]
 8006752:	604b      	str	r3, [r1, #4]
 8006754:	4638      	mov	r0, r7
 8006756:	f104 060b 	add.w	r6, r4, #11
 800675a:	f000 fd41 	bl	80071e0 <__malloc_unlock>
 800675e:	f026 0607 	bic.w	r6, r6, #7
 8006762:	1d23      	adds	r3, r4, #4
 8006764:	1af2      	subs	r2, r6, r3
 8006766:	d0b6      	beq.n	80066d6 <_malloc_r+0x22>
 8006768:	1b9b      	subs	r3, r3, r6
 800676a:	50a3      	str	r3, [r4, r2]
 800676c:	e7b3      	b.n	80066d6 <_malloc_r+0x22>
 800676e:	6862      	ldr	r2, [r4, #4]
 8006770:	42a3      	cmp	r3, r4
 8006772:	bf0c      	ite	eq
 8006774:	6032      	streq	r2, [r6, #0]
 8006776:	605a      	strne	r2, [r3, #4]
 8006778:	e7ec      	b.n	8006754 <_malloc_r+0xa0>
 800677a:	4623      	mov	r3, r4
 800677c:	6864      	ldr	r4, [r4, #4]
 800677e:	e7b2      	b.n	80066e6 <_malloc_r+0x32>
 8006780:	4634      	mov	r4, r6
 8006782:	6876      	ldr	r6, [r6, #4]
 8006784:	e7b9      	b.n	80066fa <_malloc_r+0x46>
 8006786:	230c      	movs	r3, #12
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4638      	mov	r0, r7
 800678c:	f000 fd28 	bl	80071e0 <__malloc_unlock>
 8006790:	e7a1      	b.n	80066d6 <_malloc_r+0x22>
 8006792:	6025      	str	r5, [r4, #0]
 8006794:	e7de      	b.n	8006754 <_malloc_r+0xa0>
 8006796:	bf00      	nop
 8006798:	20000298 	.word	0x20000298

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	429e      	cmp	r6, r3
 80067a4:	4682      	mov	sl, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	eba5 0901 	sub.w	r9, r5, r1
 80067be:	6965      	ldr	r5, [r4, #20]
 80067c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c8:	3301      	adds	r3, #1
 80067ca:	444b      	add	r3, r9
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f7ff ff6b 	bl	80066b4 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8ca 3000 	str.w	r3, [sl]
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	464a      	mov	r2, r9
 80067fc:	f000 fcc2 	bl	8007184 <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	6165      	str	r5, [r4, #20]
 8006810:	444e      	add	r6, r9
 8006812:	eba5 0509 	sub.w	r5, r5, r9
 8006816:	6026      	str	r6, [r4, #0]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	463e      	mov	r6, r7
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	4632      	mov	r2, r6
 8006826:	4641      	mov	r1, r8
 8006828:	f000 fcba 	bl	80071a0 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	1b9b      	subs	r3, r3, r6
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4433      	add	r3, r6
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 fcd5 	bl	80071ec <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	4650      	mov	r0, sl
 800684c:	f7ff fec6 	bl	80065dc <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	; 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f7ff ff21 	bl	80066b4 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	f8cd 800c 	str.w	r8, [sp, #12]
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7f9 fc81 	bl	8000200 <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	4654      	mov	r4, sl
 8006922:	2000      	movs	r0, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	46a2      	mov	sl, r4
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfb8      	it	lt
 800697c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc37 	bl	8000200 <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc25 	bl	8000200 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4638      	mov	r0, r7
 8006a12:	f3af 8000 	nop.w
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4638      	mov	r0, r7
 8006a38:	f000 f9d4 	bl	8006de4 <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	08007474 	.word	0x08007474
 8006a44:	0800747e 	.word	0x0800747e
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	0800747a 	.word	0x0800747a

08006a54 <__sfputc_r>:
 8006a54:	6893      	ldr	r3, [r2, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	b410      	push	{r4}
 8006a5c:	6093      	str	r3, [r2, #8]
 8006a5e:	da08      	bge.n	8006a72 <__sfputc_r+0x1e>
 8006a60:	6994      	ldr	r4, [r2, #24]
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	db01      	blt.n	8006a6a <__sfputc_r+0x16>
 8006a66:	290a      	cmp	r1, #10
 8006a68:	d103      	bne.n	8006a72 <__sfputc_r+0x1e>
 8006a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a6e:	f7ff bad5 	b.w	800601c <__swbuf_r>
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	1c58      	adds	r0, r3, #1
 8006a76:	6010      	str	r0, [r2, #0]
 8006a78:	7019      	strb	r1, [r3, #0]
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <__sfputs_r>:
 8006a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a84:	4606      	mov	r6, r0
 8006a86:	460f      	mov	r7, r1
 8006a88:	4614      	mov	r4, r2
 8006a8a:	18d5      	adds	r5, r2, r3
 8006a8c:	42ac      	cmp	r4, r5
 8006a8e:	d101      	bne.n	8006a94 <__sfputs_r+0x12>
 8006a90:	2000      	movs	r0, #0
 8006a92:	e007      	b.n	8006aa4 <__sfputs_r+0x22>
 8006a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a98:	463a      	mov	r2, r7
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ffda 	bl	8006a54 <__sfputc_r>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d1f3      	bne.n	8006a8c <__sfputs_r+0xa>
 8006aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aa8 <_vfiprintf_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	460d      	mov	r5, r1
 8006aae:	b09d      	sub	sp, #116	; 0x74
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	4698      	mov	r8, r3
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	b118      	cbz	r0, 8006ac0 <_vfiprintf_r+0x18>
 8006ab8:	6983      	ldr	r3, [r0, #24]
 8006aba:	b90b      	cbnz	r3, 8006ac0 <_vfiprintf_r+0x18>
 8006abc:	f7ff fc88 	bl	80063d0 <__sinit>
 8006ac0:	4b89      	ldr	r3, [pc, #548]	; (8006ce8 <_vfiprintf_r+0x240>)
 8006ac2:	429d      	cmp	r5, r3
 8006ac4:	d11b      	bne.n	8006afe <_vfiprintf_r+0x56>
 8006ac6:	6875      	ldr	r5, [r6, #4]
 8006ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aca:	07d9      	lsls	r1, r3, #31
 8006acc:	d405      	bmi.n	8006ada <_vfiprintf_r+0x32>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	059a      	lsls	r2, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_vfiprintf_r+0x32>
 8006ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad6:	f7ff fd19 	bl	800650c <__retarget_lock_acquire_recursive>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	071b      	lsls	r3, r3, #28
 8006ade:	d501      	bpl.n	8006ae4 <_vfiprintf_r+0x3c>
 8006ae0:	692b      	ldr	r3, [r5, #16]
 8006ae2:	b9eb      	cbnz	r3, 8006b20 <_vfiprintf_r+0x78>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff faea 	bl	80060c0 <__swsetup_r>
 8006aec:	b1c0      	cbz	r0, 8006b20 <_vfiprintf_r+0x78>
 8006aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006af0:	07dc      	lsls	r4, r3, #31
 8006af2:	d50e      	bpl.n	8006b12 <_vfiprintf_r+0x6a>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b01d      	add	sp, #116	; 0x74
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	4b7b      	ldr	r3, [pc, #492]	; (8006cec <_vfiprintf_r+0x244>)
 8006b00:	429d      	cmp	r5, r3
 8006b02:	d101      	bne.n	8006b08 <_vfiprintf_r+0x60>
 8006b04:	68b5      	ldr	r5, [r6, #8]
 8006b06:	e7df      	b.n	8006ac8 <_vfiprintf_r+0x20>
 8006b08:	4b79      	ldr	r3, [pc, #484]	; (8006cf0 <_vfiprintf_r+0x248>)
 8006b0a:	429d      	cmp	r5, r3
 8006b0c:	bf08      	it	eq
 8006b0e:	68f5      	ldreq	r5, [r6, #12]
 8006b10:	e7da      	b.n	8006ac8 <_vfiprintf_r+0x20>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	0598      	lsls	r0, r3, #22
 8006b16:	d4ed      	bmi.n	8006af4 <_vfiprintf_r+0x4c>
 8006b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b1a:	f7ff fcf8 	bl	800650e <__retarget_lock_release_recursive>
 8006b1e:	e7e9      	b.n	8006af4 <_vfiprintf_r+0x4c>
 8006b20:	2300      	movs	r3, #0
 8006b22:	9309      	str	r3, [sp, #36]	; 0x24
 8006b24:	2320      	movs	r3, #32
 8006b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b2e:	2330      	movs	r3, #48	; 0x30
 8006b30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cf4 <_vfiprintf_r+0x24c>
 8006b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b38:	f04f 0901 	mov.w	r9, #1
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	469a      	mov	sl, r3
 8006b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b44:	b10a      	cbz	r2, 8006b4a <_vfiprintf_r+0xa2>
 8006b46:	2a25      	cmp	r2, #37	; 0x25
 8006b48:	d1f9      	bne.n	8006b3e <_vfiprintf_r+0x96>
 8006b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b4e:	d00b      	beq.n	8006b68 <_vfiprintf_r+0xc0>
 8006b50:	465b      	mov	r3, fp
 8006b52:	4622      	mov	r2, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	4630      	mov	r0, r6
 8006b58:	f7ff ff93 	bl	8006a82 <__sfputs_r>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f000 80aa 	beq.w	8006cb6 <_vfiprintf_r+0x20e>
 8006b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b64:	445a      	add	r2, fp
 8006b66:	9209      	str	r2, [sp, #36]	; 0x24
 8006b68:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80a2 	beq.w	8006cb6 <_vfiprintf_r+0x20e>
 8006b72:	2300      	movs	r3, #0
 8006b74:	f04f 32ff 	mov.w	r2, #4294967295
 8006b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b7c:	f10a 0a01 	add.w	sl, sl, #1
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	9307      	str	r3, [sp, #28]
 8006b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b88:	931a      	str	r3, [sp, #104]	; 0x68
 8006b8a:	4654      	mov	r4, sl
 8006b8c:	2205      	movs	r2, #5
 8006b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b92:	4858      	ldr	r0, [pc, #352]	; (8006cf4 <_vfiprintf_r+0x24c>)
 8006b94:	f7f9 fb34 	bl	8000200 <memchr>
 8006b98:	9a04      	ldr	r2, [sp, #16]
 8006b9a:	b9d8      	cbnz	r0, 8006bd4 <_vfiprintf_r+0x12c>
 8006b9c:	06d1      	lsls	r1, r2, #27
 8006b9e:	bf44      	itt	mi
 8006ba0:	2320      	movmi	r3, #32
 8006ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba6:	0713      	lsls	r3, r2, #28
 8006ba8:	bf44      	itt	mi
 8006baa:	232b      	movmi	r3, #43	; 0x2b
 8006bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb6:	d015      	beq.n	8006be4 <_vfiprintf_r+0x13c>
 8006bb8:	9a07      	ldr	r2, [sp, #28]
 8006bba:	4654      	mov	r4, sl
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f04f 0c0a 	mov.w	ip, #10
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc8:	3b30      	subs	r3, #48	; 0x30
 8006bca:	2b09      	cmp	r3, #9
 8006bcc:	d94e      	bls.n	8006c6c <_vfiprintf_r+0x1c4>
 8006bce:	b1b0      	cbz	r0, 8006bfe <_vfiprintf_r+0x156>
 8006bd0:	9207      	str	r2, [sp, #28]
 8006bd2:	e014      	b.n	8006bfe <_vfiprintf_r+0x156>
 8006bd4:	eba0 0308 	sub.w	r3, r0, r8
 8006bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	9304      	str	r3, [sp, #16]
 8006be0:	46a2      	mov	sl, r4
 8006be2:	e7d2      	b.n	8006b8a <_vfiprintf_r+0xe2>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1d19      	adds	r1, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	9103      	str	r1, [sp, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfbb      	ittet	lt
 8006bf0:	425b      	neglt	r3, r3
 8006bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8006bf6:	9307      	strge	r3, [sp, #28]
 8006bf8:	9307      	strlt	r3, [sp, #28]
 8006bfa:	bfb8      	it	lt
 8006bfc:	9204      	strlt	r2, [sp, #16]
 8006bfe:	7823      	ldrb	r3, [r4, #0]
 8006c00:	2b2e      	cmp	r3, #46	; 0x2e
 8006c02:	d10c      	bne.n	8006c1e <_vfiprintf_r+0x176>
 8006c04:	7863      	ldrb	r3, [r4, #1]
 8006c06:	2b2a      	cmp	r3, #42	; 0x2a
 8006c08:	d135      	bne.n	8006c76 <_vfiprintf_r+0x1ce>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	1d1a      	adds	r2, r3, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	9203      	str	r2, [sp, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfb8      	it	lt
 8006c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c1a:	3402      	adds	r4, #2
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d04 <_vfiprintf_r+0x25c>
 8006c22:	7821      	ldrb	r1, [r4, #0]
 8006c24:	2203      	movs	r2, #3
 8006c26:	4650      	mov	r0, sl
 8006c28:	f7f9 faea 	bl	8000200 <memchr>
 8006c2c:	b140      	cbz	r0, 8006c40 <_vfiprintf_r+0x198>
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	eba0 000a 	sub.w	r0, r0, sl
 8006c34:	fa03 f000 	lsl.w	r0, r3, r0
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	4303      	orrs	r3, r0
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c44:	482c      	ldr	r0, [pc, #176]	; (8006cf8 <_vfiprintf_r+0x250>)
 8006c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c4a:	2206      	movs	r2, #6
 8006c4c:	f7f9 fad8 	bl	8000200 <memchr>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d03f      	beq.n	8006cd4 <_vfiprintf_r+0x22c>
 8006c54:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <_vfiprintf_r+0x254>)
 8006c56:	bb1b      	cbnz	r3, 8006ca0 <_vfiprintf_r+0x1f8>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	3307      	adds	r3, #7
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	443b      	add	r3, r7
 8006c68:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6a:	e767      	b.n	8006b3c <_vfiprintf_r+0x94>
 8006c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c70:	460c      	mov	r4, r1
 8006c72:	2001      	movs	r0, #1
 8006c74:	e7a5      	b.n	8006bc2 <_vfiprintf_r+0x11a>
 8006c76:	2300      	movs	r3, #0
 8006c78:	3401      	adds	r4, #1
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f04f 0c0a 	mov.w	ip, #10
 8006c82:	4620      	mov	r0, r4
 8006c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c88:	3a30      	subs	r2, #48	; 0x30
 8006c8a:	2a09      	cmp	r2, #9
 8006c8c:	d903      	bls.n	8006c96 <_vfiprintf_r+0x1ee>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0c5      	beq.n	8006c1e <_vfiprintf_r+0x176>
 8006c92:	9105      	str	r1, [sp, #20]
 8006c94:	e7c3      	b.n	8006c1e <_vfiprintf_r+0x176>
 8006c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e7f0      	b.n	8006c82 <_vfiprintf_r+0x1da>
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <_vfiprintf_r+0x258>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	4630      	mov	r0, r6
 8006cac:	f3af 8000 	nop.w
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	1c78      	adds	r0, r7, #1
 8006cb4:	d1d6      	bne.n	8006c64 <_vfiprintf_r+0x1bc>
 8006cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb8:	07d9      	lsls	r1, r3, #31
 8006cba:	d405      	bmi.n	8006cc8 <_vfiprintf_r+0x220>
 8006cbc:	89ab      	ldrh	r3, [r5, #12]
 8006cbe:	059a      	lsls	r2, r3, #22
 8006cc0:	d402      	bmi.n	8006cc8 <_vfiprintf_r+0x220>
 8006cc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cc4:	f7ff fc23 	bl	800650e <__retarget_lock_release_recursive>
 8006cc8:	89ab      	ldrh	r3, [r5, #12]
 8006cca:	065b      	lsls	r3, r3, #25
 8006ccc:	f53f af12 	bmi.w	8006af4 <_vfiprintf_r+0x4c>
 8006cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cd2:	e711      	b.n	8006af8 <_vfiprintf_r+0x50>
 8006cd4:	ab03      	add	r3, sp, #12
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <_vfiprintf_r+0x258>)
 8006cdc:	a904      	add	r1, sp, #16
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 f880 	bl	8006de4 <_printf_i>
 8006ce4:	e7e4      	b.n	8006cb0 <_vfiprintf_r+0x208>
 8006ce6:	bf00      	nop
 8006ce8:	08007434 	.word	0x08007434
 8006cec:	08007454 	.word	0x08007454
 8006cf0:	08007414 	.word	0x08007414
 8006cf4:	08007474 	.word	0x08007474
 8006cf8:	0800747e 	.word	0x0800747e
 8006cfc:	00000000 	.word	0x00000000
 8006d00:	08006a83 	.word	0x08006a83
 8006d04:	0800747a 	.word	0x0800747a

08006d08 <_printf_common>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	4699      	mov	r9, r3
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	690b      	ldr	r3, [r1, #16]
 8006d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	bfb8      	it	lt
 8006d1c:	4613      	movlt	r3, r2
 8006d1e:	6033      	str	r3, [r6, #0]
 8006d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d24:	4607      	mov	r7, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	b10a      	cbz	r2, 8006d2e <_printf_common+0x26>
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	0699      	lsls	r1, r3, #26
 8006d32:	bf42      	ittt	mi
 8006d34:	6833      	ldrmi	r3, [r6, #0]
 8006d36:	3302      	addmi	r3, #2
 8006d38:	6033      	strmi	r3, [r6, #0]
 8006d3a:	6825      	ldr	r5, [r4, #0]
 8006d3c:	f015 0506 	ands.w	r5, r5, #6
 8006d40:	d106      	bne.n	8006d50 <_printf_common+0x48>
 8006d42:	f104 0a19 	add.w	sl, r4, #25
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	6832      	ldr	r2, [r6, #0]
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	dc26      	bgt.n	8006d9e <_printf_common+0x96>
 8006d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d54:	1e13      	subs	r3, r2, #0
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	bf18      	it	ne
 8006d5a:	2301      	movne	r3, #1
 8006d5c:	0692      	lsls	r2, r2, #26
 8006d5e:	d42b      	bmi.n	8006db8 <_printf_common+0xb0>
 8006d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d64:	4649      	mov	r1, r9
 8006d66:	4638      	mov	r0, r7
 8006d68:	47c0      	blx	r8
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d01e      	beq.n	8006dac <_printf_common+0xa4>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	68e5      	ldr	r5, [r4, #12]
 8006d72:	6832      	ldr	r2, [r6, #0]
 8006d74:	f003 0306 	and.w	r3, r3, #6
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	bf08      	it	eq
 8006d7c:	1aad      	subeq	r5, r5, r2
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	bf0c      	ite	eq
 8006d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d88:	2500      	movne	r5, #0
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bfc4      	itt	gt
 8006d8e:	1a9b      	subgt	r3, r3, r2
 8006d90:	18ed      	addgt	r5, r5, r3
 8006d92:	2600      	movs	r6, #0
 8006d94:	341a      	adds	r4, #26
 8006d96:	42b5      	cmp	r5, r6
 8006d98:	d11a      	bne.n	8006dd0 <_printf_common+0xc8>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e008      	b.n	8006db0 <_printf_common+0xa8>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4652      	mov	r2, sl
 8006da2:	4649      	mov	r1, r9
 8006da4:	4638      	mov	r0, r7
 8006da6:	47c0      	blx	r8
 8006da8:	3001      	adds	r0, #1
 8006daa:	d103      	bne.n	8006db4 <_printf_common+0xac>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7c6      	b.n	8006d46 <_printf_common+0x3e>
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	2030      	movs	r0, #48	; 0x30
 8006dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc2:	4422      	add	r2, r4
 8006dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dcc:	3302      	adds	r3, #2
 8006dce:	e7c7      	b.n	8006d60 <_printf_common+0x58>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d0e6      	beq.n	8006dac <_printf_common+0xa4>
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7d9      	b.n	8006d96 <_printf_common+0x8e>
	...

08006de4 <_printf_i>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	7e0f      	ldrb	r7, [r1, #24]
 8006dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dec:	2f78      	cmp	r7, #120	; 0x78
 8006dee:	4691      	mov	r9, r2
 8006df0:	4680      	mov	r8, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	469a      	mov	sl, r3
 8006df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfa:	d807      	bhi.n	8006e0c <_printf_i+0x28>
 8006dfc:	2f62      	cmp	r7, #98	; 0x62
 8006dfe:	d80a      	bhi.n	8006e16 <_printf_i+0x32>
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	f000 80d8 	beq.w	8006fb6 <_printf_i+0x1d2>
 8006e06:	2f58      	cmp	r7, #88	; 0x58
 8006e08:	f000 80a3 	beq.w	8006f52 <_printf_i+0x16e>
 8006e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e14:	e03a      	b.n	8006e8c <_printf_i+0xa8>
 8006e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1a:	2b15      	cmp	r3, #21
 8006e1c:	d8f6      	bhi.n	8006e0c <_printf_i+0x28>
 8006e1e:	a101      	add	r1, pc, #4	; (adr r1, 8006e24 <_printf_i+0x40>)
 8006e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e0d 	.word	0x08006e0d
 8006e30:	08006e0d 	.word	0x08006e0d
 8006e34:	08006e0d 	.word	0x08006e0d
 8006e38:	08006e0d 	.word	0x08006e0d
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006e0d 	.word	0x08006e0d
 8006e44:	08006e0d 	.word	0x08006e0d
 8006e48:	08006e0d 	.word	0x08006e0d
 8006e4c:	08006e0d 	.word	0x08006e0d
 8006e50:	08006f9d 	.word	0x08006f9d
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006f7f 	.word	0x08006f7f
 8006e5c:	08006e0d 	.word	0x08006e0d
 8006e60:	08006e0d 	.word	0x08006e0d
 8006e64:	08006fbf 	.word	0x08006fbf
 8006e68:	08006e0d 	.word	0x08006e0d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e0d 	.word	0x08006e0d
 8006e74:	08006e0d 	.word	0x08006e0d
 8006e78:	08006f87 	.word	0x08006f87
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0a3      	b.n	8006fd8 <_printf_i+0x1f4>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	0606      	lsls	r6, r0, #24
 8006e96:	f101 0304 	add.w	r3, r1, #4
 8006e9a:	d50a      	bpl.n	8006eb2 <_printf_i+0xce>
 8006e9c:	680e      	ldr	r6, [r1, #0]
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xc8>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	4276      	negs	r6, r6
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	485e      	ldr	r0, [pc, #376]	; (8007028 <_printf_i+0x244>)
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e019      	b.n	8006ee6 <_printf_i+0x102>
 8006eb2:	680e      	ldr	r6, [r1, #0]
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eba:	bf18      	it	ne
 8006ebc:	b236      	sxthne	r6, r6
 8006ebe:	e7ef      	b.n	8006ea0 <_printf_i+0xbc>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0601      	lsls	r1, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xec>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xf2>
 8006ed0:	0646      	lsls	r6, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe8>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	4854      	ldr	r0, [pc, #336]	; (8007028 <_printf_i+0x244>)
 8006ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eda:	bf0c      	ite	eq
 8006edc:	2308      	moveq	r3, #8
 8006ede:	230a      	movne	r3, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90e      	cbnz	r6, 8006efc <_printf_i+0x118>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d04d      	beq.n	8006f98 <_printf_i+0x1b4>
 8006efc:	4615      	mov	r5, r2
 8006efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f02:	fb03 6711 	mls	r7, r3, r1, r6
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460e      	mov	r6, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x11a>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x14c>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07de      	lsls	r6, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x14c>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	; 0x30
 8006f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f30:	1b52      	subs	r2, r2, r5
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee2 	bl	8006d08 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14c      	bne.n	8006fe2 <_printf_i+0x1fe>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	4835      	ldr	r0, [pc, #212]	; (8007028 <_printf_i+0x244>)
 8006f54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f60:	6029      	str	r1, [r5, #0]
 8006f62:	061d      	lsls	r5, r3, #24
 8006f64:	d514      	bpl.n	8006f90 <_printf_i+0x1ac>
 8006f66:	07df      	lsls	r7, r3, #31
 8006f68:	bf44      	itt	mi
 8006f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6e:	6023      	strmi	r3, [r4, #0]
 8006f70:	b91e      	cbnz	r6, 8006f7a <_printf_i+0x196>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f023 0320 	bic.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	e7b0      	b.n	8006ee0 <_printf_i+0xfc>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f043 0320 	orr.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	2378      	movs	r3, #120	; 0x78
 8006f88:	4828      	ldr	r0, [pc, #160]	; (800702c <_printf_i+0x248>)
 8006f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8e:	e7e3      	b.n	8006f58 <_printf_i+0x174>
 8006f90:	0659      	lsls	r1, r3, #25
 8006f92:	bf48      	it	mi
 8006f94:	b2b6      	uxthmi	r6, r6
 8006f96:	e7e6      	b.n	8006f66 <_printf_i+0x182>
 8006f98:	4615      	mov	r5, r2
 8006f9a:	e7bb      	b.n	8006f14 <_printf_i+0x130>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	6826      	ldr	r6, [r4, #0]
 8006fa0:	6961      	ldr	r1, [r4, #20]
 8006fa2:	1d18      	adds	r0, r3, #4
 8006fa4:	6028      	str	r0, [r5, #0]
 8006fa6:	0635      	lsls	r5, r6, #24
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0x1cc>
 8006fac:	6019      	str	r1, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0x1d2>
 8006fb0:	0670      	lsls	r0, r6, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0x1c8>
 8006fb4:	8019      	strh	r1, [r3, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	4615      	mov	r5, r2
 8006fbc:	e7ba      	b.n	8006f34 <_printf_i+0x150>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	602a      	str	r2, [r5, #0]
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f7f9 f918 	bl	8000200 <memchr>
 8006fd0:	b108      	cbz	r0, 8006fd6 <_printf_i+0x1f2>
 8006fd2:	1b40      	subs	r0, r0, r5
 8006fd4:	6060      	str	r0, [r4, #4]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe0:	e7a8      	b.n	8006f34 <_printf_i+0x150>
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	47d0      	blx	sl
 8006fec:	3001      	adds	r0, #1
 8006fee:	d0ab      	beq.n	8006f48 <_printf_i+0x164>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	079b      	lsls	r3, r3, #30
 8006ff4:	d413      	bmi.n	800701e <_printf_i+0x23a>
 8006ff6:	68e0      	ldr	r0, [r4, #12]
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	bfb8      	it	lt
 8006ffe:	4618      	movlt	r0, r3
 8007000:	e7a4      	b.n	8006f4c <_printf_i+0x168>
 8007002:	2301      	movs	r3, #1
 8007004:	4632      	mov	r2, r6
 8007006:	4649      	mov	r1, r9
 8007008:	4640      	mov	r0, r8
 800700a:	47d0      	blx	sl
 800700c:	3001      	adds	r0, #1
 800700e:	d09b      	beq.n	8006f48 <_printf_i+0x164>
 8007010:	3501      	adds	r5, #1
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	9903      	ldr	r1, [sp, #12]
 8007016:	1a5b      	subs	r3, r3, r1
 8007018:	42ab      	cmp	r3, r5
 800701a:	dcf2      	bgt.n	8007002 <_printf_i+0x21e>
 800701c:	e7eb      	b.n	8006ff6 <_printf_i+0x212>
 800701e:	2500      	movs	r5, #0
 8007020:	f104 0619 	add.w	r6, r4, #25
 8007024:	e7f5      	b.n	8007012 <_printf_i+0x22e>
 8007026:	bf00      	nop
 8007028:	08007485 	.word	0x08007485
 800702c:	08007496 	.word	0x08007496

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_sbrk_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa f9fc 	bl	8001438 <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	200002a0 	.word	0x200002a0

08007050 <__sread>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f8f8 	bl	800724c <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	bfab      	itete	ge
 8007060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007062:	89a3      	ldrhlt	r3, [r4, #12]
 8007064:	181b      	addge	r3, r3, r0
 8007066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800706a:	bfac      	ite	ge
 800706c:	6563      	strge	r3, [r4, #84]	; 0x54
 800706e:	81a3      	strhlt	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 f868 	bl	8007160 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b817 	b.w	80070d8 <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 f855 	bl	8007160 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b813 	b.w	80070fc <_close_r>
	...

080070d8 <_write_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	; (80070f8 <_write_r+0x20>)
 80070dc:	4604      	mov	r4, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fa f955 	bl	8001396 <_write>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_write_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_write_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	200002a0 	.word	0x200002a0

080070fc <_close_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	; (8007118 <_close_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fa f961 	bl	80013ce <_close>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_close_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_close_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	200002a0 	.word	0x200002a0

0800711c <_fstat_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_fstat_r+0x20>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	f7fa f95c 	bl	80013e6 <_fstat>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d102      	bne.n	8007138 <_fstat_r+0x1c>
 8007132:	682b      	ldr	r3, [r5, #0]
 8007134:	b103      	cbz	r3, 8007138 <_fstat_r+0x1c>
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	bd38      	pop	{r3, r4, r5, pc}
 800713a:	bf00      	nop
 800713c:	200002a0 	.word	0x200002a0

08007140 <_isatty_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d06      	ldr	r5, [pc, #24]	; (800715c <_isatty_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7fa f95b 	bl	8001406 <_isatty>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_isatty_r+0x1a>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_isatty_r+0x1a>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	200002a0 	.word	0x200002a0

08007160 <_lseek_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	; (8007180 <_lseek_r+0x20>)
 8007164:	4604      	mov	r4, r0
 8007166:	4608      	mov	r0, r1
 8007168:	4611      	mov	r1, r2
 800716a:	2200      	movs	r2, #0
 800716c:	602a      	str	r2, [r5, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f7fa f954 	bl	800141c <_lseek>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_lseek_r+0x1e>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_lseek_r+0x1e>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	200002a0 	.word	0x200002a0

08007184 <memcpy>:
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	f100 33ff 	add.w	r3, r0, #4294967295
 800718c:	d100      	bne.n	8007190 <memcpy+0xc>
 800718e:	4770      	bx	lr
 8007190:	b510      	push	{r4, lr}
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719a:	4291      	cmp	r1, r2
 800719c:	d1f9      	bne.n	8007192 <memcpy+0xe>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <memmove>:
 80071a0:	4288      	cmp	r0, r1
 80071a2:	b510      	push	{r4, lr}
 80071a4:	eb01 0402 	add.w	r4, r1, r2
 80071a8:	d902      	bls.n	80071b0 <memmove+0x10>
 80071aa:	4284      	cmp	r4, r0
 80071ac:	4623      	mov	r3, r4
 80071ae:	d807      	bhi.n	80071c0 <memmove+0x20>
 80071b0:	1e43      	subs	r3, r0, #1
 80071b2:	42a1      	cmp	r1, r4
 80071b4:	d008      	beq.n	80071c8 <memmove+0x28>
 80071b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071be:	e7f8      	b.n	80071b2 <memmove+0x12>
 80071c0:	4402      	add	r2, r0
 80071c2:	4601      	mov	r1, r0
 80071c4:	428a      	cmp	r2, r1
 80071c6:	d100      	bne.n	80071ca <memmove+0x2a>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071d2:	e7f7      	b.n	80071c4 <memmove+0x24>

080071d4 <__malloc_lock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__malloc_lock+0x8>)
 80071d6:	f7ff b999 	b.w	800650c <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	20000294 	.word	0x20000294

080071e0 <__malloc_unlock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__malloc_unlock+0x8>)
 80071e2:	f7ff b994 	b.w	800650e <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	20000294 	.word	0x20000294

080071ec <_realloc_r>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	4680      	mov	r8, r0
 80071f2:	4614      	mov	r4, r2
 80071f4:	460e      	mov	r6, r1
 80071f6:	b921      	cbnz	r1, 8007202 <_realloc_r+0x16>
 80071f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4611      	mov	r1, r2
 80071fe:	f7ff ba59 	b.w	80066b4 <_malloc_r>
 8007202:	b92a      	cbnz	r2, 8007210 <_realloc_r+0x24>
 8007204:	f7ff f9ea 	bl	80065dc <_free_r>
 8007208:	4625      	mov	r5, r4
 800720a:	4628      	mov	r0, r5
 800720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007210:	f000 f82e 	bl	8007270 <_malloc_usable_size_r>
 8007214:	4284      	cmp	r4, r0
 8007216:	4607      	mov	r7, r0
 8007218:	d802      	bhi.n	8007220 <_realloc_r+0x34>
 800721a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800721e:	d812      	bhi.n	8007246 <_realloc_r+0x5a>
 8007220:	4621      	mov	r1, r4
 8007222:	4640      	mov	r0, r8
 8007224:	f7ff fa46 	bl	80066b4 <_malloc_r>
 8007228:	4605      	mov	r5, r0
 800722a:	2800      	cmp	r0, #0
 800722c:	d0ed      	beq.n	800720a <_realloc_r+0x1e>
 800722e:	42bc      	cmp	r4, r7
 8007230:	4622      	mov	r2, r4
 8007232:	4631      	mov	r1, r6
 8007234:	bf28      	it	cs
 8007236:	463a      	movcs	r2, r7
 8007238:	f7ff ffa4 	bl	8007184 <memcpy>
 800723c:	4631      	mov	r1, r6
 800723e:	4640      	mov	r0, r8
 8007240:	f7ff f9cc 	bl	80065dc <_free_r>
 8007244:	e7e1      	b.n	800720a <_realloc_r+0x1e>
 8007246:	4635      	mov	r5, r6
 8007248:	e7df      	b.n	800720a <_realloc_r+0x1e>
	...

0800724c <_read_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d07      	ldr	r5, [pc, #28]	; (800726c <_read_r+0x20>)
 8007250:	4604      	mov	r4, r0
 8007252:	4608      	mov	r0, r1
 8007254:	4611      	mov	r1, r2
 8007256:	2200      	movs	r2, #0
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	f7fa f87e 	bl	800135c <_read>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_read_r+0x1e>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_read_r+0x1e>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	200002a0 	.word	0x200002a0

08007270 <_malloc_usable_size_r>:
 8007270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007274:	1f18      	subs	r0, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfbc      	itt	lt
 800727a:	580b      	ldrlt	r3, [r1, r0]
 800727c:	18c0      	addlt	r0, r0, r3
 800727e:	4770      	bx	lr

08007280 <_init>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	bf00      	nop
 8007284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007286:	bc08      	pop	{r3}
 8007288:	469e      	mov	lr, r3
 800728a:	4770      	bx	lr

0800728c <_fini>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	bf00      	nop
 8007290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007292:	bc08      	pop	{r3}
 8007294:	469e      	mov	lr, r3
 8007296:	4770      	bx	lr
