
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095cc  080095cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d4  080095d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080095dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000338  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018006  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ce  00000000  00000000  000380ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ff3  00000000  00000000  0003dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8d5  00000000  00000000  00065c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f09f3  00000000  00000000  00080558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170f4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ba4  00000000  00000000  00170f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d5c 	.word	0x08008d5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008d5c 	.word	0x08008d5c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f002 fad7 	bl	8002bdc <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f001 fe4e 	bl	80022d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f002 fc1d 	bl	8002e88 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f001 fe3e 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000094 	.word	0x20000094
 8000664:	40012000 	.word	0x40012000

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d127      	bne.n	80006da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0x84>)
 80006d6:	f002 ffa9 	bl	800362c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xac>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_GPIO_Init+0xac>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xac>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xac>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_GPIO_Init+0xac>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xac>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0xac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_GPIO_Init+0xac>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_GPIO_Init+0xac>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0xac>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <MX_GPIO_Init+0xac>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_GPIO_Init+0xac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800077c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xb0>)
 800078e:	f002 ff4d 	bl	800362c <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800

080007a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e2:	f003 f8ff 	bl	80039e4 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f001 fd72 	bl	80022d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f4:	f003 fe6f 	bl	80044d6 <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007fe:	f001 fd69 	bl	80022d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x74>)
 8000806:	f003 fea2 	bl	800454e <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000810:	f001 fd60 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000dc 	.word	0x200000dc
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_I2C_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12c      	bne.n	80008a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <HAL_I2C_MspInit+0x8c>)
 8000880:	f002 fed4 	bl	800362c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_I2C_MspInit+0x88>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400

080008b4 <I2C_Scan>:
#include "lcd.h"

HAL_StatusTypeDef res;

/* USER CODE BEGIN 0 */
void I2C_Scan() {
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b096      	sub	sp, #88	; 0x58
 80008b8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <I2C_Scan+0xc0>)
 80008bc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008c0:	461d      	mov	r5, r3
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ca:	6020      	str	r0, [r4, #0]
 80008cc:	3404      	adds	r4, #4
 80008ce:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80008d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc95 	bl	8000204 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <I2C_Scan+0xc4>)
 80008e8:	f006 f85f 	bl	80069aa <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80008f2:	e030      	b.n	8000956 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80008f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	b299      	uxth	r1, r3
 80008fc:	230a      	movs	r3, #10
 80008fe:	2201      	movs	r2, #1
 8000900:	481e      	ldr	r0, [pc, #120]	; (800097c <I2C_Scan+0xc8>)
 8000902:	f003 fab1 	bl	8003e68 <HAL_I2C_IsDeviceReady>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <I2C_Scan+0xcc>)
 800090c:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <I2C_Scan+0xcc>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d113      	bne.n	800093e <I2C_Scan+0x8a>
			char msg[64];
			sprintf(msg, sizeof(msg), "0x%02X", i);
 8000916:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800091a:	4638      	mov	r0, r7
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <I2C_Scan+0xd0>)
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	f007 f8d8 	bl	8007ad4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8000924:	463b      	mov	r3, r7
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc6c 	bl	8000204 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b29a      	uxth	r2, r3
 8000930:	4639      	mov	r1, r7
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <I2C_Scan+0xc4>)
 8000938:	f006 f837 	bl	80069aa <HAL_UART_Transmit>
 800093c:	e006      	b.n	800094c <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2201      	movs	r2, #1
 8000944:	4910      	ldr	r1, [pc, #64]	; (8000988 <I2C_Scan+0xd4>)
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <I2C_Scan+0xc4>)
 8000948:	f006 f82f 	bl	80069aa <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800094c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000950:	3301      	adds	r3, #1
 8000952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800095a:	2b7f      	cmp	r3, #127	; 0x7f
 800095c:	d9ca      	bls.n	80008f4 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2202      	movs	r2, #2
 8000964:	4909      	ldr	r1, [pc, #36]	; (800098c <I2C_Scan+0xd8>)
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <I2C_Scan+0xc4>)
 8000968:	f006 f81f 	bl	80069aa <HAL_UART_Transmit>
}
 800096c:	bf00      	nop
 800096e:	3758      	adds	r7, #88	; 0x58
 8000970:	46bd      	mov	sp, r7
 8000972:	bdb0      	pop	{r4, r5, r7, pc}
 8000974:	08008d84 	.word	0x08008d84
 8000978:	20000358 	.word	0x20000358
 800097c:	200000dc 	.word	0x200000dc
 8000980:	20000130 	.word	0x20000130
 8000984:	08008d74 	.word	0x08008d74
 8000988:	08008d7c 	.word	0x08008d7c
 800098c:	08008d80 	.word	0x08008d80

08000990 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	4613      	mov	r3, r2
 80009a0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2201      	movs	r2, #1
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <LCD_SendInternal+0xa8>)
 80009ae:	f003 fa5b 	bl	8003e68 <HAL_I2C_IsDeviceReady>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d000      	beq.n	80009be <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80009bc:	e7f1      	b.n	80009a2 <LCD_SendInternal+0x12>
			break;
 80009be:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	f023 030f 	bic.w	r3, r3, #15
 80009c6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80009ce:	7bba      	ldrb	r2, [r7, #14]
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f043 030c 	orr.w	r3, r3, #12
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80009de:	7bba      	ldrb	r2, [r7, #14]
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80009ee:	7b7a      	ldrb	r2, [r7, #13]
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f043 030c 	orr.w	r3, r3, #12
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80009fe:	7b7a      	ldrb	r2, [r7, #13]
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b299      	uxth	r1, r3
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <LCD_SendInternal+0xa8>)
 8000a20:	f003 f924 	bl	8003c6c <HAL_I2C_Master_Transmit>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000a28:	2005      	movs	r0, #5
 8000a2a:	f002 f8b3 	bl	8002b94 <HAL_Delay>
	return res;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000dc 	.word	0x200000dc

08000a3c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000a4c:	79b9      	ldrb	r1, [r7, #6]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2200      	movs	r2, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff9c 	bl	8000990 <LCD_SendInternal>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000a70:	79b9      	ldrb	r1, [r7, #6]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff8a 	bl	8000990 <LCD_SendInternal>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2130      	movs	r1, #48	; 0x30
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffd2 	bl	8000a3c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffcd 	bl	8000a3c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	210c      	movs	r1, #12
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffc8 	bl	8000a3c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffc3 	bl	8000a3c <LCD_SendCommand>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000aca:	e009      	b.n	8000ae0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffc3 	bl	8000a60 <LCD_SendData>
		str++;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f1      	bne.n	8000acc <LCD_SendString+0xe>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <init>:

void init() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000af8:	f7ff fedc 	bl	80008b4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000afc:	204e      	movs	r0, #78	; 0x4e
 8000afe:	f7ff ffc1 	bl	8000a84 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	204e      	movs	r0, #78	; 0x4e
 8000b06:	f7ff ff99 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000b0a:	4907      	ldr	r1, [pc, #28]	; (8000b28 <init+0x34>)
 8000b0c:	204e      	movs	r0, #78	; 0x4e
 8000b0e:	f7ff ffd6 	bl	8000abe <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000b12:	21c0      	movs	r1, #192	; 0xc0
 8000b14:	204e      	movs	r0, #78	; 0x4e
 8000b16:	f7ff ff91 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <init+0x38>)
 8000b1c:	204e      	movs	r0, #78	; 0x4e
 8000b1e:	f7ff ffce 	bl	8000abe <LCD_SendString>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08008d9c 	.word	0x08008d9c
 8000b2c:	08008dac 	.word	0x08008dac

08000b30 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <__io_putchar+0x20>)
 8000b40:	f005 ff33 	bl	80069aa <HAL_UART_Transmit>
	return ch;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000358 	.word	0x20000358

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8000b5a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f001 ffa8 	bl	8002ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f001 f8dc 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff fdc4 	bl	80006f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b68:	f001 fbba 	bl	80022e0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000b6c:	f7ff fe1a 	bl	80007a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000b70:	f001 ff02 	bl	8002978 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b74:	f7ff fd26 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b78:	f001 fdb4 	bl	80026e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b7c:	f001 fd64 	bl	8002648 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b80:	f001 fe26 	bl	80027d0 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b84:	f001 f93c 	bl	8001e00 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b88:	48a3      	ldr	r0, [pc, #652]	; (8000e18 <main+0x2c4>)
 8000b8a:	f004 fed5 	bl	8005938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	48a2      	ldr	r0, [pc, #648]	; (8000e1c <main+0x2c8>)
 8000b92:	f004 ff9b 	bl	8005acc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000b96:	48a2      	ldr	r0, [pc, #648]	; (8000e20 <main+0x2cc>)
 8000b98:	f004 fece 	bl	8005938 <HAL_TIM_Base_Start_IT>
	char *verse1[] = {
 8000b9c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000ba0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000ba4:	4a9f      	ldr	r2, [pc, #636]	; (8000e24 <main+0x2d0>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	4611      	mov	r1, r2
 8000baa:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f006 feec 	bl	800798c <memcpy>

			"0",
	///////////////////////////////////////////////////////////
			};

	int verse1_time[] = {
 8000bb4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000bb8:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000bbc:	4a9a      	ldr	r2, [pc, #616]	; (8000e28 <main+0x2d4>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f006 fee0 	bl	800798c <memcpy>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000bcc:	f7ff ff92 	bl	8000af4 <init>
	LCD_Init(LCD_ADDR);
 8000bd0:	204e      	movs	r0, #78	; 0x4e
 8000bd2:	f7ff ff57 	bl	8000a84 <LCD_Init>
	up = 0;
 8000bd6:	4b95      	ldr	r3, [pc, #596]	; (8000e2c <main+0x2d8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	down = 0;
 8000bdc:	4b94      	ldr	r3, [pc, #592]	; (8000e30 <main+0x2dc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
	left = 0;
 8000be2:	4b94      	ldr	r3, [pc, #592]	; (8000e34 <main+0x2e0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000be8:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <main+0x2e4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]

	//	LCD_SendCommand(LCD_ADDR, 0b00000001);

	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 8000bee:	4b93      	ldr	r3, [pc, #588]	; (8000e3c <main+0x2e8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 8000bf4:	4b91      	ldr	r3, [pc, #580]	; (8000e3c <main+0x2e8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 8000bfa:	4b90      	ldr	r3, [pc, #576]	; (8000e3c <main+0x2e8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 0;
 8000c00:	4b8e      	ldr	r3, [pc, #568]	; (8000e3c <main+0x2e8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	70da      	strb	r2, [r3, #3]

		//Main loop
		while (mode == 0) {
 8000c06:	e1f9      	b.n	8000ffc <main+0x4a8>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	498d      	ldr	r1, [pc, #564]	; (8000e40 <main+0x2ec>)
 8000c0c:	488d      	ldr	r0, [pc, #564]	; (8000e44 <main+0x2f0>)
 8000c0e:	f004 fc55 	bl	80054bc <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c12:	2200      	movs	r2, #0
 8000c14:	498c      	ldr	r1, [pc, #560]	; (8000e48 <main+0x2f4>)
 8000c16:	488b      	ldr	r0, [pc, #556]	; (8000e44 <main+0x2f0>)
 8000c18:	f004 fd32 	bl	8005680 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000c1c:	488b      	ldr	r0, [pc, #556]	; (8000e4c <main+0x2f8>)
 8000c1e:	f002 f821 	bl	8002c64 <HAL_ADC_Start>

			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <main+0x2ec>)
 8000c24:	78db      	ldrb	r3, [r3, #3]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a88      	ldr	r2, [pc, #544]	; (8000e50 <main+0x2fc>)
 8000c30:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c32:	4b83      	ldr	r3, [pc, #524]	; (8000e40 <main+0x2ec>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c36:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <main+0x2ec>)
 8000c3a:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c3c:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <main+0x2ec>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	9100      	str	r1, [sp, #0]
 8000c46:	4603      	mov	r3, r0
 8000c48:	4982      	ldr	r1, [pc, #520]	; (8000e54 <main+0x300>)
 8000c4a:	4883      	ldr	r0, [pc, #524]	; (8000e58 <main+0x304>)
 8000c4c:	f006 ff42 	bl	8007ad4 <siprintf>

			if (strcmp(lcdup, "Park Jung Hwan") != 0) {
 8000c50:	4982      	ldr	r1, [pc, #520]	; (8000e5c <main+0x308>)
 8000c52:	4883      	ldr	r0, [pc, #524]	; (8000e60 <main+0x30c>)
 8000c54:	f7ff facc 	bl	80001f0 <strcmp>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d032      	beq.n	8000cc4 <main+0x170>
				LCD_Init(LCD_ADDR);
 8000c5e:	204e      	movs	r0, #78	; 0x4e
 8000c60:	f7ff ff10 	bl	8000a84 <LCD_Init>
				strcpy(lcdup, "Park Jung Hwan");
 8000c64:	4a7e      	ldr	r2, [pc, #504]	; (8000e60 <main+0x30c>)
 8000c66:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <main+0x308>)
 8000c68:	4614      	mov	r4, r2
 8000c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c6e:	8023      	strh	r3, [r4, #0]
 8000c70:	3402      	adds	r4, #2
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	7023      	strb	r3, [r4, #0]
				// LCD up
				LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	204e      	movs	r0, #78	; 0x4e
 8000c7a:	f7ff fedf 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, lcdup);
 8000c7e:	4978      	ldr	r1, [pc, #480]	; (8000e60 <main+0x30c>)
 8000c80:	204e      	movs	r0, #78	; 0x4e
 8000c82:	f7ff ff1c 	bl	8000abe <LCD_SendString>

				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c86:	4b6e      	ldr	r3, [pc, #440]	; (8000e40 <main+0x2ec>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	4a6f      	ldr	r2, [pc, #444]	; (8000e50 <main+0x2fc>)
 8000c94:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <main+0x2ec>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000c9a:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c9c:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <main+0x2ec>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000ca0:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <main+0x2ec>)
 8000ca4:	789b      	ldrb	r3, [r3, #2]
				sprintf(Time, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat],
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9100      	str	r1, [sp, #0]
 8000caa:	4603      	mov	r3, r0
 8000cac:	4969      	ldr	r1, [pc, #420]	; (8000e54 <main+0x300>)
 8000cae:	486a      	ldr	r0, [pc, #424]	; (8000e58 <main+0x304>)
 8000cb0:	f006 ff10 	bl	8007ad4 <siprintf>

				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000cb4:	21c0      	movs	r1, #192	; 0xc0
 8000cb6:	204e      	movs	r0, #78	; 0x4e
 8000cb8:	f7ff fec0 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000cbc:	4966      	ldr	r1, [pc, #408]	; (8000e58 <main+0x304>)
 8000cbe:	204e      	movs	r0, #78	; 0x4e
 8000cc0:	f7ff fefd 	bl	8000abe <LCD_SendString>
			}

			sTimestart = sTimecur;
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <main+0x310>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a67      	ldr	r2, [pc, #412]	; (8000e68 <main+0x314>)
 8000cca:	6013      	str	r3, [r2, #0]
			sTimecur = sTime.Seconds;
 8000ccc:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <main+0x2ec>)
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <main+0x310>)
 8000cd4:	601a      	str	r2, [r3, #0]

			if (sTimecur != sTimestart) {
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <main+0x310>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <main+0x314>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d007      	beq.n	8000cf2 <main+0x19e>
				// LCD down
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ce2:	21c0      	movs	r1, #192	; 0xc0
 8000ce4:	204e      	movs	r0, #78	; 0x4e
 8000ce6:	f7ff fea9 	bl	8000a3c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, Time);
 8000cea:	495b      	ldr	r1, [pc, #364]	; (8000e58 <main+0x304>)
 8000cec:	204e      	movs	r0, #78	; 0x4e
 8000cee:	f7ff fee6 	bl	8000abe <LCD_SendString>
			}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			if (strcmp(Time, Time_AL) == 0) {
 8000cf2:	495e      	ldr	r1, [pc, #376]	; (8000e6c <main+0x318>)
 8000cf4:	4858      	ldr	r0, [pc, #352]	; (8000e58 <main+0x304>)
 8000cf6:	f7ff fa7b 	bl	80001f0 <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d104      	bne.n	8000d0a <main+0x1b6>
				flag_alarm++;
 8000d00:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <main+0x31c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a5a      	ldr	r2, [pc, #360]	; (8000e70 <main+0x31c>)
 8000d08:	6013      	str	r3, [r2, #0]
			}
			if (flag_alarm > 0) {
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <main+0x31c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 816f 	beq.w	8000ff2 <main+0x49e>

				song_time = 2000/verse1_time[count_note];
 8000d14:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <main+0x320>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d1c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <main+0x324>)
 8000d30:	601a      	str	r2, [r3, #0]

				if (strlen(verse1[count_note]) == 3 && song_time >= count_bit) {
 8000d32:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <main+0x320>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d3a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa5e 	bl	8000204 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d13d      	bne.n	8000dca <main+0x276>
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <main+0x324>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <main+0x328>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d337      	bcc.n	8000dca <main+0x276>

					int time = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
					char tempP = verse1[count_note][0];
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <main+0x320>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d68:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
					char tempO = verse1[count_note][1];
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <main+0x320>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d7e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	f887 35ea 	strb.w	r3, [r7, #1514]	; 0x5ea
					char tempT = verse1[count_note][2];
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <main+0x320>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000d94:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	f887 35e9 	strb.w	r3, [r7, #1513]	; 0x5e9
					note(tempP, tempO, tempT, 2000 / time, 2 + (count_bit));
 8000da2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000da6:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8000daa:	fb92 f4f3 	sdiv	r4, r2, r3
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <main+0x328>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3302      	adds	r3, #2
 8000db4:	f897 25e9 	ldrb.w	r2, [r7, #1513]	; 0x5e9
 8000db8:	f897 15ea 	ldrb.w	r1, [r7, #1514]	; 0x5ea
 8000dbc:	f897 05eb 	ldrb.w	r0, [r7, #1515]	; 0x5eb
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	f001 f9bc 	bl	8002140 <note>
				if (strlen(verse1[count_note]) == 3 && song_time >= count_bit) {
 8000dc8:	e016      	b.n	8000df8 <main+0x2a4>

				} else if (strlen(verse1[count_note]) == 1) {
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <main+0x320>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8000dd2:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa12 	bl	8000204 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <main+0x2a4>
					TIM3->CCR3 = 0;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <main+0x32c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
					count_note = 0;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0x320>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
					flag_alarm = 0;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <main+0x31c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
				}

				if (song_time < count_bit) {
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0x324>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <main+0x328>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f080 80f6 	bcs.w	8000ff2 <main+0x49e>
					count_note++;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <main+0x320>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <main+0x320>)
 8000e0e:	6013      	str	r3, [r2, #0]
					count_bit = 0;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <main+0x328>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]

			////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			//==========================================================================================================
			//mode choose while loop
			while (rising_edge >= 1) {
 8000e16:	e0ec      	b.n	8000ff2 <main+0x49e>
 8000e18:	20000280 	.word	0x20000280
 8000e1c:	200002c8 	.word	0x200002c8
 8000e20:	20000310 	.word	0x20000310
 8000e24:	08008edc 	.word	0x08008edc
 8000e28:	080091d0 	.word	0x080091d0
 8000e2c:	2000018c 	.word	0x2000018c
 8000e30:	2000018d 	.word	0x2000018d
 8000e34:	2000018e 	.word	0x2000018e
 8000e38:	2000018f 	.word	0x2000018f
 8000e3c:	200001d0 	.word	0x200001d0
 8000e40:	200001a4 	.word	0x200001a4
 8000e44:	2000025c 	.word	0x2000025c
 8000e48:	200001b8 	.word	0x200001b8
 8000e4c:	20000094 	.word	0x20000094
 8000e50:	20000000 	.word	0x20000000
 8000e54:	08008df4 	.word	0x08008df4
 8000e58:	20000190 	.word	0x20000190
 8000e5c:	08008e08 	.word	0x08008e08
 8000e60:	20000164 	.word	0x20000164
 8000e64:	2000014c 	.word	0x2000014c
 8000e68:	20000148 	.word	0x20000148
 8000e6c:	200001e4 	.word	0x200001e4
 8000e70:	2000013c 	.word	0x2000013c
 8000e74:	20000140 	.word	0x20000140
 8000e78:	20000144 	.word	0x20000144
 8000e7c:	20000134 	.word	0x20000134
 8000e80:	40000400 	.word	0x40000400
				cur_tick = HAL_GetTick();
 8000e84:	f001 fe7a 	bl	8002b7c <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a9f      	ldr	r2, [pc, #636]	; (8001108 <main+0x5b4>)
 8000e8c:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8000e8e:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <main+0x5b4>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b9e      	ldr	r3, [pc, #632]	; (800110c <main+0x5b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4a9d      	ldr	r2, [pc, #628]	; (8001110 <main+0x5bc>)
 8000e9a:	6013      	str	r3, [r2, #0]

				if (tick_gap >= 300) {
 8000e9c:	4b9c      	ldr	r3, [pc, #624]	; (8001110 <main+0x5bc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ea4:	f0c0 80a5 	bcc.w	8000ff2 <main+0x49e>

					if (rising_edge == 1 && falling_edge >= 1) {
 8000ea8:	4b9a      	ldr	r3, [pc, #616]	; (8001114 <main+0x5c0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d142      	bne.n	8000f36 <main+0x3e2>
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <main+0x5c4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d03e      	beq.n	8000f36 <main+0x3e2>

						// init the temp
						sTime_temp.Hours = 0;
 8000eb8:	4b98      	ldr	r3, [pc, #608]	; (800111c <main+0x5c8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 8000ebe:	4b97      	ldr	r3, [pc, #604]	; (800111c <main+0x5c8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 8000ec4:	4b95      	ldr	r3, [pc, #596]	; (800111c <main+0x5c8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 8000eca:	4b94      	ldr	r3, [pc, #592]	; (800111c <main+0x5c8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 8000ed0:	4b93      	ldr	r3, [pc, #588]	; (8001120 <main+0x5cc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8000ed6:	204e      	movs	r0, #78	; 0x4e
 8000ed8:	f7ff fdd4 	bl	8000a84 <LCD_Init>
						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	204e      	movs	r0, #78	; 0x4e
 8000ee0:	f7ff fdac 	bl	8000a3c <LCD_SendCommand>
						strcpy(lcdup, "Set Time Mode");
 8000ee4:	4a8f      	ldr	r2, [pc, #572]	; (8001124 <main+0x5d0>)
 8000ee6:	4b90      	ldr	r3, [pc, #576]	; (8001128 <main+0x5d4>)
 8000ee8:	4614      	mov	r4, r2
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	c407      	stmia	r4!, {r0, r1, r2}
 8000eee:	8023      	strh	r3, [r4, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 8000ef0:	498c      	ldr	r1, [pc, #560]	; (8001124 <main+0x5d0>)
 8000ef2:	204e      	movs	r0, #78	; 0x4e
 8000ef4:	f7ff fde3 	bl	8000abe <LCD_SendString>
						// LCD down
						screen(cursor, sTime_temp);
 8000ef8:	4b89      	ldr	r3, [pc, #548]	; (8001120 <main+0x5cc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461d      	mov	r5, r3
 8000efe:	4b87      	ldr	r3, [pc, #540]	; (800111c <main+0x5c8>)
 8000f00:	466c      	mov	r4, sp
 8000f02:	f103 020c 	add.w	r2, r3, #12
 8000f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f10:	4628      	mov	r0, r5
 8000f12:	f000 ffd3 	bl	8001ebc <screen>

						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000f16:	210f      	movs	r1, #15
 8000f18:	204e      	movs	r0, #78	; 0x4e
 8000f1a:	f7ff fd8f 	bl	8000a3c <LCD_SendCommand>

						//init the user button
						rising_edge = 0;
 8000f1e:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <main+0x5c0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000f24:	4b7c      	ldr	r3, [pc, #496]	; (8001118 <main+0x5c4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
						mode = 1;
 8000f2a:	4b80      	ldr	r3, [pc, #512]	; (800112c <main+0x5d8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
						printf("one click==========================\r\n");
 8000f30:	487f      	ldr	r0, [pc, #508]	; (8001130 <main+0x5dc>)
 8000f32:	f006 fdc7 	bl	8007ac4 <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8000f36:	4b77      	ldr	r3, [pc, #476]	; (8001114 <main+0x5c0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d944      	bls.n	8000fc8 <main+0x474>
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <main+0x5c4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d040      	beq.n	8000fc8 <main+0x474>
						// init the temp
						sTime_AL.Hours = 0;
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <main+0x5e0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
						sTime_AL.Minutes = 0;
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <main+0x5e0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	705a      	strb	r2, [r3, #1]
						sTime_AL.Seconds = 0;
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <main+0x5e0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	709a      	strb	r2, [r3, #2]
						sTime_AL.TimeFormat = 0;
 8000f58:	4b76      	ldr	r3, [pc, #472]	; (8001134 <main+0x5e0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	70da      	strb	r2, [r3, #3]
						cursor = 0;
 8000f5e:	4b70      	ldr	r3, [pc, #448]	; (8001120 <main+0x5cc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]

						// LCD up
						LCD_Init(LCD_ADDR);
 8000f64:	204e      	movs	r0, #78	; 0x4e
 8000f66:	f7ff fd8d 	bl	8000a84 <LCD_Init>
						//blink on
						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	204e      	movs	r0, #78	; 0x4e
 8000f6e:	f7ff fd65 	bl	8000a3c <LCD_SendCommand>

						LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	204e      	movs	r0, #78	; 0x4e
 8000f76:	f7ff fd61 	bl	8000a3c <LCD_SendCommand>
						strcpy(lcdup, "Alarm Mode");
 8000f7a:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <main+0x5d0>)
 8000f7c:	4a6e      	ldr	r2, [pc, #440]	; (8001138 <main+0x5e4>)
 8000f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f80:	c303      	stmia	r3!, {r0, r1}
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	0c12      	lsrs	r2, r2, #16
 8000f88:	701a      	strb	r2, [r3, #0]
						LCD_SendString(LCD_ADDR, lcdup);
 8000f8a:	4966      	ldr	r1, [pc, #408]	; (8001124 <main+0x5d0>)
 8000f8c:	204e      	movs	r0, #78	; 0x4e
 8000f8e:	f7ff fd96 	bl	8000abe <LCD_SendString>
						// LCD down
						screen(cursor, sTime_AL);
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <main+0x5cc>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461d      	mov	r5, r3
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <main+0x5e0>)
 8000f9a:	466c      	mov	r4, sp
 8000f9c:	f103 020c 	add.w	r2, r3, #12
 8000fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa4:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000faa:	4628      	mov	r0, r5
 8000fac:	f000 ff86 	bl	8001ebc <screen>

						//init the user button
						rising_edge = 0;
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <main+0x5c0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <main+0x5c4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
						mode = 2;
 8000fbc:	4b5b      	ldr	r3, [pc, #364]	; (800112c <main+0x5d8>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]

						printf("two click++++++++++++++++++++++++++\r\n");
 8000fc2:	485e      	ldr	r0, [pc, #376]	; (800113c <main+0x5e8>)
 8000fc4:	f006 fd7e 	bl	8007ac4 <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 8000fc8:	4b51      	ldr	r3, [pc, #324]	; (8001110 <main+0x5bc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fd0:	d30f      	bcc.n	8000ff2 <main+0x49e>
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <main+0x5c4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10b      	bne.n	8000ff2 <main+0x49e>
						rising_edge = 0;
 8000fda:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <main+0x5c0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000fe0:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <main+0x5c4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8000fe6:	4b51      	ldr	r3, [pc, #324]	; (800112c <main+0x5d8>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8000fec:	4854      	ldr	r0, [pc, #336]	; (8001140 <main+0x5ec>)
 8000fee:	f006 fd69 	bl	8007ac4 <puts>
			while (rising_edge >= 1) {
 8000ff2:	4b48      	ldr	r3, [pc, #288]	; (8001114 <main+0x5c0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f af44 	bne.w	8000e84 <main+0x330>
		while (mode == 0) {
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x5d8>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f43f ae01 	beq.w	8000c08 <main+0xb4>
				}
			}
		}
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8001006:	e31a      	b.n	800163e <main+0xaea>

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8001008:	484e      	ldr	r0, [pc, #312]	; (8001144 <main+0x5f0>)
 800100a:	f001 fe2b 	bl	8002c64 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <main+0x5c0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d04c      	beq.n	80010b0 <main+0x55c>

				// this flag is check the exit or apply
				apply_flag = 1;
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <main+0x5f4>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <main+0x5c4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d012      	beq.n	800104a <main+0x4f6>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <main+0x5f4>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <main+0x5c0>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <main+0x5c4>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8001036:	210e      	movs	r1, #14
 8001038:	204e      	movs	r0, #78	; 0x4e
 800103a:	f7ff fcff 	bl	8000a3c <LCD_SendCommand>
					mode = 0;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <main+0x5d8>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 8001044:	4841      	ldr	r0, [pc, #260]	; (800114c <main+0x5f8>)
 8001046:	f006 fd3d 	bl	8007ac4 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <main+0x5c4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d12e      	bne.n	80010b0 <main+0x55c>
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <main+0x5fc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d92a      	bls.n	80010b0 <main+0x55c>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <main+0x5c8>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <main+0x600>)
 8001060:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <main+0x5c8>)
 8001064:	785a      	ldrb	r2, [r3, #1]
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <main+0x600>)
 8001068:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <main+0x5c8>)
 800106c:	789a      	ldrb	r2, [r3, #2]
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <main+0x600>)
 8001070:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0x5c8>)
 8001074:	78da      	ldrb	r2, [r3, #3]
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <main+0x600>)
 8001078:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800107a:	2200      	movs	r2, #0
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <main+0x600>)
 800107e:	4836      	ldr	r0, [pc, #216]	; (8001158 <main+0x604>)
 8001080:	f004 f982 	bl	8005388 <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8001084:	210e      	movs	r1, #14
 8001086:	204e      	movs	r0, #78	; 0x4e
 8001088:	f7ff fcd8 	bl	8000a3c <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <main+0x5f4>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <main+0x5fc>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <main+0x5c0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <main+0x5c4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]

					mode = 0;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <main+0x5d8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 80010aa:	482c      	ldr	r0, [pc, #176]	; (800115c <main+0x608>)
 80010ac:	f006 fd0a 	bl	8007ac4 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <main+0x60c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 82c2 	beq.w	800163e <main+0xaea>

				if (up > 0) {
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <main+0x610>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 813e 	beq.w	8001340 <main+0x7ec>
					//AM or PM switching
					if (cursor == 0) {
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <main+0x5cc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d16c      	bne.n	80011a6 <main+0x652>
						if (sTime_temp.TimeFormat == 0) {
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <main+0x5c8>)
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d149      	bne.n	8001168 <main+0x614>
							sTime_temp.TimeFormat = 1;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <main+0x5c8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <main+0x5c8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <main+0x594>
								sTime_temp.Hours = 12;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <main+0x5c8>)
 80010e4:	220c      	movs	r2, #12
 80010e6:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <main+0x5cc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461d      	mov	r5, r3
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <main+0x5c8>)
 80010f0:	466c      	mov	r4, sp
 80010f2:	f103 020c 	add.w	r2, r3, #12
 80010f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80010fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001100:	4628      	mov	r0, r5
 8001102:	f000 fedb 	bl	8001ebc <screen>
 8001106:	e118      	b.n	800133a <main+0x7e6>
 8001108:	2000017c 	.word	0x2000017c
 800110c:	20000178 	.word	0x20000178
 8001110:	20000180 	.word	0x20000180
 8001114:	20000175 	.word	0x20000175
 8001118:	20000176 	.word	0x20000176
 800111c:	200001d0 	.word	0x200001d0
 8001120:	20000184 	.word	0x20000184
 8001124:	20000164 	.word	0x20000164
 8001128:	08008e18 	.word	0x08008e18
 800112c:	20000177 	.word	0x20000177
 8001130:	08008e28 	.word	0x08008e28
 8001134:	200001f8 	.word	0x200001f8
 8001138:	08008e50 	.word	0x08008e50
 800113c:	08008e5c 	.word	0x08008e5c
 8001140:	08008e84 	.word	0x08008e84
 8001144:	20000094 	.word	0x20000094
 8001148:	20000154 	.word	0x20000154
 800114c:	08008eac 	.word	0x08008eac
 8001150:	20000158 	.word	0x20000158
 8001154:	200001a4 	.word	0x200001a4
 8001158:	2000025c 	.word	0x2000025c
 800115c:	08008eb8 	.word	0x08008eb8
 8001160:	20000150 	.word	0x20000150
 8001164:	2000018c 	.word	0x2000018c

						} else if (sTime_temp.TimeFormat == 1) {
 8001168:	4b98      	ldr	r3, [pc, #608]	; (80013cc <main+0x878>)
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	2b01      	cmp	r3, #1
 800116e:	f040 80e4 	bne.w	800133a <main+0x7e6>
							sTime_temp.TimeFormat = 0;
 8001172:	4b96      	ldr	r3, [pc, #600]	; (80013cc <main+0x878>)
 8001174:	2200      	movs	r2, #0
 8001176:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 8001178:	4b94      	ldr	r3, [pc, #592]	; (80013cc <main+0x878>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b0c      	cmp	r3, #12
 800117e:	d102      	bne.n	8001186 <main+0x632>
								sTime_temp.Hours = 0;
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <main+0x878>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 8001186:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <main+0x87c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461d      	mov	r5, r3
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <main+0x878>)
 800118e:	466c      	mov	r4, sp
 8001190:	f103 020c 	add.w	r2, r3, #12
 8001194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001198:	e884 0003 	stmia.w	r4, {r0, r1}
 800119c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119e:	4628      	mov	r0, r5
 80011a0:	f000 fe8c 	bl	8001ebc <screen>
 80011a4:	e0c9      	b.n	800133a <main+0x7e6>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 80011a6:	4b8a      	ldr	r3, [pc, #552]	; (80013d0 <main+0x87c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d119      	bne.n	80011e2 <main+0x68e>

						if (sTime_temp.Hours < 3) {
 80011ae:	4b87      	ldr	r3, [pc, #540]	; (80013cc <main+0x878>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d805      	bhi.n	80011c2 <main+0x66e>
							sTime_temp.Hours += 10;
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <main+0x878>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	330a      	adds	r3, #10
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b83      	ldr	r3, [pc, #524]	; (80013cc <main+0x878>)
 80011c0:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 80011c2:	4b83      	ldr	r3, [pc, #524]	; (80013d0 <main+0x87c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461d      	mov	r5, r3
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <main+0x878>)
 80011ca:	466c      	mov	r4, sp
 80011cc:	f103 020c 	add.w	r2, r3, #12
 80011d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80011d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011da:	4628      	mov	r0, r5
 80011dc:	f000 fe6e 	bl	8001ebc <screen>
 80011e0:	e0ab      	b.n	800133a <main+0x7e6>
					}

					// 1H switching
					else if (cursor == 4) {
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <main+0x87c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d130      	bne.n	800124c <main+0x6f8>

						//AM
						if (sTime_temp.TimeFormat == 0) {
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <main+0x878>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10a      	bne.n	8001208 <main+0x6b4>
							// 0 ~ 11
							if (0 <= sTime_temp.Hours
									&& sTime_temp.Hours < 11) {
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <main+0x878>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
							if (0 <= sTime_temp.Hours
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	d818      	bhi.n	800122c <main+0x6d8>
								sTime_temp.Hours++;
 80011fa:	4b74      	ldr	r3, [pc, #464]	; (80013cc <main+0x878>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <main+0x878>)
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e011      	b.n	800122c <main+0x6d8>
							}
						}
						//PM
						else if (sTime_temp.TimeFormat == 1) {
 8001208:	4b70      	ldr	r3, [pc, #448]	; (80013cc <main+0x878>)
 800120a:	78db      	ldrb	r3, [r3, #3]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10d      	bne.n	800122c <main+0x6d8>

							// 1 ~ 12
							if (1 <= sTime_temp.Hours
 8001210:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <main+0x878>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <main+0x6d8>
									&& sTime_temp.Hours < 12) {
 8001218:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <main+0x878>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b0b      	cmp	r3, #11
 800121e:	d805      	bhi.n	800122c <main+0x6d8>
								sTime_temp.Hours++;
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <main+0x878>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <main+0x878>)
 800122a:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_temp);
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <main+0x87c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461d      	mov	r5, r3
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <main+0x878>)
 8001234:	466c      	mov	r4, sp
 8001236:	f103 020c 	add.w	r2, r3, #12
 800123a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	4628      	mov	r0, r5
 8001246:	f000 fe39 	bl	8001ebc <screen>
 800124a:	e076      	b.n	800133a <main+0x7e6>
					}

					// 10M switching
					else if (cursor == 6) {
 800124c:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <main+0x87c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b06      	cmp	r3, #6
 8001252:	d119      	bne.n	8001288 <main+0x734>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 50) {
 8001254:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <main+0x878>)
 8001256:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8001258:	2b31      	cmp	r3, #49	; 0x31
 800125a:	d805      	bhi.n	8001268 <main+0x714>
							sTime_temp.Minutes += 10;
 800125c:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <main+0x878>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	330a      	adds	r3, #10
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <main+0x878>)
 8001266:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <main+0x87c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461d      	mov	r5, r3
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <main+0x878>)
 8001270:	466c      	mov	r4, sp
 8001272:	f103 020c 	add.w	r2, r3, #12
 8001276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127a:	e884 0003 	stmia.w	r4, {r0, r1}
 800127e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001280:	4628      	mov	r0, r5
 8001282:	f000 fe1b 	bl	8001ebc <screen>
 8001286:	e058      	b.n	800133a <main+0x7e6>
					}
					// 1M switching
					else if (cursor == 7) {
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <main+0x87c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b07      	cmp	r3, #7
 800128e:	d119      	bne.n	80012c4 <main+0x770>
						if (0 <= sTime_temp.Minutes
								&& sTime_temp.Minutes < 59) {
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <main+0x878>)
 8001292:	785b      	ldrb	r3, [r3, #1]
						if (0 <= sTime_temp.Minutes
 8001294:	2b3a      	cmp	r3, #58	; 0x3a
 8001296:	d805      	bhi.n	80012a4 <main+0x750>
							sTime_temp.Minutes += 1;
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <main+0x878>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <main+0x878>)
 80012a2:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <main+0x87c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461d      	mov	r5, r3
 80012aa:	4b48      	ldr	r3, [pc, #288]	; (80013cc <main+0x878>)
 80012ac:	466c      	mov	r4, sp
 80012ae:	f103 020c 	add.w	r2, r3, #12
 80012b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	4628      	mov	r0, r5
 80012be:	f000 fdfd 	bl	8001ebc <screen>
 80012c2:	e03a      	b.n	800133a <main+0x7e6>
					}

					// 10S switching
					else if (cursor == 9) {
 80012c4:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <main+0x87c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	d119      	bne.n	8001300 <main+0x7ac>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 50) {
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <main+0x878>)
 80012ce:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 80012d0:	2b31      	cmp	r3, #49	; 0x31
 80012d2:	d805      	bhi.n	80012e0 <main+0x78c>
							sTime_temp.Seconds += 10;
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <main+0x878>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	330a      	adds	r3, #10
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <main+0x878>)
 80012de:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <main+0x87c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <main+0x878>)
 80012e8:	466c      	mov	r4, sp
 80012ea:	f103 020c 	add.w	r2, r3, #12
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80012f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f8:	4628      	mov	r0, r5
 80012fa:	f000 fddf 	bl	8001ebc <screen>
 80012fe:	e01c      	b.n	800133a <main+0x7e6>
					}
					// 1S switching
					else if (cursor == 10) {
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <main+0x87c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b0a      	cmp	r3, #10
 8001306:	d118      	bne.n	800133a <main+0x7e6>
						if (0 <= sTime_temp.Seconds
								&& sTime_temp.Seconds < 59) {
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <main+0x878>)
 800130a:	789b      	ldrb	r3, [r3, #2]
						if (0 <= sTime_temp.Seconds
 800130c:	2b3a      	cmp	r3, #58	; 0x3a
 800130e:	d805      	bhi.n	800131c <main+0x7c8>
							sTime_temp.Seconds += 1;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <main+0x878>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <main+0x878>)
 800131a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <main+0x87c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461d      	mov	r5, r3
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <main+0x878>)
 8001324:	466c      	mov	r4, sp
 8001326:	f103 020c 	add.w	r2, r3, #12
 800132a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001334:	4628      	mov	r0, r5
 8001336:	f000 fdc1 	bl	8001ebc <screen>
					}

					// clear the up flag
					up = 0;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <main+0x880>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <main+0x884>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80f1 	beq.w	800152c <main+0x9d8>

					//AM or PM switching
					if (cursor == 0) {
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <main+0x87c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d144      	bne.n	80013dc <main+0x888>
						if (sTime_temp.TimeFormat == 0) {
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <main+0x878>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <main+0x83a>
							sTime_temp.TimeFormat = 1;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <main+0x878>)
 800135c:	2201      	movs	r2, #1
 800135e:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 0) {
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <main+0x878>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <main+0x81a>
								sTime_temp.Hours = 12;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <main+0x878>)
 800136a:	220c      	movs	r2, #12
 800136c:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <main+0x87c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461d      	mov	r5, r3
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <main+0x878>)
 8001376:	466c      	mov	r4, sp
 8001378:	f103 020c 	add.w	r2, r3, #12
 800137c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001380:	e884 0003 	stmia.w	r4, {r0, r1}
 8001384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001386:	4628      	mov	r0, r5
 8001388:	f000 fd98 	bl	8001ebc <screen>
 800138c:	e0cb      	b.n	8001526 <main+0x9d2>
						} else if (sTime_temp.TimeFormat == 1) {
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <main+0x878>)
 8001390:	78db      	ldrb	r3, [r3, #3]
 8001392:	2b01      	cmp	r3, #1
 8001394:	f040 80c7 	bne.w	8001526 <main+0x9d2>
							sTime_temp.TimeFormat = 0;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <main+0x878>)
 800139a:	2200      	movs	r2, #0
 800139c:	70da      	strb	r2, [r3, #3]
							if (sTime_temp.Hours == 12) {
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <main+0x878>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d102      	bne.n	80013ac <main+0x858>
								sTime_temp.Hours = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <main+0x878>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_temp);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <main+0x87c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461d      	mov	r5, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <main+0x878>)
 80013b4:	466c      	mov	r4, sp
 80013b6:	f103 020c 	add.w	r2, r3, #12
 80013ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013be:	e884 0003 	stmia.w	r4, {r0, r1}
 80013c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c4:	4628      	mov	r0, r5
 80013c6:	f000 fd79 	bl	8001ebc <screen>
 80013ca:	e0ac      	b.n	8001526 <main+0x9d2>
 80013cc:	200001d0 	.word	0x200001d0
 80013d0:	20000184 	.word	0x20000184
 80013d4:	2000018c 	.word	0x2000018c
 80013d8:	2000018d 	.word	0x2000018d
						}
					}

					// 1H switching
					else if (cursor == 4) {
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <main+0xaf8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d119      	bne.n	8001418 <main+0x8c4>
						if (sTime_temp.Hours > 0) {
 80013e4:	4b9a      	ldr	r3, [pc, #616]	; (8001650 <main+0xafc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <main+0x8a4>
							sTime_temp.Hours--;
 80013ec:	4b98      	ldr	r3, [pc, #608]	; (8001650 <main+0xafc>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b96      	ldr	r3, [pc, #600]	; (8001650 <main+0xafc>)
 80013f6:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_temp);
 80013f8:	4b94      	ldr	r3, [pc, #592]	; (800164c <main+0xaf8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461d      	mov	r5, r3
 80013fe:	4b94      	ldr	r3, [pc, #592]	; (8001650 <main+0xafc>)
 8001400:	466c      	mov	r4, sp
 8001402:	f103 020c 	add.w	r2, r3, #12
 8001406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140a:	e884 0003 	stmia.w	r4, {r0, r1}
 800140e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001410:	4628      	mov	r0, r5
 8001412:	f000 fd53 	bl	8001ebc <screen>
 8001416:	e086      	b.n	8001526 <main+0x9d2>
					}

					// 10M switching
					else if (cursor == 6) {
 8001418:	4b8c      	ldr	r3, [pc, #560]	; (800164c <main+0xaf8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d11d      	bne.n	800145c <main+0x908>
						if (0 < sTime_temp.Minutes
 8001420:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <main+0xafc>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <main+0x8e8>
								&& sTime_temp.Minutes <= 50) {
 8001428:	4b89      	ldr	r3, [pc, #548]	; (8001650 <main+0xafc>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	2b32      	cmp	r3, #50	; 0x32
 800142e:	d805      	bhi.n	800143c <main+0x8e8>
							sTime_temp.Minutes -= 10;
 8001430:	4b87      	ldr	r3, [pc, #540]	; (8001650 <main+0xafc>)
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	3b0a      	subs	r3, #10
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b85      	ldr	r3, [pc, #532]	; (8001650 <main+0xafc>)
 800143a:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 800143c:	4b83      	ldr	r3, [pc, #524]	; (800164c <main+0xaf8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461d      	mov	r5, r3
 8001442:	4b83      	ldr	r3, [pc, #524]	; (8001650 <main+0xafc>)
 8001444:	466c      	mov	r4, sp
 8001446:	f103 020c 	add.w	r2, r3, #12
 800144a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800144e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001454:	4628      	mov	r0, r5
 8001456:	f000 fd31 	bl	8001ebc <screen>
 800145a:	e064      	b.n	8001526 <main+0x9d2>
					}
					// 1M switching
					else if (cursor == 7) {
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <main+0xaf8>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b07      	cmp	r3, #7
 8001462:	d11d      	bne.n	80014a0 <main+0x94c>
						if (0 < sTime_temp.Minutes
 8001464:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <main+0xafc>)
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d009      	beq.n	8001480 <main+0x92c>
								&& sTime_temp.Minutes <= 59) {
 800146c:	4b78      	ldr	r3, [pc, #480]	; (8001650 <main+0xafc>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	2b3b      	cmp	r3, #59	; 0x3b
 8001472:	d805      	bhi.n	8001480 <main+0x92c>
							sTime_temp.Minutes -= 1;
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <main+0xafc>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b74      	ldr	r3, [pc, #464]	; (8001650 <main+0xafc>)
 800147e:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_temp);
 8001480:	4b72      	ldr	r3, [pc, #456]	; (800164c <main+0xaf8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461d      	mov	r5, r3
 8001486:	4b72      	ldr	r3, [pc, #456]	; (8001650 <main+0xafc>)
 8001488:	466c      	mov	r4, sp
 800148a:	f103 020c 	add.w	r2, r3, #12
 800148e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001492:	e884 0003 	stmia.w	r4, {r0, r1}
 8001496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001498:	4628      	mov	r0, r5
 800149a:	f000 fd0f 	bl	8001ebc <screen>
 800149e:	e042      	b.n	8001526 <main+0x9d2>
					}

					// 10S switching
					else if (cursor == 9) {
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <main+0xaf8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d11d      	bne.n	80014e4 <main+0x990>
						if (0 < sTime_temp.Seconds
 80014a8:	4b69      	ldr	r3, [pc, #420]	; (8001650 <main+0xafc>)
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <main+0x970>
								&& sTime_temp.Seconds <= 50) {
 80014b0:	4b67      	ldr	r3, [pc, #412]	; (8001650 <main+0xafc>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	2b32      	cmp	r3, #50	; 0x32
 80014b6:	d805      	bhi.n	80014c4 <main+0x970>
							sTime_temp.Seconds -= 10;
 80014b8:	4b65      	ldr	r3, [pc, #404]	; (8001650 <main+0xafc>)
 80014ba:	789b      	ldrb	r3, [r3, #2]
 80014bc:	3b0a      	subs	r3, #10
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b63      	ldr	r3, [pc, #396]	; (8001650 <main+0xafc>)
 80014c2:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 80014c4:	4b61      	ldr	r3, [pc, #388]	; (800164c <main+0xaf8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461d      	mov	r5, r3
 80014ca:	4b61      	ldr	r3, [pc, #388]	; (8001650 <main+0xafc>)
 80014cc:	466c      	mov	r4, sp
 80014ce:	f103 020c 	add.w	r2, r3, #12
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80014da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 fced 	bl	8001ebc <screen>
 80014e2:	e020      	b.n	8001526 <main+0x9d2>
					}
					// 1S switching
					else if (cursor == 10) {
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <main+0xaf8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	d11c      	bne.n	8001526 <main+0x9d2>
						if (0 < sTime_temp.Seconds
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <main+0xafc>)
 80014ee:	789b      	ldrb	r3, [r3, #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <main+0x9b4>
								&& sTime_temp.Seconds <= 59) {
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <main+0xafc>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	2b3b      	cmp	r3, #59	; 0x3b
 80014fa:	d805      	bhi.n	8001508 <main+0x9b4>
							sTime_temp.Seconds -= 1;
 80014fc:	4b54      	ldr	r3, [pc, #336]	; (8001650 <main+0xafc>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	3b01      	subs	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b52      	ldr	r3, [pc, #328]	; (8001650 <main+0xafc>)
 8001506:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_temp);
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <main+0xaf8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461d      	mov	r5, r3
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <main+0xafc>)
 8001510:	466c      	mov	r4, sp
 8001512:	f103 020c 	add.w	r2, r3, #12
 8001516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151a:	e884 0003 	stmia.w	r4, {r0, r1}
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	4628      	mov	r0, r5
 8001522:	f000 fccb 	bl	8001ebc <screen>
					}

					// clear the down flag
					down = 0;
 8001526:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <main+0xb00>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <main+0xb04>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03e      	beq.n	80015b2 <main+0xa5e>
					if (cursor > 0) {
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <main+0xaf8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d037      	beq.n	80015ac <main+0xa58>
						cursor--;
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <main+0xaf8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	3b01      	subs	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <main+0xaf8>)
 8001546:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001548:	2110      	movs	r1, #16
 800154a:	204e      	movs	r0, #78	; 0x4e
 800154c:	f7ff fa76 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <main+0xaf8>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d109      	bne.n	800156c <main+0xa18>
							cursor--;
 8001558:	4b3c      	ldr	r3, [pc, #240]	; (800164c <main+0xaf8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <main+0xaf8>)
 8001562:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001564:	2110      	movs	r1, #16
 8001566:	204e      	movs	r0, #78	; 0x4e
 8001568:	f7ff fa68 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <main+0xaf8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d109      	bne.n	8001588 <main+0xa34>
							cursor--;
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <main+0xaf8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <main+0xaf8>)
 800157e:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001580:	2110      	movs	r1, #16
 8001582:	204e      	movs	r0, #78	; 0x4e
 8001584:	f7ff fa5a 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 2) {
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <main+0xaf8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d10d      	bne.n	80015ac <main+0xa58>
							cursor -= 2;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <main+0xaf8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b02      	subs	r3, #2
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <main+0xaf8>)
 800159a:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 800159c:	2110      	movs	r1, #16
 800159e:	204e      	movs	r0, #78	; 0x4e
 80015a0:	f7ff fa4c 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 80015a4:	2110      	movs	r1, #16
 80015a6:	204e      	movs	r0, #78	; 0x4e
 80015a8:	f7ff fa48 	bl	8000a3c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <main+0xb04>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <main+0xb08>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03e      	beq.n	8001638 <main+0xae4>

					if (cursor < 10) {
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <main+0xaf8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d837      	bhi.n	8001632 <main+0xade>
						cursor++;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <main+0xaf8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <main+0xaf8>)
 80015cc:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015ce:	2114      	movs	r1, #20
 80015d0:	204e      	movs	r0, #78	; 0x4e
 80015d2:	f7ff fa33 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <main+0xaf8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d109      	bne.n	80015f2 <main+0xa9e>
							cursor++;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <main+0xaf8>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <main+0xaf8>)
 80015e8:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015ea:	2114      	movs	r1, #20
 80015ec:	204e      	movs	r0, #78	; 0x4e
 80015ee:	f7ff fa25 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <main+0xaf8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d109      	bne.n	800160e <main+0xaba>
							cursor++;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <main+0xaf8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <main+0xaf8>)
 8001604:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001606:	2114      	movs	r1, #20
 8001608:	204e      	movs	r0, #78	; 0x4e
 800160a:	f7ff fa17 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 1) {
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <main+0xaf8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d10d      	bne.n	8001632 <main+0xade>
							cursor += 2;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <main+0xaf8>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3302      	adds	r3, #2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <main+0xaf8>)
 8001620:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001622:	2114      	movs	r1, #20
 8001624:	204e      	movs	r0, #78	; 0x4e
 8001626:	f7ff fa09 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 800162a:	2114      	movs	r1, #20
 800162c:	204e      	movs	r0, #78	; 0x4e
 800162e:	f7ff fa05 	bl	8000a3c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <main+0xb08>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <main+0xb0c>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <main+0xb10>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f43f ace0 	beq.w	8001008 <main+0x4b4>
			}
		}

		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 8001648:	e31f      	b.n	8001c8a <main+0x1136>
 800164a:	bf00      	nop
 800164c:	20000184 	.word	0x20000184
 8001650:	200001d0 	.word	0x200001d0
 8001654:	2000018d 	.word	0x2000018d
 8001658:	2000018e 	.word	0x2000018e
 800165c:	2000018f 	.word	0x2000018f
 8001660:	20000150 	.word	0x20000150
 8001664:	20000177 	.word	0x20000177
			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8001668:	4899      	ldr	r0, [pc, #612]	; (80018d0 <main+0xd7c>)
 800166a:	f001 fafb 	bl	8002c64 <HAL_ADC_Start>

			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 800166e:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <main+0xd80>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d052      	beq.n	800171c <main+0xbc8>

				// Alarm init
				sprintf(Time_AL, "");
 8001676:	4998      	ldr	r1, [pc, #608]	; (80018d8 <main+0xd84>)
 8001678:	4898      	ldr	r0, [pc, #608]	; (80018dc <main+0xd88>)
 800167a:	f006 fa2b 	bl	8007ad4 <siprintf>

				// this flag is check the exit or apply
				apply_flag = 1;
 800167e:	4b98      	ldr	r3, [pc, #608]	; (80018e0 <main+0xd8c>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

				// EXIT without apply
				if (falling_edge > 0) {
 8001684:	4b97      	ldr	r3, [pc, #604]	; (80018e4 <main+0xd90>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d012      	beq.n	80016b2 <main+0xb5e>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 800168c:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <main+0xd8c>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8001692:	4b90      	ldr	r3, [pc, #576]	; (80018d4 <main+0xd80>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8001698:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <main+0xd90>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 800169e:	210e      	movs	r1, #14
 80016a0:	204e      	movs	r0, #78	; 0x4e
 80016a2:	f7ff f9cb 	bl	8000a3c <LCD_SendCommand>
					mode = 0;
 80016a6:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <main+0xd94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 80016ac:	488f      	ldr	r0, [pc, #572]	; (80018ec <main+0xd98>)
 80016ae:	f006 fa09 	bl	8007ac4 <puts>

					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 80016b2:	4b8c      	ldr	r3, [pc, #560]	; (80018e4 <main+0xd90>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d130      	bne.n	800171c <main+0xbc8>
 80016ba:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <main+0xd9c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d92c      	bls.n	800171c <main+0xbc8>

					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016c2:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <main+0xda0>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <main+0xda4>)
 80016d0:	441a      	add	r2, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <main+0xda0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016d6:	4618      	mov	r0, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016d8:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <main+0xda0>)
 80016da:	785b      	ldrb	r3, [r3, #1]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016dc:	4619      	mov	r1, r3
							sTime_AL.Hours, sTime_AL.Minutes, sTime_AL.Seconds);
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <main+0xda0>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
					sprintf(Time_AL, "%s %02d:%02d:%02d", ampm[sTime_AL.TimeFormat],
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	9100      	str	r1, [sp, #0]
 80016e6:	4603      	mov	r3, r0
 80016e8:	4984      	ldr	r1, [pc, #528]	; (80018fc <main+0xda8>)
 80016ea:	487c      	ldr	r0, [pc, #496]	; (80018dc <main+0xd88>)
 80016ec:	f006 f9f2 	bl	8007ad4 <siprintf>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 80016f0:	210e      	movs	r1, #14
 80016f2:	204e      	movs	r0, #78	; 0x4e
 80016f4:	f7ff f9a2 	bl	8000a3c <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <main+0xd8c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <main+0xd9c>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8001704:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <main+0xd80>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <main+0xd90>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]

					mode = 0;
 8001710:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <main+0xd94>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 8001716:	487a      	ldr	r0, [pc, #488]	; (8001900 <main+0xdac>)
 8001718:	f006 f9d4 	bl	8007ac4 <puts>

					// ===========================================init func
				}
			}

			if (get_time > 0) {
 800171c:	4b79      	ldr	r3, [pc, #484]	; (8001904 <main+0xdb0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 82b2 	beq.w	8001c8a <main+0x1136>

				if (up > 0) {
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <main+0xdb4>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 812e 	beq.w	800198c <main+0xe38>
					//AM or PM switching
					if (cursor == 0) {
 8001730:	4b76      	ldr	r3, [pc, #472]	; (800190c <main+0xdb8>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13c      	bne.n	80017b2 <main+0xc5e>
						if (sTime_AL.TimeFormat == 0) {
 8001738:	4b6e      	ldr	r3, [pc, #440]	; (80018f4 <main+0xda0>)
 800173a:	78db      	ldrb	r3, [r3, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d119      	bne.n	8001774 <main+0xc20>
							sTime_AL.TimeFormat = 1;
 8001740:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <main+0xda0>)
 8001742:	2201      	movs	r2, #1
 8001744:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 8001746:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <main+0xda0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <main+0xc00>
								sTime_AL.Hours = 12;
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <main+0xda0>)
 8001750:	220c      	movs	r2, #12
 8001752:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <main+0xdb8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461d      	mov	r5, r3
 800175a:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <main+0xda0>)
 800175c:	466c      	mov	r4, sp
 800175e:	f103 020c 	add.w	r2, r3, #12
 8001762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001766:	e884 0003 	stmia.w	r4, {r0, r1}
 800176a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176c:	4628      	mov	r0, r5
 800176e:	f000 fba5 	bl	8001ebc <screen>
 8001772:	e108      	b.n	8001986 <main+0xe32>

						} else if (sTime_AL.TimeFormat == 1) {
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <main+0xda0>)
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 8104 	bne.w	8001986 <main+0xe32>
							sTime_AL.TimeFormat = 0;
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <main+0xda0>)
 8001780:	2200      	movs	r2, #0
 8001782:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 8001784:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <main+0xda0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d102      	bne.n	8001792 <main+0xc3e>
								sTime_AL.Hours = 0;
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <main+0xda0>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 8001792:	4b5e      	ldr	r3, [pc, #376]	; (800190c <main+0xdb8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461d      	mov	r5, r3
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <main+0xda0>)
 800179a:	466c      	mov	r4, sp
 800179c:	f103 020c 	add.w	r2, r3, #12
 80017a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80017a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017aa:	4628      	mov	r0, r5
 80017ac:	f000 fb86 	bl	8001ebc <screen>
 80017b0:	e0e9      	b.n	8001986 <main+0xe32>
						}
					}

					// 10H switching
					else if (cursor == 3) {
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <main+0xdb8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d119      	bne.n	80017ee <main+0xc9a>

						if (sTime_AL.Hours < 3) {
 80017ba:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <main+0xda0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d805      	bhi.n	80017ce <main+0xc7a>
							sTime_AL.Hours += 10;
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <main+0xda0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	330a      	adds	r3, #10
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <main+0xda0>)
 80017cc:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <main+0xdb8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <main+0xda0>)
 80017d6:	466c      	mov	r4, sp
 80017d8:	f103 020c 	add.w	r2, r3, #12
 80017dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80017e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e6:	4628      	mov	r0, r5
 80017e8:	f000 fb68 	bl	8001ebc <screen>
 80017ec:	e0cb      	b.n	8001986 <main+0xe32>
					}

					// 1H switching
					else if (cursor == 4) {
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <main+0xdb8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d130      	bne.n	8001858 <main+0xd04>

						//AM
						if (sTime_AL.TimeFormat == 0) {
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <main+0xda0>)
 80017f8:	78db      	ldrb	r3, [r3, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <main+0xcc0>
							// 0 ~ 11
							if (0 <= sTime_AL.Hours && sTime_AL.Hours < 11) {
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <main+0xda0>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b0a      	cmp	r3, #10
 8001804:	d818      	bhi.n	8001838 <main+0xce4>
								sTime_AL.Hours++;
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <main+0xda0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <main+0xda0>)
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e011      	b.n	8001838 <main+0xce4>
							}
						}
						//PM
						else if (sTime_AL.TimeFormat == 1) {
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <main+0xda0>)
 8001816:	78db      	ldrb	r3, [r3, #3]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10d      	bne.n	8001838 <main+0xce4>

							// 1 ~ 12
							if (1 <= sTime_AL.Hours && sTime_AL.Hours < 12) {
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <main+0xda0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <main+0xce4>
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <main+0xda0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b0b      	cmp	r3, #11
 800182a:	d805      	bhi.n	8001838 <main+0xce4>
								sTime_AL.Hours++;
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <main+0xda0>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <main+0xda0>)
 8001836:	701a      	strb	r2, [r3, #0]
							}
						}
						screen(cursor, sTime_AL);
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <main+0xdb8>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461d      	mov	r5, r3
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <main+0xda0>)
 8001840:	466c      	mov	r4, sp
 8001842:	f103 020c 	add.w	r2, r3, #12
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	e884 0003 	stmia.w	r4, {r0, r1}
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	4628      	mov	r0, r5
 8001852:	f000 fb33 	bl	8001ebc <screen>
 8001856:	e096      	b.n	8001986 <main+0xe32>
					}

					// 10M switching
					else if (cursor == 6) {
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <main+0xdb8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d119      	bne.n	8001894 <main+0xd40>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 50) {
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <main+0xda0>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b31      	cmp	r3, #49	; 0x31
 8001866:	d805      	bhi.n	8001874 <main+0xd20>
							sTime_AL.Minutes += 10;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <main+0xda0>)
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	330a      	adds	r3, #10
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <main+0xda0>)
 8001872:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <main+0xdb8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461d      	mov	r5, r3
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <main+0xda0>)
 800187c:	466c      	mov	r4, sp
 800187e:	f103 020c 	add.w	r2, r3, #12
 8001882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001886:	e884 0003 	stmia.w	r4, {r0, r1}
 800188a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800188c:	4628      	mov	r0, r5
 800188e:	f000 fb15 	bl	8001ebc <screen>
 8001892:	e078      	b.n	8001986 <main+0xe32>
					}
					// 1M switching
					else if (cursor == 7) {
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <main+0xdb8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d139      	bne.n	8001910 <main+0xdbc>
						if (0 <= sTime_AL.Minutes && sTime_AL.Minutes < 59) {
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <main+0xda0>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	2b3a      	cmp	r3, #58	; 0x3a
 80018a2:	d805      	bhi.n	80018b0 <main+0xd5c>
							sTime_AL.Minutes += 1;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <main+0xda0>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <main+0xda0>)
 80018ae:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <main+0xdb8>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461d      	mov	r5, r3
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <main+0xda0>)
 80018b8:	466c      	mov	r4, sp
 80018ba:	f103 020c 	add.w	r2, r3, #12
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80018c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c8:	4628      	mov	r0, r5
 80018ca:	f000 faf7 	bl	8001ebc <screen>
 80018ce:	e05a      	b.n	8001986 <main+0xe32>
 80018d0:	20000094 	.word	0x20000094
 80018d4:	20000175 	.word	0x20000175
 80018d8:	08008ec4 	.word	0x08008ec4
 80018dc:	200001e4 	.word	0x200001e4
 80018e0:	20000154 	.word	0x20000154
 80018e4:	20000176 	.word	0x20000176
 80018e8:	20000177 	.word	0x20000177
 80018ec:	08008eac 	.word	0x08008eac
 80018f0:	20000158 	.word	0x20000158
 80018f4:	200001f8 	.word	0x200001f8
 80018f8:	20000000 	.word	0x20000000
 80018fc:	08008df4 	.word	0x08008df4
 8001900:	08008eb8 	.word	0x08008eb8
 8001904:	20000150 	.word	0x20000150
 8001908:	2000018c 	.word	0x2000018c
 800190c:	20000184 	.word	0x20000184
					}

					// 10S switching
					else if (cursor == 9) {
 8001910:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <main+0xfcc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d119      	bne.n	800194c <main+0xdf8>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 50) {
 8001918:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <main+0xfd0>)
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	2b31      	cmp	r3, #49	; 0x31
 800191e:	d805      	bhi.n	800192c <main+0xdd8>
							sTime_AL.Seconds += 10;
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <main+0xfd0>)
 8001922:	789b      	ldrb	r3, [r3, #2]
 8001924:	330a      	adds	r3, #10
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <main+0xfd0>)
 800192a:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 800192c:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <main+0xfcc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461d      	mov	r5, r3
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <main+0xfd0>)
 8001934:	466c      	mov	r4, sp
 8001936:	f103 020c 	add.w	r2, r3, #12
 800193a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800193e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001944:	4628      	mov	r0, r5
 8001946:	f000 fab9 	bl	8001ebc <screen>
 800194a:	e01c      	b.n	8001986 <main+0xe32>
					}
					// 1S switching
					else if (cursor == 10) {
 800194c:	4b74      	ldr	r3, [pc, #464]	; (8001b20 <main+0xfcc>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b0a      	cmp	r3, #10
 8001952:	d118      	bne.n	8001986 <main+0xe32>
						if (0 <= sTime_AL.Seconds && sTime_AL.Seconds < 59) {
 8001954:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <main+0xfd0>)
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	2b3a      	cmp	r3, #58	; 0x3a
 800195a:	d805      	bhi.n	8001968 <main+0xe14>
							sTime_AL.Seconds += 1;
 800195c:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <main+0xfd0>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <main+0xfd0>)
 8001966:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001968:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <main+0xfcc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461d      	mov	r5, r3
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <main+0xfd0>)
 8001970:	466c      	mov	r4, sp
 8001972:	f103 020c 	add.w	r2, r3, #12
 8001976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800197a:	e884 0003 	stmia.w	r4, {r0, r1}
 800197e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001980:	4628      	mov	r0, r5
 8001982:	f000 fa9b 	bl	8001ebc <screen>
					}

					// clear the up flag
					up = 0;
 8001986:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <main+0xfd4>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <main+0xfd8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80f1 	beq.w	8001b78 <main+0x1024>

					//AM or PM switching
					if (cursor == 0) {
 8001996:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <main+0xfcc>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d13c      	bne.n	8001a18 <main+0xec4>
						if (sTime_AL.TimeFormat == 0) {
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <main+0xfd0>)
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <main+0xe86>
							sTime_AL.TimeFormat = 1;
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <main+0xfd0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 0) {
 80019ac:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <main+0xfd0>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <main+0xe66>
								sTime_AL.Hours = 12;
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <main+0xfd0>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <main+0xfcc>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461d      	mov	r5, r3
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <main+0xfd0>)
 80019c2:	466c      	mov	r4, sp
 80019c4:	f103 020c 	add.w	r2, r3, #12
 80019c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80019d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 fa72 	bl	8001ebc <screen>
 80019d8:	e0cb      	b.n	8001b72 <main+0x101e>
						} else if (sTime_AL.TimeFormat == 1) {
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <main+0xfd0>)
 80019dc:	78db      	ldrb	r3, [r3, #3]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80c7 	bne.w	8001b72 <main+0x101e>
							sTime_AL.TimeFormat = 0;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <main+0xfd0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	70da      	strb	r2, [r3, #3]
							if (sTime_AL.Hours == 12) {
 80019ea:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <main+0xfd0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d102      	bne.n	80019f8 <main+0xea4>
								sTime_AL.Hours = 0;
 80019f2:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <main+0xfd0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
							}
							screen(cursor, sTime_AL);
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <main+0xfcc>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461d      	mov	r5, r3
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <main+0xfd0>)
 8001a00:	466c      	mov	r4, sp
 8001a02:	f103 020c 	add.w	r2, r3, #12
 8001a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 fa53 	bl	8001ebc <screen>
 8001a16:	e0ac      	b.n	8001b72 <main+0x101e>
						}
					}

					// 1H switching
					else if (cursor == 4) {
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <main+0xfcc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d119      	bne.n	8001a54 <main+0xf00>
						if (sTime_AL.Hours > 0) {
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <main+0xfd0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <main+0xee0>
							sTime_AL.Hours--;
 8001a28:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <main+0xfd0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <main+0xfd0>)
 8001a32:	701a      	strb	r2, [r3, #0]
						}
						screen(cursor, sTime_AL);
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <main+0xfcc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461d      	mov	r5, r3
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <main+0xfd0>)
 8001a3c:	466c      	mov	r4, sp
 8001a3e:	f103 020c 	add.w	r2, r3, #12
 8001a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a46:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 fa35 	bl	8001ebc <screen>
 8001a52:	e08e      	b.n	8001b72 <main+0x101e>
					}

					// 10M switching
					else if (cursor == 6) {
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <main+0xfcc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d11d      	bne.n	8001a98 <main+0xf44>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 50) {
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <main+0xfd0>)
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <main+0xf24>
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <main+0xfd0>)
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	2b32      	cmp	r3, #50	; 0x32
 8001a6a:	d805      	bhi.n	8001a78 <main+0xf24>
							sTime_AL.Minutes -= 10;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <main+0xfd0>)
 8001a6e:	785b      	ldrb	r3, [r3, #1]
 8001a70:	3b0a      	subs	r3, #10
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <main+0xfd0>)
 8001a76:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <main+0xfcc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <main+0xfd0>)
 8001a80:	466c      	mov	r4, sp
 8001a82:	f103 020c 	add.w	r2, r3, #12
 8001a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a90:	4628      	mov	r0, r5
 8001a92:	f000 fa13 	bl	8001ebc <screen>
 8001a96:	e06c      	b.n	8001b72 <main+0x101e>
					}
					// 1M switching
					else if (cursor == 7) {
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <main+0xfcc>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	d11d      	bne.n	8001adc <main+0xf88>
						if (0 < sTime_AL.Minutes && sTime_AL.Minutes <= 59) {
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <main+0xfd0>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <main+0xf68>
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <main+0xfd0>)
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	d805      	bhi.n	8001abc <main+0xf68>
							sTime_AL.Minutes -= 1;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <main+0xfd0>)
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <main+0xfd0>)
 8001aba:	705a      	strb	r2, [r3, #1]
						}
						screen(cursor, sTime_AL);
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <main+0xfcc>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <main+0xfd0>)
 8001ac4:	466c      	mov	r4, sp
 8001ac6:	f103 020c 	add.w	r2, r3, #12
 8001aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ace:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f000 f9f1 	bl	8001ebc <screen>
 8001ada:	e04a      	b.n	8001b72 <main+0x101e>
					}

					// 10S switching
					else if (cursor == 9) {
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <main+0xfcc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d125      	bne.n	8001b30 <main+0xfdc>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 50) {
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <main+0xfd0>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <main+0xfac>
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <main+0xfd0>)
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	2b32      	cmp	r3, #50	; 0x32
 8001af2:	d805      	bhi.n	8001b00 <main+0xfac>
							sTime_AL.Seconds -= 10;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <main+0xfd0>)
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	3b0a      	subs	r3, #10
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <main+0xfd0>)
 8001afe:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <main+0xfcc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461d      	mov	r5, r3
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <main+0xfd0>)
 8001b08:	466c      	mov	r4, sp
 8001b0a:	f103 020c 	add.w	r2, r3, #12
 8001b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b12:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f000 f9cf 	bl	8001ebc <screen>
 8001b1e:	e028      	b.n	8001b72 <main+0x101e>
 8001b20:	20000184 	.word	0x20000184
 8001b24:	200001f8 	.word	0x200001f8
 8001b28:	2000018c 	.word	0x2000018c
 8001b2c:	2000018d 	.word	0x2000018d
					}
					// 1S switching
					else if (cursor == 10) {
 8001b30:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <main+0x1194>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b0a      	cmp	r3, #10
 8001b36:	d11c      	bne.n	8001b72 <main+0x101e>
						if (0 < sTime_AL.Seconds && sTime_AL.Seconds <= 59) {
 8001b38:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <main+0x1198>)
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <main+0x1000>
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <main+0x1198>)
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	2b3b      	cmp	r3, #59	; 0x3b
 8001b46:	d805      	bhi.n	8001b54 <main+0x1000>
							sTime_AL.Seconds -= 1;
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <main+0x1198>)
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <main+0x1198>)
 8001b52:	709a      	strb	r2, [r3, #2]
						}
						screen(cursor, sTime_AL);
 8001b54:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <main+0x1194>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461d      	mov	r5, r3
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <main+0x1198>)
 8001b5c:	466c      	mov	r4, sp
 8001b5e:	f103 020c 	add.w	r2, r3, #12
 8001b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b66:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f000 f9a5 	bl	8001ebc <screen>
					}

					// clear the down flag
					down = 0;
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <main+0x119c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <main+0x11a0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03e      	beq.n	8001bfe <main+0x10aa>
					if (cursor > 0) {
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <main+0x1194>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d037      	beq.n	8001bf8 <main+0x10a4>
						cursor--;
 8001b88:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <main+0x1194>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <main+0x1194>)
 8001b92:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001b94:	2110      	movs	r1, #16
 8001b96:	204e      	movs	r0, #78	; 0x4e
 8001b98:	f7fe ff50 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <main+0x1194>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d109      	bne.n	8001bb8 <main+0x1064>
							cursor--;
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <main+0x1194>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <main+0x1194>)
 8001bae:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	204e      	movs	r0, #78	; 0x4e
 8001bb4:	f7fe ff42 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <main+0x1194>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d109      	bne.n	8001bd4 <main+0x1080>
							cursor--;
 8001bc0:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <main+0x1194>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <main+0x1194>)
 8001bca:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bcc:	2110      	movs	r1, #16
 8001bce:	204e      	movs	r0, #78	; 0x4e
 8001bd0:	f7fe ff34 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 2) {
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <main+0x1194>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d10d      	bne.n	8001bf8 <main+0x10a4>
							cursor -= 2;
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <main+0x1194>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3b02      	subs	r3, #2
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <main+0x1194>)
 8001be6:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001be8:	2110      	movs	r1, #16
 8001bea:	204e      	movs	r0, #78	; 0x4e
 8001bec:	f7fe ff26 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	204e      	movs	r0, #78	; 0x4e
 8001bf4:	f7fe ff22 	bl	8000a3c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <main+0x11a0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <main+0x11a4>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03e      	beq.n	8001c84 <main+0x1130>

					if (cursor < 10) {
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <main+0x1194>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b09      	cmp	r3, #9
 8001c0c:	d837      	bhi.n	8001c7e <main+0x112a>
						cursor++;
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <main+0x1194>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <main+0x1194>)
 8001c18:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c1a:	2114      	movs	r1, #20
 8001c1c:	204e      	movs	r0, #78	; 0x4e
 8001c1e:	f7fe ff0d 	bl	8000a3c <LCD_SendCommand>

						if (cursor == 8) {
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <main+0x1194>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d109      	bne.n	8001c3e <main+0x10ea>
							cursor++;
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <main+0x1194>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <main+0x1194>)
 8001c34:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c36:	2114      	movs	r1, #20
 8001c38:	204e      	movs	r0, #78	; 0x4e
 8001c3a:	f7fe feff 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <main+0x1194>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d109      	bne.n	8001c5a <main+0x1106>
							cursor++;
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <main+0x1194>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <main+0x1194>)
 8001c50:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c52:	2114      	movs	r1, #20
 8001c54:	204e      	movs	r0, #78	; 0x4e
 8001c56:	f7fe fef1 	bl	8000a3c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <main+0x1194>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <main+0x112a>
							cursor += 2;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <main+0x1194>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3302      	adds	r3, #2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <main+0x1194>)
 8001c6c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c6e:	2114      	movs	r1, #20
 8001c70:	204e      	movs	r0, #78	; 0x4e
 8001c72:	f7fe fee3 	bl	8000a3c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c76:	2114      	movs	r1, #20
 8001c78:	204e      	movs	r0, #78	; 0x4e
 8001c7a:	f7fe fedf 	bl	8000a3c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <main+0x11a4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <main+0x11a8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <main+0x11ac>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f43f acea 	beq.w	8001668 <main+0xb14>

			}
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 8001c94:	e016      	b.n	8001cc4 <main+0x1170>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <main+0x11b0>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <main+0x116a>
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <main+0x11b4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <main+0x116a>
				rising_edge = 0;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <main+0x11b0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <main+0x11b4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <main+0x11ac>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8001cb8:	4814      	ldr	r0, [pc, #80]	; (8001d0c <main+0x11b8>)
 8001cba:	f005 ff03 	bl	8007ac4 <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <main+0x11a8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <main+0x11ac>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d0e4      	beq.n	8001c96 <main+0x1142>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 8001ccc:	2250      	movs	r2, #80	; 0x50
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <main+0x11bc>)
 8001cd2:	f005 fe69 	bl	80079a8 <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <main+0x11c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <main+0x11c4>)
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <main+0x11bc>)
 8001ce0:	f005 fef8 	bl	8007ad4 <siprintf>
	while (1) {
 8001ce4:	f7fe bf83 	b.w	8000bee <main+0x9a>
 8001ce8:	20000184 	.word	0x20000184
 8001cec:	200001f8 	.word	0x200001f8
 8001cf0:	2000018d 	.word	0x2000018d
 8001cf4:	2000018e 	.word	0x2000018e
 8001cf8:	2000018f 	.word	0x2000018f
 8001cfc:	20000150 	.word	0x20000150
 8001d00:	20000177 	.word	0x20000177
 8001d04:	20000175 	.word	0x20000175
 8001d08:	20000176 	.word	0x20000176
 8001d0c:	08008ec8 	.word	0x08008ec8
 8001d10:	2000020c 	.word	0x2000020c
 8001d14:	20000188 	.word	0x20000188
 8001d18:	08008ed4 	.word	0x08008ed4

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2230      	movs	r2, #48	; 0x30
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fe3c 	bl	80079a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <SystemClock_Config+0xdc>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <SystemClock_Config+0xe0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d84:	2310      	movs	r3, #16
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d90:	2308      	movs	r3, #8
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d94:	23b4      	movs	r3, #180	; 0xb4
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fc61 	bl	800466c <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001db0:	f000 fa90 	bl	80022d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001db4:	f002 fc0a 	bl	80045cc <HAL_PWREx_EnableOverDrive>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dbe:	f000 fa89 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	2105      	movs	r1, #5
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 febb 	bl	8004b5c <HAL_RCC_ClockConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001dec:	f000 fa72 	bl	80022d4 <Error_Handler>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3750      	adds	r7, #80	; 0x50
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2027      	movs	r0, #39	; 0x27
 8001e0a:	f001 fb46 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e0e:	2027      	movs	r0, #39	; 0x27
 8001e10:	f001 fb5f 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2028      	movs	r0, #40	; 0x28
 8001e1a:	f001 fb3e 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e1e:	2028      	movs	r0, #40	; 0x28
 8001e20:	f001 fb57 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f001 fb36 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e2e:	201c      	movs	r0, #28
 8001e30:	f001 fb4f 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	201e      	movs	r0, #30
 8001e3a:	f001 fb2e 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e3e:	201e      	movs	r0, #30
 8001e40:	f001 fb47 	bl	80034d2 <HAL_NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b63      	cmp	r3, #99	; 0x63
 8001e54:	d801      	bhi.n	8001e5a <button_status+0x12>
		return UP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e02a      	b.n	8001eb0 <button_status+0x68>
	if (800 < value && value < 900)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e60:	d905      	bls.n	8001e6e <button_status+0x26>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001e68:	d201      	bcs.n	8001e6e <button_status+0x26>
		return DOWN;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e020      	b.n	8001eb0 <button_status+0x68>
	if (1800 < value && value < 2000)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001e74:	d905      	bls.n	8001e82 <button_status+0x3a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e7c:	d201      	bcs.n	8001e82 <button_status+0x3a>
		return LEFT;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e016      	b.n	8001eb0 <button_status+0x68>
	if (2800 < value && value < 3000)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001e88:	d906      	bls.n	8001e98 <button_status+0x50>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d801      	bhi.n	8001e98 <button_status+0x50>
		return RIGHT;
 8001e94:	2305      	movs	r3, #5
 8001e96:	e00b      	b.n	8001eb0 <button_status+0x68>
	if (4000 < value && value < 5000)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e9e:	d906      	bls.n	8001eae <button_status+0x66>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d801      	bhi.n	8001eae <button_status+0x66>
		return SELECT;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <button_status+0x68>

	return NONE;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <screen>:

void screen(int cursor, RTC_TimeTypeDef sTime_screen) {
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	f107 001c 	add.w	r0, r7, #28
 8001eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001ece:	7ffb      	ldrb	r3, [r7, #31]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <screen+0x78>)
 8001eda:	441a      	add	r2, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8001edc:	7f3b      	ldrb	r3, [r7, #28]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001ede:	4618      	mov	r0, r3
			sTime_screen.Hours, sTime_screen.Minutes, sTime_screen.Seconds);
 8001ee0:	7f7b      	ldrb	r3, [r7, #29]
 8001ee2:	7fb9      	ldrb	r1, [r7, #30]
	sprintf(Time_temp, "%s %02d:%02d:%02d", ampm[sTime_screen.TimeFormat],
 8001ee4:	9101      	str	r1, [sp, #4]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4913      	ldr	r1, [pc, #76]	; (8001f38 <screen+0x7c>)
 8001eec:	4813      	ldr	r0, [pc, #76]	; (8001f3c <screen+0x80>)
 8001eee:	f005 fdf1 	bl	8007ad4 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001ef2:	21c0      	movs	r1, #192	; 0xc0
 8001ef4:	204e      	movs	r0, #78	; 0x4e
 8001ef6:	f7fe fda1 	bl	8000a3c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, Time_temp);
 8001efa:	4910      	ldr	r1, [pc, #64]	; (8001f3c <screen+0x80>)
 8001efc:	204e      	movs	r0, #78	; 0x4e
 8001efe:	f7fe fdde 	bl	8000abe <LCD_SendString>
	for (int i = 0; i < 11 - cursor; i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e006      	b.n	8001f16 <screen+0x5a>
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001f08:	2110      	movs	r1, #16
 8001f0a:	204e      	movs	r0, #78	; 0x4e
 8001f0c:	f7fe fd96 	bl	8000a3c <LCD_SendCommand>
	for (int i = 0; i < 11 - cursor; i++) {
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1c3 030b 	rsb	r3, r3, #11
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dbf2      	blt.n	8001f08 <screen+0x4c>
	}
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f2e:	b004      	add	sp, #16
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000
 8001f38:	08008df4 	.word	0x08008df4
 8001f3c:	200001bc 	.word	0x200001bc

08001f40 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4e:	481b      	ldr	r0, [pc, #108]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f50:	f001 fd18 	bl	8003984 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d110      	bne.n	8001f7c <HAL_GPIO_EXTI_Callback+0x3c>
		rising_edge++;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001f64:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001f6e:	f005 fd23 	bl	80079b8 <iprintf>
		start_tick = HAL_GetTick();
 8001f72:	f000 fe03 	bl	8002b7c <HAL_GetTick>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f7a:	6013      	str	r3, [r2, #0]
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8001f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f82:	f001 fcff 	bl	8003984 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d113      	bne.n	8001fb4 <HAL_GPIO_EXTI_Callback+0x74>
		if (rising_edge == 0) {
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <HAL_GPIO_EXTI_Callback+0x5c>
			falling_edge = 0;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e005      	b.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x68>
		} else {
			falling_edge++;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fa6:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001fb0:	f005 fd02 	bl	80079b8 <iprintf>
	}

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	20000175 	.word	0x20000175
 8001fc4:	080094c0 	.word	0x080094c0
 8001fc8:	20000178 	.word	0x20000178
 8001fcc:	20000176 	.word	0x20000176
 8001fd0:	080094d4 	.word	0x080094d4

08001fd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d175      	bne.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0xfe>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001fe6:	4843      	ldr	r0, [pc, #268]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001fe8:	f000 ff41 	bl	8002e6e <HAL_ADC_GetValue>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ff0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8001ff2:	4840      	ldr	r0, [pc, #256]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001ff4:	f000 ff08 	bl	8002e08 <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff23 	bl	8001e48 <button_status>
 8002002:	4603      	mov	r3, r0
 8002004:	2b02      	cmp	r3, #2
 8002006:	d10b      	bne.n	8002020 <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002012:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4839      	ldr	r0, [pc, #228]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800201c:	f005 fccc 	bl	80079b8 <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff0f 	bl	8001e48 <button_status>
 800202a:	4603      	mov	r3, r0
 800202c:	2b03      	cmp	r3, #3
 800202e:	d10b      	bne.n	8002048 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800203a:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4831      	ldr	r0, [pc, #196]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002044:	f005 fcb8 	bl	80079b8 <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fefb 	bl	8001e48 <button_status>
 8002052:	4603      	mov	r3, r0
 8002054:	2b04      	cmp	r3, #4
 8002056:	d10b      	bne.n	8002070 <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002062:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4829      	ldr	r0, [pc, #164]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800206c:	f005 fca4 	bl	80079b8 <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fee7 	bl	8001e48 <button_status>
 800207a:	4603      	mov	r3, r0
 800207c:	2b05      	cmp	r3, #5
 800207e:	d10b      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800208a:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	4821      	ldr	r0, [pc, #132]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002094:	f005 fc90 	bl	80079b8 <iprintf>
		}

		if (apply_flag > 0) {
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_TIM_PeriodElapsedCallback+0xd6>
			get_time_apply++;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020a8:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_PeriodElapsedCallback+0xe8>
			get_time_exit++;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80020ba:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020c4:	6013      	str	r3, [r2, #0]
		printf("%d\r\n", get_time);
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020ce:	f005 fc73 	bl	80079b8 <iprintf>
	}

	if (htim->Instance == TIM4) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d107      	bne.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x118>
		count_bit++;
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020e4:	6013      	str	r3, [r2, #0]
		flag = 1;
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
	}

}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000094 	.word	0x20000094
 80020f8:	20000188 	.word	0x20000188
 80020fc:	2000018c 	.word	0x2000018c
 8002100:	080094e8 	.word	0x080094e8
 8002104:	2000018d 	.word	0x2000018d
 8002108:	080094f4 	.word	0x080094f4
 800210c:	2000018e 	.word	0x2000018e
 8002110:	08009500 	.word	0x08009500
 8002114:	2000018f 	.word	0x2000018f
 8002118:	0800950c 	.word	0x0800950c
 800211c:	20000154 	.word	0x20000154
 8002120:	20000158 	.word	0x20000158
 8002124:	2000015c 	.word	0x2000015c
 8002128:	20000160 	.word	0x20000160
 800212c:	20000150 	.word	0x20000150
 8002130:	08008ed4 	.word	0x08008ed4
 8002134:	40000800 	.word	0x40000800
 8002138:	20000134 	.word	0x20000134
 800213c:	20000138 	.word	0x20000138

08002140 <note>:

void note(char pitch_text, char octave_text, char temp_text, int time, int volume) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	460b      	mov	r3, r1
 800214e:	71bb      	strb	r3, [r7, #6]
 8002150:	4613      	mov	r3, r2
 8002152:	717b      	strb	r3, [r7, #5]

	if (flag == 1) {
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <note+0xc4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d14e      	bne.n	80021fa <note+0xba>
		int pitch = pitch_change(pitch_text);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f854 	bl	800220c <pitch_change>
 8002164:	4603      	mov	r3, r0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
		int octave = octave_change(octave_text);
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f889 	bl	8002282 <octave_change>
 8002170:	4603      	mov	r3, r0
 8002172:	61bb      	str	r3, [r7, #24]
		int temp = temp_change(temp_text);
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f890 	bl	800229c <temp_change>
 800217c:	4603      	mov	r3, r0
 800217e:	617b      	str	r3, [r7, #20]

		uint32_t start_tick = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
		uint32_t cur_tick = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
		uint32_t tick_gap = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]

		// avoid error(ARR == CCR)
		if (volume <= 2) {
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	2b02      	cmp	r3, #2
 8002190:	dc01      	bgt.n	8002196 <note+0x56>
			volume = 2;
 8002192:	2302      	movs	r3, #2
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// setting the octave
		if (octave != 4) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d022      	beq.n	80021e2 <note+0xa2>
			if (octave < 4) {
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	dc0f      	bgt.n	80021c2 <note+0x82>
				for (int i = 0; i < 4 - octave; i++) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	e005      	b.n	80021b4 <note+0x74>
					pitch *= 2;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i < 4 - octave; i++) {
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	3301      	adds	r3, #1
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f1c3 0304 	rsb	r3, r3, #4
 80021ba:	6a3a      	ldr	r2, [r7, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf3      	blt.n	80021a8 <note+0x68>
 80021c0:	e00f      	b.n	80021e2 <note+0xa2>
				}
			} else {
				for (int i = 0; i < octave - 4; i++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e007      	b.n	80021d8 <note+0x98>
					pitch /= 2;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	0fda      	lsrs	r2, r3, #31
 80021cc:	4413      	add	r3, r2
 80021ce:	105b      	asrs	r3, r3, #1
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i < octave - 4; i++) {
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	3b04      	subs	r3, #4
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbf2      	blt.n	80021c8 <note+0x88>
				}
			}
		}

		TIM3->ARR = pitch;
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <note+0xc8>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR3 = pitch / volume;
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <note+0xc8>)
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c

		flag = 0;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <note+0xc4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
	}
}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000138 	.word	0x20000138
 8002208:	40000400 	.word	0x40000400

0800220c <pitch_change>:
uint32_t pitch_change (char pitch_text) {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	if (pitch_text == 'N') {
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b4e      	cmp	r3, #78	; 0x4e
 800221a:	d101      	bne.n	8002220 <pitch_change+0x14>
		return N;
 800221c:	2300      	movs	r3, #0
 800221e:	e02a      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'C') {
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b43      	cmp	r3, #67	; 0x43
 8002224:	d102      	bne.n	800222c <pitch_change+0x20>
		return C;
 8002226:	f642 53f2 	movw	r3, #11762	; 0x2df2
 800222a:	e024      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'D') {
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b44      	cmp	r3, #68	; 0x44
 8002230:	d102      	bne.n	8002238 <pitch_change+0x2c>
		return D;
 8002232:	f642 03e5 	movw	r3, #10469	; 0x28e5
 8002236:	e01e      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'E') {
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2b45      	cmp	r3, #69	; 0x45
 800223c:	d102      	bne.n	8002244 <pitch_change+0x38>
		return E;
 800223e:	f242 4366 	movw	r3, #9318	; 0x2466
 8002242:	e018      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'F') {
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b46      	cmp	r3, #70	; 0x46
 8002248:	d102      	bne.n	8002250 <pitch_change+0x44>
		return F;
 800224a:	f242 2357 	movw	r3, #8791	; 0x2257
 800224e:	e012      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'G') {
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b47      	cmp	r3, #71	; 0x47
 8002254:	d102      	bne.n	800225c <pitch_change+0x50>
		return G;
 8002256:	f641 6391 	movw	r3, #7825	; 0x1e91
 800225a:	e00c      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'A') {
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b41      	cmp	r3, #65	; 0x41
 8002260:	d102      	bne.n	8002268 <pitch_change+0x5c>
		return A;
 8002262:	f641 3336 	movw	r3, #6966	; 0x1b36
 8002266:	e006      	b.n	8002276 <pitch_change+0x6a>
	}
	else if (pitch_text == 'B') {
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b42      	cmp	r3, #66	; 0x42
 800226c:	d102      	bne.n	8002274 <pitch_change+0x68>
		return B;
 800226e:	f641 0338 	movw	r3, #6200	; 0x1838
 8002272:	e000      	b.n	8002276 <pitch_change+0x6a>
	}
	else {
		return N;
 8002274:	2300      	movs	r3, #0
	}
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <octave_change>:
uint32_t octave_change (char octave_text) {
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
	return octave_text - '0';
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	3b30      	subs	r3, #48	; 0x30
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <temp_change>:
uint32_t temp_change (char temp_text) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	if (temp_text == 'N') {
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b4e      	cmp	r3, #78	; 0x4e
 80022aa:	d101      	bne.n	80022b0 <temp_change+0x14>
		return 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e00b      	b.n	80022c8 <temp_change+0x2c>
	}
	else if (temp_text == 'S') {
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b53      	cmp	r3, #83	; 0x53
 80022b4:	d101      	bne.n	80022ba <temp_change+0x1e>
		return 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e006      	b.n	80022c8 <temp_change+0x2c>
	}
	else if (temp_text == 'F') {
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b46      	cmp	r3, #70	; 0x46
 80022be:	d102      	bne.n	80022c6 <temp_change+0x2a>
		return -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e000      	b.n	80022c8 <temp_change+0x2c>
	}
	else {
		return 0;
 80022c6:	2300      	movs	r3, #0
	}
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022dc:	e7fe      	b.n	80022dc <Error_Handler+0x8>
	...

080022e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <MX_RTC_Init+0xb0>)
 80022fa:	4a26      	ldr	r2, [pc, #152]	; (8002394 <MX_RTC_Init+0xb4>)
 80022fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <MX_RTC_Init+0xb0>)
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <MX_RTC_Init+0xb0>)
 8002306:	227f      	movs	r2, #127	; 0x7f
 8002308:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <MX_RTC_Init+0xb0>)
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <MX_RTC_Init+0xb0>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <MX_RTC_Init+0xb0>)
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_RTC_Init+0xb0>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002322:	481b      	ldr	r0, [pc, #108]	; (8002390 <MX_RTC_Init+0xb0>)
 8002324:	f002 ffba 	bl	800529c <HAL_RTC_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800232e:	f7ff ffd1 	bl	80022d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	4619      	mov	r1, r3
 8002350:	480f      	ldr	r0, [pc, #60]	; (8002390 <MX_RTC_Init+0xb0>)
 8002352:	f003 f819 	bl	8005388 <HAL_RTC_SetTime>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800235c:	f7ff ffba 	bl	80022d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002360:	2301      	movs	r3, #1
 8002362:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002364:	2301      	movs	r3, #1
 8002366:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002368:	2301      	movs	r3, #1
 800236a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_RTC_Init+0xb0>)
 8002378:	f003 f8fe 	bl	8005578 <HAL_RTC_SetDate>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002382:	f7ff ffa7 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000025c 	.word	0x2000025c
 8002394:	40002800 	.word	0x40002800

08002398 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2230      	movs	r2, #48	; 0x30
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fafd 	bl	80079a8 <memset>
  if(rtcHandle->Instance==RTC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_RTC_MspInit+0x4c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b8:	2320      	movs	r3, #32
 80023ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fda8 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023d2:	f7ff ff7f 	bl	80022d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RTC_MspInit+0x50>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023dc:	bf00      	nop
 80023de:	3738      	adds	r7, #56	; 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40002800 	.word	0x40002800
 80023e8:	42470e3c 	.word	0x42470e3c

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_MspInit+0x4c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_MspInit+0x4c>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_MspInit+0x4c>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x4c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x4c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x4c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 fb64 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f003 fbe1 	bl	8005c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000280 	.word	0x20000280

080024a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM4_IRQHandler+0x10>)
 80024aa:	f003 fbd7 	bl	8005c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000310 	.word	0x20000310

080024b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <USART3_IRQHandler+0x10>)
 80024be:	f004 fb07 	bl	8006ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000358 	.word	0x20000358

080024cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d4:	f001 fa6e 	bl	80039b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e00a      	b.n	8002504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ee:	f3af 8000 	nop.w
 80024f2:	4601      	mov	r1, r0
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf0      	blt.n	80024ee <_read+0x12>
	}

return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e009      	b.n	800253c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fafd 	bl	8000b30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	dbf1      	blt.n	8002528 <_write+0x12>
	}
	return len;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_close>:

int _close(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002576:	605a      	str	r2, [r3, #4]
	return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_isatty>:

int _isatty(int file)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
	return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f005 f9a6 	bl	8007938 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20030000 	.word	0x20030000
 8002618:	00000400 	.word	0x00000400
 800261c:	2000027c 	.word	0x2000027c
 8002620:	200003b0 	.word	0x200003b0

08002624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	463b      	mov	r3, r7
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MX_TIM2_Init+0x98>)
 800266e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002676:	2210      	movs	r2, #16
 8002678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MX_TIM2_Init+0x98>)
 800267c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_TIM2_Init+0x98>)
 800268a:	2200      	movs	r2, #0
 800268c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002690:	f003 f902 	bl	8005898 <HAL_TIM_Base_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800269a:	f7ff fe1b 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4619      	mov	r1, r3
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <MX_TIM2_Init+0x98>)
 80026ac:	f003 fca0 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026b6:	f7ff fe0d 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c2:	463b      	mov	r3, r7
 80026c4:	4619      	mov	r1, r3
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <MX_TIM2_Init+0x98>)
 80026c8:	f004 f892 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026d2:	f7ff fdff 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000280 	.word	0x20000280

080026e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	f107 0320 	add.w	r3, r7, #32
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002716:	4a2d      	ldr	r2, [pc, #180]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <MX_TIM3_Init+0xe4>)
 800271c:	221d      	movs	r2, #29
 800271e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002722:	2210      	movs	r2, #16
 8002724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6200;
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002728:	f641 0238 	movw	r2, #6200	; 0x1838
 800272c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800273a:	4823      	ldr	r0, [pc, #140]	; (80027c8 <MX_TIM3_Init+0xe4>)
 800273c:	f003 f8ac 	bl	8005898 <HAL_TIM_Base_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002746:	f7ff fdc5 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002754:	4619      	mov	r1, r3
 8002756:	481c      	ldr	r0, [pc, #112]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002758:	f003 fc4a 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002762:	f7ff fdb7 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002766:	4818      	ldr	r0, [pc, #96]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002768:	f003 f956 	bl	8005a18 <HAL_TIM_PWM_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002772:	f7ff fdaf 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002776:	2320      	movs	r3, #32
 8002778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277e:	f107 0320 	add.w	r3, r7, #32
 8002782:	4619      	mov	r1, r3
 8002784:	4810      	ldr	r0, [pc, #64]	; (80027c8 <MX_TIM3_Init+0xe4>)
 8002786:	f004 f833 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002790:	f7ff fda0 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002794:	2360      	movs	r3, #96	; 0x60
 8002796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2208      	movs	r2, #8
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_TIM3_Init+0xe4>)
 80027ac:	f003 fb5e 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80027b6:	f7ff fd8d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <MX_TIM3_Init+0xe4>)
 80027bc:	f000 f8a2 	bl	8002904 <HAL_TIM_MspPostInit>

}
 80027c0:	bf00      	nop
 80027c2:	3738      	adds	r7, #56	; 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200002c8 	.word	0x200002c8
 80027cc:	40000400 	.word	0x40000400

080027d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	463b      	mov	r3, r7
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <MX_TIM4_Init+0x94>)
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <MX_TIM4_Init+0x98>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <MX_TIM4_Init+0x94>)
 80027f4:	2264      	movs	r2, #100	; 0x64
 80027f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_TIM4_Init+0x94>)
 80027fa:	2210      	movs	r2, #16
 80027fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <MX_TIM4_Init+0x94>)
 8002800:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002804:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_TIM4_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_TIM4_Init+0x94>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002812:	4814      	ldr	r0, [pc, #80]	; (8002864 <MX_TIM4_Init+0x94>)
 8002814:	f003 f840 	bl	8005898 <HAL_TIM_Base_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800281e:	f7ff fd59 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4619      	mov	r1, r3
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <MX_TIM4_Init+0x94>)
 8002830:	f003 fbde 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800283a:	f7ff fd4b 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002846:	463b      	mov	r3, r7
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	; (8002864 <MX_TIM4_Init+0x94>)
 800284c:	f003 ffd0 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002856:	f7ff fd3d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000310 	.word	0x20000310
 8002868:	40000800 	.word	0x40000800

0800286c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d10e      	bne.n	800289c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800289a:	e026      	b.n	80028ea <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a16      	ldr	r2, [pc, #88]	; (80028fc <HAL_TIM_Base_MspInit+0x90>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
}
 80028c2:	e012      	b.n	80028ea <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_TIM_Base_MspInit+0x94>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10d      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_TIM_Base_MspInit+0x8c>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800

08002904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_TIM_MspPostInit+0x68>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d11d      	bne.n	8002962 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_TIM_MspPostInit+0x6c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_TIM_MspPostInit+0x6c>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_TIM_MspPostInit+0x6c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002942:	2301      	movs	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_TIM_MspPostInit+0x70>)
 800295e:	f000 fe65 	bl	800362c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40000400 	.word	0x40000400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400

08002978 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <MX_USART3_UART_Init+0x50>)
 8002980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 8002984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 800299e:	220c      	movs	r2, #12
 80029a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART3_UART_Init+0x4c>)
 80029b0:	f003 ffae 	bl	8006910 <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ba:	f7ff fc8b 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000358 	.word	0x20000358
 80029c8:	40004800 	.word	0x40004800

080029cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_UART_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12c      	bne.n	8002a48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_UART_MspInit+0x88>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0x88>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_UART_MspInit+0x8c>)
 8002a44:	f000 fdf2 	bl	800362c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40004800 	.word	0x40004800
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020c00 	.word	0x40020c00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a62:	490e      	ldr	r1, [pc, #56]	; (8002a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a86:	f7ff fdcd 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f004 ff5b 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fe f861 	bl	8000b54 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002aa0:	080095dc 	.word	0x080095dc
  ldr r2, =_sbss
 8002aa4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002aa8:	200003b0 	.word	0x200003b0

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>
	...

08002ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_Init+0x40>)
 8002aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_Init+0x40>)
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_Init+0x40>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f000 fcd3 	bl	8003484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f000 f808 	bl	8002af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae4:	f7ff fc82 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x54>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x58>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fceb 	bl	80034ee <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00e      	b.n	8002b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d80a      	bhi.n	8002b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 fcb3 	bl	800349a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_InitTick+0x5c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	20000010 	.word	0x20000010
 8002b50:	2000000c 	.word	0x2000000c

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010
 8002b78:	2000039c 	.word	0x2000039c

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000039c 	.word	0x2000039c

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000010 	.word	0x20000010

08002bdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e033      	b.n	8002c5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd fd34 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c22:	f023 0302 	bic.w	r3, r3, #2
 8002c26:	f043 0202 	orr.w	r2, r3, #2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa5c 	bl	80030ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4a:	e001      	b.n	8002c50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Start+0x1a>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0b2      	b.n	8002de4 <HAL_ADC_Start+0x180>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d018      	beq.n	8002cc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca4:	4b52      	ldr	r3, [pc, #328]	; (8002df0 <HAL_ADC_Start+0x18c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_ADC_Start+0x190>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9a      	lsrs	r2, r3, #18
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d17a      	bne.n	8002dca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d12:	d106      	bne.n	8002d22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f023 0206 	bic.w	r2, r3, #6
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d20:	e002      	b.n	8002d28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_ADC_Start+0x194>)
 8002d32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d12a      	bne.n	8002da0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <HAL_ADC_Start+0x198>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d015      	beq.n	8002d80 <HAL_ADC_Start+0x11c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <HAL_ADC_Start+0x19c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_Start+0x106>
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_ADC_Start+0x194>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <HAL_ADC_Start+0x1a0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d136      	bne.n	8002de2 <HAL_ADC_Start+0x17e>
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_ADC_Start+0x194>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d130      	bne.n	8002de2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d129      	bne.n	8002de2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	e020      	b.n	8002de2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_ADC_Start+0x198>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d11b      	bne.n	8002de2 <HAL_ADC_Start+0x17e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d114      	bne.n	8002de2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e00b      	b.n	8002de2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0210 	orr.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	20000008 	.word	0x20000008
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012100 	.word	0x40012100
 8002e04:	40012200 	.word	0x40012200

08002e08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Stop+0x16>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e021      	b.n	8002e62 <HAL_ADC_Stop+0x5a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e113      	b.n	80030cc <HAL_ADC_ConfigChannel+0x244>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d925      	bls.n	8002f00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	2207      	movs	r2, #7
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68d9      	ldr	r1, [r3, #12]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	4603      	mov	r3, r0
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4403      	add	r3, r0
 8002ef2:	3b1e      	subs	r3, #30
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	e022      	b.n	8002f46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6919      	ldr	r1, [r3, #16]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	2207      	movs	r2, #7
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	400a      	ands	r2, r1
 8002f22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4403      	add	r3, r0
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d824      	bhi.n	8002f98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b05      	subs	r3, #5
 8002f60:	221f      	movs	r2, #31
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3b05      	subs	r3, #5
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34
 8002f96:	e04c      	b.n	8003032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d824      	bhi.n	8002fea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b23      	subs	r3, #35	; 0x23
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b23      	subs	r3, #35	; 0x23
 8002fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe8:	e023      	b.n	8003032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b41      	subs	r3, #65	; 0x41
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	400a      	ands	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b41      	subs	r3, #65	; 0x41
 8003026:	fa00 f203 	lsl.w	r2, r0, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_ADC_ConfigChannel+0x250>)
 8003034:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x254>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10f      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x1d8>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b12      	cmp	r3, #18
 8003046:	d10b      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_ADC_ConfigChannel+0x254>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d12b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_ADC_ConfigChannel+0x258>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <HAL_ADC_ConfigChannel+0x1f4>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b11      	cmp	r3, #17
 800307a:	d122      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <HAL_ADC_ConfigChannel+0x258>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d111      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_ADC_ConfigChannel+0x260>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9a      	lsrs	r2, r3, #18
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	40012000 	.word	0x40012000
 80030e0:	10000012 	.word	0x10000012
 80030e4:	20000008 	.word	0x20000008
 80030e8:	431bde83 	.word	0x431bde83

080030ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f4:	4b79      	ldr	r3, [pc, #484]	; (80032dc <ADC_Init+0x1f0>)
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <ADC_Init+0x1f4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e00f      	b.n	80031ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0202 	bic.w	r2, r2, #2
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
 8003204:	005a      	lsls	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	035a      	lsls	r2, r3, #13
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e007      	b.n	8003260 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	3b01      	subs	r3, #1
 800327c:	051a      	lsls	r2, r3, #20
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a2:	025a      	lsls	r2, r3, #9
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	029a      	lsls	r2, r3, #10
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012300 	.word	0x40012300
 80032e0:	0f000001 	.word	0x0f000001

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	db0b      	blt.n	8003372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4907      	ldr	r1, [pc, #28]	; (8003380 <__NVIC_EnableIRQ+0x38>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <__NVIC_SetPriority+0x4c>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4908      	ldr	r1, [pc, #32]	; (80033d4 <__NVIC_SetPriority+0x50>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3b04      	subs	r3, #4
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf28      	it	cs
 80033f6:	2304      	movcs	r3, #4
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b03      	subs	r3, #3
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	401a      	ands	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003420:	f04f 31ff 	mov.w	r1, #4294967295
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43d9      	mvns	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4313      	orrs	r3, r2
         );
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003450:	d301      	bcc.n	8003456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003452:	2301      	movs	r3, #1
 8003454:	e00f      	b.n	8003476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <SysTick_Config+0x40>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345e:	210f      	movs	r1, #15
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7ff ff8e 	bl	8003384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <SysTick_Config+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <SysTick_Config+0x40>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff29 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff3e 	bl	800332c <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff8e 	bl	80033d8 <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5d 	bl	8003384 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff31 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa2 	bl	8003440 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff fb32 	bl	8002b7c <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d008      	beq.n	8003538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e052      	b.n	80035de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0216 	bic.w	r2, r2, #22
 8003546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <HAL_DMA_Abort+0x62>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0208 	bic.w	r2, r2, #8
 8003576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003588:	e013      	b.n	80035b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358a:	f7ff faf7 	bl	8002b7c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b05      	cmp	r3, #5
 8003596:	d90c      	bls.n	80035b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2203      	movs	r2, #3
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e015      	b.n	80035de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e4      	bne.n	800358a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	223f      	movs	r2, #63	; 0x3f
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d004      	beq.n	8003604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e00c      	b.n	800361e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2205      	movs	r2, #5
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e177      	b.n	8003938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003648:	2201      	movs	r2, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	f040 8166 	bne.w	8003932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d005      	beq.n	800367e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	2b02      	cmp	r3, #2
 800367c:	d130      	bne.n	80036e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b4:	2201      	movs	r2, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0201 	and.w	r2, r3, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d017      	beq.n	800371c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d123      	bne.n	8003770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80c0 	beq.w	8003932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b66      	ldr	r3, [pc, #408]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ce:	4a61      	ldr	r2, [pc, #388]	; (8003954 <HAL_GPIO_Init+0x328>)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3302      	adds	r3, #2
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_GPIO_Init+0x32c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d037      	beq.n	800386a <HAL_GPIO_Init+0x23e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a57      	ldr	r2, [pc, #348]	; (800395c <HAL_GPIO_Init+0x330>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_GPIO_Init+0x23a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a56      	ldr	r2, [pc, #344]	; (8003960 <HAL_GPIO_Init+0x334>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <HAL_GPIO_Init+0x236>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a55      	ldr	r2, [pc, #340]	; (8003964 <HAL_GPIO_Init+0x338>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d025      	beq.n	800385e <HAL_GPIO_Init+0x232>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a54      	ldr	r2, [pc, #336]	; (8003968 <HAL_GPIO_Init+0x33c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <HAL_GPIO_Init+0x22e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a53      	ldr	r2, [pc, #332]	; (800396c <HAL_GPIO_Init+0x340>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x22a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_GPIO_Init+0x344>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x226>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a51      	ldr	r2, [pc, #324]	; (8003974 <HAL_GPIO_Init+0x348>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x222>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_GPIO_Init+0x34c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x21e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4f      	ldr	r2, [pc, #316]	; (800397c <HAL_GPIO_Init+0x350>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x21a>
 8003842:	2309      	movs	r3, #9
 8003844:	e012      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003846:	230a      	movs	r3, #10
 8003848:	e010      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384a:	2308      	movs	r3, #8
 800384c:	e00e      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384e:	2307      	movs	r3, #7
 8003850:	e00c      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003852:	2306      	movs	r3, #6
 8003854:	e00a      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003856:	2305      	movs	r3, #5
 8003858:	e008      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385a:	2304      	movs	r3, #4
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385e:	2303      	movs	r3, #3
 8003860:	e004      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003862:	2302      	movs	r3, #2
 8003864:	e002      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x240>
 800386a:	2300      	movs	r3, #0
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	4093      	lsls	r3, r2
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387c:	4935      	ldr	r1, [pc, #212]	; (8003954 <HAL_GPIO_Init+0x328>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_GPIO_Init+0x354>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ae:	4a34      	ldr	r2, [pc, #208]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_GPIO_Init+0x354>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_GPIO_Init+0x354>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_GPIO_Init+0x354>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	f67f ae84 	bls.w	8003648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40013800 	.word	0x40013800
 8003958:	40020000 	.word	0x40020000
 800395c:	40020400 	.word	0x40020400
 8003960:	40020800 	.word	0x40020800
 8003964:	40020c00 	.word	0x40020c00
 8003968:	40021000 	.word	0x40021000
 800396c:	40021400 	.word	0x40021400
 8003970:	40021800 	.word	0x40021800
 8003974:	40021c00 	.word	0x40021c00
 8003978:	40022000 	.word	0x40022000
 800397c:	40022400 	.word	0x40022400
 8003980:	40013c00 	.word	0x40013c00

08003984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	e001      	b.n	80039a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fab4 	bl	8001f40 <HAL_GPIO_EXTI_Callback>
  }
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e12b      	b.n	8003c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fc ff0a 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a48:	f001 fa40 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4a81      	ldr	r2, [pc, #516]	; (8003c58 <HAL_I2C_Init+0x274>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d807      	bhi.n	8003a68 <HAL_I2C_Init+0x84>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a80      	ldr	r2, [pc, #512]	; (8003c5c <HAL_I2C_Init+0x278>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	bf94      	ite	ls
 8003a60:	2301      	movls	r3, #1
 8003a62:	2300      	movhi	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e006      	b.n	8003a76 <HAL_I2C_Init+0x92>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a7d      	ldr	r2, [pc, #500]	; (8003c60 <HAL_I2C_Init+0x27c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	bf94      	ite	ls
 8003a70:	2301      	movls	r3, #1
 8003a72:	2300      	movhi	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0e7      	b.n	8003c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a78      	ldr	r2, [pc, #480]	; (8003c64 <HAL_I2C_Init+0x280>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a6a      	ldr	r2, [pc, #424]	; (8003c58 <HAL_I2C_Init+0x274>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d802      	bhi.n	8003ab8 <HAL_I2C_Init+0xd4>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	e009      	b.n	8003acc <HAL_I2C_Init+0xe8>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	4a69      	ldr	r2, [pc, #420]	; (8003c68 <HAL_I2C_Init+0x284>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	3301      	adds	r3, #1
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	495c      	ldr	r1, [pc, #368]	; (8003c58 <HAL_I2C_Init+0x274>)
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	d819      	bhi.n	8003b20 <HAL_I2C_Init+0x13c>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e59      	subs	r1, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afa:	1c59      	adds	r1, r3, #1
 8003afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b00:	400b      	ands	r3, r1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_I2C_Init+0x138>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1e59      	subs	r1, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1a:	e051      	b.n	8003bc0 <HAL_I2C_Init+0x1dc>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	e04f      	b.n	8003bc0 <HAL_I2C_Init+0x1dc>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <HAL_I2C_Init+0x168>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e012      	b.n	8003b72 <HAL_I2C_Init+0x18e>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e58      	subs	r0, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Init+0x196>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e022      	b.n	8003bc0 <HAL_I2C_Init+0x1dc>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10e      	bne.n	8003ba0 <HAL_I2C_Init+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e58      	subs	r0, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	440b      	add	r3, r1
 8003b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	e00f      	b.n	8003bc0 <HAL_I2C_Init+0x1dc>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1e58      	subs	r0, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	0099      	lsls	r1, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6809      	ldr	r1, [r1, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6911      	ldr	r1, [r2, #16]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	000186a0 	.word	0x000186a0
 8003c5c:	001e847f 	.word	0x001e847f
 8003c60:	003d08ff 	.word	0x003d08ff
 8003c64:	431bde83 	.word	0x431bde83
 8003c68:	10624dd3 	.word	0x10624dd3

08003c6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	461a      	mov	r2, r3
 8003c78:	460b      	mov	r3, r1
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7fe ff7c 	bl	8002b7c <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	f040 80e0 	bne.w	8003e54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4970      	ldr	r1, [pc, #448]	; (8003e60 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa92 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0d3      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_I2C_Master_Transmit+0x50>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0cc      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d007      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2221      	movs	r2, #33	; 0x21
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2210      	movs	r2, #16
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	893a      	ldrh	r2, [r7, #8]
 8003d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d24:	8979      	ldrh	r1, [r7, #10]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f9ca 	bl	80040c4 <I2C_MasterRequestWrite>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e08d      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d50:	e066      	b.n	8003e20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb0c 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_I2C_Master_Transmit+0x188>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	6a39      	ldr	r1, [r7, #32]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fafc 	bl	80043f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d107      	bne.n	8003e1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e01a      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d194      	bne.n	8003d52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00100002 	.word	0x00100002
 8003e64:	ffff0000 	.word	0xffff0000

08003e68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7fe fe80 	bl	8002b7c <HAL_GetTick>
 8003e7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 8111 	bne.w	80040b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2319      	movs	r3, #25
 8003e96:	2201      	movs	r2, #1
 8003e98:	4988      	ldr	r1, [pc, #544]	; (80040bc <HAL_I2C_IsDeviceReady+0x254>)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f994 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e104      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2C_IsDeviceReady+0x50>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0fd      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d007      	beq.n	8003ede <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003f00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f952 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f38:	d103      	bne.n	8003f42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b6      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fe fe11 	bl	8002b7c <HAL_GetTick>
 8003f5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f8a:	e025      	b.n	8003fd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fdf6 	bl	8002b7c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <HAL_I2C_IsDeviceReady+0x13a>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	22a0      	movs	r2, #160	; 0xa0
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_I2C_IsDeviceReady+0x188>
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_I2C_IsDeviceReady+0x188>
 8003fea:	7dbb      	ldrb	r3, [r7, #22]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0cd      	beq.n	8003f8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d129      	bne.n	800405a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2319      	movs	r3, #25
 8004032:	2201      	movs	r2, #1
 8004034:	4921      	ldr	r1, [pc, #132]	; (80040bc <HAL_I2C_IsDeviceReady+0x254>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8c6 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e036      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e02c      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004072:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2319      	movs	r3, #25
 800407a:	2201      	movs	r2, #1
 800407c:	490f      	ldr	r1, [pc, #60]	; (80040bc <HAL_I2C_IsDeviceReady+0x254>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8a2 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e012      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	3301      	adds	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	f4ff af32 	bcc.w	8003f02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	00100002 	.word	0x00100002
 80040c0:	ffff0000 	.word	0xffff0000

080040c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d006      	beq.n	80040ee <I2C_MasterRequestWrite+0x2a>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d003      	beq.n	80040ee <I2C_MasterRequestWrite+0x2a>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ec:	d108      	bne.n	8004100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00b      	b.n	8004118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b12      	cmp	r3, #18
 8004106:	d107      	bne.n	8004118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f84f 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d103      	bne.n	8004148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e035      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004154:	d108      	bne.n	8004168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e01b      	b.n	80041a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	11db      	asrs	r3, r3, #7
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f063 030f 	orn	r3, r3, #15
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <I2C_MasterRequestWrite+0xfc>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f875 	bl	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e010      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <I2C_MasterRequestWrite+0x100>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f865 	bl	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	00010008 	.word	0x00010008
 80041c4:	00010002 	.word	0x00010002

080041c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	e025      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d021      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe fccb 	bl	8002b7c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d116      	bne.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e023      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10d      	bne.n	800424c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	e00c      	b.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	43da      	mvns	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0b6      	beq.n	80041da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004284:	e051      	b.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d123      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e046      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d021      	beq.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe fc49 	bl	8002b7c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d116      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0220 	orr.w	r2, r3, #32
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e020      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10c      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e00b      	b.n	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	43da      	mvns	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d18d      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e02d      	b.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f878 	bl	8004478 <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e02d      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d021      	beq.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fbef 	bl	8002b7c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e007      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d1ca      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004402:	e02d      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f837 	bl	8004478 <I2C_IsAcknowledgeFailed>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e02d      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d021      	beq.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe fbae 	bl	8002b7c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d116      	bne.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d1ca      	bne.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d11b      	bne.n	80044c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f043 0204 	orr.w	r2, r3, #4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d129      	bne.n	8004540 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	d12a      	bne.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b29a      	uxth	r2, r3
 8004594:	89fb      	ldrh	r3, [r7, #14]
 8004596:	4313      	orrs	r3, r2
 8004598:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	89fa      	ldrh	r2, [r7, #14]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_PWREx_EnableOverDrive+0x90>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_PWREx_EnableOverDrive+0x90>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_PWREx_EnableOverDrive+0x90>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_PWREx_EnableOverDrive+0x94>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f8:	f7fe fac0 	bl	8002b7c <HAL_GetTick>
 80045fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045fe:	e009      	b.n	8004614 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004600:	f7fe fabc 	bl	8002b7c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800460e:	d901      	bls.n	8004614 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e01f      	b.n	8004654 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_PWREx_EnableOverDrive+0x98>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d1ee      	bne.n	8004600 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004628:	f7fe faa8 	bl	8002b7c <HAL_GetTick>
 800462c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800462e:	e009      	b.n	8004644 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004630:	f7fe faa4 	bl	8002b7c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800463e:	d901      	bls.n	8004644 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e007      	b.n	8004654 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_PWREx_EnableOverDrive+0x98>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004650:	d1ee      	bne.n	8004630 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	420e0040 	.word	0x420e0040
 8004664:	40007000 	.word	0x40007000
 8004668:	420e0044 	.word	0x420e0044

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e267      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	4b88      	ldr	r3, [pc, #544]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b7e      	ldr	r3, [pc, #504]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e242      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b76      	ldr	r3, [pc, #472]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b70      	ldr	r3, [pc, #448]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6c      	ldr	r2, [pc, #432]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b69      	ldr	r3, [pc, #420]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe fa2a 	bl	8002b7c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fe fa26 	bl	8002b7c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e207      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fa16 	bl	8002b7c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe fa12 	bl	8002b7c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f3      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b47      	ldr	r3, [pc, #284]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b44      	ldr	r3, [pc, #272]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c7      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4937      	ldr	r1, [pc, #220]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe f9cb 	bl	8002b7c <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fe f9c7 	bl	8002b7c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a8      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4925      	ldr	r1, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe f9aa 	bl	8002b7c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482c:	f7fe f9a6 	bl	8002b7c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e187      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d036      	beq.n	80048c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe f98a 	bl	8002b7c <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fe f986 	bl	8002b7c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e167      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e01b      	b.n	80048c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fe f973 	bl	8002b7c <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e00e      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489a:	f7fe f96f 	bl	8002b7c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d907      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e150      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470000 	.word	0x42470000
 80048b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ea      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8097 	beq.w	8004a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a7c      	ldr	r2, [pc, #496]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b7a      	ldr	r3, [pc, #488]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b77      	ldr	r3, [pc, #476]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fe f92f 	bl	8002b7c <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fe f92b 	bl	8002b7c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e10c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b6a      	ldr	r3, [pc, #424]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ea>
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	e01c      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a5b      	ldr	r2, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004978:	4b58      	ldr	r3, [pc, #352]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b55      	ldr	r3, [pc, #340]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a54      	ldr	r2, [pc, #336]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fe f8f0 	bl	8002b7c <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fe f8ec 	bl	8002b7c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0cb      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b49      	ldr	r3, [pc, #292]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCC_OscConfig+0x334>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fe f8da 	bl	8002b7c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fe f8d6 	bl	8002b7c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b5      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a1 	beq.w	8004b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d05c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d141      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe f8aa 	bl	8002b7c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe f8a6 	bl	8002b7c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e087      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	491b      	ldr	r1, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fe f87f 	bl	8002b7c <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fe f87b 	bl	8002b7c <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e05c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x416>
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f868 	bl	8002b7c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fe f864 	bl	8002b7c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x444>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e038      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fd ff96 	bl	8002b7c <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fd ff92 	bl	8002b7c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fd fef6 	bl	8002af4 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800951c 	.word	0x0800951c
 8004d20:	20000008 	.word	0x20000008
 8004d24:	2000000c 	.word	0x2000000c

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b090      	sub	sp, #64	; 0x40
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e09b      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d60:	e09b      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d66:	e098      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	627a      	str	r2, [r7, #36]	; 0x24
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d90:	2100      	movs	r1, #0
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d94:	fb03 f201 	mul.w	r2, r3, r1
 8004d98:	2300      	movs	r3, #0
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a43      	ldr	r2, [pc, #268]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004da2:	fba0 1202 	umull	r1, r2, r0, r2
 8004da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da8:	460a      	mov	r2, r1
 8004daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	2200      	movs	r2, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dc2:	f7fb fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dce:	e053      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	4652      	mov	r2, sl
 8004de8:	465b      	mov	r3, fp
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004e02:	eb63 090b 	sbc.w	r9, r3, fp
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	00eb      	lsls	r3, r5, #3
 8004e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e30:	00e2      	lsls	r2, r4, #3
 8004e32:	4614      	mov	r4, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	eb14 030a 	adds.w	r3, r4, sl
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	eb45 030b 	adc.w	r3, r5, fp
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	028b      	lsls	r3, r1, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e58:	4621      	mov	r1, r4
 8004e5a:	028a      	lsls	r2, r1, #10
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	2200      	movs	r2, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6c:	f7fb fa28 	bl	80002c0 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3740      	adds	r7, #64	; 0x40
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	017d7840 	.word	0x017d7840

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000008 	.word	0x20000008

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800952c 	.word	0x0800952c

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef8:	f7ff ffdc 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0b5b      	lsrs	r3, r3, #13
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800952c 	.word	0x0800952c

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d075      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f50:	4b91      	ldr	r3, [pc, #580]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f56:	f7fd fe11 	bl	8002b7c <HAL_GetTick>
 8004f5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f5e:	f7fd fe0d 	bl	8002b7c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e189      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f70:	4b8a      	ldr	r3, [pc, #552]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	019a      	lsls	r2, r3, #6
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	071b      	lsls	r3, r3, #28
 8004f94:	4981      	ldr	r1, [pc, #516]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fa8:	4b7c      	ldr	r3, [pc, #496]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fae:	0f1b      	lsrs	r3, r3, #28
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	019a      	lsls	r2, r3, #6
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	071b      	lsls	r3, r3, #28
 8004fc8:	4974      	ldr	r1, [pc, #464]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fd0:	4b72      	ldr	r3, [pc, #456]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd6:	f023 021f 	bic.w	r2, r3, #31
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	496e      	ldr	r1, [pc, #440]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	019a      	lsls	r2, r3, #6
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4964      	ldr	r1, [pc, #400]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005010:	4b61      	ldr	r3, [pc, #388]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fd fdb1 	bl	8002b7c <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fd fdad 	bl	8002b7c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e129      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	4b5a      	ldr	r3, [pc, #360]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005050:	2b00      	cmp	r3, #0
 8005052:	d079      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005054:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800505a:	f7fd fd8f 	bl	8002b7c <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005062:	f7fd fd8b 	bl	8002b7c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e107      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005074:	4b49      	ldr	r3, [pc, #292]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005080:	d0ef      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800508e:	4b43      	ldr	r3, [pc, #268]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	0f1b      	lsrs	r3, r3, #28
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	019a      	lsls	r2, r3, #6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	431a      	orrs	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	493b      	ldr	r1, [pc, #236]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4934      	ldr	r1, [pc, #208]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	0e1b      	lsrs	r3, r3, #24
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	4927      	ldr	r1, [pc, #156]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005104:	4b25      	ldr	r3, [pc, #148]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	4922      	ldr	r1, [pc, #136]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005120:	f7fd fd2c 	bl	8002b7c <HAL_GetTick>
 8005124:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005128:	f7fd fd28 	bl	8002b7c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0a4      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005146:	d1ef      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 808b 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	4a0f      	ldr	r2, [pc, #60]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005164:	6413      	str	r3, [r2, #64]	; 0x40
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800517e:	f7fd fcfd 	bl	8002b7c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005184:	e010      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005186:	f7fd fcf9 	bl	8002b7c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d909      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e075      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005198:	42470068 	.word	0x42470068
 800519c:	40023800 	.word	0x40023800
 80051a0:	42470070 	.word	0x42470070
 80051a4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051a8:	4b38      	ldr	r3, [pc, #224]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0e8      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051b4:	4b36      	ldr	r3, [pc, #216]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02f      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d028      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d2:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051e2:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d114      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fd fcbf 	bl	8002b7c <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005200:	e00a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005202:	f7fd fcbb 	bl	8002b7c <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e035      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ee      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005230:	d10d      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005246:	4912      	ldr	r1, [pc, #72]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
 800524c:	e005      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005254:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005258:	6093      	str	r3, [r2, #8]
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005268:	4313      	orrs	r3, r2
 800526a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005280:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40007000 	.word	0x40007000
 8005290:	40023800 	.word	0x40023800
 8005294:	42470e40 	.word	0x42470e40
 8005298:	424711e0 	.word	0x424711e0

0800529c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e066      	b.n	8005380 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7f5b      	ldrb	r3, [r3, #29]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd f868 	bl	8002398 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	22ca      	movs	r2, #202	; 0xca
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2253      	movs	r2, #83	; 0x53
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa45 	bl	800576e <RTC_EnterInitMode>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d12c      	bne.n	8005348 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68d2      	ldr	r2, [r2, #12]
 8005328:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6919      	ldr	r1, [r3, #16]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	041a      	lsls	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa4c 	bl	80057dc <RTC_ExitInitMode>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	22ff      	movs	r2, #255	; 0xff
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	7f1b      	ldrb	r3, [r3, #28]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_RTC_SetTime+0x1c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e087      	b.n	80054b4 <HAL_RTC_SetTime+0x12c>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d126      	bne.n	8005404 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fa29 	bl	8005826 <RTC_ByteToBcd2>
 80053d4:	4603      	mov	r3, r0
 80053d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fa22 	bl	8005826 <RTC_ByteToBcd2>
 80053e2:	4603      	mov	r3, r0
 80053e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	789b      	ldrb	r3, [r3, #2]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa1a 	bl	8005826 <RTC_ByteToBcd2>
 80053f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	78db      	ldrb	r3, [r3, #3]
 80053fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e018      	b.n	8005436 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005424:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800542a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	22ca      	movs	r2, #202	; 0xca
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2253      	movs	r2, #83	; 0x53
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f991 	bl	800576e <RTC_EnterInitMode>
 800544c:	4603      	mov	r3, r0
 800544e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d120      	bne.n	8005498 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005460:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005464:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005474:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f9a4 	bl	80057dc <RTC_ExitInitMode>
 8005494:	4603      	mov	r3, r0
 8005496:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]

  return status;
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	0d9b      	lsrs	r3, r3, #22
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11a      	bne.n	800556e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f98f 	bl	8005860 <RTC_Bcd2ToByte>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f986 	bl	8005860 <RTC_Bcd2ToByte>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	789b      	ldrb	r3, [r3, #2]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f97d 	bl	8005860 <RTC_Bcd2ToByte>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	7f1b      	ldrb	r3, [r3, #28]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_RTC_SetDate+0x1c>
 8005590:	2302      	movs	r3, #2
 8005592:	e071      	b.n	8005678 <HAL_RTC_SetDate+0x100>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2202      	movs	r2, #2
 800559e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <HAL_RTC_SetDate+0x4c>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	330a      	adds	r3, #10
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d11c      	bne.n	8005604 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	78db      	ldrb	r3, [r3, #3]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f929 	bl	8005826 <RTC_ByteToBcd2>
 80055d4:	4603      	mov	r3, r0
 80055d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f922 	bl	8005826 <RTC_ByteToBcd2>
 80055e2:	4603      	mov	r3, r0
 80055e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	789b      	ldrb	r3, [r3, #2]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f91a 	bl	8005826 <RTC_ByteToBcd2>
 80055f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e00e      	b.n	8005622 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005610:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005616:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	22ca      	movs	r2, #202	; 0xca
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2253      	movs	r2, #83	; 0x53
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f89b 	bl	800576e <RTC_EnterInitMode>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800564c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005650:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f8c2 	bl	80057dc <RTC_ExitInitMode>
 8005658:	4603      	mov	r3, r0
 800565a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]

  return status;
 8005676:	7cfb      	ldrb	r3, [r7, #19]
}
 8005678:	4618      	mov	r0, r3
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800569e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	0b5b      	lsrs	r3, r3, #13
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11a      	bne.n	8005714 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	78db      	ldrb	r3, [r3, #3]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f8bc 	bl	8005860 <RTC_Bcd2ToByte>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f8b3 	bl	8005860 <RTC_Bcd2ToByte>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	789b      	ldrb	r3, [r3, #2]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f8aa 	bl	8005860 <RTC_Bcd2ToByte>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005738:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800573a:	f7fd fa1f 	bl	8002b7c <HAL_GetTick>
 800573e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005740:	e009      	b.n	8005756 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005742:	f7fd fa1b 	bl	8002b7c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005750:	d901      	bls.n	8005756 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e007      	b.n	8005766 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ee      	beq.n	8005742 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d122      	bne.n	80057d2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800579a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579c:	f7fd f9ee 	bl	8002b7c <HAL_GetTick>
 80057a0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057a2:	e00c      	b.n	80057be <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057a4:	f7fd f9ea 	bl	8002b7c <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057b2:	d904      	bls.n	80057be <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2204      	movs	r2, #4
 80057b8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <RTC_EnterInitMode+0x64>
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d1e8      	bne.n	80057a4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff89 	bl	800571e <HAL_RTC_WaitForSynchro>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2204      	movs	r2, #4
 8005816:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005834:	e005      	b.n	8005842 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	3301      	adds	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	3b0a      	subs	r3, #10
 8005840:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b09      	cmp	r3, #9
 8005846:	d8f6      	bhi.n	8005836 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	b2da      	uxtb	r2, r3
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4313      	orrs	r3, r2
 8005852:	b2db      	uxtb	r3, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	0092      	lsls	r2, r2, #2
 8005878:	4413      	add	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	b2da      	uxtb	r2, r3
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	4413      	add	r3, r2
 800588a:	b2db      	uxtb	r3, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e041      	b.n	800592e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc ffd4 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fc7a 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d001      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e04e      	b.n	80059ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a23      	ldr	r2, [pc, #140]	; (80059fc <HAL_TIM_Base_Start_IT+0xc4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d022      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d01d      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x80>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d111      	bne.n	80059dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d010      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e007      	b.n	80059ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800

08005a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e041      	b.n	8005aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f839 	bl	8005ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f000 fbba 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <HAL_TIM_PWM_Start+0x24>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e022      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d109      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x3e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e015      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d109      	bne.n	8005b24 <HAL_TIM_PWM_Start+0x58>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e008      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07c      	b.n	8005c38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0x82>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4c:	e013      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x92>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b5c:	e00b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6c:	e003      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fe10 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_TIM_PWM_Start+0x174>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIM_PWM_Start+0xcc>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <HAL_TIM_PWM_Start+0x178>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_TIM_PWM_Start+0xd0>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_TIM_PWM_Start+0xd2>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_TIM_PWM_Start+0x174>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d022      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d01d      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_TIM_PWM_Start+0x17c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_TIM_PWM_Start+0x180>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <HAL_TIM_PWM_Start+0x184>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_TIM_PWM_Start+0x178>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_TIM_PWM_Start+0x188>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIM_PWM_Start+0x136>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <HAL_TIM_PWM_Start+0x18c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d111      	bne.n	8005c26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d010      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	e007      	b.n	8005c36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40001800 	.word	0x40001800

08005c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d122      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d11b      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0202 	mvn.w	r2, #2
 8005c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa77 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005ca4:	e005      	b.n	8005cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa69 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa7a 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d122      	bne.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d11b      	bne.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0204 	mvn.w	r2, #4
 8005cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa4d 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005cf8:	e005      	b.n	8005d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa3f 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fa50 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d122      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d11b      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0208 	mvn.w	r2, #8
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa23 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa15 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fa26 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0210 	mvn.w	r2, #16
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9f9 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9eb 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f9fc 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0201 	mvn.w	r2, #1
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fc f8fa 	bl	8001fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d10e      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d107      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fd78 	bl	80068fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d10e      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d107      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9c1 	bl	80061ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d10e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d107      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0220 	mvn.w	r2, #32
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fd42 	bl	80068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0ae      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	f200 809f 	bhi.w	8005fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005fd9 	.word	0x08005fd9
 8005ea8:	08005fd9 	.word	0x08005fd9
 8005eac:	08005fd9 	.word	0x08005fd9
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005fd9 	.word	0x08005fd9
 8005eb8:	08005fd9 	.word	0x08005fd9
 8005ebc:	08005fd9 	.word	0x08005fd9
 8005ec0:	08005f57 	.word	0x08005f57
 8005ec4:	08005fd9 	.word	0x08005fd9
 8005ec8:	08005fd9 	.word	0x08005fd9
 8005ecc:	08005fd9 	.word	0x08005fd9
 8005ed0:	08005f97 	.word	0x08005f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fa18 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
      break;
 8005f12:	e064      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fa68 	bl	80063f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
      break;
 8005f54:	e043      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fabd 	bl	80064dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0204 	bic.w	r2, r2, #4
 8005f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	61da      	str	r2, [r3, #28]
      break;
 8005f94:	e023      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fb11 	bl	80065c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	61da      	str	r2, [r3, #28]
      break;
 8005fd6:	e002      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
      break;
 8005fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIM_ConfigClockSource+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e0b4      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x186>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800602a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006044:	d03e      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	f200 8087 	bhi.w	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	f000 8086 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x172>
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605a:	d87f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b70      	cmp	r3, #112	; 0x70
 800605e:	d01a      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0xa6>
 8006060:	2b70      	cmp	r3, #112	; 0x70
 8006062:	d87b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b60      	cmp	r3, #96	; 0x60
 8006066:	d050      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x11a>
 8006068:	2b60      	cmp	r3, #96	; 0x60
 800606a:	d877      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b50      	cmp	r3, #80	; 0x50
 800606e:	d03c      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0xfa>
 8006070:	2b50      	cmp	r3, #80	; 0x50
 8006072:	d873      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d058      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x13a>
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d86f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d064      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d86b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b20      	cmp	r3, #32
 8006086:	d060      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d867      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05c      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b10      	cmp	r3, #16
 8006092:	d05a      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	e062      	b.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f000 fb5d 	bl	8006764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	609a      	str	r2, [r3, #8]
      break;
 80060c2:	e04f      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f000 fb46 	bl	8006764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e6:	609a      	str	r2, [r3, #8]
      break;
 80060e8:	e03c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 faba 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2150      	movs	r1, #80	; 0x50
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb13 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006108:	e02c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fad9 	bl	80066ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2160      	movs	r1, #96	; 0x60
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb03 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006128:	e01c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fa9a 	bl	8006670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2140      	movs	r1, #64	; 0x40
 8006142:	4618      	mov	r0, r3
 8006144:	f000 faf3 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006148:	e00c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f000 faea 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 800615a:	e003      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
      break;
 8006160:	e000      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a40      	ldr	r2, [pc, #256]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3c      	ldr	r2, [pc, #240]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3a      	ldr	r2, [pc, #232]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d027      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <TIM_Base_SetConfig+0x128>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <TIM_Base_SetConfig+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <TIM_Base_SetConfig+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <TIM_Base_SetConfig+0x134>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a24      	ldr	r2, [pc, #144]	; (8006308 <TIM_Base_SetConfig+0x138>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a23      	ldr	r2, [pc, #140]	; (800630c <TIM_Base_SetConfig+0x13c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40001800 	.word	0x40001800
 8006308:	40001c00 	.word	0x40001c00
 800630c:	40002000 	.word	0x40002000

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <TIM_OC1_SetConfig+0xd8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC1_SetConfig+0x64>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <TIM_OC1_SetConfig+0xdc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d10c      	bne.n	800638e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0308 	bic.w	r3, r3, #8
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <TIM_OC1_SetConfig+0xd8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC1_SetConfig+0x8e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a14      	ldr	r2, [pc, #80]	; (80063ec <TIM_OC1_SetConfig+0xdc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d111      	bne.n	80063c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0210 	bic.w	r2, r3, #16
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <TIM_OC2_SetConfig+0xe4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC2_SetConfig+0x68>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <TIM_OC2_SetConfig+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10d      	bne.n	8006474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <TIM_OC2_SetConfig+0xe4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC2_SetConfig+0x94>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC2_SetConfig+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d113      	bne.n	80064ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a21      	ldr	r2, [pc, #132]	; (80065bc <TIM_OC3_SetConfig+0xe0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC3_SetConfig+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <TIM_OC3_SetConfig+0xe4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10d      	bne.n	800655e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a16      	ldr	r2, [pc, #88]	; (80065bc <TIM_OC3_SetConfig+0xe0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_OC3_SetConfig+0x92>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <TIM_OC3_SetConfig+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d113      	bne.n	8006596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40010400 	.word	0x40010400

080065c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800660e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <TIM_OC4_SetConfig+0xa4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC4_SetConfig+0x68>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a11      	ldr	r2, [pc, #68]	; (800666c <TIM_OC4_SetConfig+0xa8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 030a 	bic.w	r3, r3, #10
 80066ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b087      	sub	sp, #28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0210 	bic.w	r2, r3, #16
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800670a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	f043 0307 	orr.w	r3, r3, #7
 8006750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	021a      	lsls	r2, r3, #8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	431a      	orrs	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	609a      	str	r2, [r3, #8]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2201      	movs	r2, #1
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	401a      	ands	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e05a      	b.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a21      	ldr	r2, [pc, #132]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d01d      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a18      	ldr	r2, [pc, #96]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10c      	bne.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40001800 	.word	0x40001800

080068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e03f      	b.n	80069a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fc f848 	bl	80029cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2224      	movs	r2, #36	; 0x24
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fd7b 	bl	8007450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695a      	ldr	r2, [r3, #20]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b08a      	sub	sp, #40	; 0x28
 80069ae:	af02      	add	r7, sp, #8
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d17c      	bne.n	8006ac4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UART_Transmit+0x2c>
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e075      	b.n	8006ac6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_UART_Transmit+0x3e>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e06e      	b.n	8006ac6 <HAL_UART_Transmit+0x11c>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2221      	movs	r2, #33	; 0x21
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069fe:	f7fc f8bd 	bl	8002b7c <HAL_GetTick>
 8006a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a18:	d108      	bne.n	8006a2c <HAL_UART_Transmit+0x82>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	e003      	b.n	8006a34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a3c:	e02a      	b.n	8006a94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 faf9 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e036      	b.n	8006ac6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3302      	adds	r3, #2
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e007      	b.n	8006a86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	3301      	adds	r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1cf      	bne.n	8006a3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2140      	movs	r1, #64	; 0x40
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fac9 	bl	8007040 <UART_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e006      	b.n	8006ac6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e000      	b.n	8006ac6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ac4:	2302      	movs	r3, #2
  }
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b0ba      	sub	sp, #232	; 0xe8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10f      	bne.n	8006b36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <HAL_UART_IRQHandler+0x66>
 8006b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fbd3 	bl	80072da <UART_Receive_IT>
      return;
 8006b34:	e256      	b.n	8006fe4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80de 	beq.w	8006cfc <HAL_UART_IRQHandler+0x22c>
 8006b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80d1 	beq.w	8006cfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <HAL_UART_IRQHandler+0xae>
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f043 0201 	orr.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xd2>
 8006b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0202 	orr.w	r2, r3, #2
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xf6>
 8006bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f043 0204 	orr.w	r2, r3, #4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d011      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x126>
 8006bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 81ed 	beq.w	8006fda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_UART_IRQHandler+0x14e>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fb5e 	bl	80072da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <HAL_UART_IRQHandler+0x17a>
 8006c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d04f      	beq.n	8006cea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa66 	bl	800711c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d141      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1d9      	bne.n	8006c5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d013      	beq.n	8006cda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	4a7d      	ldr	r2, [pc, #500]	; (8006eac <HAL_UART_IRQHandler+0x3dc>)
 8006cb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fc fc91 	bl	80035e6 <HAL_DMA_Abort_IT>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	e00e      	b.n	8006cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f99a 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	e00a      	b.n	8006cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f996 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	e006      	b.n	8006cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f992 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cf6:	e170      	b.n	8006fda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf8:	bf00      	nop
    return;
 8006cfa:	e16e      	b.n	8006fda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	f040 814a 	bne.w	8006f9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8143 	beq.w	8006f9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 813c 	beq.w	8006f9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d22:	2300      	movs	r3, #0
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60bb      	str	r3, [r7, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	f040 80b4 	bne.w	8006eb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8140 	beq.w	8006fde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d66:	429a      	cmp	r2, r3
 8006d68:	f080 8139 	bcs.w	8006fde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7e:	f000 8088 	beq.w	8006e92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	330c      	adds	r3, #12
 8006d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1d9      	bne.n	8006d82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3314      	adds	r3, #20
 8006dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006df2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e1      	bne.n	8006dce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3314      	adds	r3, #20
 8006e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e3      	bne.n	8006e0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e74:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e3      	bne.n	8006e50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fc fb3a 	bl	8003506 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8c0 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ea8:	e099      	b.n	8006fde <HAL_UART_IRQHandler+0x50e>
 8006eaa:	bf00      	nop
 8006eac:	080071e3 	.word	0x080071e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 808b 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8086 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006efa:	647a      	str	r2, [r7, #68]	; 0x44
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e3      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f32:	633a      	str	r2, [r7, #48]	; 0x30
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e3      	bne.n	8006f0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	617b      	str	r3, [r7, #20]
   return(result);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e3      	bne.n	8006f54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f848 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f98:	e023      	b.n	8006fe2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <HAL_UART_IRQHandler+0x4ea>
 8006fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f929 	bl	800720a <UART_Transmit_IT>
    return;
 8006fb8:	e014      	b.n	8006fe4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x514>
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d008      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f969 	bl	80072aa <UART_EndTransmit_IT>
    return;
 8006fd8:	e004      	b.n	8006fe4 <HAL_UART_IRQHandler+0x514>
    return;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <HAL_UART_IRQHandler+0x514>
      return;
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <HAL_UART_IRQHandler+0x514>
      return;
 8006fe2:	bf00      	nop
  }
}
 8006fe4:	37e8      	adds	r7, #232	; 0xe8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b090      	sub	sp, #64	; 0x40
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007050:	e050      	b.n	80070f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d04c      	beq.n	80070f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800705a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <UART_WaitOnFlagUntilTimeout+0x30>
 8007060:	f7fb fd8c 	bl	8002b7c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800706c:	429a      	cmp	r2, r3
 800706e:	d241      	bcs.n	80070f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007090:	637a      	str	r2, [r7, #52]	; 0x34
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3314      	adds	r3, #20
 80070aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	613b      	str	r3, [r7, #16]
   return(result);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3314      	adds	r3, #20
 80070c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c4:	623a      	str	r2, [r7, #32]
 80070c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	69f9      	ldr	r1, [r7, #28]
 80070ca:	6a3a      	ldr	r2, [r7, #32]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e00f      	b.n	8007114 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf0c      	ite	eq
 8007104:	2301      	moveq	r3, #1
 8007106:	2300      	movne	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	429a      	cmp	r2, r3
 8007110:	d09f      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3740      	adds	r7, #64	; 0x40
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b095      	sub	sp, #84	; 0x54
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800713a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007144:	643a      	str	r2, [r7, #64]	; 0x40
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800714a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	61fb      	str	r3, [r7, #28]
   return(result);
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e5      	bne.n	8007158 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	d119      	bne.n	80071c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b4:	61ba      	str	r2, [r7, #24]
 80071b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e5      	bne.n	8007194 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071d6:	bf00      	nop
 80071d8:	3754      	adds	r7, #84	; 0x54
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff ff09 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b21      	cmp	r3, #33	; 0x21
 800721c:	d13e      	bne.n	800729c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d114      	bne.n	8007252 <UART_Transmit_IT+0x48>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d110      	bne.n	8007252 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007244:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]
 8007250:	e008      	b.n	8007264 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6211      	str	r1, [r2, #32]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29b      	uxth	r3, r3
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4619      	mov	r1, r3
 8007272:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007286:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007296:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e000      	b.n	800729e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fe8e 	bl	8006fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b08c      	sub	sp, #48	; 0x30
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b22      	cmp	r3, #34	; 0x22
 80072ec:	f040 80ab 	bne.w	8007446 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f8:	d117      	bne.n	800732a <UART_Receive_IT+0x50>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d113      	bne.n	800732a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007318:	b29a      	uxth	r2, r3
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	1c9a      	adds	r2, r3, #2
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	629a      	str	r2, [r3, #40]	; 0x28
 8007328:	e026      	b.n	8007378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d007      	beq.n	800734e <UART_Receive_IT+0x74>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <UART_Receive_IT+0x82>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e008      	b.n	800736e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29b      	uxth	r3, r3
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4619      	mov	r1, r3
 8007386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007388:	2b00      	cmp	r3, #0
 800738a:	d15a      	bne.n	8007442 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0220 	bic.w	r2, r2, #32
 800739a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d135      	bne.n	8007438 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	623a      	str	r2, [r7, #32]
 80073f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	69f9      	ldr	r1, [r7, #28]
 80073f8:	6a3a      	ldr	r2, [r7, #32]
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b10      	cmp	r3, #16
 8007412:	d10a      	bne.n	800742a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fdf9 	bl	8007028 <HAL_UARTEx_RxEventCallback>
 8007436:	e002      	b.n	800743e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fde1 	bl	8007000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e002      	b.n	8007448 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e000      	b.n	8007448 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007446:	2302      	movs	r3, #2
  }
}
 8007448:	4618      	mov	r0, r3
 800744a:	3730      	adds	r7, #48	; 0x30
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007454:	b0c0      	sub	sp, #256	; 0x100
 8007456:	af00      	add	r7, sp, #0
 8007458:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	68d9      	ldr	r1, [r3, #12]
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	ea40 0301 	orr.w	r3, r0, r1
 8007478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	431a      	orrs	r2, r3
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074a8:	f021 010c 	bic.w	r1, r1, #12
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074b6:	430b      	orrs	r3, r1
 80074b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ca:	6999      	ldr	r1, [r3, #24]
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	ea40 0301 	orr.w	r3, r0, r1
 80074d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b8f      	ldr	r3, [pc, #572]	; (800771c <UART_SetConfig+0x2cc>)
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d005      	beq.n	80074f0 <UART_SetConfig+0xa0>
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b8d      	ldr	r3, [pc, #564]	; (8007720 <UART_SetConfig+0x2d0>)
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d104      	bne.n	80074fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074f0:	f7fd fd00 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 80074f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074f8:	e003      	b.n	8007502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074fa:	f7fd fce7 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80074fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	f040 810c 	bne.w	8007728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007514:	2200      	movs	r2, #0
 8007516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800751a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800751e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	1891      	adds	r1, r2, r2
 8007528:	65b9      	str	r1, [r7, #88]	; 0x58
 800752a:	415b      	adcs	r3, r3
 800752c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800752e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007532:	4621      	mov	r1, r4
 8007534:	eb12 0801 	adds.w	r8, r2, r1
 8007538:	4629      	mov	r1, r5
 800753a:	eb43 0901 	adc.w	r9, r3, r1
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800754a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800754e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007552:	4690      	mov	r8, r2
 8007554:	4699      	mov	r9, r3
 8007556:	4623      	mov	r3, r4
 8007558:	eb18 0303 	adds.w	r3, r8, r3
 800755c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007560:	462b      	mov	r3, r5
 8007562:	eb49 0303 	adc.w	r3, r9, r3
 8007566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007576:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800757a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800757e:	460b      	mov	r3, r1
 8007580:	18db      	adds	r3, r3, r3
 8007582:	653b      	str	r3, [r7, #80]	; 0x50
 8007584:	4613      	mov	r3, r2
 8007586:	eb42 0303 	adc.w	r3, r2, r3
 800758a:	657b      	str	r3, [r7, #84]	; 0x54
 800758c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007594:	f7f8 fe94 	bl	80002c0 <__aeabi_uldivmod>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4b61      	ldr	r3, [pc, #388]	; (8007724 <UART_SetConfig+0x2d4>)
 800759e:	fba3 2302 	umull	r2, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	011c      	lsls	r4, r3, #4
 80075a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	1891      	adds	r1, r2, r2
 80075be:	64b9      	str	r1, [r7, #72]	; 0x48
 80075c0:	415b      	adcs	r3, r3
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075c8:	4641      	mov	r1, r8
 80075ca:	eb12 0a01 	adds.w	sl, r2, r1
 80075ce:	4649      	mov	r1, r9
 80075d0:	eb43 0b01 	adc.w	fp, r3, r1
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075e8:	4692      	mov	sl, r2
 80075ea:	469b      	mov	fp, r3
 80075ec:	4643      	mov	r3, r8
 80075ee:	eb1a 0303 	adds.w	r3, sl, r3
 80075f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075f6:	464b      	mov	r3, r9
 80075f8:	eb4b 0303 	adc.w	r3, fp, r3
 80075fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800760c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007614:	460b      	mov	r3, r1
 8007616:	18db      	adds	r3, r3, r3
 8007618:	643b      	str	r3, [r7, #64]	; 0x40
 800761a:	4613      	mov	r3, r2
 800761c:	eb42 0303 	adc.w	r3, r2, r3
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
 8007622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800762a:	f7f8 fe49 	bl	80002c0 <__aeabi_uldivmod>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4611      	mov	r1, r2
 8007634:	4b3b      	ldr	r3, [pc, #236]	; (8007724 <UART_SetConfig+0x2d4>)
 8007636:	fba3 2301 	umull	r2, r3, r3, r1
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	2264      	movs	r2, #100	; 0x64
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	1acb      	subs	r3, r1, r3
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800764a:	4b36      	ldr	r3, [pc, #216]	; (8007724 <UART_SetConfig+0x2d4>)
 800764c:	fba3 2302 	umull	r2, r3, r3, r2
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007658:	441c      	add	r4, r3
 800765a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007664:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	1891      	adds	r1, r2, r2
 8007672:	63b9      	str	r1, [r7, #56]	; 0x38
 8007674:	415b      	adcs	r3, r3
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800767c:	4641      	mov	r1, r8
 800767e:	1851      	adds	r1, r2, r1
 8007680:	6339      	str	r1, [r7, #48]	; 0x30
 8007682:	4649      	mov	r1, r9
 8007684:	414b      	adcs	r3, r1
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007694:	4659      	mov	r1, fp
 8007696:	00cb      	lsls	r3, r1, #3
 8007698:	4651      	mov	r1, sl
 800769a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769e:	4651      	mov	r1, sl
 80076a0:	00ca      	lsls	r2, r1, #3
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	4603      	mov	r3, r0
 80076a8:	4642      	mov	r2, r8
 80076aa:	189b      	adds	r3, r3, r2
 80076ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076b0:	464b      	mov	r3, r9
 80076b2:	460a      	mov	r2, r1
 80076b4:	eb42 0303 	adc.w	r3, r2, r3
 80076b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076d0:	460b      	mov	r3, r1
 80076d2:	18db      	adds	r3, r3, r3
 80076d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d6:	4613      	mov	r3, r2
 80076d8:	eb42 0303 	adc.w	r3, r2, r3
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076e6:	f7f8 fdeb 	bl	80002c0 <__aeabi_uldivmod>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <UART_SetConfig+0x2d4>)
 80076f0:	fba3 1302 	umull	r1, r3, r3, r2
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	2164      	movs	r1, #100	; 0x64
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	3332      	adds	r3, #50	; 0x32
 8007702:	4a08      	ldr	r2, [pc, #32]	; (8007724 <UART_SetConfig+0x2d4>)
 8007704:	fba2 2303 	umull	r2, r3, r2, r3
 8007708:	095b      	lsrs	r3, r3, #5
 800770a:	f003 0207 	and.w	r2, r3, #7
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4422      	add	r2, r4
 8007716:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007718:	e105      	b.n	8007926 <UART_SetConfig+0x4d6>
 800771a:	bf00      	nop
 800771c:	40011000 	.word	0x40011000
 8007720:	40011400 	.word	0x40011400
 8007724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800772c:	2200      	movs	r2, #0
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007732:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800773a:	4642      	mov	r2, r8
 800773c:	464b      	mov	r3, r9
 800773e:	1891      	adds	r1, r2, r2
 8007740:	6239      	str	r1, [r7, #32]
 8007742:	415b      	adcs	r3, r3
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800774a:	4641      	mov	r1, r8
 800774c:	1854      	adds	r4, r2, r1
 800774e:	4649      	mov	r1, r9
 8007750:	eb43 0501 	adc.w	r5, r3, r1
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	00eb      	lsls	r3, r5, #3
 800775e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007762:	00e2      	lsls	r2, r4, #3
 8007764:	4614      	mov	r4, r2
 8007766:	461d      	mov	r5, r3
 8007768:	4643      	mov	r3, r8
 800776a:	18e3      	adds	r3, r4, r3
 800776c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007770:	464b      	mov	r3, r9
 8007772:	eb45 0303 	adc.w	r3, r5, r3
 8007776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007796:	4629      	mov	r1, r5
 8007798:	008b      	lsls	r3, r1, #2
 800779a:	4621      	mov	r1, r4
 800779c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a0:	4621      	mov	r1, r4
 80077a2:	008a      	lsls	r2, r1, #2
 80077a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077a8:	f7f8 fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4b60      	ldr	r3, [pc, #384]	; (8007934 <UART_SetConfig+0x4e4>)
 80077b2:	fba3 2302 	umull	r2, r3, r3, r2
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	011c      	lsls	r4, r3, #4
 80077ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	1891      	adds	r1, r2, r2
 80077d2:	61b9      	str	r1, [r7, #24]
 80077d4:	415b      	adcs	r3, r3
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077dc:	4641      	mov	r1, r8
 80077de:	1851      	adds	r1, r2, r1
 80077e0:	6139      	str	r1, [r7, #16]
 80077e2:	4649      	mov	r1, r9
 80077e4:	414b      	adcs	r3, r1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077f4:	4659      	mov	r1, fp
 80077f6:	00cb      	lsls	r3, r1, #3
 80077f8:	4651      	mov	r1, sl
 80077fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077fe:	4651      	mov	r1, sl
 8007800:	00ca      	lsls	r2, r1, #3
 8007802:	4610      	mov	r0, r2
 8007804:	4619      	mov	r1, r3
 8007806:	4603      	mov	r3, r0
 8007808:	4642      	mov	r2, r8
 800780a:	189b      	adds	r3, r3, r2
 800780c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007810:	464b      	mov	r3, r9
 8007812:	460a      	mov	r2, r1
 8007814:	eb42 0303 	adc.w	r3, r2, r3
 8007818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	67bb      	str	r3, [r7, #120]	; 0x78
 8007826:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007834:	4649      	mov	r1, r9
 8007836:	008b      	lsls	r3, r1, #2
 8007838:	4641      	mov	r1, r8
 800783a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800783e:	4641      	mov	r1, r8
 8007840:	008a      	lsls	r2, r1, #2
 8007842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007846:	f7f8 fd3b 	bl	80002c0 <__aeabi_uldivmod>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4b39      	ldr	r3, [pc, #228]	; (8007934 <UART_SetConfig+0x4e4>)
 8007850:	fba3 1302 	umull	r1, r3, r3, r2
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	2164      	movs	r1, #100	; 0x64
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	3332      	adds	r3, #50	; 0x32
 8007862:	4a34      	ldr	r2, [pc, #208]	; (8007934 <UART_SetConfig+0x4e4>)
 8007864:	fba2 2303 	umull	r2, r3, r2, r3
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800786e:	441c      	add	r4, r3
 8007870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007874:	2200      	movs	r2, #0
 8007876:	673b      	str	r3, [r7, #112]	; 0x70
 8007878:	677a      	str	r2, [r7, #116]	; 0x74
 800787a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	1891      	adds	r1, r2, r2
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	415b      	adcs	r3, r3
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800788e:	4641      	mov	r1, r8
 8007890:	1851      	adds	r1, r2, r1
 8007892:	6039      	str	r1, [r7, #0]
 8007894:	4649      	mov	r1, r9
 8007896:	414b      	adcs	r3, r1
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078a6:	4659      	mov	r1, fp
 80078a8:	00cb      	lsls	r3, r1, #3
 80078aa:	4651      	mov	r1, sl
 80078ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078b0:	4651      	mov	r1, sl
 80078b2:	00ca      	lsls	r2, r1, #3
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	4642      	mov	r2, r8
 80078bc:	189b      	adds	r3, r3, r2
 80078be:	66bb      	str	r3, [r7, #104]	; 0x68
 80078c0:	464b      	mov	r3, r9
 80078c2:	460a      	mov	r2, r1
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	663b      	str	r3, [r7, #96]	; 0x60
 80078d4:	667a      	str	r2, [r7, #100]	; 0x64
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078e2:	4649      	mov	r1, r9
 80078e4:	008b      	lsls	r3, r1, #2
 80078e6:	4641      	mov	r1, r8
 80078e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ec:	4641      	mov	r1, r8
 80078ee:	008a      	lsls	r2, r1, #2
 80078f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078f4:	f7f8 fce4 	bl	80002c0 <__aeabi_uldivmod>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <UART_SetConfig+0x4e4>)
 80078fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	2164      	movs	r1, #100	; 0x64
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	3332      	adds	r3, #50	; 0x32
 8007910:	4a08      	ldr	r2, [pc, #32]	; (8007934 <UART_SetConfig+0x4e4>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4422      	add	r2, r4
 8007924:	609a      	str	r2, [r3, #8]
}
 8007926:	bf00      	nop
 8007928:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800792c:	46bd      	mov	sp, r7
 800792e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007932:	bf00      	nop
 8007934:	51eb851f 	.word	0x51eb851f

08007938 <__errno>:
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <__errno+0x8>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000014 	.word	0x20000014

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4d0d      	ldr	r5, [pc, #52]	; (800797c <__libc_init_array+0x38>)
 8007948:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	10a4      	asrs	r4, r4, #2
 800794e:	2600      	movs	r6, #0
 8007950:	42a6      	cmp	r6, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4d0b      	ldr	r5, [pc, #44]	; (8007984 <__libc_init_array+0x40>)
 8007956:	4c0c      	ldr	r4, [pc, #48]	; (8007988 <__libc_init_array+0x44>)
 8007958:	f001 fa00 	bl	8008d5c <_init>
 800795c:	1b64      	subs	r4, r4, r5
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	2600      	movs	r6, #0
 8007962:	42a6      	cmp	r6, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f855 3b04 	ldr.w	r3, [r5], #4
 800796c:	4798      	blx	r3
 800796e:	3601      	adds	r6, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f855 3b04 	ldr.w	r3, [r5], #4
 8007976:	4798      	blx	r3
 8007978:	3601      	adds	r6, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	080095d4 	.word	0x080095d4
 8007980:	080095d4 	.word	0x080095d4
 8007984:	080095d4 	.word	0x080095d4
 8007988:	080095d8 	.word	0x080095d8

0800798c <memcpy>:
 800798c:	440a      	add	r2, r1
 800798e:	4291      	cmp	r1, r2
 8007990:	f100 33ff 	add.w	r3, r0, #4294967295
 8007994:	d100      	bne.n	8007998 <memcpy+0xc>
 8007996:	4770      	bx	lr
 8007998:	b510      	push	{r4, lr}
 800799a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a2:	4291      	cmp	r1, r2
 80079a4:	d1f9      	bne.n	800799a <memcpy+0xe>
 80079a6:	bd10      	pop	{r4, pc}

080079a8 <memset>:
 80079a8:	4402      	add	r2, r0
 80079aa:	4603      	mov	r3, r0
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <memset+0xa>
 80079b0:	4770      	bx	lr
 80079b2:	f803 1b01 	strb.w	r1, [r3], #1
 80079b6:	e7f9      	b.n	80079ac <memset+0x4>

080079b8 <iprintf>:
 80079b8:	b40f      	push	{r0, r1, r2, r3}
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <iprintf+0x2c>)
 80079bc:	b513      	push	{r0, r1, r4, lr}
 80079be:	681c      	ldr	r4, [r3, #0]
 80079c0:	b124      	cbz	r4, 80079cc <iprintf+0x14>
 80079c2:	69a3      	ldr	r3, [r4, #24]
 80079c4:	b913      	cbnz	r3, 80079cc <iprintf+0x14>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fa7e 	bl	8007ec8 <__sinit>
 80079cc:	ab05      	add	r3, sp, #20
 80079ce:	9a04      	ldr	r2, [sp, #16]
 80079d0:	68a1      	ldr	r1, [r4, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fde3 	bl	80085a0 <_vfiprintf_r>
 80079da:	b002      	add	sp, #8
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	b004      	add	sp, #16
 80079e2:	4770      	bx	lr
 80079e4:	20000014 	.word	0x20000014

080079e8 <_puts_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460e      	mov	r6, r1
 80079ec:	4605      	mov	r5, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_puts_r+0x10>
 80079f0:	6983      	ldr	r3, [r0, #24]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_puts_r+0x10>
 80079f4:	f000 fa68 	bl	8007ec8 <__sinit>
 80079f8:	69ab      	ldr	r3, [r5, #24]
 80079fa:	68ac      	ldr	r4, [r5, #8]
 80079fc:	b913      	cbnz	r3, 8007a04 <_puts_r+0x1c>
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fa62 	bl	8007ec8 <__sinit>
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <_puts_r+0xd0>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d120      	bne.n	8007a4c <_puts_r+0x64>
 8007a0a:	686c      	ldr	r4, [r5, #4]
 8007a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d405      	bmi.n	8007a1e <_puts_r+0x36>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d402      	bmi.n	8007a1e <_puts_r+0x36>
 8007a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1a:	f000 faf3 	bl	8008004 <__retarget_lock_acquire_recursive>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	0719      	lsls	r1, r3, #28
 8007a22:	d51d      	bpl.n	8007a60 <_puts_r+0x78>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b1db      	cbz	r3, 8007a60 <_puts_r+0x78>
 8007a28:	3e01      	subs	r6, #1
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a30:	3b01      	subs	r3, #1
 8007a32:	60a3      	str	r3, [r4, #8]
 8007a34:	bb39      	cbnz	r1, 8007a86 <_puts_r+0x9e>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da38      	bge.n	8007aac <_puts_r+0xc4>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	210a      	movs	r1, #10
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f868 	bl	8007b14 <__swbuf_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d011      	beq.n	8007a6c <_puts_r+0x84>
 8007a48:	250a      	movs	r5, #10
 8007a4a:	e011      	b.n	8007a70 <_puts_r+0x88>
 8007a4c:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <_puts_r+0xd4>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_puts_r+0x6e>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7da      	b.n	8007a0c <_puts_r+0x24>
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <_puts_r+0xd8>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7d5      	b.n	8007a0c <_puts_r+0x24>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f8a8 	bl	8007bb8 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0dd      	beq.n	8007a28 <_puts_r+0x40>
 8007a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d405      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f000 fac2 	bl	8008006 <__retarget_lock_release_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da04      	bge.n	8007a94 <_puts_r+0xac>
 8007a8a:	69a2      	ldr	r2, [r4, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	dc06      	bgt.n	8007a9e <_puts_r+0xb6>
 8007a90:	290a      	cmp	r1, #10
 8007a92:	d004      	beq.n	8007a9e <_puts_r+0xb6>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	e7c5      	b.n	8007a2a <_puts_r+0x42>
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f837 	bl	8007b14 <__swbuf_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d1bf      	bne.n	8007a2a <_puts_r+0x42>
 8007aaa:	e7df      	b.n	8007a6c <_puts_r+0x84>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	250a      	movs	r5, #10
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	701d      	strb	r5, [r3, #0]
 8007ab6:	e7db      	b.n	8007a70 <_puts_r+0x88>
 8007ab8:	08009558 	.word	0x08009558
 8007abc:	08009578 	.word	0x08009578
 8007ac0:	08009538 	.word	0x08009538

08007ac4 <puts>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <puts+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f7ff bf8d 	b.w	80079e8 <_puts_r>
 8007ace:	bf00      	nop
 8007ad0:	20000014 	.word	0x20000014

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f000 fc28 	bl	800834c <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000014 	.word	0x20000014
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__swbuf_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	460e      	mov	r6, r1
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	b118      	cbz	r0, 8007b26 <__swbuf_r+0x12>
 8007b1e:	6983      	ldr	r3, [r0, #24]
 8007b20:	b90b      	cbnz	r3, 8007b26 <__swbuf_r+0x12>
 8007b22:	f000 f9d1 	bl	8007ec8 <__sinit>
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <__swbuf_r+0x98>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	d12b      	bne.n	8007b84 <__swbuf_r+0x70>
 8007b2c:	686c      	ldr	r4, [r5, #4]
 8007b2e:	69a3      	ldr	r3, [r4, #24]
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d52f      	bpl.n	8007b98 <__swbuf_r+0x84>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b36b      	cbz	r3, 8007b98 <__swbuf_r+0x84>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1ac0      	subs	r0, r0, r3
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	b2f6      	uxtb	r6, r6
 8007b46:	4283      	cmp	r3, r0
 8007b48:	4637      	mov	r7, r6
 8007b4a:	dc04      	bgt.n	8007b56 <__swbuf_r+0x42>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f926 	bl	8007da0 <_fflush_r>
 8007b54:	bb30      	cbnz	r0, 8007ba4 <__swbuf_r+0x90>
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	701e      	strb	r6, [r3, #0]
 8007b64:	6963      	ldr	r3, [r4, #20]
 8007b66:	3001      	adds	r0, #1
 8007b68:	4283      	cmp	r3, r0
 8007b6a:	d004      	beq.n	8007b76 <__swbuf_r+0x62>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	07db      	lsls	r3, r3, #31
 8007b70:	d506      	bpl.n	8007b80 <__swbuf_r+0x6c>
 8007b72:	2e0a      	cmp	r6, #10
 8007b74:	d104      	bne.n	8007b80 <__swbuf_r+0x6c>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f911 	bl	8007da0 <_fflush_r>
 8007b7e:	b988      	cbnz	r0, 8007ba4 <__swbuf_r+0x90>
 8007b80:	4638      	mov	r0, r7
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <__swbuf_r+0x9c>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d101      	bne.n	8007b8e <__swbuf_r+0x7a>
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	e7cf      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <__swbuf_r+0xa0>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	bf08      	it	eq
 8007b94:	68ec      	ldreq	r4, [r5, #12]
 8007b96:	e7ca      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f80c 	bl	8007bb8 <__swsetup_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d0cb      	beq.n	8007b3c <__swbuf_r+0x28>
 8007ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba8:	e7ea      	b.n	8007b80 <__swbuf_r+0x6c>
 8007baa:	bf00      	nop
 8007bac:	08009558 	.word	0x08009558
 8007bb0:	08009578 	.word	0x08009578
 8007bb4:	08009538 	.word	0x08009538

08007bb8 <__swsetup_r>:
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <__swsetup_r+0xcc>)
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b125      	cbz	r5, 8007bce <__swsetup_r+0x16>
 8007bc4:	69ab      	ldr	r3, [r5, #24]
 8007bc6:	b913      	cbnz	r3, 8007bce <__swsetup_r+0x16>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f97d 	bl	8007ec8 <__sinit>
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <__swsetup_r+0xd0>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	d10f      	bne.n	8007bf4 <__swsetup_r+0x3c>
 8007bd4:	686c      	ldr	r4, [r5, #4]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bdc:	0719      	lsls	r1, r3, #28
 8007bde:	d42c      	bmi.n	8007c3a <__swsetup_r+0x82>
 8007be0:	06dd      	lsls	r5, r3, #27
 8007be2:	d411      	bmi.n	8007c08 <__swsetup_r+0x50>
 8007be4:	2309      	movs	r3, #9
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	e03e      	b.n	8007c72 <__swsetup_r+0xba>
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <__swsetup_r+0xd4>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d101      	bne.n	8007bfe <__swsetup_r+0x46>
 8007bfa:	68ac      	ldr	r4, [r5, #8]
 8007bfc:	e7eb      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007bfe:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <__swsetup_r+0xd8>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	bf08      	it	eq
 8007c04:	68ec      	ldreq	r4, [r5, #12]
 8007c06:	e7e6      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007c08:	0758      	lsls	r0, r3, #29
 8007c0a:	d512      	bpl.n	8007c32 <__swsetup_r+0x7a>
 8007c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0e:	b141      	cbz	r1, 8007c22 <__swsetup_r+0x6a>
 8007c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d002      	beq.n	8007c1e <__swsetup_r+0x66>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f000 fa5b 	bl	80080d4 <_free_r>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6363      	str	r3, [r4, #52]	; 0x34
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0308 	orr.w	r3, r3, #8
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	b94b      	cbnz	r3, 8007c52 <__swsetup_r+0x9a>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c48:	d003      	beq.n	8007c52 <__swsetup_r+0x9a>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 fa01 	bl	8008054 <__smakebuf_r>
 8007c52:	89a0      	ldrh	r0, [r4, #12]
 8007c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c58:	f010 0301 	ands.w	r3, r0, #1
 8007c5c:	d00a      	beq.n	8007c74 <__swsetup_r+0xbc>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	425b      	negs	r3, r3
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	b943      	cbnz	r3, 8007c7e <__swsetup_r+0xc6>
 8007c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c70:	d1ba      	bne.n	8007be8 <__swsetup_r+0x30>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	0781      	lsls	r1, r0, #30
 8007c76:	bf58      	it	pl
 8007c78:	6963      	ldrpl	r3, [r4, #20]
 8007c7a:	60a3      	str	r3, [r4, #8]
 8007c7c:	e7f4      	b.n	8007c68 <__swsetup_r+0xb0>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e7f7      	b.n	8007c72 <__swsetup_r+0xba>
 8007c82:	bf00      	nop
 8007c84:	20000014 	.word	0x20000014
 8007c88:	08009558 	.word	0x08009558
 8007c8c:	08009578 	.word	0x08009578
 8007c90:	08009538 	.word	0x08009538

08007c94 <__sflush_r>:
 8007c94:	898a      	ldrh	r2, [r1, #12]
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	0710      	lsls	r0, r2, #28
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	d458      	bmi.n	8007d54 <__sflush_r+0xc0>
 8007ca2:	684b      	ldr	r3, [r1, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dc05      	bgt.n	8007cb4 <__sflush_r+0x20>
 8007ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dc02      	bgt.n	8007cb4 <__sflush_r+0x20>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	d0f9      	beq.n	8007cae <__sflush_r+0x1a>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc0:	682f      	ldr	r7, [r5, #0]
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	d032      	beq.n	8007d2c <__sflush_r+0x98>
 8007cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	075a      	lsls	r2, r3, #29
 8007ccc:	d505      	bpl.n	8007cda <__sflush_r+0x46>
 8007cce:	6863      	ldr	r3, [r4, #4]
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd4:	b10b      	cbz	r3, 8007cda <__sflush_r+0x46>
 8007cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cd8:	1ac0      	subs	r0, r0, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce0:	6a21      	ldr	r1, [r4, #32]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b0      	blx	r6
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	d106      	bne.n	8007cfa <__sflush_r+0x66>
 8007cec:	6829      	ldr	r1, [r5, #0]
 8007cee:	291d      	cmp	r1, #29
 8007cf0:	d82c      	bhi.n	8007d4c <__sflush_r+0xb8>
 8007cf2:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <__sflush_r+0x108>)
 8007cf4:	40ca      	lsrs	r2, r1
 8007cf6:	07d6      	lsls	r6, r2, #31
 8007cf8:	d528      	bpl.n	8007d4c <__sflush_r+0xb8>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	6062      	str	r2, [r4, #4]
 8007cfe:	04d9      	lsls	r1, r3, #19
 8007d00:	6922      	ldr	r2, [r4, #16]
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	d504      	bpl.n	8007d10 <__sflush_r+0x7c>
 8007d06:	1c42      	adds	r2, r0, #1
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0x7a>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b903      	cbnz	r3, 8007d10 <__sflush_r+0x7c>
 8007d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d12:	602f      	str	r7, [r5, #0]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d0ca      	beq.n	8007cae <__sflush_r+0x1a>
 8007d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d002      	beq.n	8007d26 <__sflush_r+0x92>
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f9d7 	bl	80080d4 <_free_r>
 8007d26:	2000      	movs	r0, #0
 8007d28:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2a:	e7c1      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d2c:	6a21      	ldr	r1, [r4, #32]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b0      	blx	r6
 8007d34:	1c41      	adds	r1, r0, #1
 8007d36:	d1c7      	bne.n	8007cc8 <__sflush_r+0x34>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c4      	beq.n	8007cc8 <__sflush_r+0x34>
 8007d3e:	2b1d      	cmp	r3, #29
 8007d40:	d001      	beq.n	8007d46 <__sflush_r+0xb2>
 8007d42:	2b16      	cmp	r3, #22
 8007d44:	d101      	bne.n	8007d4a <__sflush_r+0xb6>
 8007d46:	602f      	str	r7, [r5, #0]
 8007d48:	e7b1      	b.n	8007cae <__sflush_r+0x1a>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	e7ad      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d54:	690f      	ldr	r7, [r1, #16]
 8007d56:	2f00      	cmp	r7, #0
 8007d58:	d0a9      	beq.n	8007cae <__sflush_r+0x1a>
 8007d5a:	0793      	lsls	r3, r2, #30
 8007d5c:	680e      	ldr	r6, [r1, #0]
 8007d5e:	bf08      	it	eq
 8007d60:	694b      	ldreq	r3, [r1, #20]
 8007d62:	600f      	str	r7, [r1, #0]
 8007d64:	bf18      	it	ne
 8007d66:	2300      	movne	r3, #0
 8007d68:	eba6 0807 	sub.w	r8, r6, r7
 8007d6c:	608b      	str	r3, [r1, #8]
 8007d6e:	f1b8 0f00 	cmp.w	r8, #0
 8007d72:	dd9c      	ble.n	8007cae <__sflush_r+0x1a>
 8007d74:	6a21      	ldr	r1, [r4, #32]
 8007d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d78:	4643      	mov	r3, r8
 8007d7a:	463a      	mov	r2, r7
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b0      	blx	r6
 8007d80:	2800      	cmp	r0, #0
 8007d82:	dc06      	bgt.n	8007d92 <__sflush_r+0xfe>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e78e      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d92:	4407      	add	r7, r0
 8007d94:	eba8 0800 	sub.w	r8, r8, r0
 8007d98:	e7e9      	b.n	8007d6e <__sflush_r+0xda>
 8007d9a:	bf00      	nop
 8007d9c:	20400001 	.word	0x20400001

08007da0 <_fflush_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	4605      	mov	r5, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	b913      	cbnz	r3, 8007db0 <_fflush_r+0x10>
 8007daa:	2500      	movs	r5, #0
 8007dac:	4628      	mov	r0, r5
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	b118      	cbz	r0, 8007dba <_fflush_r+0x1a>
 8007db2:	6983      	ldr	r3, [r0, #24]
 8007db4:	b90b      	cbnz	r3, 8007dba <_fflush_r+0x1a>
 8007db6:	f000 f887 	bl	8007ec8 <__sinit>
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <_fflush_r+0x6c>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d11b      	bne.n	8007df8 <_fflush_r+0x58>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ef      	beq.n	8007daa <_fflush_r+0xa>
 8007dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dcc:	07d0      	lsls	r0, r2, #31
 8007dce:	d404      	bmi.n	8007dda <_fflush_r+0x3a>
 8007dd0:	0599      	lsls	r1, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_fflush_r+0x3a>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd6:	f000 f915 	bl	8008004 <__retarget_lock_acquire_recursive>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7ff ff59 	bl	8007c94 <__sflush_r>
 8007de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de4:	07da      	lsls	r2, r3, #31
 8007de6:	4605      	mov	r5, r0
 8007de8:	d4e0      	bmi.n	8007dac <_fflush_r+0xc>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d4dd      	bmi.n	8007dac <_fflush_r+0xc>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 f908 	bl	8008006 <__retarget_lock_release_recursive>
 8007df6:	e7d9      	b.n	8007dac <_fflush_r+0xc>
 8007df8:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <_fflush_r+0x70>)
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d101      	bne.n	8007e02 <_fflush_r+0x62>
 8007dfe:	68ac      	ldr	r4, [r5, #8]
 8007e00:	e7df      	b.n	8007dc2 <_fflush_r+0x22>
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <_fflush_r+0x74>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	bf08      	it	eq
 8007e08:	68ec      	ldreq	r4, [r5, #12]
 8007e0a:	e7da      	b.n	8007dc2 <_fflush_r+0x22>
 8007e0c:	08009558 	.word	0x08009558
 8007e10:	08009578 	.word	0x08009578
 8007e14:	08009538 	.word	0x08009538

08007e18 <std>:
 8007e18:	2300      	movs	r3, #0
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e26:	6083      	str	r3, [r0, #8]
 8007e28:	8181      	strh	r1, [r0, #12]
 8007e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e2c:	81c2      	strh	r2, [r0, #14]
 8007e2e:	6183      	str	r3, [r0, #24]
 8007e30:	4619      	mov	r1, r3
 8007e32:	2208      	movs	r2, #8
 8007e34:	305c      	adds	r0, #92	; 0x5c
 8007e36:	f7ff fdb7 	bl	80079a8 <memset>
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <std+0x38>)
 8007e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x3c>)
 8007e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x40>)
 8007e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x44>)
 8007e48:	6224      	str	r4, [r4, #32]
 8007e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	bf00      	nop
 8007e50:	08008b49 	.word	0x08008b49
 8007e54:	08008b6b 	.word	0x08008b6b
 8007e58:	08008ba3 	.word	0x08008ba3
 8007e5c:	08008bc7 	.word	0x08008bc7

08007e60 <_cleanup_r>:
 8007e60:	4901      	ldr	r1, [pc, #4]	; (8007e68 <_cleanup_r+0x8>)
 8007e62:	f000 b8af 	b.w	8007fc4 <_fwalk_reent>
 8007e66:	bf00      	nop
 8007e68:	08007da1 	.word	0x08007da1

08007e6c <__sfmoreglue>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	2268      	movs	r2, #104	; 0x68
 8007e70:	1e4d      	subs	r5, r1, #1
 8007e72:	4355      	muls	r5, r2
 8007e74:	460e      	mov	r6, r1
 8007e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e7a:	f000 f997 	bl	80081ac <_malloc_r>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b140      	cbz	r0, 8007e94 <__sfmoreglue+0x28>
 8007e82:	2100      	movs	r1, #0
 8007e84:	e9c0 1600 	strd	r1, r6, [r0]
 8007e88:	300c      	adds	r0, #12
 8007e8a:	60a0      	str	r0, [r4, #8]
 8007e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e90:	f7ff fd8a 	bl	80079a8 <memset>
 8007e94:	4620      	mov	r0, r4
 8007e96:	bd70      	pop	{r4, r5, r6, pc}

08007e98 <__sfp_lock_acquire>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__sfp_lock_acquire+0x8>)
 8007e9a:	f000 b8b3 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	200003a1 	.word	0x200003a1

08007ea4 <__sfp_lock_release>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__sfp_lock_release+0x8>)
 8007ea6:	f000 b8ae 	b.w	8008006 <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	200003a1 	.word	0x200003a1

08007eb0 <__sinit_lock_acquire>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__sinit_lock_acquire+0x8>)
 8007eb2:	f000 b8a7 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	200003a2 	.word	0x200003a2

08007ebc <__sinit_lock_release>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__sinit_lock_release+0x8>)
 8007ebe:	f000 b8a2 	b.w	8008006 <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	200003a2 	.word	0x200003a2

08007ec8 <__sinit>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f7ff fff0 	bl	8007eb0 <__sinit_lock_acquire>
 8007ed0:	69a3      	ldr	r3, [r4, #24]
 8007ed2:	b11b      	cbz	r3, 8007edc <__sinit+0x14>
 8007ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed8:	f7ff bff0 	b.w	8007ebc <__sinit_lock_release>
 8007edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ee2:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <__sinit+0x68>)
 8007ee4:	4a13      	ldr	r2, [pc, #76]	; (8007f34 <__sinit+0x6c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	bf04      	itt	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	61a3      	streq	r3, [r4, #24]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f820 	bl	8007f38 <__sfp>
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 f81c 	bl	8007f38 <__sfp>
 8007f00:	60a0      	str	r0, [r4, #8]
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f818 	bl	8007f38 <__sfp>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	60e0      	str	r0, [r4, #12]
 8007f0c:	2104      	movs	r1, #4
 8007f0e:	6860      	ldr	r0, [r4, #4]
 8007f10:	f7ff ff82 	bl	8007e18 <std>
 8007f14:	68a0      	ldr	r0, [r4, #8]
 8007f16:	2201      	movs	r2, #1
 8007f18:	2109      	movs	r1, #9
 8007f1a:	f7ff ff7d 	bl	8007e18 <std>
 8007f1e:	68e0      	ldr	r0, [r4, #12]
 8007f20:	2202      	movs	r2, #2
 8007f22:	2112      	movs	r1, #18
 8007f24:	f7ff ff78 	bl	8007e18 <std>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	61a3      	str	r3, [r4, #24]
 8007f2c:	e7d2      	b.n	8007ed4 <__sinit+0xc>
 8007f2e:	bf00      	nop
 8007f30:	08009534 	.word	0x08009534
 8007f34:	08007e61 	.word	0x08007e61

08007f38 <__sfp>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	f7ff ffac 	bl	8007e98 <__sfp_lock_acquire>
 8007f40:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <__sfp+0x84>)
 8007f42:	681e      	ldr	r6, [r3, #0]
 8007f44:	69b3      	ldr	r3, [r6, #24]
 8007f46:	b913      	cbnz	r3, 8007f4e <__sfp+0x16>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff ffbd 	bl	8007ec8 <__sinit>
 8007f4e:	3648      	adds	r6, #72	; 0x48
 8007f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	d503      	bpl.n	8007f60 <__sfp+0x28>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	b30b      	cbz	r3, 8007fa0 <__sfp+0x68>
 8007f5c:	6836      	ldr	r6, [r6, #0]
 8007f5e:	e7f7      	b.n	8007f50 <__sfp+0x18>
 8007f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f64:	b9d5      	cbnz	r5, 8007f9c <__sfp+0x64>
 8007f66:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <__sfp+0x88>)
 8007f68:	60e3      	str	r3, [r4, #12]
 8007f6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f70:	f000 f847 	bl	8008002 <__retarget_lock_init_recursive>
 8007f74:	f7ff ff96 	bl	8007ea4 <__sfp_lock_release>
 8007f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f80:	6025      	str	r5, [r4, #0]
 8007f82:	61a5      	str	r5, [r4, #24]
 8007f84:	2208      	movs	r2, #8
 8007f86:	4629      	mov	r1, r5
 8007f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f8c:	f7ff fd0c 	bl	80079a8 <memset>
 8007f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9c:	3468      	adds	r4, #104	; 0x68
 8007f9e:	e7d9      	b.n	8007f54 <__sfp+0x1c>
 8007fa0:	2104      	movs	r1, #4
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7ff ff62 	bl	8007e6c <__sfmoreglue>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	6030      	str	r0, [r6, #0]
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1d5      	bne.n	8007f5c <__sfp+0x24>
 8007fb0:	f7ff ff78 	bl	8007ea4 <__sfp_lock_release>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	e7ee      	b.n	8007f98 <__sfp+0x60>
 8007fba:	bf00      	nop
 8007fbc:	08009534 	.word	0x08009534
 8007fc0:	ffff0001 	.word	0xffff0001

08007fc4 <_fwalk_reent>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4606      	mov	r6, r0
 8007fca:	4688      	mov	r8, r1
 8007fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd0:	2700      	movs	r7, #0
 8007fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fda:	d505      	bpl.n	8007fe8 <_fwalk_reent+0x24>
 8007fdc:	6824      	ldr	r4, [r4, #0]
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	d1f7      	bne.n	8007fd2 <_fwalk_reent+0xe>
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d907      	bls.n	8007ffe <_fwalk_reent+0x3a>
 8007fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	d003      	beq.n	8007ffe <_fwalk_reent+0x3a>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	47c0      	blx	r8
 8007ffc:	4307      	orrs	r7, r0
 8007ffe:	3568      	adds	r5, #104	; 0x68
 8008000:	e7e9      	b.n	8007fd6 <_fwalk_reent+0x12>

08008002 <__retarget_lock_init_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_acquire_recursive>:
 8008004:	4770      	bx	lr

08008006 <__retarget_lock_release_recursive>:
 8008006:	4770      	bx	lr

08008008 <__swhatbuf_r>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	460e      	mov	r6, r1
 800800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008010:	2900      	cmp	r1, #0
 8008012:	b096      	sub	sp, #88	; 0x58
 8008014:	4614      	mov	r4, r2
 8008016:	461d      	mov	r5, r3
 8008018:	da08      	bge.n	800802c <__swhatbuf_r+0x24>
 800801a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	061a      	lsls	r2, r3, #24
 8008024:	d410      	bmi.n	8008048 <__swhatbuf_r+0x40>
 8008026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802a:	e00e      	b.n	800804a <__swhatbuf_r+0x42>
 800802c:	466a      	mov	r2, sp
 800802e:	f000 fdf1 	bl	8008c14 <_fstat_r>
 8008032:	2800      	cmp	r0, #0
 8008034:	dbf1      	blt.n	800801a <__swhatbuf_r+0x12>
 8008036:	9a01      	ldr	r2, [sp, #4]
 8008038:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800803c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008040:	425a      	negs	r2, r3
 8008042:	415a      	adcs	r2, r3
 8008044:	602a      	str	r2, [r5, #0]
 8008046:	e7ee      	b.n	8008026 <__swhatbuf_r+0x1e>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	2000      	movs	r0, #0
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	b016      	add	sp, #88	; 0x58
 8008050:	bd70      	pop	{r4, r5, r6, pc}
	...

08008054 <__smakebuf_r>:
 8008054:	898b      	ldrh	r3, [r1, #12]
 8008056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008058:	079d      	lsls	r5, r3, #30
 800805a:	4606      	mov	r6, r0
 800805c:	460c      	mov	r4, r1
 800805e:	d507      	bpl.n	8008070 <__smakebuf_r+0x1c>
 8008060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	2301      	movs	r3, #1
 800806a:	6163      	str	r3, [r4, #20]
 800806c:	b002      	add	sp, #8
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	ab01      	add	r3, sp, #4
 8008072:	466a      	mov	r2, sp
 8008074:	f7ff ffc8 	bl	8008008 <__swhatbuf_r>
 8008078:	9900      	ldr	r1, [sp, #0]
 800807a:	4605      	mov	r5, r0
 800807c:	4630      	mov	r0, r6
 800807e:	f000 f895 	bl	80081ac <_malloc_r>
 8008082:	b948      	cbnz	r0, 8008098 <__smakebuf_r+0x44>
 8008084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008088:	059a      	lsls	r2, r3, #22
 800808a:	d4ef      	bmi.n	800806c <__smakebuf_r+0x18>
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	f043 0302 	orr.w	r3, r3, #2
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	e7e3      	b.n	8008060 <__smakebuf_r+0xc>
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <__smakebuf_r+0x7c>)
 800809a:	62b3      	str	r3, [r6, #40]	; 0x28
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	6020      	str	r0, [r4, #0]
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	6163      	str	r3, [r4, #20]
 80080aa:	9b01      	ldr	r3, [sp, #4]
 80080ac:	6120      	str	r0, [r4, #16]
 80080ae:	b15b      	cbz	r3, 80080c8 <__smakebuf_r+0x74>
 80080b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 fdbf 	bl	8008c38 <_isatty_r>
 80080ba:	b128      	cbz	r0, 80080c8 <__smakebuf_r+0x74>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	89a0      	ldrh	r0, [r4, #12]
 80080ca:	4305      	orrs	r5, r0
 80080cc:	81a5      	strh	r5, [r4, #12]
 80080ce:	e7cd      	b.n	800806c <__smakebuf_r+0x18>
 80080d0:	08007e61 	.word	0x08007e61

080080d4 <_free_r>:
 80080d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080d6:	2900      	cmp	r1, #0
 80080d8:	d044      	beq.n	8008164 <_free_r+0x90>
 80080da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080de:	9001      	str	r0, [sp, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f1a1 0404 	sub.w	r4, r1, #4
 80080e6:	bfb8      	it	lt
 80080e8:	18e4      	addlt	r4, r4, r3
 80080ea:	f000 fde1 	bl	8008cb0 <__malloc_lock>
 80080ee:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <_free_r+0x94>)
 80080f0:	9801      	ldr	r0, [sp, #4]
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	b933      	cbnz	r3, 8008104 <_free_r+0x30>
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	b003      	add	sp, #12
 80080fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008100:	f000 bddc 	b.w	8008cbc <__malloc_unlock>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d908      	bls.n	800811a <_free_r+0x46>
 8008108:	6825      	ldr	r5, [r4, #0]
 800810a:	1961      	adds	r1, r4, r5
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1949      	addeq	r1, r1, r5
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	e7ed      	b.n	80080f6 <_free_r+0x22>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x50>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x46>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1855      	adds	r5, r2, r1
 8008128:	42a5      	cmp	r5, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x70>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	4421      	add	r1, r4
 8008130:	1854      	adds	r4, r2, r1
 8008132:	42a3      	cmp	r3, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1e0      	bne.n	80080fa <_free_r+0x26>
 8008138:	681c      	ldr	r4, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4421      	add	r1, r4
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	e7da      	b.n	80080fa <_free_r+0x26>
 8008144:	d902      	bls.n	800814c <_free_r+0x78>
 8008146:	230c      	movs	r3, #12
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	e7d6      	b.n	80080fa <_free_r+0x26>
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1961      	adds	r1, r4, r5
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1949      	addeq	r1, r1, r5
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7ca      	b.n	80080fa <_free_r+0x26>
 8008164:	b003      	add	sp, #12
 8008166:	bd30      	pop	{r4, r5, pc}
 8008168:	200003a4 	.word	0x200003a4

0800816c <sbrk_aligned>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4e0e      	ldr	r6, [pc, #56]	; (80081a8 <sbrk_aligned+0x3c>)
 8008170:	460c      	mov	r4, r1
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	4605      	mov	r5, r0
 8008176:	b911      	cbnz	r1, 800817e <sbrk_aligned+0x12>
 8008178:	f000 fcd6 	bl	8008b28 <_sbrk_r>
 800817c:	6030      	str	r0, [r6, #0]
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fcd1 	bl	8008b28 <_sbrk_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d00a      	beq.n	80081a0 <sbrk_aligned+0x34>
 800818a:	1cc4      	adds	r4, r0, #3
 800818c:	f024 0403 	bic.w	r4, r4, #3
 8008190:	42a0      	cmp	r0, r4
 8008192:	d007      	beq.n	80081a4 <sbrk_aligned+0x38>
 8008194:	1a21      	subs	r1, r4, r0
 8008196:	4628      	mov	r0, r5
 8008198:	f000 fcc6 	bl	8008b28 <_sbrk_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d101      	bne.n	80081a4 <sbrk_aligned+0x38>
 80081a0:	f04f 34ff 	mov.w	r4, #4294967295
 80081a4:	4620      	mov	r0, r4
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	200003a8 	.word	0x200003a8

080081ac <_malloc_r>:
 80081ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b0:	1ccd      	adds	r5, r1, #3
 80081b2:	f025 0503 	bic.w	r5, r5, #3
 80081b6:	3508      	adds	r5, #8
 80081b8:	2d0c      	cmp	r5, #12
 80081ba:	bf38      	it	cc
 80081bc:	250c      	movcc	r5, #12
 80081be:	2d00      	cmp	r5, #0
 80081c0:	4607      	mov	r7, r0
 80081c2:	db01      	blt.n	80081c8 <_malloc_r+0x1c>
 80081c4:	42a9      	cmp	r1, r5
 80081c6:	d905      	bls.n	80081d4 <_malloc_r+0x28>
 80081c8:	230c      	movs	r3, #12
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	2600      	movs	r6, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d4:	4e2e      	ldr	r6, [pc, #184]	; (8008290 <_malloc_r+0xe4>)
 80081d6:	f000 fd6b 	bl	8008cb0 <__malloc_lock>
 80081da:	6833      	ldr	r3, [r6, #0]
 80081dc:	461c      	mov	r4, r3
 80081de:	bb34      	cbnz	r4, 800822e <_malloc_r+0x82>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4638      	mov	r0, r7
 80081e4:	f7ff ffc2 	bl	800816c <sbrk_aligned>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	4604      	mov	r4, r0
 80081ec:	d14d      	bne.n	800828a <_malloc_r+0xde>
 80081ee:	6834      	ldr	r4, [r6, #0]
 80081f0:	4626      	mov	r6, r4
 80081f2:	2e00      	cmp	r6, #0
 80081f4:	d140      	bne.n	8008278 <_malloc_r+0xcc>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	4631      	mov	r1, r6
 80081fa:	4638      	mov	r0, r7
 80081fc:	eb04 0803 	add.w	r8, r4, r3
 8008200:	f000 fc92 	bl	8008b28 <_sbrk_r>
 8008204:	4580      	cmp	r8, r0
 8008206:	d13a      	bne.n	800827e <_malloc_r+0xd2>
 8008208:	6821      	ldr	r1, [r4, #0]
 800820a:	3503      	adds	r5, #3
 800820c:	1a6d      	subs	r5, r5, r1
 800820e:	f025 0503 	bic.w	r5, r5, #3
 8008212:	3508      	adds	r5, #8
 8008214:	2d0c      	cmp	r5, #12
 8008216:	bf38      	it	cc
 8008218:	250c      	movcc	r5, #12
 800821a:	4629      	mov	r1, r5
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff ffa5 	bl	800816c <sbrk_aligned>
 8008222:	3001      	adds	r0, #1
 8008224:	d02b      	beq.n	800827e <_malloc_r+0xd2>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	442b      	add	r3, r5
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	e00e      	b.n	800824c <_malloc_r+0xa0>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	1b52      	subs	r2, r2, r5
 8008232:	d41e      	bmi.n	8008272 <_malloc_r+0xc6>
 8008234:	2a0b      	cmp	r2, #11
 8008236:	d916      	bls.n	8008266 <_malloc_r+0xba>
 8008238:	1961      	adds	r1, r4, r5
 800823a:	42a3      	cmp	r3, r4
 800823c:	6025      	str	r5, [r4, #0]
 800823e:	bf18      	it	ne
 8008240:	6059      	strne	r1, [r3, #4]
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	bf08      	it	eq
 8008246:	6031      	streq	r1, [r6, #0]
 8008248:	5162      	str	r2, [r4, r5]
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	4638      	mov	r0, r7
 800824e:	f104 060b 	add.w	r6, r4, #11
 8008252:	f000 fd33 	bl	8008cbc <__malloc_unlock>
 8008256:	f026 0607 	bic.w	r6, r6, #7
 800825a:	1d23      	adds	r3, r4, #4
 800825c:	1af2      	subs	r2, r6, r3
 800825e:	d0b6      	beq.n	80081ce <_malloc_r+0x22>
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	50a3      	str	r3, [r4, r2]
 8008264:	e7b3      	b.n	80081ce <_malloc_r+0x22>
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	42a3      	cmp	r3, r4
 800826a:	bf0c      	ite	eq
 800826c:	6032      	streq	r2, [r6, #0]
 800826e:	605a      	strne	r2, [r3, #4]
 8008270:	e7ec      	b.n	800824c <_malloc_r+0xa0>
 8008272:	4623      	mov	r3, r4
 8008274:	6864      	ldr	r4, [r4, #4]
 8008276:	e7b2      	b.n	80081de <_malloc_r+0x32>
 8008278:	4634      	mov	r4, r6
 800827a:	6876      	ldr	r6, [r6, #4]
 800827c:	e7b9      	b.n	80081f2 <_malloc_r+0x46>
 800827e:	230c      	movs	r3, #12
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4638      	mov	r0, r7
 8008284:	f000 fd1a 	bl	8008cbc <__malloc_unlock>
 8008288:	e7a1      	b.n	80081ce <_malloc_r+0x22>
 800828a:	6025      	str	r5, [r4, #0]
 800828c:	e7de      	b.n	800824c <_malloc_r+0xa0>
 800828e:	bf00      	nop
 8008290:	200003a4 	.word	0x200003a4

08008294 <__ssputs_r>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	688e      	ldr	r6, [r1, #8]
 800829a:	429e      	cmp	r6, r3
 800829c:	4682      	mov	sl, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4690      	mov	r8, r2
 80082a2:	461f      	mov	r7, r3
 80082a4:	d838      	bhi.n	8008318 <__ssputs_r+0x84>
 80082a6:	898a      	ldrh	r2, [r1, #12]
 80082a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082ac:	d032      	beq.n	8008314 <__ssputs_r+0x80>
 80082ae:	6825      	ldr	r5, [r4, #0]
 80082b0:	6909      	ldr	r1, [r1, #16]
 80082b2:	eba5 0901 	sub.w	r9, r5, r1
 80082b6:	6965      	ldr	r5, [r4, #20]
 80082b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082c0:	3301      	adds	r3, #1
 80082c2:	444b      	add	r3, r9
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	429d      	cmp	r5, r3
 80082c8:	bf38      	it	cc
 80082ca:	461d      	movcc	r5, r3
 80082cc:	0553      	lsls	r3, r2, #21
 80082ce:	d531      	bpl.n	8008334 <__ssputs_r+0xa0>
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7ff ff6b 	bl	80081ac <_malloc_r>
 80082d6:	4606      	mov	r6, r0
 80082d8:	b950      	cbnz	r0, 80082f0 <__ssputs_r+0x5c>
 80082da:	230c      	movs	r3, #12
 80082dc:	f8ca 3000 	str.w	r3, [sl]
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	6921      	ldr	r1, [r4, #16]
 80082f2:	464a      	mov	r2, r9
 80082f4:	f7ff fb4a 	bl	800798c <memcpy>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	6126      	str	r6, [r4, #16]
 8008306:	6165      	str	r5, [r4, #20]
 8008308:	444e      	add	r6, r9
 800830a:	eba5 0509 	sub.w	r5, r5, r9
 800830e:	6026      	str	r6, [r4, #0]
 8008310:	60a5      	str	r5, [r4, #8]
 8008312:	463e      	mov	r6, r7
 8008314:	42be      	cmp	r6, r7
 8008316:	d900      	bls.n	800831a <__ssputs_r+0x86>
 8008318:	463e      	mov	r6, r7
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	4632      	mov	r2, r6
 800831e:	4641      	mov	r1, r8
 8008320:	f000 fcac 	bl	8008c7c <memmove>
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	1b9b      	subs	r3, r3, r6
 8008328:	60a3      	str	r3, [r4, #8]
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	4433      	add	r3, r6
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	2000      	movs	r0, #0
 8008332:	e7db      	b.n	80082ec <__ssputs_r+0x58>
 8008334:	462a      	mov	r2, r5
 8008336:	f000 fcc7 	bl	8008cc8 <_realloc_r>
 800833a:	4606      	mov	r6, r0
 800833c:	2800      	cmp	r0, #0
 800833e:	d1e1      	bne.n	8008304 <__ssputs_r+0x70>
 8008340:	6921      	ldr	r1, [r4, #16]
 8008342:	4650      	mov	r0, sl
 8008344:	f7ff fec6 	bl	80080d4 <_free_r>
 8008348:	e7c7      	b.n	80082da <__ssputs_r+0x46>
	...

0800834c <_svfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4698      	mov	r8, r3
 8008352:	898b      	ldrh	r3, [r1, #12]
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	b09d      	sub	sp, #116	; 0x74
 8008358:	4607      	mov	r7, r0
 800835a:	460d      	mov	r5, r1
 800835c:	4614      	mov	r4, r2
 800835e:	d50e      	bpl.n	800837e <_svfiprintf_r+0x32>
 8008360:	690b      	ldr	r3, [r1, #16]
 8008362:	b963      	cbnz	r3, 800837e <_svfiprintf_r+0x32>
 8008364:	2140      	movs	r1, #64	; 0x40
 8008366:	f7ff ff21 	bl	80081ac <_malloc_r>
 800836a:	6028      	str	r0, [r5, #0]
 800836c:	6128      	str	r0, [r5, #16]
 800836e:	b920      	cbnz	r0, 800837a <_svfiprintf_r+0x2e>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	e0d1      	b.n	800851e <_svfiprintf_r+0x1d2>
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	616b      	str	r3, [r5, #20]
 800837e:	2300      	movs	r3, #0
 8008380:	9309      	str	r3, [sp, #36]	; 0x24
 8008382:	2320      	movs	r3, #32
 8008384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008388:	f8cd 800c 	str.w	r8, [sp, #12]
 800838c:	2330      	movs	r3, #48	; 0x30
 800838e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008538 <_svfiprintf_r+0x1ec>
 8008392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008396:	f04f 0901 	mov.w	r9, #1
 800839a:	4623      	mov	r3, r4
 800839c:	469a      	mov	sl, r3
 800839e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a2:	b10a      	cbz	r2, 80083a8 <_svfiprintf_r+0x5c>
 80083a4:	2a25      	cmp	r2, #37	; 0x25
 80083a6:	d1f9      	bne.n	800839c <_svfiprintf_r+0x50>
 80083a8:	ebba 0b04 	subs.w	fp, sl, r4
 80083ac:	d00b      	beq.n	80083c6 <_svfiprintf_r+0x7a>
 80083ae:	465b      	mov	r3, fp
 80083b0:	4622      	mov	r2, r4
 80083b2:	4629      	mov	r1, r5
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff ff6d 	bl	8008294 <__ssputs_r>
 80083ba:	3001      	adds	r0, #1
 80083bc:	f000 80aa 	beq.w	8008514 <_svfiprintf_r+0x1c8>
 80083c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c2:	445a      	add	r2, fp
 80083c4:	9209      	str	r2, [sp, #36]	; 0x24
 80083c6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80a2 	beq.w	8008514 <_svfiprintf_r+0x1c8>
 80083d0:	2300      	movs	r3, #0
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295
 80083d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083da:	f10a 0a01 	add.w	sl, sl, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e6:	931a      	str	r3, [sp, #104]	; 0x68
 80083e8:	4654      	mov	r4, sl
 80083ea:	2205      	movs	r2, #5
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	4851      	ldr	r0, [pc, #324]	; (8008538 <_svfiprintf_r+0x1ec>)
 80083f2:	f7f7 ff15 	bl	8000220 <memchr>
 80083f6:	9a04      	ldr	r2, [sp, #16]
 80083f8:	b9d8      	cbnz	r0, 8008432 <_svfiprintf_r+0xe6>
 80083fa:	06d0      	lsls	r0, r2, #27
 80083fc:	bf44      	itt	mi
 80083fe:	2320      	movmi	r3, #32
 8008400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008404:	0711      	lsls	r1, r2, #28
 8008406:	bf44      	itt	mi
 8008408:	232b      	movmi	r3, #43	; 0x2b
 800840a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840e:	f89a 3000 	ldrb.w	r3, [sl]
 8008412:	2b2a      	cmp	r3, #42	; 0x2a
 8008414:	d015      	beq.n	8008442 <_svfiprintf_r+0xf6>
 8008416:	9a07      	ldr	r2, [sp, #28]
 8008418:	4654      	mov	r4, sl
 800841a:	2000      	movs	r0, #0
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	4621      	mov	r1, r4
 8008422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	2b09      	cmp	r3, #9
 800842a:	d94e      	bls.n	80084ca <_svfiprintf_r+0x17e>
 800842c:	b1b0      	cbz	r0, 800845c <_svfiprintf_r+0x110>
 800842e:	9207      	str	r2, [sp, #28]
 8008430:	e014      	b.n	800845c <_svfiprintf_r+0x110>
 8008432:	eba0 0308 	sub.w	r3, r0, r8
 8008436:	fa09 f303 	lsl.w	r3, r9, r3
 800843a:	4313      	orrs	r3, r2
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	46a2      	mov	sl, r4
 8008440:	e7d2      	b.n	80083e8 <_svfiprintf_r+0x9c>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	1d19      	adds	r1, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9103      	str	r1, [sp, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	bfbb      	ittet	lt
 800844e:	425b      	neglt	r3, r3
 8008450:	f042 0202 	orrlt.w	r2, r2, #2
 8008454:	9307      	strge	r3, [sp, #28]
 8008456:	9307      	strlt	r3, [sp, #28]
 8008458:	bfb8      	it	lt
 800845a:	9204      	strlt	r2, [sp, #16]
 800845c:	7823      	ldrb	r3, [r4, #0]
 800845e:	2b2e      	cmp	r3, #46	; 0x2e
 8008460:	d10c      	bne.n	800847c <_svfiprintf_r+0x130>
 8008462:	7863      	ldrb	r3, [r4, #1]
 8008464:	2b2a      	cmp	r3, #42	; 0x2a
 8008466:	d135      	bne.n	80084d4 <_svfiprintf_r+0x188>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	1d1a      	adds	r2, r3, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	9203      	str	r2, [sp, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	bfb8      	it	lt
 8008474:	f04f 33ff 	movlt.w	r3, #4294967295
 8008478:	3402      	adds	r4, #2
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008548 <_svfiprintf_r+0x1fc>
 8008480:	7821      	ldrb	r1, [r4, #0]
 8008482:	2203      	movs	r2, #3
 8008484:	4650      	mov	r0, sl
 8008486:	f7f7 fecb 	bl	8000220 <memchr>
 800848a:	b140      	cbz	r0, 800849e <_svfiprintf_r+0x152>
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	eba0 000a 	sub.w	r0, r0, sl
 8008492:	fa03 f000 	lsl.w	r0, r3, r0
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	4303      	orrs	r3, r0
 800849a:	3401      	adds	r4, #1
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a2:	4826      	ldr	r0, [pc, #152]	; (800853c <_svfiprintf_r+0x1f0>)
 80084a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084a8:	2206      	movs	r2, #6
 80084aa:	f7f7 feb9 	bl	8000220 <memchr>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d038      	beq.n	8008524 <_svfiprintf_r+0x1d8>
 80084b2:	4b23      	ldr	r3, [pc, #140]	; (8008540 <_svfiprintf_r+0x1f4>)
 80084b4:	bb1b      	cbnz	r3, 80084fe <_svfiprintf_r+0x1b2>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	3307      	adds	r3, #7
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	3308      	adds	r3, #8
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	4433      	add	r3, r6
 80084c6:	9309      	str	r3, [sp, #36]	; 0x24
 80084c8:	e767      	b.n	800839a <_svfiprintf_r+0x4e>
 80084ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ce:	460c      	mov	r4, r1
 80084d0:	2001      	movs	r0, #1
 80084d2:	e7a5      	b.n	8008420 <_svfiprintf_r+0xd4>
 80084d4:	2300      	movs	r3, #0
 80084d6:	3401      	adds	r4, #1
 80084d8:	9305      	str	r3, [sp, #20]
 80084da:	4619      	mov	r1, r3
 80084dc:	f04f 0c0a 	mov.w	ip, #10
 80084e0:	4620      	mov	r0, r4
 80084e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e6:	3a30      	subs	r2, #48	; 0x30
 80084e8:	2a09      	cmp	r2, #9
 80084ea:	d903      	bls.n	80084f4 <_svfiprintf_r+0x1a8>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0c5      	beq.n	800847c <_svfiprintf_r+0x130>
 80084f0:	9105      	str	r1, [sp, #20]
 80084f2:	e7c3      	b.n	800847c <_svfiprintf_r+0x130>
 80084f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f8:	4604      	mov	r4, r0
 80084fa:	2301      	movs	r3, #1
 80084fc:	e7f0      	b.n	80084e0 <_svfiprintf_r+0x194>
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <_svfiprintf_r+0x1f8>)
 8008506:	a904      	add	r1, sp, #16
 8008508:	4638      	mov	r0, r7
 800850a:	f3af 8000 	nop.w
 800850e:	1c42      	adds	r2, r0, #1
 8008510:	4606      	mov	r6, r0
 8008512:	d1d6      	bne.n	80084c2 <_svfiprintf_r+0x176>
 8008514:	89ab      	ldrh	r3, [r5, #12]
 8008516:	065b      	lsls	r3, r3, #25
 8008518:	f53f af2c 	bmi.w	8008374 <_svfiprintf_r+0x28>
 800851c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800851e:	b01d      	add	sp, #116	; 0x74
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	462a      	mov	r2, r5
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <_svfiprintf_r+0x1f8>)
 800852c:	a904      	add	r1, sp, #16
 800852e:	4638      	mov	r0, r7
 8008530:	f000 f9d4 	bl	80088dc <_printf_i>
 8008534:	e7eb      	b.n	800850e <_svfiprintf_r+0x1c2>
 8008536:	bf00      	nop
 8008538:	08009598 	.word	0x08009598
 800853c:	080095a2 	.word	0x080095a2
 8008540:	00000000 	.word	0x00000000
 8008544:	08008295 	.word	0x08008295
 8008548:	0800959e 	.word	0x0800959e

0800854c <__sfputc_r>:
 800854c:	6893      	ldr	r3, [r2, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	b410      	push	{r4}
 8008554:	6093      	str	r3, [r2, #8]
 8008556:	da08      	bge.n	800856a <__sfputc_r+0x1e>
 8008558:	6994      	ldr	r4, [r2, #24]
 800855a:	42a3      	cmp	r3, r4
 800855c:	db01      	blt.n	8008562 <__sfputc_r+0x16>
 800855e:	290a      	cmp	r1, #10
 8008560:	d103      	bne.n	800856a <__sfputc_r+0x1e>
 8008562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008566:	f7ff bad5 	b.w	8007b14 <__swbuf_r>
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	1c58      	adds	r0, r3, #1
 800856e:	6010      	str	r0, [r2, #0]
 8008570:	7019      	strb	r1, [r3, #0]
 8008572:	4608      	mov	r0, r1
 8008574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008578:	4770      	bx	lr

0800857a <__sfputs_r>:
 800857a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857c:	4606      	mov	r6, r0
 800857e:	460f      	mov	r7, r1
 8008580:	4614      	mov	r4, r2
 8008582:	18d5      	adds	r5, r2, r3
 8008584:	42ac      	cmp	r4, r5
 8008586:	d101      	bne.n	800858c <__sfputs_r+0x12>
 8008588:	2000      	movs	r0, #0
 800858a:	e007      	b.n	800859c <__sfputs_r+0x22>
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	463a      	mov	r2, r7
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ffda 	bl	800854c <__sfputc_r>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d1f3      	bne.n	8008584 <__sfputs_r+0xa>
 800859c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085a0 <_vfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	460d      	mov	r5, r1
 80085a6:	b09d      	sub	sp, #116	; 0x74
 80085a8:	4614      	mov	r4, r2
 80085aa:	4698      	mov	r8, r3
 80085ac:	4606      	mov	r6, r0
 80085ae:	b118      	cbz	r0, 80085b8 <_vfiprintf_r+0x18>
 80085b0:	6983      	ldr	r3, [r0, #24]
 80085b2:	b90b      	cbnz	r3, 80085b8 <_vfiprintf_r+0x18>
 80085b4:	f7ff fc88 	bl	8007ec8 <__sinit>
 80085b8:	4b89      	ldr	r3, [pc, #548]	; (80087e0 <_vfiprintf_r+0x240>)
 80085ba:	429d      	cmp	r5, r3
 80085bc:	d11b      	bne.n	80085f6 <_vfiprintf_r+0x56>
 80085be:	6875      	ldr	r5, [r6, #4]
 80085c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	d405      	bmi.n	80085d2 <_vfiprintf_r+0x32>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	059a      	lsls	r2, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_vfiprintf_r+0x32>
 80085cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ce:	f7ff fd19 	bl	8008004 <__retarget_lock_acquire_recursive>
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	d501      	bpl.n	80085dc <_vfiprintf_r+0x3c>
 80085d8:	692b      	ldr	r3, [r5, #16]
 80085da:	b9eb      	cbnz	r3, 8008618 <_vfiprintf_r+0x78>
 80085dc:	4629      	mov	r1, r5
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff faea 	bl	8007bb8 <__swsetup_r>
 80085e4:	b1c0      	cbz	r0, 8008618 <_vfiprintf_r+0x78>
 80085e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e8:	07dc      	lsls	r4, r3, #31
 80085ea:	d50e      	bpl.n	800860a <_vfiprintf_r+0x6a>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	; 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	4b7b      	ldr	r3, [pc, #492]	; (80087e4 <_vfiprintf_r+0x244>)
 80085f8:	429d      	cmp	r5, r3
 80085fa:	d101      	bne.n	8008600 <_vfiprintf_r+0x60>
 80085fc:	68b5      	ldr	r5, [r6, #8]
 80085fe:	e7df      	b.n	80085c0 <_vfiprintf_r+0x20>
 8008600:	4b79      	ldr	r3, [pc, #484]	; (80087e8 <_vfiprintf_r+0x248>)
 8008602:	429d      	cmp	r5, r3
 8008604:	bf08      	it	eq
 8008606:	68f5      	ldreq	r5, [r6, #12]
 8008608:	e7da      	b.n	80085c0 <_vfiprintf_r+0x20>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	0598      	lsls	r0, r3, #22
 800860e:	d4ed      	bmi.n	80085ec <_vfiprintf_r+0x4c>
 8008610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008612:	f7ff fcf8 	bl	8008006 <__retarget_lock_release_recursive>
 8008616:	e7e9      	b.n	80085ec <_vfiprintf_r+0x4c>
 8008618:	2300      	movs	r3, #0
 800861a:	9309      	str	r3, [sp, #36]	; 0x24
 800861c:	2320      	movs	r3, #32
 800861e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008622:	f8cd 800c 	str.w	r8, [sp, #12]
 8008626:	2330      	movs	r3, #48	; 0x30
 8008628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087ec <_vfiprintf_r+0x24c>
 800862c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008630:	f04f 0901 	mov.w	r9, #1
 8008634:	4623      	mov	r3, r4
 8008636:	469a      	mov	sl, r3
 8008638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863c:	b10a      	cbz	r2, 8008642 <_vfiprintf_r+0xa2>
 800863e:	2a25      	cmp	r2, #37	; 0x25
 8008640:	d1f9      	bne.n	8008636 <_vfiprintf_r+0x96>
 8008642:	ebba 0b04 	subs.w	fp, sl, r4
 8008646:	d00b      	beq.n	8008660 <_vfiprintf_r+0xc0>
 8008648:	465b      	mov	r3, fp
 800864a:	4622      	mov	r2, r4
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ff93 	bl	800857a <__sfputs_r>
 8008654:	3001      	adds	r0, #1
 8008656:	f000 80aa 	beq.w	80087ae <_vfiprintf_r+0x20e>
 800865a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865c:	445a      	add	r2, fp
 800865e:	9209      	str	r2, [sp, #36]	; 0x24
 8008660:	f89a 3000 	ldrb.w	r3, [sl]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80a2 	beq.w	80087ae <_vfiprintf_r+0x20e>
 800866a:	2300      	movs	r3, #0
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008674:	f10a 0a01 	add.w	sl, sl, #1
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008680:	931a      	str	r3, [sp, #104]	; 0x68
 8008682:	4654      	mov	r4, sl
 8008684:	2205      	movs	r2, #5
 8008686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868a:	4858      	ldr	r0, [pc, #352]	; (80087ec <_vfiprintf_r+0x24c>)
 800868c:	f7f7 fdc8 	bl	8000220 <memchr>
 8008690:	9a04      	ldr	r2, [sp, #16]
 8008692:	b9d8      	cbnz	r0, 80086cc <_vfiprintf_r+0x12c>
 8008694:	06d1      	lsls	r1, r2, #27
 8008696:	bf44      	itt	mi
 8008698:	2320      	movmi	r3, #32
 800869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869e:	0713      	lsls	r3, r2, #28
 80086a0:	bf44      	itt	mi
 80086a2:	232b      	movmi	r3, #43	; 0x2b
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a8:	f89a 3000 	ldrb.w	r3, [sl]
 80086ac:	2b2a      	cmp	r3, #42	; 0x2a
 80086ae:	d015      	beq.n	80086dc <_vfiprintf_r+0x13c>
 80086b0:	9a07      	ldr	r2, [sp, #28]
 80086b2:	4654      	mov	r4, sl
 80086b4:	2000      	movs	r0, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c0:	3b30      	subs	r3, #48	; 0x30
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	d94e      	bls.n	8008764 <_vfiprintf_r+0x1c4>
 80086c6:	b1b0      	cbz	r0, 80086f6 <_vfiprintf_r+0x156>
 80086c8:	9207      	str	r2, [sp, #28]
 80086ca:	e014      	b.n	80086f6 <_vfiprintf_r+0x156>
 80086cc:	eba0 0308 	sub.w	r3, r0, r8
 80086d0:	fa09 f303 	lsl.w	r3, r9, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	46a2      	mov	sl, r4
 80086da:	e7d2      	b.n	8008682 <_vfiprintf_r+0xe2>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1d19      	adds	r1, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	9103      	str	r1, [sp, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfbb      	ittet	lt
 80086e8:	425b      	neglt	r3, r3
 80086ea:	f042 0202 	orrlt.w	r2, r2, #2
 80086ee:	9307      	strge	r3, [sp, #28]
 80086f0:	9307      	strlt	r3, [sp, #28]
 80086f2:	bfb8      	it	lt
 80086f4:	9204      	strlt	r2, [sp, #16]
 80086f6:	7823      	ldrb	r3, [r4, #0]
 80086f8:	2b2e      	cmp	r3, #46	; 0x2e
 80086fa:	d10c      	bne.n	8008716 <_vfiprintf_r+0x176>
 80086fc:	7863      	ldrb	r3, [r4, #1]
 80086fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008700:	d135      	bne.n	800876e <_vfiprintf_r+0x1ce>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	1d1a      	adds	r2, r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	9203      	str	r2, [sp, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bfb8      	it	lt
 800870e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008712:	3402      	adds	r4, #2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087fc <_vfiprintf_r+0x25c>
 800871a:	7821      	ldrb	r1, [r4, #0]
 800871c:	2203      	movs	r2, #3
 800871e:	4650      	mov	r0, sl
 8008720:	f7f7 fd7e 	bl	8000220 <memchr>
 8008724:	b140      	cbz	r0, 8008738 <_vfiprintf_r+0x198>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	eba0 000a 	sub.w	r0, r0, sl
 800872c:	fa03 f000 	lsl.w	r0, r3, r0
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	4303      	orrs	r3, r0
 8008734:	3401      	adds	r4, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	482c      	ldr	r0, [pc, #176]	; (80087f0 <_vfiprintf_r+0x250>)
 800873e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008742:	2206      	movs	r2, #6
 8008744:	f7f7 fd6c 	bl	8000220 <memchr>
 8008748:	2800      	cmp	r0, #0
 800874a:	d03f      	beq.n	80087cc <_vfiprintf_r+0x22c>
 800874c:	4b29      	ldr	r3, [pc, #164]	; (80087f4 <_vfiprintf_r+0x254>)
 800874e:	bb1b      	cbnz	r3, 8008798 <_vfiprintf_r+0x1f8>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	3307      	adds	r3, #7
 8008754:	f023 0307 	bic.w	r3, r3, #7
 8008758:	3308      	adds	r3, #8
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	443b      	add	r3, r7
 8008760:	9309      	str	r3, [sp, #36]	; 0x24
 8008762:	e767      	b.n	8008634 <_vfiprintf_r+0x94>
 8008764:	fb0c 3202 	mla	r2, ip, r2, r3
 8008768:	460c      	mov	r4, r1
 800876a:	2001      	movs	r0, #1
 800876c:	e7a5      	b.n	80086ba <_vfiprintf_r+0x11a>
 800876e:	2300      	movs	r3, #0
 8008770:	3401      	adds	r4, #1
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	4619      	mov	r1, r3
 8008776:	f04f 0c0a 	mov.w	ip, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008780:	3a30      	subs	r2, #48	; 0x30
 8008782:	2a09      	cmp	r2, #9
 8008784:	d903      	bls.n	800878e <_vfiprintf_r+0x1ee>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0c5      	beq.n	8008716 <_vfiprintf_r+0x176>
 800878a:	9105      	str	r1, [sp, #20]
 800878c:	e7c3      	b.n	8008716 <_vfiprintf_r+0x176>
 800878e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008792:	4604      	mov	r4, r0
 8008794:	2301      	movs	r3, #1
 8008796:	e7f0      	b.n	800877a <_vfiprintf_r+0x1da>
 8008798:	ab03      	add	r3, sp, #12
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	462a      	mov	r2, r5
 800879e:	4b16      	ldr	r3, [pc, #88]	; (80087f8 <_vfiprintf_r+0x258>)
 80087a0:	a904      	add	r1, sp, #16
 80087a2:	4630      	mov	r0, r6
 80087a4:	f3af 8000 	nop.w
 80087a8:	4607      	mov	r7, r0
 80087aa:	1c78      	adds	r0, r7, #1
 80087ac:	d1d6      	bne.n	800875c <_vfiprintf_r+0x1bc>
 80087ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b0:	07d9      	lsls	r1, r3, #31
 80087b2:	d405      	bmi.n	80087c0 <_vfiprintf_r+0x220>
 80087b4:	89ab      	ldrh	r3, [r5, #12]
 80087b6:	059a      	lsls	r2, r3, #22
 80087b8:	d402      	bmi.n	80087c0 <_vfiprintf_r+0x220>
 80087ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087bc:	f7ff fc23 	bl	8008006 <__retarget_lock_release_recursive>
 80087c0:	89ab      	ldrh	r3, [r5, #12]
 80087c2:	065b      	lsls	r3, r3, #25
 80087c4:	f53f af12 	bmi.w	80085ec <_vfiprintf_r+0x4c>
 80087c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ca:	e711      	b.n	80085f0 <_vfiprintf_r+0x50>
 80087cc:	ab03      	add	r3, sp, #12
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <_vfiprintf_r+0x258>)
 80087d4:	a904      	add	r1, sp, #16
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f880 	bl	80088dc <_printf_i>
 80087dc:	e7e4      	b.n	80087a8 <_vfiprintf_r+0x208>
 80087de:	bf00      	nop
 80087e0:	08009558 	.word	0x08009558
 80087e4:	08009578 	.word	0x08009578
 80087e8:	08009538 	.word	0x08009538
 80087ec:	08009598 	.word	0x08009598
 80087f0:	080095a2 	.word	0x080095a2
 80087f4:	00000000 	.word	0x00000000
 80087f8:	0800857b 	.word	0x0800857b
 80087fc:	0800959e 	.word	0x0800959e

08008800 <_printf_common>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	4699      	mov	r9, r3
 8008808:	688a      	ldr	r2, [r1, #8]
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008810:	4293      	cmp	r3, r2
 8008812:	bfb8      	it	lt
 8008814:	4613      	movlt	r3, r2
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800881c:	4607      	mov	r7, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b10a      	cbz	r2, 8008826 <_printf_common+0x26>
 8008822:	3301      	adds	r3, #1
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	bf42      	ittt	mi
 800882c:	6833      	ldrmi	r3, [r6, #0]
 800882e:	3302      	addmi	r3, #2
 8008830:	6033      	strmi	r3, [r6, #0]
 8008832:	6825      	ldr	r5, [r4, #0]
 8008834:	f015 0506 	ands.w	r5, r5, #6
 8008838:	d106      	bne.n	8008848 <_printf_common+0x48>
 800883a:	f104 0a19 	add.w	sl, r4, #25
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	6832      	ldr	r2, [r6, #0]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	42ab      	cmp	r3, r5
 8008846:	dc26      	bgt.n	8008896 <_printf_common+0x96>
 8008848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800884c:	1e13      	subs	r3, r2, #0
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	bf18      	it	ne
 8008852:	2301      	movne	r3, #1
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d42b      	bmi.n	80088b0 <_printf_common+0xb0>
 8008858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800885c:	4649      	mov	r1, r9
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	3001      	adds	r0, #1
 8008864:	d01e      	beq.n	80088a4 <_printf_common+0xa4>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	68e5      	ldr	r5, [r4, #12]
 800886a:	6832      	ldr	r2, [r6, #0]
 800886c:	f003 0306 	and.w	r3, r3, #6
 8008870:	2b04      	cmp	r3, #4
 8008872:	bf08      	it	eq
 8008874:	1aad      	subeq	r5, r5, r2
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	2600      	movs	r6, #0
 800888c:	341a      	adds	r4, #26
 800888e:	42b5      	cmp	r5, r6
 8008890:	d11a      	bne.n	80088c8 <_printf_common+0xc8>
 8008892:	2000      	movs	r0, #0
 8008894:	e008      	b.n	80088a8 <_printf_common+0xa8>
 8008896:	2301      	movs	r3, #1
 8008898:	4652      	mov	r2, sl
 800889a:	4649      	mov	r1, r9
 800889c:	4638      	mov	r0, r7
 800889e:	47c0      	blx	r8
 80088a0:	3001      	adds	r0, #1
 80088a2:	d103      	bne.n	80088ac <_printf_common+0xac>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7c6      	b.n	800883e <_printf_common+0x3e>
 80088b0:	18e1      	adds	r1, r4, r3
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	2030      	movs	r0, #48	; 0x30
 80088b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ba:	4422      	add	r2, r4
 80088bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c4:	3302      	adds	r3, #2
 80088c6:	e7c7      	b.n	8008858 <_printf_common+0x58>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	4649      	mov	r1, r9
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c0      	blx	r8
 80088d2:	3001      	adds	r0, #1
 80088d4:	d0e6      	beq.n	80088a4 <_printf_common+0xa4>
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7d9      	b.n	800888e <_printf_common+0x8e>
	...

080088dc <_printf_i>:
 80088dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	7e0f      	ldrb	r7, [r1, #24]
 80088e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088e4:	2f78      	cmp	r7, #120	; 0x78
 80088e6:	4691      	mov	r9, r2
 80088e8:	4680      	mov	r8, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	469a      	mov	sl, r3
 80088ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088f2:	d807      	bhi.n	8008904 <_printf_i+0x28>
 80088f4:	2f62      	cmp	r7, #98	; 0x62
 80088f6:	d80a      	bhi.n	800890e <_printf_i+0x32>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	f000 80d8 	beq.w	8008aae <_printf_i+0x1d2>
 80088fe:	2f58      	cmp	r7, #88	; 0x58
 8008900:	f000 80a3 	beq.w	8008a4a <_printf_i+0x16e>
 8008904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800890c:	e03a      	b.n	8008984 <_printf_i+0xa8>
 800890e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008912:	2b15      	cmp	r3, #21
 8008914:	d8f6      	bhi.n	8008904 <_printf_i+0x28>
 8008916:	a101      	add	r1, pc, #4	; (adr r1, 800891c <_printf_i+0x40>)
 8008918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800891c:	08008975 	.word	0x08008975
 8008920:	08008989 	.word	0x08008989
 8008924:	08008905 	.word	0x08008905
 8008928:	08008905 	.word	0x08008905
 800892c:	08008905 	.word	0x08008905
 8008930:	08008905 	.word	0x08008905
 8008934:	08008989 	.word	0x08008989
 8008938:	08008905 	.word	0x08008905
 800893c:	08008905 	.word	0x08008905
 8008940:	08008905 	.word	0x08008905
 8008944:	08008905 	.word	0x08008905
 8008948:	08008a95 	.word	0x08008a95
 800894c:	080089b9 	.word	0x080089b9
 8008950:	08008a77 	.word	0x08008a77
 8008954:	08008905 	.word	0x08008905
 8008958:	08008905 	.word	0x08008905
 800895c:	08008ab7 	.word	0x08008ab7
 8008960:	08008905 	.word	0x08008905
 8008964:	080089b9 	.word	0x080089b9
 8008968:	08008905 	.word	0x08008905
 800896c:	08008905 	.word	0x08008905
 8008970:	08008a7f 	.word	0x08008a7f
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	602a      	str	r2, [r5, #0]
 800897c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008984:	2301      	movs	r3, #1
 8008986:	e0a3      	b.n	8008ad0 <_printf_i+0x1f4>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	6829      	ldr	r1, [r5, #0]
 800898c:	0606      	lsls	r6, r0, #24
 800898e:	f101 0304 	add.w	r3, r1, #4
 8008992:	d50a      	bpl.n	80089aa <_printf_i+0xce>
 8008994:	680e      	ldr	r6, [r1, #0]
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	2e00      	cmp	r6, #0
 800899a:	da03      	bge.n	80089a4 <_printf_i+0xc8>
 800899c:	232d      	movs	r3, #45	; 0x2d
 800899e:	4276      	negs	r6, r6
 80089a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a4:	485e      	ldr	r0, [pc, #376]	; (8008b20 <_printf_i+0x244>)
 80089a6:	230a      	movs	r3, #10
 80089a8:	e019      	b.n	80089de <_printf_i+0x102>
 80089aa:	680e      	ldr	r6, [r1, #0]
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089b2:	bf18      	it	ne
 80089b4:	b236      	sxthne	r6, r6
 80089b6:	e7ef      	b.n	8008998 <_printf_i+0xbc>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	1d19      	adds	r1, r3, #4
 80089be:	6029      	str	r1, [r5, #0]
 80089c0:	0601      	lsls	r1, r0, #24
 80089c2:	d501      	bpl.n	80089c8 <_printf_i+0xec>
 80089c4:	681e      	ldr	r6, [r3, #0]
 80089c6:	e002      	b.n	80089ce <_printf_i+0xf2>
 80089c8:	0646      	lsls	r6, r0, #25
 80089ca:	d5fb      	bpl.n	80089c4 <_printf_i+0xe8>
 80089cc:	881e      	ldrh	r6, [r3, #0]
 80089ce:	4854      	ldr	r0, [pc, #336]	; (8008b20 <_printf_i+0x244>)
 80089d0:	2f6f      	cmp	r7, #111	; 0x6f
 80089d2:	bf0c      	ite	eq
 80089d4:	2308      	moveq	r3, #8
 80089d6:	230a      	movne	r3, #10
 80089d8:	2100      	movs	r1, #0
 80089da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089de:	6865      	ldr	r5, [r4, #4]
 80089e0:	60a5      	str	r5, [r4, #8]
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	bfa2      	ittt	ge
 80089e6:	6821      	ldrge	r1, [r4, #0]
 80089e8:	f021 0104 	bicge.w	r1, r1, #4
 80089ec:	6021      	strge	r1, [r4, #0]
 80089ee:	b90e      	cbnz	r6, 80089f4 <_printf_i+0x118>
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	d04d      	beq.n	8008a90 <_printf_i+0x1b4>
 80089f4:	4615      	mov	r5, r2
 80089f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80089fa:	fb03 6711 	mls	r7, r3, r1, r6
 80089fe:	5dc7      	ldrb	r7, [r0, r7]
 8008a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a04:	4637      	mov	r7, r6
 8008a06:	42bb      	cmp	r3, r7
 8008a08:	460e      	mov	r6, r1
 8008a0a:	d9f4      	bls.n	80089f6 <_printf_i+0x11a>
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d10b      	bne.n	8008a28 <_printf_i+0x14c>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07de      	lsls	r6, r3, #31
 8008a14:	d508      	bpl.n	8008a28 <_printf_i+0x14c>
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	bfde      	ittt	le
 8008a1e:	2330      	movle	r3, #48	; 0x30
 8008a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a28:	1b52      	subs	r2, r2, r5
 8008a2a:	6122      	str	r2, [r4, #16]
 8008a2c:	f8cd a000 	str.w	sl, [sp]
 8008a30:	464b      	mov	r3, r9
 8008a32:	aa03      	add	r2, sp, #12
 8008a34:	4621      	mov	r1, r4
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7ff fee2 	bl	8008800 <_printf_common>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d14c      	bne.n	8008ada <_printf_i+0x1fe>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	b004      	add	sp, #16
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	4835      	ldr	r0, [pc, #212]	; (8008b20 <_printf_i+0x244>)
 8008a4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a50:	6829      	ldr	r1, [r5, #0]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a58:	6029      	str	r1, [r5, #0]
 8008a5a:	061d      	lsls	r5, r3, #24
 8008a5c:	d514      	bpl.n	8008a88 <_printf_i+0x1ac>
 8008a5e:	07df      	lsls	r7, r3, #31
 8008a60:	bf44      	itt	mi
 8008a62:	f043 0320 	orrmi.w	r3, r3, #32
 8008a66:	6023      	strmi	r3, [r4, #0]
 8008a68:	b91e      	cbnz	r6, 8008a72 <_printf_i+0x196>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f023 0320 	bic.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2310      	movs	r3, #16
 8008a74:	e7b0      	b.n	80089d8 <_printf_i+0xfc>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f043 0320 	orr.w	r3, r3, #32
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	2378      	movs	r3, #120	; 0x78
 8008a80:	4828      	ldr	r0, [pc, #160]	; (8008b24 <_printf_i+0x248>)
 8008a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a86:	e7e3      	b.n	8008a50 <_printf_i+0x174>
 8008a88:	0659      	lsls	r1, r3, #25
 8008a8a:	bf48      	it	mi
 8008a8c:	b2b6      	uxthmi	r6, r6
 8008a8e:	e7e6      	b.n	8008a5e <_printf_i+0x182>
 8008a90:	4615      	mov	r5, r2
 8008a92:	e7bb      	b.n	8008a0c <_printf_i+0x130>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	6826      	ldr	r6, [r4, #0]
 8008a98:	6961      	ldr	r1, [r4, #20]
 8008a9a:	1d18      	adds	r0, r3, #4
 8008a9c:	6028      	str	r0, [r5, #0]
 8008a9e:	0635      	lsls	r5, r6, #24
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	d501      	bpl.n	8008aa8 <_printf_i+0x1cc>
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	e002      	b.n	8008aae <_printf_i+0x1d2>
 8008aa8:	0670      	lsls	r0, r6, #25
 8008aaa:	d5fb      	bpl.n	8008aa4 <_printf_i+0x1c8>
 8008aac:	8019      	strh	r1, [r3, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	4615      	mov	r5, r2
 8008ab4:	e7ba      	b.n	8008a2c <_printf_i+0x150>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	1d1a      	adds	r2, r3, #4
 8008aba:	602a      	str	r2, [r5, #0]
 8008abc:	681d      	ldr	r5, [r3, #0]
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7f7 fbac 	bl	8000220 <memchr>
 8008ac8:	b108      	cbz	r0, 8008ace <_printf_i+0x1f2>
 8008aca:	1b40      	subs	r0, r0, r5
 8008acc:	6060      	str	r0, [r4, #4]
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad8:	e7a8      	b.n	8008a2c <_printf_i+0x150>
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	462a      	mov	r2, r5
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	47d0      	blx	sl
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d0ab      	beq.n	8008a40 <_printf_i+0x164>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	079b      	lsls	r3, r3, #30
 8008aec:	d413      	bmi.n	8008b16 <_printf_i+0x23a>
 8008aee:	68e0      	ldr	r0, [r4, #12]
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	4298      	cmp	r0, r3
 8008af4:	bfb8      	it	lt
 8008af6:	4618      	movlt	r0, r3
 8008af8:	e7a4      	b.n	8008a44 <_printf_i+0x168>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4632      	mov	r2, r6
 8008afe:	4649      	mov	r1, r9
 8008b00:	4640      	mov	r0, r8
 8008b02:	47d0      	blx	sl
 8008b04:	3001      	adds	r0, #1
 8008b06:	d09b      	beq.n	8008a40 <_printf_i+0x164>
 8008b08:	3501      	adds	r5, #1
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	9903      	ldr	r1, [sp, #12]
 8008b0e:	1a5b      	subs	r3, r3, r1
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dcf2      	bgt.n	8008afa <_printf_i+0x21e>
 8008b14:	e7eb      	b.n	8008aee <_printf_i+0x212>
 8008b16:	2500      	movs	r5, #0
 8008b18:	f104 0619 	add.w	r6, r4, #25
 8008b1c:	e7f5      	b.n	8008b0a <_printf_i+0x22e>
 8008b1e:	bf00      	nop
 8008b20:	080095a9 	.word	0x080095a9
 8008b24:	080095ba 	.word	0x080095ba

08008b28 <_sbrk_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_sbrk_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f9 fd40 	bl	80025b8 <_sbrk>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_sbrk_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_sbrk_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200003ac 	.word	0x200003ac

08008b48 <__sread>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b50:	f000 f8ea 	bl	8008d28 <_read_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	bfab      	itete	ge
 8008b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b5c:	181b      	addge	r3, r3, r0
 8008b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b62:	bfac      	ite	ge
 8008b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b66:	81a3      	strhlt	r3, [r4, #12]
 8008b68:	bd10      	pop	{r4, pc}

08008b6a <__swrite>:
 8008b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	461f      	mov	r7, r3
 8008b70:	898b      	ldrh	r3, [r1, #12]
 8008b72:	05db      	lsls	r3, r3, #23
 8008b74:	4605      	mov	r5, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	4616      	mov	r6, r2
 8008b7a:	d505      	bpl.n	8008b88 <__swrite+0x1e>
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	2302      	movs	r3, #2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f000 f868 	bl	8008c58 <_lseek_r>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	4632      	mov	r2, r6
 8008b96:	463b      	mov	r3, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	f000 b817 	b.w	8008bd0 <_write_r>

08008ba2 <__sseek>:
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008baa:	f000 f855 	bl	8008c58 <_lseek_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	bf15      	itete	ne
 8008bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bbe:	81a3      	strheq	r3, [r4, #12]
 8008bc0:	bf18      	it	ne
 8008bc2:	81a3      	strhne	r3, [r4, #12]
 8008bc4:	bd10      	pop	{r4, pc}

08008bc6 <__sclose>:
 8008bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bca:	f000 b813 	b.w	8008bf4 <_close_r>
	...

08008bd0 <_write_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d07      	ldr	r5, [pc, #28]	; (8008bf0 <_write_r+0x20>)
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	4608      	mov	r0, r1
 8008bd8:	4611      	mov	r1, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	602a      	str	r2, [r5, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f7f9 fc99 	bl	8002516 <_write>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_write_r+0x1e>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_write_r+0x1e>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200003ac 	.word	0x200003ac

08008bf4 <_close_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d06      	ldr	r5, [pc, #24]	; (8008c10 <_close_r+0x1c>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	602b      	str	r3, [r5, #0]
 8008c00:	f7f9 fca5 	bl	800254e <_close>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d102      	bne.n	8008c0e <_close_r+0x1a>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	b103      	cbz	r3, 8008c0e <_close_r+0x1a>
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	200003ac 	.word	0x200003ac

08008c14 <_fstat_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d07      	ldr	r5, [pc, #28]	; (8008c34 <_fstat_r+0x20>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	4611      	mov	r1, r2
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	f7f9 fca0 	bl	8002566 <_fstat>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d102      	bne.n	8008c30 <_fstat_r+0x1c>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b103      	cbz	r3, 8008c30 <_fstat_r+0x1c>
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	bf00      	nop
 8008c34:	200003ac 	.word	0x200003ac

08008c38 <_isatty_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	; (8008c54 <_isatty_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7f9 fc9f 	bl	8002586 <_isatty>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_isatty_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_isatty_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200003ac 	.word	0x200003ac

08008c58 <_lseek_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d07      	ldr	r5, [pc, #28]	; (8008c78 <_lseek_r+0x20>)
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	602a      	str	r2, [r5, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7f9 fc98 	bl	800259c <_lseek>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_lseek_r+0x1e>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_lseek_r+0x1e>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	200003ac 	.word	0x200003ac

08008c7c <memmove>:
 8008c7c:	4288      	cmp	r0, r1
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	eb01 0402 	add.w	r4, r1, r2
 8008c84:	d902      	bls.n	8008c8c <memmove+0x10>
 8008c86:	4284      	cmp	r4, r0
 8008c88:	4623      	mov	r3, r4
 8008c8a:	d807      	bhi.n	8008c9c <memmove+0x20>
 8008c8c:	1e43      	subs	r3, r0, #1
 8008c8e:	42a1      	cmp	r1, r4
 8008c90:	d008      	beq.n	8008ca4 <memmove+0x28>
 8008c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c9a:	e7f8      	b.n	8008c8e <memmove+0x12>
 8008c9c:	4402      	add	r2, r0
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	428a      	cmp	r2, r1
 8008ca2:	d100      	bne.n	8008ca6 <memmove+0x2a>
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cae:	e7f7      	b.n	8008ca0 <memmove+0x24>

08008cb0 <__malloc_lock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__malloc_lock+0x8>)
 8008cb2:	f7ff b9a7 	b.w	8008004 <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200003a0 	.word	0x200003a0

08008cbc <__malloc_unlock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__malloc_unlock+0x8>)
 8008cbe:	f7ff b9a2 	b.w	8008006 <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	200003a0 	.word	0x200003a0

08008cc8 <_realloc_r>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	4680      	mov	r8, r0
 8008cce:	4614      	mov	r4, r2
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	b921      	cbnz	r1, 8008cde <_realloc_r+0x16>
 8008cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd8:	4611      	mov	r1, r2
 8008cda:	f7ff ba67 	b.w	80081ac <_malloc_r>
 8008cde:	b92a      	cbnz	r2, 8008cec <_realloc_r+0x24>
 8008ce0:	f7ff f9f8 	bl	80080d4 <_free_r>
 8008ce4:	4625      	mov	r5, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	f000 f82e 	bl	8008d4c <_malloc_usable_size_r>
 8008cf0:	4284      	cmp	r4, r0
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	d802      	bhi.n	8008cfc <_realloc_r+0x34>
 8008cf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cfa:	d812      	bhi.n	8008d22 <_realloc_r+0x5a>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7ff fa54 	bl	80081ac <_malloc_r>
 8008d04:	4605      	mov	r5, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0ed      	beq.n	8008ce6 <_realloc_r+0x1e>
 8008d0a:	42bc      	cmp	r4, r7
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4631      	mov	r1, r6
 8008d10:	bf28      	it	cs
 8008d12:	463a      	movcs	r2, r7
 8008d14:	f7fe fe3a 	bl	800798c <memcpy>
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7ff f9da 	bl	80080d4 <_free_r>
 8008d20:	e7e1      	b.n	8008ce6 <_realloc_r+0x1e>
 8008d22:	4635      	mov	r5, r6
 8008d24:	e7df      	b.n	8008ce6 <_realloc_r+0x1e>
	...

08008d28 <_read_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	; (8008d48 <_read_r+0x20>)
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	4608      	mov	r0, r1
 8008d30:	4611      	mov	r1, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	602a      	str	r2, [r5, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7f9 fbd0 	bl	80024dc <_read>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_read_r+0x1e>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_read_r+0x1e>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200003ac 	.word	0x200003ac

08008d4c <_malloc_usable_size_r>:
 8008d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d50:	1f18      	subs	r0, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bfbc      	itt	lt
 8008d56:	580b      	ldrlt	r3, [r1, r0]
 8008d58:	18c0      	addlt	r0, r0, r3
 8008d5a:	4770      	bx	lr

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
