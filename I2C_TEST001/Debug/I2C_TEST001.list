
I2C_TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d8  080079d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079e0  080079e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080079e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000250  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003378  00000000  00000000  0003744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0003bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d88  00000000  00000000  0003cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bc2  00000000  00000000  00064ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f08a8  00000000  00000000  0007e672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ef1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a98  00000000  00000000  0016ef6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007758 	.word	0x08007758

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007758 	.word	0x08007758

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x9c>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x9c>)
 800060a:	f001 fb6b 	bl	8001ce4 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000614:	f001 f814 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000618:	2303      	movs	r3, #3
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x9c>)
 800062a:	f001 fcb1 	bl	8001f90 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000634:	f001 f804 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000094 	.word	0x20000094
 8000644:	40012000 	.word	0x40012000

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 f83d 	bl	8002734 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_GPIO_Init+0xac>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xac>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0xac>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_GPIO_Init+0xac>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_GPIO_Init+0xac>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xb0>)
 800076e:	f001 ffe1 	bl	8002734 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800

08000784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007c2:	f002 f993 	bl	8002aec <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 ff38 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007d4:	f002 ff03 	bl	80035de <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007de:	f000 ff2f 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x74>)
 80007e6:	f002 ff36 	bl	8003656 <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 ff26 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12c      	bne.n	8000880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_I2C_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x8c>)
 8000860:	f001 ff68 	bl	8002734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_I2C_MspInit+0x88>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_I2C_MspInit+0x88>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400

08000894 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 800089c:	1d39      	adds	r1, r7, #4
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <__io_putchar+0x20>)
 80008a4:	f004 fd4b 	bl	800533e <HAL_UART_Transmit>
	return ch;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000270 	.word	0x20000270

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f001 f97b 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 fbcf 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff03 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80008ca:	f000 febf 	bl	800164c <MX_RTC_Init>
  MX_I2C1_Init();
 80008ce:	f7ff ff59 	bl	8000784 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80008d2:	f001 f8d5 	bl	8001a80 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008d6:	f7ff fe65 	bl	80005a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008da:	f001 f861 	bl	80019a0 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008de:	f000 fc33 	bl	8001148 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80008e2:	4872      	ldr	r0, [pc, #456]	; (8000aac <main+0x1f4>)
 80008e4:	f004 f8ac 	bl	8004a40 <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart3, &rx, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 80008e8:	f000 fda4 	bl	8001434 <init>
	LCD_Init(LCD_ADDR);
 80008ec:	204e      	movs	r0, #78	; 0x4e
 80008ee:	f000 fd69 	bl	80013c4 <LCD_Init>
//	LCD_SendCommand(LCD_ADDR, 0b00000001);


	while (1) {
		//init the time_temp
		sTime_temp.Hours = 0;
 80008f2:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <main+0x1f8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
		sTime_temp.Minutes = 0;
 80008f8:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <main+0x1f8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	705a      	strb	r2, [r3, #1]
		sTime_temp.Seconds = 0;
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <main+0x1f8>)
 8000900:	2200      	movs	r2, #0
 8000902:	709a      	strb	r2, [r3, #2]
		sTime_temp.TimeFormat = 1;
 8000904:	4b6a      	ldr	r3, [pc, #424]	; (8000ab0 <main+0x1f8>)
 8000906:	2201      	movs	r2, #1
 8000908:	70da      	strb	r2, [r3, #3]


		//Main loop
		while (mode == 0) {
 800090a:	e0c9      	b.n	8000aa0 <main+0x1e8>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800090c:	2201      	movs	r2, #1
 800090e:	4969      	ldr	r1, [pc, #420]	; (8000ab4 <main+0x1fc>)
 8000910:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <main+0x200>)
 8000912:	f003 fe57 	bl	80045c4 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000916:	2201      	movs	r2, #1
 8000918:	4968      	ldr	r1, [pc, #416]	; (8000abc <main+0x204>)
 800091a:	4867      	ldr	r0, [pc, #412]	; (8000ab8 <main+0x200>)
 800091c:	f003 ff34 	bl	8004788 <HAL_RTC_GetDate>
			HAL_ADC_Start(&hadc1);
 8000920:	4867      	ldr	r0, [pc, #412]	; (8000ac0 <main+0x208>)
 8000922:	f001 fa23 	bl	8001d6c <HAL_ADC_Start>

			sprintf(Time, "%s %02x:%02x:%02x", ampm[sTime.TimeFormat],
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <main+0x1fc>)
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	461a      	mov	r2, r3
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	4a64      	ldr	r2, [pc, #400]	; (8000ac4 <main+0x20c>)
 8000934:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <main+0x1fc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
			sprintf(Time, "%s %02x:%02x:%02x", ampm[sTime.TimeFormat],
 800093a:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 800093c:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <main+0x1fc>)
 800093e:	785b      	ldrb	r3, [r3, #1]
			sprintf(Time, "%s %02x:%02x:%02x", ampm[sTime.TimeFormat],
 8000940:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <main+0x1fc>)
 8000944:	789b      	ldrb	r3, [r3, #2]
			sprintf(Time, "%s %02x:%02x:%02x", ampm[sTime.TimeFormat],
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	9100      	str	r1, [sp, #0]
 800094a:	4603      	mov	r3, r0
 800094c:	495e      	ldr	r1, [pc, #376]	; (8000ac8 <main+0x210>)
 800094e:	485f      	ldr	r0, [pc, #380]	; (8000acc <main+0x214>)
 8000950:	f005 fdb0 	bl	80064b4 <siprintf>

			// LCD up
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	204e      	movs	r0, #78	; 0x4e
 8000958:	f000 fd10 	bl	800137c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, "Park Jung Hwan");
 800095c:	495c      	ldr	r1, [pc, #368]	; (8000ad0 <main+0x218>)
 800095e:	204e      	movs	r0, #78	; 0x4e
 8000960:	f000 fd4d 	bl	80013fe <LCD_SendString>

			// LCD down
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000964:	21c0      	movs	r1, #192	; 0xc0
 8000966:	204e      	movs	r0, #78	; 0x4e
 8000968:	f000 fd08 	bl	800137c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, Time);
 800096c:	4957      	ldr	r1, [pc, #348]	; (8000acc <main+0x214>)
 800096e:	204e      	movs	r0, #78	; 0x4e
 8000970:	f000 fd45 	bl	80013fe <LCD_SendString>

			//==========================================================================================================
			//mode choose while loop
			while (rising_edge >= 1) {
 8000974:	e08f      	b.n	8000a96 <main+0x1de>
				cur_tick = HAL_GetTick();
 8000976:	f001 f985 	bl	8001c84 <HAL_GetTick>
 800097a:	4603      	mov	r3, r0
 800097c:	4a55      	ldr	r2, [pc, #340]	; (8000ad4 <main+0x21c>)
 800097e:	6013      	str	r3, [r2, #0]
				tick_gap = cur_tick - start_tick;
 8000980:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <main+0x21c>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <main+0x220>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a54      	ldr	r2, [pc, #336]	; (8000adc <main+0x224>)
 800098c:	6013      	str	r3, [r2, #0]

				if (tick_gap >= 300) {
 800098e:	4b53      	ldr	r3, [pc, #332]	; (8000adc <main+0x224>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000996:	d37e      	bcc.n	8000a96 <main+0x1de>

					if (rising_edge == 1 && falling_edge >= 1) {
 8000998:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <main+0x228>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d151      	bne.n	8000a44 <main+0x18c>
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <main+0x22c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d04d      	beq.n	8000a44 <main+0x18c>

						//init the user button
						rising_edge = 0;
 80009a8:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <main+0x228>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 80009ae:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <main+0x22c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]

						// init the temp
						sTime_temp.Hours = 0;
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <main+0x1f8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
						sTime_temp.Minutes = 0;
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <main+0x1f8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	705a      	strb	r2, [r3, #1]
						sTime_temp.Seconds = 0;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <main+0x1f8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	709a      	strb	r2, [r3, #2]
						sTime_temp.TimeFormat = 0;
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <main+0x1f8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	70da      	strb	r2, [r3, #3]
						mode = 1;
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <main+0x230>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]

						//screen func=====================================================
						sprintf(Time_temp, "%s %02x:%02x:%02x",
								ampm[sTime_temp.TimeFormat],
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <main+0x1f8>)
 80009d4:	78db      	ldrb	r3, [r3, #3]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	4a39      	ldr	r2, [pc, #228]	; (8000ac4 <main+0x20c>)
 80009e0:	441a      	add	r2, r3
								sTime_temp.Hours, sTime_temp.Minutes,
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <main+0x1f8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
						sprintf(Time_temp, "%s %02x:%02x:%02x",
 80009e6:	4618      	mov	r0, r3
								sTime_temp.Hours, sTime_temp.Minutes,
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <main+0x1f8>)
 80009ea:	785b      	ldrb	r3, [r3, #1]
						sprintf(Time_temp, "%s %02x:%02x:%02x",
 80009ec:	4619      	mov	r1, r3
								sTime_temp.Seconds);
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <main+0x1f8>)
 80009f0:	789b      	ldrb	r3, [r3, #2]
						sprintf(Time_temp, "%s %02x:%02x:%02x",
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9100      	str	r1, [sp, #0]
 80009f6:	4603      	mov	r3, r0
 80009f8:	4933      	ldr	r1, [pc, #204]	; (8000ac8 <main+0x210>)
 80009fa:	483c      	ldr	r0, [pc, #240]	; (8000aec <main+0x234>)
 80009fc:	f005 fd5a 	bl	80064b4 <siprintf>
						LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a00:	21c0      	movs	r1, #192	; 0xc0
 8000a02:	204e      	movs	r0, #78	; 0x4e
 8000a04:	f000 fcba 	bl	800137c <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, Time_temp);
 8000a08:	4938      	ldr	r1, [pc, #224]	; (8000aec <main+0x234>)
 8000a0a:	204e      	movs	r0, #78	; 0x4e
 8000a0c:	f000 fcf7 	bl	80013fe <LCD_SendString>
						for (int i = 0; i < 11; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e006      	b.n	8000a24 <main+0x16c>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000a16:	2110      	movs	r1, #16
 8000a18:	204e      	movs	r0, #78	; 0x4e
 8000a1a:	f000 fcaf 	bl	800137c <LCD_SendCommand>
						for (int i = 0; i < 11; i++) {
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	ddf5      	ble.n	8000a16 <main+0x15e>
						}
						//screen func=====================================================

						LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	204e      	movs	r0, #78	; 0x4e
 8000a2e:	f000 fca5 	bl	800137c <LCD_SendCommand>
						printf("sTime_temp.TimeFormat : %d\r\n", sTime_temp.TimeFormat);
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <main+0x1f8>)
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	4619      	mov	r1, r3
 8000a38:	482d      	ldr	r0, [pc, #180]	; (8000af0 <main+0x238>)
 8000a3a:	f005 fc79 	bl	8006330 <iprintf>
						printf("one click==========================\r\n");
 8000a3e:	482d      	ldr	r0, [pc, #180]	; (8000af4 <main+0x23c>)
 8000a40:	f005 fcfc 	bl	800643c <puts>
					}

					if (rising_edge >= 2 && falling_edge >= 1) {
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <main+0x228>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d90f      	bls.n	8000a6c <main+0x1b4>
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <main+0x22c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00b      	beq.n	8000a6c <main+0x1b4>
						rising_edge = 0;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <main+0x228>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <main+0x22c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
						mode = 2;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <main+0x230>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
						printf("two click++++++++++++++++++++++++++\r\n");
 8000a66:	4824      	ldr	r0, [pc, #144]	; (8000af8 <main+0x240>)
 8000a68:	f005 fce8 	bl	800643c <puts>
					}

					if (tick_gap >= 2000 && falling_edge == 0) {
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <main+0x224>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a74:	d30f      	bcc.n	8000a96 <main+0x1de>
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <main+0x22c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10b      	bne.n	8000a96 <main+0x1de>
						rising_edge = 0;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <main+0x228>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
						falling_edge = 0;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0x22c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
						mode = 3;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <main+0x230>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	701a      	strb	r2, [r3, #0]
						printf("long click//////////////////////////\r\n");
 8000a90:	481a      	ldr	r0, [pc, #104]	; (8000afc <main+0x244>)
 8000a92:	f005 fcd3 	bl	800643c <puts>
			while (rising_edge >= 1) {
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <main+0x228>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f47f af6b 	bne.w	8000976 <main+0xbe>
		while (mode == 0) {
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <main+0x230>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f43f af31 	beq.w	800090c <main+0x54>
				}
			}
		}
		//==========================================================================================================
		//Set Time loop
		while (mode == 1) {
 8000aaa:	e262      	b.n	8000f72 <main+0x6ba>
 8000aac:	20000228 	.word	0x20000228
 8000ab0:	200001a0 	.word	0x200001a0
 8000ab4:	20000174 	.word	0x20000174
 8000ab8:	20000204 	.word	0x20000204
 8000abc:	20000188 	.word	0x20000188
 8000ac0:	20000094 	.word	0x20000094
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	08007770 	.word	0x08007770
 8000acc:	20000160 	.word	0x20000160
 8000ad0:	08007784 	.word	0x08007784
 8000ad4:	2000014c 	.word	0x2000014c
 8000ad8:	20000148 	.word	0x20000148
 8000adc:	20000150 	.word	0x20000150
 8000ae0:	20000145 	.word	0x20000145
 8000ae4:	20000146 	.word	0x20000146
 8000ae8:	20000147 	.word	0x20000147
 8000aec:	2000018c 	.word	0x2000018c
 8000af0:	08007794 	.word	0x08007794
 8000af4:	080077b4 	.word	0x080077b4
 8000af8:	080077dc 	.word	0x080077dc
 8000afc:	08007804 	.word	0x08007804

			// start adc for read adc_value
			HAL_ADC_Start(&hadc1);
 8000b00:	4884      	ldr	r0, [pc, #528]	; (8000d14 <main+0x45c>)
 8000b02:	f001 f933 	bl	8001d6c <HAL_ADC_Start>



			// IF USER CLICK THE USER BUTTON
			// USER CAN CHOOSE EXIT OR APPLY
			if (rising_edge >= 1) {
 8000b06:	4b84      	ldr	r3, [pc, #528]	; (8000d18 <main+0x460>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d04f      	beq.n	8000bae <main+0x2f6>

				// this flag is check the exit or apply
				apply_flag = 1;
 8000b0e:	4b83      	ldr	r3, [pc, #524]	; (8000d1c <main+0x464>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]

				// this flag is give some rest time
				// because user button can be pushed by user too short
				exit_flag = 1;
 8000b14:	4b82      	ldr	r3, [pc, #520]	; (8000d20 <main+0x468>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]


				// EXIT without apply
				if (falling_edge > 0) {
 8000b1a:	4b82      	ldr	r3, [pc, #520]	; (8000d24 <main+0x46c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d012      	beq.n	8000b48 <main+0x290>
					// ===========================================init func

					// init the user button
					apply_flag = 0;
 8000b22:	4b7e      	ldr	r3, [pc, #504]	; (8000d1c <main+0x464>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000b28:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <main+0x460>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000b2e:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <main+0x46c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000b34:	210e      	movs	r1, #14
 8000b36:	204e      	movs	r0, #78	; 0x4e
 8000b38:	f000 fc20 	bl	800137c <LCD_SendCommand>
					mode = 0;
 8000b3c:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <main+0x470>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
					printf("MODE exit\r\n");
 8000b42:	487a      	ldr	r0, [pc, #488]	; (8000d2c <main+0x474>)
 8000b44:	f005 fc7a 	bl	800643c <puts>
//						printf("get_time_exit : %d\r\n", get_time_exit);
//					}
					// ===========================================init func
				}
				// APPLY and exit
				if (falling_edge == 0 && get_time_apply > 4) {
 8000b48:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <main+0x46c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d12e      	bne.n	8000bae <main+0x2f6>
 8000b50:	4b77      	ldr	r3, [pc, #476]	; (8000d30 <main+0x478>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d92a      	bls.n	8000bae <main+0x2f6>

					// sTime is now applied by user
					sTime.Hours = sTime_temp.Hours;
 8000b58:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <main+0x47c>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b76      	ldr	r3, [pc, #472]	; (8000d38 <main+0x480>)
 8000b5e:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = sTime_temp.Minutes;
 8000b60:	4b74      	ldr	r3, [pc, #464]	; (8000d34 <main+0x47c>)
 8000b62:	785a      	ldrb	r2, [r3, #1]
 8000b64:	4b74      	ldr	r3, [pc, #464]	; (8000d38 <main+0x480>)
 8000b66:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = sTime_temp.Seconds;
 8000b68:	4b72      	ldr	r3, [pc, #456]	; (8000d34 <main+0x47c>)
 8000b6a:	789a      	ldrb	r2, [r3, #2]
 8000b6c:	4b72      	ldr	r3, [pc, #456]	; (8000d38 <main+0x480>)
 8000b6e:	709a      	strb	r2, [r3, #2]
					sTime.TimeFormat = sTime_temp.TimeFormat;
 8000b70:	4b70      	ldr	r3, [pc, #448]	; (8000d34 <main+0x47c>)
 8000b72:	78da      	ldrb	r2, [r3, #3]
 8000b74:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <main+0x480>)
 8000b76:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	496f      	ldr	r1, [pc, #444]	; (8000d38 <main+0x480>)
 8000b7c:	486f      	ldr	r0, [pc, #444]	; (8000d3c <main+0x484>)
 8000b7e:	f003 fc87 	bl	8004490 <HAL_RTC_SetTime>

					// ===========================================init func
					// turn off the blink
					LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000b82:	210e      	movs	r1, #14
 8000b84:	204e      	movs	r0, #78	; 0x4e
 8000b86:	f000 fbf9 	bl	800137c <LCD_SendCommand>

					// init the user button
					apply_flag = 0;
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <main+0x464>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
					get_time_apply = 0;
 8000b90:	4b67      	ldr	r3, [pc, #412]	; (8000d30 <main+0x478>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
					rising_edge = 0;
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <main+0x460>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
					falling_edge = 0;
 8000b9c:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <main+0x46c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]

					mode = 0;
 8000ba2:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <main+0x470>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
					printf("MODE APPLY\r\n");
 8000ba8:	4865      	ldr	r0, [pc, #404]	; (8000d40 <main+0x488>)
 8000baa:	f005 fc47 	bl	800643c <puts>

				}

			}

			if (get_time > 0) {
 8000bae:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <main+0x48c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 81dd 	beq.w	8000f72 <main+0x6ba>
				if (up > 0) {
 8000bb8:	4b63      	ldr	r3, [pc, #396]	; (8000d48 <main+0x490>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80e1 	beq.w	8000d84 <main+0x4cc>
					//AM or PM switching
					if (cursor == 0) {
 8000bc2:	4b62      	ldr	r3, [pc, #392]	; (8000d4c <main+0x494>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d163      	bne.n	8000c92 <main+0x3da>
						if (sTime_temp.TimeFormat == 0) {
 8000bca:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <main+0x47c>)
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d12f      	bne.n	8000c32 <main+0x37a>
							sTime_temp.TimeFormat = 1;
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <main+0x47c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	70da      	strb	r2, [r3, #3]

							//screen func=====================================================
							sprintf(Time_temp, "%s %02x:%02x:%02x",
									ampm[sTime_temp.TimeFormat],
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <main+0x47c>)
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	4a5a      	ldr	r2, [pc, #360]	; (8000d50 <main+0x498>)
 8000be6:	441a      	add	r2, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000be8:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <main+0x47c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000bec:	4618      	mov	r0, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <main+0x47c>)
 8000bf0:	785b      	ldrb	r3, [r3, #1]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000bf2:	4619      	mov	r1, r3
									sTime_temp.Seconds);
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <main+0x47c>)
 8000bf6:	789b      	ldrb	r3, [r3, #2]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	9100      	str	r1, [sp, #0]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4955      	ldr	r1, [pc, #340]	; (8000d54 <main+0x49c>)
 8000c00:	4855      	ldr	r0, [pc, #340]	; (8000d58 <main+0x4a0>)
 8000c02:	f005 fc57 	bl	80064b4 <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c06:	21c0      	movs	r1, #192	; 0xc0
 8000c08:	204e      	movs	r0, #78	; 0x4e
 8000c0a:	f000 fbb7 	bl	800137c <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, Time_temp);
 8000c0e:	4952      	ldr	r1, [pc, #328]	; (8000d58 <main+0x4a0>)
 8000c10:	204e      	movs	r0, #78	; 0x4e
 8000c12:	f000 fbf4 	bl	80013fe <LCD_SendString>
							for (int i = 0; i < 11; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e006      	b.n	8000c2a <main+0x372>
								LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	204e      	movs	r0, #78	; 0x4e
 8000c20:	f000 fbac 	bl	800137c <LCD_SendCommand>
							for (int i = 0; i < 11; i++) {
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	3301      	adds	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2b0a      	cmp	r3, #10
 8000c2e:	ddf5      	ble.n	8000c1c <main+0x364>
 8000c30:	e0a5      	b.n	8000d7e <main+0x4c6>
							}
							//screen func=====================================================

						} else {
							sTime_temp.TimeFormat = 0;
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <main+0x47c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
							//screen func=====================================================
							sprintf(Time_temp, "%s %02x:%02x:%02x",
									ampm[sTime_temp.TimeFormat],
 8000c38:	4b3e      	ldr	r3, [pc, #248]	; (8000d34 <main+0x47c>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <main+0x498>)
 8000c46:	441a      	add	r2, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <main+0x47c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000c4c:	4618      	mov	r0, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000c4e:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <main+0x47c>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000c52:	4619      	mov	r1, r3
									sTime_temp.Seconds);
 8000c54:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <main+0x47c>)
 8000c56:	789b      	ldrb	r3, [r3, #2]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	9100      	str	r1, [sp, #0]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	493d      	ldr	r1, [pc, #244]	; (8000d54 <main+0x49c>)
 8000c60:	483d      	ldr	r0, [pc, #244]	; (8000d58 <main+0x4a0>)
 8000c62:	f005 fc27 	bl	80064b4 <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c66:	21c0      	movs	r1, #192	; 0xc0
 8000c68:	204e      	movs	r0, #78	; 0x4e
 8000c6a:	f000 fb87 	bl	800137c <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, Time_temp);
 8000c6e:	493a      	ldr	r1, [pc, #232]	; (8000d58 <main+0x4a0>)
 8000c70:	204e      	movs	r0, #78	; 0x4e
 8000c72:	f000 fbc4 	bl	80013fe <LCD_SendString>
							for (int i = 0; i < 11; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e006      	b.n	8000c8a <main+0x3d2>
								LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	204e      	movs	r0, #78	; 0x4e
 8000c80:	f000 fb7c 	bl	800137c <LCD_SendCommand>
							for (int i = 0; i < 11; i++) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	ddf5      	ble.n	8000c7c <main+0x3c4>
 8000c90:	e075      	b.n	8000d7e <main+0x4c6>
							//screen func=====================================================
						}
					}

					// 10H switching
					else if (cursor == 3) {
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <main+0x494>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d162      	bne.n	8000d60 <main+0x4a8>
						if (sTime_temp.Hours < 10) {
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <main+0x47c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	d86d      	bhi.n	8000d7e <main+0x4c6>

							// because of BCD shift << 4
							sTime_temp.Hours += 1 << 4;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <main+0x47c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3310      	adds	r3, #16
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <main+0x47c>)
 8000cac:	701a      	strb	r2, [r3, #0]
							//screen func============================(int cursor)====================
							sprintf(Time_temp, "%s %02x:%02x:%02x",
									ampm[sTime_temp.TimeFormat],
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <main+0x47c>)
 8000cb0:	78db      	ldrb	r3, [r3, #3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <main+0x498>)
 8000cbc:	441a      	add	r2, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <main+0x47c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000cc2:	4618      	mov	r0, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <main+0x47c>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000cc8:	4619      	mov	r1, r3
									sTime_temp.Seconds);
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <main+0x47c>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9100      	str	r1, [sp, #0]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	491f      	ldr	r1, [pc, #124]	; (8000d54 <main+0x49c>)
 8000cd6:	4820      	ldr	r0, [pc, #128]	; (8000d58 <main+0x4a0>)
 8000cd8:	f005 fbec 	bl	80064b4 <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000cdc:	21c0      	movs	r1, #192	; 0xc0
 8000cde:	204e      	movs	r0, #78	; 0x4e
 8000ce0:	f000 fb4c 	bl	800137c <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, Time_temp);
 8000ce4:	491c      	ldr	r1, [pc, #112]	; (8000d58 <main+0x4a0>)
 8000ce6:	204e      	movs	r0, #78	; 0x4e
 8000ce8:	f000 fb89 	bl	80013fe <LCD_SendString>
							for (int i = 0; i < 8; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	e006      	b.n	8000d00 <main+0x448>
								LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	204e      	movs	r0, #78	; 0x4e
 8000cf6:	f000 fb41 	bl	800137c <LCD_SendCommand>
							for (int i = 0; i < 8; i++) {
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	ddf5      	ble.n	8000cf2 <main+0x43a>
							}
							//screen func=====================================================
							printf("sTime_temp.Hours : %d\r\n",
									sTime_temp.Hours);
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <main+0x47c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
							printf("sTime_temp.Hours : %d\r\n",
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <main+0x4a4>)
 8000d0e:	f005 fb0f 	bl	8006330 <iprintf>
 8000d12:	e034      	b.n	8000d7e <main+0x4c6>
 8000d14:	20000094 	.word	0x20000094
 8000d18:	20000145 	.word	0x20000145
 8000d1c:	20000134 	.word	0x20000134
 8000d20:	2000013c 	.word	0x2000013c
 8000d24:	20000146 	.word	0x20000146
 8000d28:	20000147 	.word	0x20000147
 8000d2c:	0800782c 	.word	0x0800782c
 8000d30:	20000138 	.word	0x20000138
 8000d34:	200001a0 	.word	0x200001a0
 8000d38:	20000174 	.word	0x20000174
 8000d3c:	20000204 	.word	0x20000204
 8000d40:	08007838 	.word	0x08007838
 8000d44:	20000130 	.word	0x20000130
 8000d48:	2000015c 	.word	0x2000015c
 8000d4c:	20000154 	.word	0x20000154
 8000d50:	20000000 	.word	0x20000000
 8000d54:	08007770 	.word	0x08007770
 8000d58:	2000018c 	.word	0x2000018c
 8000d5c:	08007844 	.word	0x08007844
						}

					}
					// 1H switching
					else if (cursor == 4) {
 8000d60:	4b95      	ldr	r3, [pc, #596]	; (8000fb8 <main+0x700>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d00a      	beq.n	8000d7e <main+0x4c6>

					}

					// 10M switching
					else if (cursor == 6) {
 8000d68:	4b93      	ldr	r3, [pc, #588]	; (8000fb8 <main+0x700>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d006      	beq.n	8000d7e <main+0x4c6>

					}
					// 1M switching
					else if (cursor == 7) {
 8000d70:	4b91      	ldr	r3, [pc, #580]	; (8000fb8 <main+0x700>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d002      	beq.n	8000d7e <main+0x4c6>

					}

					// 10S switching
					else if (cursor == 9) {
 8000d78:	4b8f      	ldr	r3, [pc, #572]	; (8000fb8 <main+0x700>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b09      	cmp	r3, #9
					else if (cursor == 10) {

					}

					// clear the up flag
					up = 0;
 8000d7e:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <main+0x704>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
				}
				if (down > 0) {
 8000d84:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <main+0x708>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d069      	beq.n	8000e60 <main+0x5a8>
					if (cursor == 0) {
 8000d8c:	4b8a      	ldr	r3, [pc, #552]	; (8000fb8 <main+0x700>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d162      	bne.n	8000e5a <main+0x5a2>
						if (sTime_temp.TimeFormat == 0) {
 8000d94:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <main+0x70c>)
 8000d96:	78db      	ldrb	r3, [r3, #3]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12f      	bne.n	8000dfc <main+0x544>
							sTime_temp.TimeFormat = 1;
 8000d9c:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <main+0x70c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	70da      	strb	r2, [r3, #3]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
									ampm[sTime_temp.TimeFormat],
 8000da2:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <main+0x70c>)
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	4a86      	ldr	r2, [pc, #536]	; (8000fc8 <main+0x710>)
 8000db0:	441a      	add	r2, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000db2:	4b84      	ldr	r3, [pc, #528]	; (8000fc4 <main+0x70c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000db6:	4618      	mov	r0, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000db8:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <main+0x70c>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000dbc:	4619      	mov	r1, r3
									sTime_temp.Seconds);
 8000dbe:	4b81      	ldr	r3, [pc, #516]	; (8000fc4 <main+0x70c>)
 8000dc0:	789b      	ldrb	r3, [r3, #2]
							sprintf(Time_temp, "%s %02x:%02x:%02x",
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9100      	str	r1, [sp, #0]
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4980      	ldr	r1, [pc, #512]	; (8000fcc <main+0x714>)
 8000dca:	4881      	ldr	r0, [pc, #516]	; (8000fd0 <main+0x718>)
 8000dcc:	f005 fb72 	bl	80064b4 <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000dd0:	21c0      	movs	r1, #192	; 0xc0
 8000dd2:	204e      	movs	r0, #78	; 0x4e
 8000dd4:	f000 fad2 	bl	800137c <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, Time_temp);
 8000dd8:	497d      	ldr	r1, [pc, #500]	; (8000fd0 <main+0x718>)
 8000dda:	204e      	movs	r0, #78	; 0x4e
 8000ddc:	f000 fb0f 	bl	80013fe <LCD_SendString>
							for (int i = 0; i < 11; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e006      	b.n	8000df4 <main+0x53c>
								LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000de6:	2110      	movs	r1, #16
 8000de8:	204e      	movs	r0, #78	; 0x4e
 8000dea:	f000 fac7 	bl	800137c <LCD_SendCommand>
							for (int i = 0; i < 11; i++) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	ddf5      	ble.n	8000de6 <main+0x52e>
 8000dfa:	e02e      	b.n	8000e5a <main+0x5a2>
							}

						} else {
							sTime_temp.TimeFormat = 0;
 8000dfc:	4b71      	ldr	r3, [pc, #452]	; (8000fc4 <main+0x70c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
							sprintf(Time_temp, "%s%02x:%02x:%02x",
									ampm[sTime_temp.TimeFormat],
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <main+0x70c>)
 8000e04:	78db      	ldrb	r3, [r3, #3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	; (8000fc8 <main+0x710>)
 8000e10:	441a      	add	r2, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <main+0x70c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
							sprintf(Time_temp, "%s%02x:%02x:%02x",
 8000e16:	4618      	mov	r0, r3
									sTime_temp.Hours, sTime_temp.Minutes,
 8000e18:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <main+0x70c>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
							sprintf(Time_temp, "%s%02x:%02x:%02x",
 8000e1c:	4619      	mov	r1, r3
									sTime_temp.Seconds);
 8000e1e:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <main+0x70c>)
 8000e20:	789b      	ldrb	r3, [r3, #2]
							sprintf(Time_temp, "%s%02x:%02x:%02x",
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	9100      	str	r1, [sp, #0]
 8000e26:	4603      	mov	r3, r0
 8000e28:	496a      	ldr	r1, [pc, #424]	; (8000fd4 <main+0x71c>)
 8000e2a:	4869      	ldr	r0, [pc, #420]	; (8000fd0 <main+0x718>)
 8000e2c:	f005 fb42 	bl	80064b4 <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000e30:	21c0      	movs	r1, #192	; 0xc0
 8000e32:	204e      	movs	r0, #78	; 0x4e
 8000e34:	f000 faa2 	bl	800137c <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, Time_temp);
 8000e38:	4965      	ldr	r1, [pc, #404]	; (8000fd0 <main+0x718>)
 8000e3a:	204e      	movs	r0, #78	; 0x4e
 8000e3c:	f000 fadf 	bl	80013fe <LCD_SendString>
							for (int i = 0; i < 11; i++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	e006      	b.n	8000e54 <main+0x59c>
								LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000e46:	2110      	movs	r1, #16
 8000e48:	204e      	movs	r0, #78	; 0x4e
 8000e4a:	f000 fa97 	bl	800137c <LCD_SendCommand>
							for (int i = 0; i < 11; i++) {
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	ddf5      	ble.n	8000e46 <main+0x58e>

						}
					}

					// clear the down flag
					down = 0;
 8000e5a:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <main+0x708>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
				}

				if (left > 0) {
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <main+0x720>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d03e      	beq.n	8000ee6 <main+0x62e>
					if (cursor > 0) {
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <main+0x700>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d037      	beq.n	8000ee0 <main+0x628>
						cursor--;
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <main+0x700>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <main+0x700>)
 8000e7a:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	204e      	movs	r0, #78	; 0x4e
 8000e80:	f000 fa7c 	bl	800137c <LCD_SendCommand>

						if (cursor == 8) {
 8000e84:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <main+0x700>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d109      	bne.n	8000ea0 <main+0x5e8>
							cursor--;
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <main+0x700>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <main+0x700>)
 8000e96:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000e98:	2110      	movs	r1, #16
 8000e9a:	204e      	movs	r0, #78	; 0x4e
 8000e9c:	f000 fa6e 	bl	800137c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <main+0x700>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d109      	bne.n	8000ebc <main+0x604>
							cursor--;
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <main+0x700>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <main+0x700>)
 8000eb2:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	204e      	movs	r0, #78	; 0x4e
 8000eb8:	f000 fa60 	bl	800137c <LCD_SendCommand>
						}

						if (cursor == 2) {
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <main+0x700>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d10d      	bne.n	8000ee0 <main+0x628>
							cursor -= 2;
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <main+0x700>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <main+0x700>)
 8000ece:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	204e      	movs	r0, #78	; 0x4e
 8000ed4:	f000 fa52 	bl	800137c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010000);
 8000ed8:	2110      	movs	r1, #16
 8000eda:	204e      	movs	r0, #78	; 0x4e
 8000edc:	f000 fa4e 	bl	800137c <LCD_SendCommand>
						}
					}

					// clear the left flag
					left = 0;
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <main+0x720>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
				}

				if (right > 0) {
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <main+0x724>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d03e      	beq.n	8000f6c <main+0x6b4>

					if (cursor < 10) {
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <main+0x700>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	d837      	bhi.n	8000f66 <main+0x6ae>
						cursor++;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <main+0x700>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <main+0x700>)
 8000f00:	701a      	strb	r2, [r3, #0]
						LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f02:	2114      	movs	r1, #20
 8000f04:	204e      	movs	r0, #78	; 0x4e
 8000f06:	f000 fa39 	bl	800137c <LCD_SendCommand>

						if (cursor == 8) {
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <main+0x700>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d109      	bne.n	8000f26 <main+0x66e>
							cursor++;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <main+0x700>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <main+0x700>)
 8000f1c:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f1e:	2114      	movs	r1, #20
 8000f20:	204e      	movs	r0, #78	; 0x4e
 8000f22:	f000 fa2b 	bl	800137c <LCD_SendCommand>
						}

						if (cursor == 5) {
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <main+0x700>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d109      	bne.n	8000f42 <main+0x68a>
							cursor++;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <main+0x700>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <main+0x700>)
 8000f38:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	204e      	movs	r0, #78	; 0x4e
 8000f3e:	f000 fa1d 	bl	800137c <LCD_SendCommand>
						}

						if (cursor == 1) {
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <main+0x700>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d10d      	bne.n	8000f66 <main+0x6ae>
							cursor += 2;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <main+0x700>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <main+0x700>)
 8000f54:	701a      	strb	r2, [r3, #0]
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f56:	2114      	movs	r1, #20
 8000f58:	204e      	movs	r0, #78	; 0x4e
 8000f5a:	f000 fa0f 	bl	800137c <LCD_SendCommand>
							LCD_SendCommand(LCD_ADDR, 0b00010100);
 8000f5e:	2114      	movs	r1, #20
 8000f60:	204e      	movs	r0, #78	; 0x4e
 8000f62:	f000 fa0b 	bl	800137c <LCD_SendCommand>
						}
					}

					//clear the right flag
					right = 0;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <main+0x724>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
				}

				// clear the get_time flag (to measure the time)
				get_time = 0;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <main+0x728>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
		while (mode == 1) {
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <main+0x72c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	f43f adc2 	beq.w	8000b00 <main+0x248>

			}
		}
		//==========================================================================================================
		//AL loop
		while (mode == 2) {
 8000f7c:	e016      	b.n	8000fac <main+0x6f4>

			if (rising_edge >= 1 && falling_edge >= 1) {
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <main+0x730>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00f      	beq.n	8000fa6 <main+0x6ee>
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <main+0x734>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <main+0x6ee>
				rising_edge = 0;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <main+0x730>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <main+0x734>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <main+0x72c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <main+0x738>)
 8000fa2:	f005 fa4b 	bl	800643c <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <main+0x728>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
		while (mode == 2) {
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <main+0x72c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d0e4      	beq.n	8000f7e <main+0x6c6>
		}
		//==========================================================================================================
		//Song choice loop
		while (mode == 3) {
 8000fb4:	e035      	b.n	8001022 <main+0x76a>
 8000fb6:	bf00      	nop
 8000fb8:	20000154 	.word	0x20000154
 8000fbc:	2000015c 	.word	0x2000015c
 8000fc0:	2000015d 	.word	0x2000015d
 8000fc4:	200001a0 	.word	0x200001a0
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	08007770 	.word	0x08007770
 8000fd0:	2000018c 	.word	0x2000018c
 8000fd4:	0800785c 	.word	0x0800785c
 8000fd8:	2000015e 	.word	0x2000015e
 8000fdc:	2000015f 	.word	0x2000015f
 8000fe0:	20000130 	.word	0x20000130
 8000fe4:	20000147 	.word	0x20000147
 8000fe8:	20000145 	.word	0x20000145
 8000fec:	20000146 	.word	0x20000146
 8000ff0:	08007870 	.word	0x08007870

			if (rising_edge >= 1 && falling_edge >= 1) {
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <main+0x78c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <main+0x764>
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <main+0x790>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <main+0x764>
				rising_edge = 0;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <main+0x78c>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
				falling_edge = 0;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <main+0x790>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
				mode = 0;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <main+0x794>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
				printf("mode reset\r\n");
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <main+0x798>)
 8001018:	f005 fa10 	bl	800643c <puts>
			}

			// clear the get_time flag (to measure the time)
			get_time = 0;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <main+0x79c>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
		while (mode == 3) {
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <main+0x794>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d0e4      	beq.n	8000ff4 <main+0x73c>
		}
		//==========================================================================================================
		memset(buf, 0, sizeof(buf));
 800102a:	2250      	movs	r2, #80	; 0x50
 800102c:	2100      	movs	r1, #0
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <main+0x7a0>)
 8001030:	f005 f976 	bl	8006320 <memset>
		sprintf(buf, "%d\r\n", ADC_value);
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <main+0x7a4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <main+0x7a8>)
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <main+0x7a0>)
 800103e:	f005 fa39 	bl	80064b4 <siprintf>
	while (1) {
 8001042:	e456      	b.n	80008f2 <main+0x3a>
 8001044:	20000145 	.word	0x20000145
 8001048:	20000146 	.word	0x20000146
 800104c:	20000147 	.word	0x20000147
 8001050:	08007870 	.word	0x08007870
 8001054:	20000130 	.word	0x20000130
 8001058:	200001b4 	.word	0x200001b4
 800105c:	20000158 	.word	0x20000158
 8001060:	0800787c 	.word	0x0800787c

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f005 f954 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <SystemClock_Config+0xdc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <SystemClock_Config+0xdc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemClock_Config+0xdc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SystemClock_Config+0xe0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <SystemClock_Config+0xe0>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <SystemClock_Config+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80010c0:	2306      	movs	r3, #6
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010dc:	23b4      	movs	r3, #180	; 0xb4
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fb41 	bl	8003774 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010f8:	f000 faa2 	bl	8001640 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010fc:	f002 faea 	bl	80036d4 <HAL_PWREx_EnableOverDrive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001106:	f000 fa9b 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001116:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2105      	movs	r1, #5
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fd9b 	bl	8003c64 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001134:	f000 fa84 	bl	8001640 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	; 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2027      	movs	r0, #39	; 0x27
 8001152:	f001 fa26 	bl	80025a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001156:	2027      	movs	r0, #39	; 0x27
 8001158:	f001 fa3f 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2028      	movs	r0, #40	; 0x28
 8001162:	f001 fa1e 	bl	80025a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f001 fa37 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	201d      	movs	r0, #29
 8001172:	f001 fa16 	bl	80025a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001176:	201d      	movs	r0, #29
 8001178:	f001 fa2f 	bl	80025da <HAL_NVIC_EnableIRQ>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <button_status>:

/* USER CODE BEGIN 4 */
ADC_StatusTypeDef button_status(uint32_t value) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	if (value < 100)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b63      	cmp	r3, #99	; 0x63
 800118c:	d801      	bhi.n	8001192 <button_status+0x12>
		return UP;
 800118e:	2302      	movs	r3, #2
 8001190:	e02a      	b.n	80011e8 <button_status+0x68>
	if (800 < value && value < 900)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001198:	d905      	bls.n	80011a6 <button_status+0x26>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80011a0:	d201      	bcs.n	80011a6 <button_status+0x26>
		return DOWN;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e020      	b.n	80011e8 <button_status+0x68>
	if (1800 < value && value < 2000)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80011ac:	d905      	bls.n	80011ba <button_status+0x3a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011b4:	d201      	bcs.n	80011ba <button_status+0x3a>
		return LEFT;
 80011b6:	2304      	movs	r3, #4
 80011b8:	e016      	b.n	80011e8 <button_status+0x68>
	if (2800 < value && value < 3000)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80011c0:	d906      	bls.n	80011d0 <button_status+0x50>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d801      	bhi.n	80011d0 <button_status+0x50>
		return RIGHT;
 80011cc:	2305      	movs	r3, #5
 80011ce:	e00b      	b.n	80011e8 <button_status+0x68>
	if (4000 < value && value < 5000)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011d6:	d906      	bls.n	80011e6 <button_status+0x66>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f241 3287 	movw	r2, #4999	; 0x1387
 80011de:	4293      	cmp	r3, r2
 80011e0:	d801      	bhi.n	80011e6 <button_status+0x66>
		return SELECT;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <button_status+0x68>

	return NONE;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <I2C_Scan>:

void I2C_Scan() {
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b096      	sub	sp, #88	; 0x58
 80011f8:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <I2C_Scan+0xc0>)
 80011fc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120a:	6020      	str	r0, [r4, #0]
 800120c:	3404      	adds	r4, #4
 800120e:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8001210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ffeb 	bl	80001f0 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	4824      	ldr	r0, [pc, #144]	; (80012b8 <I2C_Scan+0xc4>)
 8001228:	f004 f889 	bl	800533e <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 128; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001232:	e030      	b.n	8001296 <I2C_Scan+0xa2>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001234:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b299      	uxth	r1, r3
 800123c:	230a      	movs	r3, #10
 800123e:	2201      	movs	r2, #1
 8001240:	481e      	ldr	r0, [pc, #120]	; (80012bc <I2C_Scan+0xc8>)
 8001242:	f001 fe95 	bl	8002f70 <HAL_I2C_IsDeviceReady>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <I2C_Scan+0xcc>)
 800124c:	701a      	strb	r2, [r3, #0]
		if (res == HAL_OK) {
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <I2C_Scan+0xcc>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d113      	bne.n	800127e <I2C_Scan+0x8a>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8001256:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800125a:	4638      	mov	r0, r7
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <I2C_Scan+0xd0>)
 800125e:	2140      	movs	r1, #64	; 0x40
 8001260:	f005 f8f4 	bl	800644c <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
 8001264:	463b      	mov	r3, r7
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffc2 	bl	80001f0 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	4639      	mov	r1, r7
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <I2C_Scan+0xc4>)
 8001278:	f004 f861 	bl	800533e <HAL_UART_Transmit>
 800127c:	e006      	b.n	800128c <I2C_Scan+0x98>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	2201      	movs	r2, #1
 8001284:	4910      	ldr	r1, [pc, #64]	; (80012c8 <I2C_Scan+0xd4>)
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <I2C_Scan+0xc4>)
 8001288:	f004 f859 	bl	800533e <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800128c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001290:	3301      	adds	r3, #1
 8001292:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001296:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800129a:	2b7f      	cmp	r3, #127	; 0x7f
 800129c:	d9ca      	bls.n	8001234 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2202      	movs	r2, #2
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <I2C_Scan+0xd8>)
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <I2C_Scan+0xc4>)
 80012a8:	f004 f849 	bl	800533e <HAL_UART_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	3758      	adds	r7, #88	; 0x58
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	08007894 	.word	0x08007894
 80012b8:	20000270 	.word	0x20000270
 80012bc:	200000dc 	.word	0x200000dc
 80012c0:	20000144 	.word	0x20000144
 80012c4:	08007884 	.word	0x08007884
 80012c8:	0800788c 	.word	0x0800788c
 80012cc:	08007890 	.word	0x08007890

080012d0 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	460b      	mov	r3, r1
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	4613      	mov	r3, r2
 80012e0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	b299      	uxth	r1, r3
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	2201      	movs	r2, #1
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <LCD_SendInternal+0xa8>)
 80012ee:	f001 fe3f 	bl	8002f70 <HAL_I2C_IsDeviceReady>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d000      	beq.n	80012fe <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012fc:	e7f1      	b.n	80012e2 <LCD_SendInternal+0x12>
			break;
 80012fe:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 800130e:	7bba      	ldrb	r2, [r7, #14]
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	4313      	orrs	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f043 030c 	orr.w	r3, r3, #12
 800131a:	b2db      	uxtb	r3, r3
 800131c:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 800131e:	7bba      	ldrb	r2, [r7, #14]
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	4313      	orrs	r3, r2
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 800132e:	7b7a      	ldrb	r2, [r7, #13]
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	4313      	orrs	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 030c 	orr.w	r3, r3, #12
 800133a:	b2db      	uxtb	r3, r3
 800133c:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 800133e:	7b7a      	ldrb	r2, [r7, #13]
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	4313      	orrs	r3, r2
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	b2db      	uxtb	r3, r3
 800134c:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	b299      	uxth	r1, r3
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2304      	movs	r3, #4
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <LCD_SendInternal+0xa8>)
 8001360:	f001 fd08 	bl	8002d74 <HAL_I2C_Master_Transmit>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001368:	2005      	movs	r0, #5
 800136a:	f000 fc97 	bl	8001c9c <HAL_Delay>
	return res;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000dc 	.word	0x200000dc

0800137c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 800138c:	79b9      	ldrb	r1, [r7, #6]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2200      	movs	r2, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff9c 	bl	80012d0 <LCD_SendInternal>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 80013b0:	79b9      	ldrb	r1, [r7, #6]
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff8a 	bl	80012d0 <LCD_SendInternal>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2130      	movs	r1, #48	; 0x30
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffd2 	bl	800137c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2102      	movs	r1, #2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ffcd 	bl	800137c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	210c      	movs	r1, #12
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffc8 	bl	800137c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffc3 	bl	800137c <LCD_SendCommand>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	6039      	str	r1, [r7, #0]
 8001408:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 800140a:	e009      	b.n	8001420 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffc3 	bl	80013a0 <LCD_SendData>
		str++;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f1      	bne.n	800140c <LCD_SendString+0xe>
	}
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <init>:

void init() {
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	I2C_Scan();
 8001438:	f7ff fedc 	bl	80011f4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 800143c:	204e      	movs	r0, #78	; 0x4e
 800143e:	f7ff ffc1 	bl	80013c4 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	204e      	movs	r0, #78	; 0x4e
 8001446:	f7ff ff99 	bl	800137c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 800144a:	4907      	ldr	r1, [pc, #28]	; (8001468 <init+0x34>)
 800144c:	204e      	movs	r0, #78	; 0x4e
 800144e:	f7ff ffd6 	bl	80013fe <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001452:	21c0      	movs	r1, #192	; 0xc0
 8001454:	204e      	movs	r0, #78	; 0x4e
 8001456:	f7ff ff91 	bl	800137c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 800145a:	4904      	ldr	r1, [pc, #16]	; (800146c <init+0x38>)
 800145c:	204e      	movs	r0, #78	; 0x4e
 800145e:	f7ff ffce 	bl	80013fe <LCD_SendString>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	080078ac 	.word	0x080078ac
 800146c:	080078bc 	.word	0x080078bc

08001470 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]

	// rising edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <HAL_GPIO_EXTI_Callback+0x7c>)
 8001480:	f001 fb04 	bl	8002a8c <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d110      	bne.n	80014ac <HAL_GPIO_EXTI_Callback+0x3c>
		rising_edge++;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x80>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001494:	701a      	strb	r2, [r3, #0]

		printf("rising edge : %d\r\n", rising_edge);
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4815      	ldr	r0, [pc, #84]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x84>)
 800149e:	f004 ff47 	bl	8006330 <iprintf>
		start_tick = HAL_GetTick();
 80014a2:	f000 fbef 	bl	8001c84 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x88>)
 80014aa:	6013      	str	r3, [r2, #0]
	}

	// falling edge
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80014ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b0:	480e      	ldr	r0, [pc, #56]	; (80014ec <HAL_GPIO_EXTI_Callback+0x7c>)
 80014b2:	f001 faeb 	bl	8002a8c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d113      	bne.n	80014e4 <HAL_GPIO_EXTI_Callback+0x74>
		if(rising_edge == 0) {
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x80>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <HAL_GPIO_EXTI_Callback+0x5c>
			falling_edge = 0;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e005      	b.n	80014d8 <HAL_GPIO_EXTI_Callback+0x68>
		}
		else {
			falling_edge++;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 80014d6:	701a      	strb	r2, [r3, #0]
		}
		printf("falling edge : %d\r\n", falling_edge);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_Callback+0x90>)
 80014e0:	f004 ff26 	bl	8006330 <iprintf>
	}

}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020800 	.word	0x40020800
 80014f0:	20000145 	.word	0x20000145
 80014f4:	080078cc 	.word	0x080078cc
 80014f8:	20000148 	.word	0x20000148
 80014fc:	20000146 	.word	0x20000146
 8001500:	080078e0 	.word	0x080078e0

08001504 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d16f      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xf2>

//		HAL_ADC_PollForConversion(&hadc1, 10);
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8001516:	483b      	ldr	r0, [pc, #236]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001518:	f000 fd2d 	bl	8001f76 <HAL_ADC_GetValue>
 800151c:	4603      	mov	r3, r0
 800151e:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001520:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8001522:	4838      	ldr	r0, [pc, #224]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001524:	f000 fcf4 	bl	8001f10 <HAL_ADC_Stop>

		if (button_status(ADC_value) == UP) {
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe27 	bl	8001180 <button_status>
 8001532:	4603      	mov	r3, r0
 8001534:	2b02      	cmp	r3, #2
 8001536:	d10b      	bne.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x4c>
			up++;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001542:	701a      	strb	r2, [r3, #0]
			printf("UP : %d\r\n", up);
 8001544:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4831      	ldr	r0, [pc, #196]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800154c:	f004 fef0 	bl	8006330 <iprintf>
		}
		if (button_status(ADC_value) == DOWN) {
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe13 	bl	8001180 <button_status>
 800155a:	4603      	mov	r3, r0
 800155c:	2b03      	cmp	r3, #3
 800155e:	d10b      	bne.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x74>
			down++;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800156a:	701a      	strb	r2, [r3, #0]
			printf("DOWN : %d\r\n", down);
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001574:	f004 fedc 	bl	8006330 <iprintf>
		}
		if (button_status(ADC_value) == LEFT) {
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fdff 	bl	8001180 <button_status>
 8001582:	4603      	mov	r3, r0
 8001584:	2b04      	cmp	r3, #4
 8001586:	d10b      	bne.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			left++;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001592:	701a      	strb	r2, [r3, #0]
			printf("LEFT : %d\r\n", left);
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4821      	ldr	r0, [pc, #132]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800159c:	f004 fec8 	bl	8006330 <iprintf>
		}
		if (button_status(ADC_value) == RIGHT) {
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdeb 	bl	8001180 <button_status>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10b      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0xc4>
			right++;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015ba:	701a      	strb	r2, [r3, #0]
			printf("RIGHT : %d\r\n", right);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4819      	ldr	r0, [pc, #100]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80015c4:	f004 feb4 	bl	8006330 <iprintf>
		}

		if (apply_flag > 0) {
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_TIM_PeriodElapsedCallback+0xd6>
			get_time_apply++;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015d8:	6013      	str	r3, [r2, #0]
		}
		if (exit_flag > 0) {
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xe8>
			get_time_exit++;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015ea:	6013      	str	r3, [r2, #0]
		}
		get_time++;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015f4:	6013      	str	r3, [r2, #0]
	}
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40000400 	.word	0x40000400
 8001604:	20000094 	.word	0x20000094
 8001608:	20000158 	.word	0x20000158
 800160c:	2000015c 	.word	0x2000015c
 8001610:	080078f4 	.word	0x080078f4
 8001614:	2000015d 	.word	0x2000015d
 8001618:	08007900 	.word	0x08007900
 800161c:	2000015e 	.word	0x2000015e
 8001620:	0800790c 	.word	0x0800790c
 8001624:	2000015f 	.word	0x2000015f
 8001628:	08007918 	.word	0x08007918
 800162c:	20000134 	.word	0x20000134
 8001630:	20000138 	.word	0x20000138
 8001634:	2000013c 	.word	0x2000013c
 8001638:	20000140 	.word	0x20000140
 800163c:	20000130 	.word	0x20000130

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_RTC_Init+0xb0>)
 8001666:	4a26      	ldr	r2, [pc, #152]	; (8001700 <MX_RTC_Init+0xb4>)
 8001668:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <MX_RTC_Init+0xb0>)
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_RTC_Init+0xb0>)
 8001672:	227f      	movs	r2, #127	; 0x7f
 8001674:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_RTC_Init+0xb0>)
 8001678:	22ff      	movs	r2, #255	; 0xff
 800167a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_RTC_Init+0xb0>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_RTC_Init+0xb0>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_RTC_Init+0xb0>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <MX_RTC_Init+0xb0>)
 8001690:	f002 fe88 	bl	80043a4 <HAL_RTC_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800169a:	f7ff ffd1 	bl	8001640 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 800169e:	2301      	movs	r3, #1
 80016a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80016aa:	2301      	movs	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <MX_RTC_Init+0xb0>)
 80016be:	f002 fee7 	bl	8004490 <HAL_RTC_SetTime>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80016c8:	f7ff ffba 	bl	8001640 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016cc:	2301      	movs	r3, #1
 80016ce:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80016d0:	2301      	movs	r3, #1
 80016d2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80016d8:	2300      	movs	r3, #0
 80016da:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	2201      	movs	r2, #1
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_RTC_Init+0xb0>)
 80016e4:	f002 ffcc 	bl	8004680 <HAL_RTC_SetDate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80016ee:	f7ff ffa7 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000204 	.word	0x20000204
 8001700:	40002800 	.word	0x40002800

08001704 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2230      	movs	r2, #48	; 0x30
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fe03 	bl	8006320 <memset>
  if(rtcHandle->Instance==RTC)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_RTC_MspInit+0x4c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d111      	bne.n	8001748 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001724:	2320      	movs	r3, #32
 8001726:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fc76 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800173e:	f7ff ff7f 	bl	8001640 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_RTC_MspInit+0x50>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40002800 	.word	0x40002800
 8001754:	42470e3c 	.word	0x42470e3c

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_MspInit+0x4c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 fa32 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM3_IRQHandler+0x10>)
 8001802:	f003 f98d 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000228 	.word	0x20000228

08001810 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART3_IRQHandler+0x10>)
 8001816:	f003 fe25 	bl	8005464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000270 	.word	0x20000270

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001828:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800182c:	f001 f946 	bl	8002abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f803 	bl	8000894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f004 fcc4 	bl	80062cc <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20030000 	.word	0x20030000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000224 	.word	0x20000224
 8001978:	200002c8 	.word	0x200002c8

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <MX_TIM3_Init+0x98>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019d2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e6:	f002 ffdb 	bl	80049a0 <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019f0:	f7ff fe26 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a02:	f003 f995 	bl	8004d30 <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a0c:	f7ff fe18 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a10:	2320      	movs	r3, #32
 8001a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a1e:	f003 fbb1 	bl	8005184 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a28:	f7ff fe0a 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000228 	.word	0x20000228
 8001a38:	40000400 	.word	0x40000400

08001a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_TIM_Base_MspInit+0x3c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10d      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_TIM_Base_MspInit+0x40>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40023800 	.word	0x40023800

08001a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART3_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001ab8:	f003 fbf4 	bl	80052a4 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f7ff fdbd 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000270 	.word	0x20000270
 8001ad0:	40004800 	.word	0x40004800

08001ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0x84>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12c      	bne.n	8001b50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b40:	2307      	movs	r3, #7
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_UART_MspInit+0x8c>)
 8001b4c:	f000 fdf2 	bl	8002734 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40004800 	.word	0x40004800
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b6a:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b80:	4c0b      	ldr	r4, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff fef5 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f004 fba1 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe fe8f 	bl	80008b8 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ba8:	080079e8 	.word	0x080079e8
  ldr r2, =_sbss
 8001bac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bb0:	200002c8 	.word	0x200002c8

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 fcd3 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	200f      	movs	r0, #15
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fdb4 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fceb 	bl	80025f6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 fcb3 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000010 	.word	0x20000010
 8001c58:	2000000c 	.word	0x2000000c

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000010 	.word	0x20000010
 8001c80:	200002b4 	.word	0x200002b4

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200002b4 	.word	0x200002b4

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000010 	.word	0x20000010

08001ce4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e033      	b.n	8001d62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fca0 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d2a:	f023 0302 	bic.w	r3, r3, #2
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa5c 	bl	80021f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
 8001d52:	e001      	b.n	8001d58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Start+0x1a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0b2      	b.n	8001eec <HAL_ADC_Start+0x180>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d018      	beq.n	8001dce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dac:	4b52      	ldr	r3, [pc, #328]	; (8001ef8 <HAL_ADC_Start+0x18c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_ADC_Start+0x190>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9a      	lsrs	r2, r3, #18
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d17a      	bne.n	8001ed2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f023 0206 	bic.w	r2, r3, #6
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_ADC_Start+0x194>)
 8001e3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d12a      	bne.n	8001ea8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <HAL_ADC_Start+0x198>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d015      	beq.n	8001e88 <HAL_ADC_Start+0x11c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <HAL_ADC_Start+0x19c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <HAL_ADC_Start+0x106>
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_ADC_Start+0x194>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_ADC_Start+0x1a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d136      	bne.n	8001eea <HAL_ADC_Start+0x17e>
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_ADC_Start+0x194>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d130      	bne.n	8001eea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d129      	bne.n	8001eea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	e020      	b.n	8001eea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_ADC_Start+0x198>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d11b      	bne.n	8001eea <HAL_ADC_Start+0x17e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d114      	bne.n	8001eea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e00b      	b.n	8001eea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	40012300 	.word	0x40012300
 8001f04:	40012000 	.word	0x40012000
 8001f08:	40012100 	.word	0x40012100
 8001f0c:	40012200 	.word	0x40012200

08001f10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Stop+0x16>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e021      	b.n	8001f6a <HAL_ADC_Stop+0x5a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1c>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e113      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x244>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	d925      	bls.n	8002008 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	400a      	ands	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68d9      	ldr	r1, [r3, #12]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4403      	add	r3, r0
 8001ffa:	3b1e      	subs	r3, #30
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	e022      	b.n	800204e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	2207      	movs	r2, #7
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	4603      	mov	r3, r0
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4403      	add	r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d824      	bhi.n	80020a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b05      	subs	r3, #5
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b05      	subs	r3, #5
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
 800209e:	e04c      	b.n	800213a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d824      	bhi.n	80020f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b23      	subs	r3, #35	; 0x23
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	400a      	ands	r2, r1
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b23      	subs	r3, #35	; 0x23
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
 80020f0:	e023      	b.n	800213a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3b41      	subs	r3, #65	; 0x41
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	400a      	ands	r2, r1
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b41      	subs	r3, #65	; 0x41
 800212e:	fa00 f203 	lsl.w	r2, r0, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_ADC_ConfigChannel+0x250>)
 800213c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_ADC_ConfigChannel+0x254>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d10f      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1d8>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b12      	cmp	r3, #18
 800214e:	d10b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_ADC_ConfigChannel+0x254>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12b      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x23a>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_ADC_ConfigChannel+0x258>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x1f4>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b11      	cmp	r3, #17
 8002182:	d122      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_ADC_ConfigChannel+0x258>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d111      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_ADC_ConfigChannel+0x25c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_ADC_ConfigChannel+0x260>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9a      	lsrs	r2, r3, #18
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021bc:	e002      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40012300 	.word	0x40012300
 80021e4:	40012000 	.word	0x40012000
 80021e8:	10000012 	.word	0x10000012
 80021ec:	20000008 	.word	0x20000008
 80021f0:	431bde83 	.word	0x431bde83

080021f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fc:	4b79      	ldr	r3, [pc, #484]	; (80023e4 <ADC_Init+0x1f0>)
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	021a      	lsls	r2, r3, #8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800224c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <ADC_Init+0x1f4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800229a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6899      	ldr	r1, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e00f      	b.n	80022f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0202 	bic.w	r2, r2, #2
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7e1b      	ldrb	r3, [r3, #24]
 800230c:	005a      	lsls	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800233e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	3b01      	subs	r3, #1
 800234c:	035a      	lsls	r2, r3, #13
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	e007      	b.n	8002368 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	3b01      	subs	r3, #1
 8002384:	051a      	lsls	r2, r3, #20
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800239c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6899      	ldr	r1, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023aa:	025a      	lsls	r2, r3, #9
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	029a      	lsls	r2, r3, #10
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40012300 	.word	0x40012300
 80023e8:	0f000001 	.word	0x0f000001

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff3e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff31 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff fb32 	bl	8001c84 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d008      	beq.n	8002640 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e052      	b.n	80026e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0216 	bic.w	r2, r2, #22
 800264e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d103      	bne.n	8002670 <HAL_DMA_Abort+0x62>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002690:	e013      	b.n	80026ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002692:	f7ff faf7 	bl	8001c84 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b05      	cmp	r3, #5
 800269e:	d90c      	bls.n	80026ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e015      	b.n	80026e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e4      	bne.n	8002692 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	223f      	movs	r2, #63	; 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d004      	beq.n	800270c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e00c      	b.n	8002726 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2205      	movs	r2, #5
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e177      	b.n	8002a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8166 	bne.w	8002a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80c0 	beq.w	8002a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a61      	ldr	r2, [pc, #388]	; (8002a5c <HAL_GPIO_Init+0x328>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_GPIO_Init+0x32c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d037      	beq.n	8002972 <HAL_GPIO_Init+0x23e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_GPIO_Init+0x330>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d031      	beq.n	800296e <HAL_GPIO_Init+0x23a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a56      	ldr	r2, [pc, #344]	; (8002a68 <HAL_GPIO_Init+0x334>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x236>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <HAL_GPIO_Init+0x338>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x232>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a54      	ldr	r2, [pc, #336]	; (8002a70 <HAL_GPIO_Init+0x33c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a53      	ldr	r2, [pc, #332]	; (8002a74 <HAL_GPIO_Init+0x340>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x22a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_GPIO_Init+0x344>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x226>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <HAL_GPIO_Init+0x348>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x222>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a50      	ldr	r2, [pc, #320]	; (8002a80 <HAL_GPIO_Init+0x34c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4f      	ldr	r2, [pc, #316]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x21a>
 800294a:	2309      	movs	r3, #9
 800294c:	e012      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800294e:	230a      	movs	r3, #10
 8002950:	e010      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002952:	2308      	movs	r3, #8
 8002954:	e00e      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002956:	2307      	movs	r3, #7
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295a:	2306      	movs	r3, #6
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x328>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae84 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40021c00 	.word	0x40021c00
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40022400 	.word	0x40022400
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fcc8 	bl	8001470 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40013c00 	.word	0x40013c00

08002aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e12b      	b.n	8002d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fe76 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b50:	f001 fa40 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a81      	ldr	r2, [pc, #516]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d807      	bhi.n	8002b70 <HAL_I2C_Init+0x84>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <HAL_I2C_Init+0x278>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf94      	ite	ls
 8002b68:	2301      	movls	r3, #1
 8002b6a:	2300      	movhi	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e006      	b.n	8002b7e <HAL_I2C_Init+0x92>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <HAL_I2C_Init+0x27c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bf94      	ite	ls
 8002b78:	2301      	movls	r3, #1
 8002b7a:	2300      	movhi	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0e7      	b.n	8002d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a78      	ldr	r2, [pc, #480]	; (8002d6c <HAL_I2C_Init+0x280>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d802      	bhi.n	8002bc0 <HAL_I2C_Init+0xd4>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	e009      	b.n	8002bd4 <HAL_I2C_Init+0xe8>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_I2C_Init+0x284>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	495c      	ldr	r1, [pc, #368]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002bf0:	428b      	cmp	r3, r1
 8002bf2:	d819      	bhi.n	8002c28 <HAL_I2C_Init+0x13c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1e59      	subs	r1, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c02:	1c59      	adds	r1, r3, #1
 8002c04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c08:	400b      	ands	r3, r1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_I2C_Init+0x138>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e59      	subs	r1, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c22:	e051      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c24:	2304      	movs	r3, #4
 8002c26:	e04f      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <HAL_I2C_Init+0x168>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e012      	b.n	8002c7a <HAL_I2C_Init+0x18e>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x196>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e022      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10e      	bne.n	8002ca8 <HAL_I2C_Init+0x1bc>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1e58      	subs	r0, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	440b      	add	r3, r1
 8002c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca6:	e00f      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6809      	ldr	r1, [r1, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6911      	ldr	r1, [r2, #16]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	000186a0 	.word	0x000186a0
 8002d64:	001e847f 	.word	0x001e847f
 8002d68:	003d08ff 	.word	0x003d08ff
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	10624dd3 	.word	0x10624dd3

08002d74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	817b      	strh	r3, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7fe ff7c 	bl	8001c84 <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	f040 80e0 	bne.w	8002f5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	4970      	ldr	r1, [pc, #448]	; (8002f68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa92 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0d3      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x50>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0cc      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d007      	beq.n	8002dea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2221      	movs	r2, #33	; 0x21
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2210      	movs	r2, #16
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	893a      	ldrh	r2, [r7, #8]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a50      	ldr	r2, [pc, #320]	; (8002f6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f9ca 	bl	80031cc <I2C_MasterRequestWrite>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e08d      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e58:	e066      	b.n	8002f28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fb0c 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d107      	bne.n	8002e82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06b      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d11b      	bne.n	8002efc <HAL_I2C_Master_Transmit+0x188>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d017      	beq.n	8002efc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	6a39      	ldr	r1, [r7, #32]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fafc 	bl	80034fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d107      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e01a      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d194      	bne.n	8002e5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	00100002 	.word	0x00100002
 8002f6c:	ffff0000 	.word	0xffff0000

08002f70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7fe fe80 	bl	8001c84 <HAL_GetTick>
 8002f84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	f040 8111 	bne.w	80031ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2319      	movs	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4988      	ldr	r1, [pc, #544]	; (80031c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f994 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e104      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_I2C_IsDeviceReady+0x50>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0fd      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d007      	beq.n	8002fe6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2224      	movs	r2, #36	; 0x24
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a70      	ldr	r2, [pc, #448]	; (80031c8 <HAL_I2C_IsDeviceReady+0x258>)
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f952 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003040:	d103      	bne.n	800304a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0b6      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800305c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe fe11 	bl	8001c84 <HAL_GetTick>
 8003062:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003092:	e025      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fe fdf6 	bl	8001c84 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <HAL_I2C_IsDeviceReady+0x13a>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22a0      	movs	r2, #160	; 0xa0
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2ba0      	cmp	r3, #160	; 0xa0
 80030ea:	d005      	beq.n	80030f8 <HAL_I2C_IsDeviceReady+0x188>
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_I2C_IsDeviceReady+0x188>
 80030f2:	7dbb      	ldrb	r3, [r7, #22]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0cd      	beq.n	8003094 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d129      	bne.n	8003162 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2319      	movs	r3, #25
 800313a:	2201      	movs	r2, #1
 800313c:	4921      	ldr	r1, [pc, #132]	; (80031c4 <HAL_I2C_IsDeviceReady+0x254>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8c6 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e036      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e02c      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800317a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	490f      	ldr	r1, [pc, #60]	; (80031c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8a2 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e012      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3301      	adds	r3, #1
 800319a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	f4ff af32 	bcc.w	800300a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00100002 	.word	0x00100002
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d006      	beq.n	80031f6 <I2C_MasterRequestWrite+0x2a>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d003      	beq.n	80031f6 <I2C_MasterRequestWrite+0x2a>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f4:	d108      	bne.n	8003208 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00b      	b.n	8003220 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	2b12      	cmp	r3, #18
 800320e:	d107      	bne.n	8003220 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f84f 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d103      	bne.n	8003250 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e035      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d108      	bne.n	8003270 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e01b      	b.n	80032a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	11db      	asrs	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f063 030f 	orn	r3, r3, #15
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	490e      	ldr	r1, [pc, #56]	; (80032c8 <I2C_MasterRequestWrite+0xfc>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f875 	bl	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e010      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <I2C_MasterRequestWrite+0x100>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f865 	bl	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	00010008 	.word	0x00010008
 80032cc:	00010002 	.word	0x00010002

080032d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e0:	e025      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d021      	beq.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fccb 	bl	8001c84 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e023      	b.n	8003376 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d10d      	bne.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	e00c      	b.n	800336e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d0b6      	beq.n	80032e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338c:	e051      	b.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d123      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e046      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d021      	beq.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fc49 	bl	8001c84 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e020      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10c      	bne.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e00b      	b.n	800346e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	43da      	mvns	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d18d      	bne.n	800338e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	e02d      	b.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f878 	bl	8003580 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e02d      	b.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d021      	beq.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fbef 	bl	8001c84 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e007      	b.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d1ca      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350a:	e02d      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f837 	bl	8003580 <I2C_IsAcknowledgeFailed>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e02d      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d021      	beq.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe fbae 	bl	8001c84 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d1ca      	bne.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d11b      	bne.n	80035d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d129      	bne.n	8003648 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2224      	movs	r2, #36	; 0x24
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0210 	bic.w	r2, r2, #16
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	d12a      	bne.n	80036c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	f023 030f 	bic.w	r3, r3, #15
 8003696:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b29a      	uxth	r2, r3
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	4313      	orrs	r3, r2
 80036a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	89fa      	ldrh	r2, [r7, #14]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_PWREx_EnableOverDrive+0x90>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_PWREx_EnableOverDrive+0x94>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003700:	f7fe fac0 	bl	8001c84 <HAL_GetTick>
 8003704:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003706:	e009      	b.n	800371c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003708:	f7fe fabc 	bl	8001c84 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003716:	d901      	bls.n	800371c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e01f      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <HAL_PWREx_EnableOverDrive+0x98>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d1ee      	bne.n	8003708 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003730:	f7fe faa8 	bl	8001c84 <HAL_GetTick>
 8003734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003736:	e009      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003738:	f7fe faa4 	bl	8001c84 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003746:	d901      	bls.n	800374c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e007      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_PWREx_EnableOverDrive+0x98>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003758:	d1ee      	bne.n	8003738 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	420e0040 	.word	0x420e0040
 800376c:	40007000 	.word	0x40007000
 8003770:	420e0044 	.word	0x420e0044

08003774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e267      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d075      	beq.n	800387e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d00c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d112      	bne.n	80037d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4b82      	ldr	r3, [pc, #520]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d10b      	bne.n	80037d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	4b7e      	ldr	r3, [pc, #504]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05b      	beq.n	800387c <HAL_RCC_OscConfig+0x108>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d157      	bne.n	800387c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e242      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d106      	bne.n	80037e8 <HAL_RCC_OscConfig+0x74>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e01d      	b.n	8003824 <HAL_RCC_OscConfig+0xb0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x98>
 80037f2:	4b70      	ldr	r3, [pc, #448]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6f      	ldr	r2, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6c      	ldr	r2, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0xb0>
 800380c:	4b69      	ldr	r3, [pc, #420]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a68      	ldr	r2, [pc, #416]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a65      	ldr	r2, [pc, #404]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe fa2a 	bl	8001c84 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe fa26 	bl	8001c84 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e207      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0xc0>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe fa16 	bl	8001c84 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fa12 	bl	8001c84 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1f3      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0xe8>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x152>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1c7      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_RCC_OscConfig+0x244>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe f9cb 	bl	8001c84 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe f9c7 	bl	8001c84 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1a8      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_RCC_OscConfig+0x244>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe f9aa 	bl	8001c84 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003934:	f7fe f9a6 	bl	8001c84 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e187      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d036      	beq.n	80039cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCC_OscConfig+0x248>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe f98a 	bl	8001c84 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003974:	f7fe f986 	bl	8001c84 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e167      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x240>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x200>
 8003992:	e01b      	b.n	80039cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_OscConfig+0x248>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7fe f973 	bl	8001c84 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e00e      	b.n	80039c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe f96f 	bl	8001c84 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d907      	bls.n	80039c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e150      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	42470000 	.word	0x42470000
 80039bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b88      	ldr	r3, [pc, #544]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ea      	bne.n	80039a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8097 	beq.w	8003b08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b7d      	ldr	r3, [pc, #500]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b77      	ldr	r3, [pc, #476]	; (8003be8 <HAL_RCC_OscConfig+0x474>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x474>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a73      	ldr	r2, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x474>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fe f92f 	bl	8001c84 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2a:	f7fe f92b 	bl	8001c84 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e10c      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_OscConfig+0x474>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x2ea>
 8003a50:	4b64      	ldr	r3, [pc, #400]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a63      	ldr	r2, [pc, #396]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x324>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x30c>
 8003a66:	4b5f      	ldr	r3, [pc, #380]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	4b5c      	ldr	r3, [pc, #368]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5b      	ldr	r2, [pc, #364]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0x324>
 8003a80:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a57      	ldr	r2, [pc, #348]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8c:	4b55      	ldr	r3, [pc, #340]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a54      	ldr	r2, [pc, #336]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fe f8f0 	bl	8001c84 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe f8ec 	bl	8001c84 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0cb      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ee      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x334>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7fe f8da 	bl	8001c84 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fe f8d6 	bl	8001c84 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0b5      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ee      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a1 	beq.w	8003c54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d05c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d141      	bne.n	8003baa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_OscConfig+0x478>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f8aa 	bl	8001c84 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe f8a6 	bl	8001c84 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e087      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	491b      	ldr	r1, [pc, #108]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x478>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe f87f 	bl	8001c84 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe f87b 	bl	8001c84 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e05c      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x416>
 8003ba8:	e054      	b.n	8003c54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <HAL_RCC_OscConfig+0x478>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f868 	bl	8001c84 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe f864 	bl	8001c84 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e045      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x444>
 8003bd6:	e03d      	b.n	8003c54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d107      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e038      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40007000 	.word	0x40007000
 8003bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x4ec>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d121      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d11a      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d111      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0cc      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d90c      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0b8      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	494d      	ldr	r1, [pc, #308]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d044      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d119      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e067      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4934      	ldr	r1, [pc, #208]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fd ff96 	bl	8001c84 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fd ff92 	bl	8001c84 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d20c      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4916      	ldr	r1, [pc, #88]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490e      	ldr	r1, [pc, #56]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dea:	f000 f821 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490a      	ldr	r1, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd fef6 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023c00 	.word	0x40023c00
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08007928 	.word	0x08007928
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b090      	sub	sp, #64	; 0x40
 8003e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e40:	2300      	movs	r3, #0
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d00d      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x40>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	f200 80a1 	bhi.w	8003f9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e62:	e09b      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e68:	e09b      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e6a:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e6e:	e098      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e7a:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	627a      	str	r2, [r7, #36]	; 0x24
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e9c:	fb03 f201 	mul.w	r2, r3, r1
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eaa:	fba0 1202 	umull	r1, r2, r0, r2
 8003eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb6:	4413      	add	r3, r2
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	61fa      	str	r2, [r7, #28]
 8003ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003eca:	f7fc f9e9 	bl	80002a0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed6:	e053      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	2200      	movs	r2, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	617a      	str	r2, [r7, #20]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eea:	f04f 0b00 	mov.w	fp, #0
 8003eee:	4652      	mov	r2, sl
 8003ef0:	465b      	mov	r3, fp
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	ebb2 080a 	subs.w	r8, r2, sl
 8003f0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f22:	ebb2 0408 	subs.w	r4, r2, r8
 8003f26:	eb63 0509 	sbc.w	r5, r3, r9
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	00eb      	lsls	r3, r5, #3
 8003f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f38:	00e2      	lsls	r2, r4, #3
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	eb14 030a 	adds.w	r3, r4, sl
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	eb45 030b 	adc.w	r3, r5, fp
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f56:	4629      	mov	r1, r5
 8003f58:	028b      	lsls	r3, r1, #10
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f60:	4621      	mov	r1, r4
 8003f62:	028a      	lsls	r2, r1, #10
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f74:	f7fc f994 	bl	80002a0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3740      	adds	r7, #64	; 0x40
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	017d7840 	.word	0x017d7840

08003fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000008 	.word	0x20000008

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	08007938 	.word	0x08007938

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffdc 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0b5b      	lsrs	r3, r3, #13
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	08007938 	.word	0x08007938

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004054:	2b00      	cmp	r3, #0
 8004056:	d075      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004058:	4b91      	ldr	r3, [pc, #580]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800405e:	f7fd fe11 	bl	8001c84 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004066:	f7fd fe0d 	bl	8001c84 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e189      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004078:	4b8a      	ldr	r3, [pc, #552]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	019a      	lsls	r2, r3, #6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	071b      	lsls	r3, r3, #28
 800409c:	4981      	ldr	r1, [pc, #516]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01f      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040b0:	4b7c      	ldr	r3, [pc, #496]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b6:	0f1b      	lsrs	r3, r3, #28
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	019a      	lsls	r2, r3, #6
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	431a      	orrs	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	071b      	lsls	r3, r3, #28
 80040d0:	4974      	ldr	r1, [pc, #464]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040d8:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	f023 021f 	bic.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	496e      	ldr	r1, [pc, #440]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	019a      	lsls	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	4964      	ldr	r1, [pc, #400]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004118:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411e:	f7fd fdb1 	bl	8001c84 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004126:	f7fd fdad 	bl	8001c84 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e129      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004138:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004158:	2b00      	cmp	r3, #0
 800415a:	d079      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800415c:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004162:	f7fd fd8f 	bl	8001c84 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800416a:	f7fd fd8b 	bl	8001c84 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e107      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417c:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d0ef      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	0f1b      	lsrs	r3, r3, #28
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	019a      	lsls	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	431a      	orrs	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	493b      	ldr	r1, [pc, #236]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	4934      	ldr	r1, [pc, #208]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01e      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041e4:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	0e1b      	lsrs	r3, r3, #24
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	019a      	lsls	r2, r3, #6
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	071b      	lsls	r3, r3, #28
 8004204:	4927      	ldr	r1, [pc, #156]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800420e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004212:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	4922      	ldr	r1, [pc, #136]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004228:	f7fd fd2c 	bl	8001c84 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004230:	f7fd fd28 	bl	8001c84 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0a4      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424e:	d1ef      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 808b 	beq.w	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426c:	6413      	str	r3, [r2, #64]	; 0x40
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004286:	f7fd fcfd 	bl	8001c84 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800428c:	e010      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fd fcf9 	bl	8001c84 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d909      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e075      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80042a0:	42470068 	.word	0x42470068
 80042a4:	40023800 	.word	0x40023800
 80042a8:	42470070 	.word	0x42470070
 80042ac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b0:	4b38      	ldr	r3, [pc, #224]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0e8      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02f      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d028      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042da:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ea:	4b2c      	ldr	r3, [pc, #176]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042f0:	4a29      	ldr	r2, [pc, #164]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042f6:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d114      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd fcbf 	bl	8001c84 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fcbb 	bl	8001c84 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e035      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004338:	d10d      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	4912      	ldr	r1, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
 8004354:	e005      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800435c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436e:	490a      	ldr	r1, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004370:	4313      	orrs	r3, r2
 8004372:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004388:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40007000 	.word	0x40007000
 8004398:	40023800 	.word	0x40023800
 800439c:	42470e40 	.word	0x42470e40
 80043a0:	424711e0 	.word	0x424711e0

080043a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e066      	b.n	8004488 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7f5b      	ldrb	r3, [r3, #29]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd f99a 	bl	8001704 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	22ca      	movs	r2, #202	; 0xca
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2253      	movs	r2, #83	; 0x53
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa45 	bl	8004876 <RTC_EnterInitMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d12c      	bne.n	8004450 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004408:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68d2      	ldr	r2, [r2, #12]
 8004430:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6919      	ldr	r1, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	041a      	lsls	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa4c 	bl	80048e4 <RTC_ExitInitMode>
 800444c:	4603      	mov	r3, r0
 800444e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	22ff      	movs	r2, #255	; 0xff
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	7f1b      	ldrb	r3, [r3, #28]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_RTC_SetTime+0x1c>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e087      	b.n	80045bc <HAL_RTC_SetTime+0x12c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2202      	movs	r2, #2
 80044b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d126      	bne.n	800450c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fa29 	bl	800492e <RTC_ByteToBcd2>
 80044dc:	4603      	mov	r3, r0
 80044de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fa22 	bl	800492e <RTC_ByteToBcd2>
 80044ea:	4603      	mov	r3, r0
 80044ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	789b      	ldrb	r3, [r3, #2]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fa1a 	bl	800492e <RTC_ByteToBcd2>
 80044fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e018      	b.n	800453e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800452c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004532:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	78db      	ldrb	r3, [r3, #3]
 8004538:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	22ca      	movs	r2, #202	; 0xca
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2253      	movs	r2, #83	; 0x53
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f991 	bl	8004876 <RTC_EnterInitMode>
 8004554:	4603      	mov	r3, r0
 8004556:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d120      	bne.n	80045a0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004568:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800456c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800457c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9a4 	bl	80048e4 <RTC_ExitInitMode>
 800459c:	4603      	mov	r3, r0
 800459e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]

  return status;
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}

080045c4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	0d9b      	lsrs	r3, r3, #22
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11a      	bne.n	8004676 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f98f 	bl	8004968 <RTC_Bcd2ToByte>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f986 	bl	8004968 <RTC_Bcd2ToByte>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	789b      	ldrb	r3, [r3, #2]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f97d 	bl	8004968 <RTC_Bcd2ToByte>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	7f1b      	ldrb	r3, [r3, #28]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_RTC_SetDate+0x1c>
 8004698:	2302      	movs	r3, #2
 800469a:	e071      	b.n	8004780 <HAL_RTC_SetDate+0x100>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2202      	movs	r2, #2
 80046a6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <HAL_RTC_SetDate+0x4c>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	330a      	adds	r3, #10
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11c      	bne.n	800470c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f929 	bl	800492e <RTC_ByteToBcd2>
 80046dc:	4603      	mov	r3, r0
 80046de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f922 	bl	800492e <RTC_ByteToBcd2>
 80046ea:	4603      	mov	r3, r0
 80046ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f91a 	bl	800492e <RTC_ByteToBcd2>
 80046fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e00e      	b.n	800472a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004718:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800471e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	22ca      	movs	r2, #202	; 0xca
 8004730:	625a      	str	r2, [r3, #36]	; 0x24
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2253      	movs	r2, #83	; 0x53
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f89b 	bl	8004876 <RTC_EnterInitMode>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004758:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f8c2 	bl	80048e4 <RTC_ExitInitMode>
 8004760:	4603      	mov	r3, r0
 8004762:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	771a      	strb	r2, [r3, #28]

  return status;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}

08004788 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	0b5b      	lsrs	r3, r3, #13
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11a      	bne.n	800481c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f8bc 	bl	8004968 <RTC_Bcd2ToByte>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f8b3 	bl	8004968 <RTC_Bcd2ToByte>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	789b      	ldrb	r3, [r3, #2]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f8aa 	bl	8004968 <RTC_Bcd2ToByte>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004840:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004842:	f7fd fa1f 	bl	8001c84 <HAL_GetTick>
 8004846:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004848:	e009      	b.n	800485e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800484a:	f7fd fa1b 	bl	8001c84 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004858:	d901      	bls.n	800485e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e007      	b.n	800486e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d122      	bne.n	80048da <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fd f9ee 	bl	8001c84 <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048aa:	e00c      	b.n	80048c6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048ac:	f7fd f9ea 	bl	8001c84 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ba:	d904      	bls.n	80048c6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2204      	movs	r2, #4
 80048c0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <RTC_EnterInitMode+0x64>
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d1e8      	bne.n	80048ac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff89 	bl	8004826 <HAL_RTC_WaitForSynchro>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2204      	movs	r2, #4
 800491e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004924:	7bfb      	ldrb	r3, [r7, #15]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800493c:	e005      	b.n	800494a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	3301      	adds	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	3b0a      	subs	r3, #10
 8004948:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	2b09      	cmp	r3, #9
 800494e:	d8f6      	bhi.n	800493e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	b2da      	uxtb	r2, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	4313      	orrs	r3, r2
 800495a:	b2db      	uxtb	r3, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	4413      	add	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	b2da      	uxtb	r2, r3
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	4413      	add	r3, r2
 8004992:	b2db      	uxtb	r3, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e041      	b.n	8004a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd f838 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fa96 	bl	8004f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04e      	b.n	8004af6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d01d      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d111      	bne.n	8004ae4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40010400 	.word	0x40010400
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40001800 	.word	0x40001800

08004b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9b5 	bl	8004ed2 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9a7 	bl	8004ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9b8 	bl	8004ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0204 	mvn.w	r2, #4
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f98b 	bl	8004ed2 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f97d 	bl	8004ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f98e 	bl	8004ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f961 	bl	8004ed2 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f953 	bl	8004ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f964 	bl	8004ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0210 	mvn.w	r2, #16
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f937 	bl	8004ed2 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f929 	bl	8004ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f93a 	bl	8004ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc fc30 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fae0 	bl	8005290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8ff 	bl	8004efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0220 	mvn.w	r2, #32
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 faaa 	bl	800527c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_TIM_ConfigClockSource+0x1c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0b4      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x186>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	d03e      	beq.n	8004e04 <HAL_TIM_ConfigClockSource+0xd4>
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	f200 8087 	bhi.w	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d92:	f000 8086 	beq.w	8004ea2 <HAL_TIM_ConfigClockSource+0x172>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	d87f      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b70      	cmp	r3, #112	; 0x70
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004da0:	2b70      	cmp	r3, #112	; 0x70
 8004da2:	d87b      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d050      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x11a>
 8004da8:	2b60      	cmp	r3, #96	; 0x60
 8004daa:	d877      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b50      	cmp	r3, #80	; 0x50
 8004dae:	d03c      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xfa>
 8004db0:	2b50      	cmp	r3, #80	; 0x50
 8004db2:	d873      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d058      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x13a>
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d86f      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d064      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d86b      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d060      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d867      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05c      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d05a      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	e062      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f000 f9ad 	bl	8005144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]
      break;
 8004e02:	e04f      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f000 f996 	bl	8005144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e26:	609a      	str	r2, [r3, #8]
      break;
 8004e28:	e03c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 f90a 	bl	8005050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2150      	movs	r1, #80	; 0x50
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f963 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e48:	e02c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 f929 	bl	80050ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2160      	movs	r1, #96	; 0x60
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f953 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e68:	e01c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f8ea 	bl	8005050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f943 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e88:	e00c      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 f93a 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e9a:	e003      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e000      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a40      	ldr	r2, [pc, #256]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d00f      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3d      	ldr	r2, [pc, #244]	; (8005028 <TIM_Base_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3c      	ldr	r2, [pc, #240]	; (800502c <TIM_Base_SetConfig+0x11c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <TIM_Base_SetConfig+0x120>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3a      	ldr	r2, [pc, #232]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d108      	bne.n	8004f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d027      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <TIM_Base_SetConfig+0x118>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d023      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2b      	ldr	r2, [pc, #172]	; (800502c <TIM_Base_SetConfig+0x11c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01f      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <TIM_Base_SetConfig+0x120>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a29      	ldr	r2, [pc, #164]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d017      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a28      	ldr	r2, [pc, #160]	; (8005038 <TIM_Base_SetConfig+0x128>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a27      	ldr	r2, [pc, #156]	; (800503c <TIM_Base_SetConfig+0x12c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <TIM_Base_SetConfig+0x130>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a25      	ldr	r2, [pc, #148]	; (8005044 <TIM_Base_SetConfig+0x134>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a24      	ldr	r2, [pc, #144]	; (8005048 <TIM_Base_SetConfig+0x138>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a23      	ldr	r2, [pc, #140]	; (800504c <TIM_Base_SetConfig+0x13c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0xf8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	615a      	str	r2, [r3, #20]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	40001800 	.word	0x40001800
 8005048:	40001c00 	.word	0x40001c00
 800504c:	40002000 	.word	0x40002000

08005050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 030a 	bic.w	r3, r3, #10
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	f043 0307 	orr.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	431a      	orrs	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e05a      	b.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d01d      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1a      	ldr	r2, [pc, #104]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a15      	ldr	r2, [pc, #84]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10c      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4313      	orrs	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40010400 	.word	0x40010400
 8005274:	40014000 	.word	0x40014000
 8005278:	40001800 	.word	0x40001800

0800527c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e03f      	b.n	8005336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc fc02 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fd7b 	bl	8005de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08a      	sub	sp, #40	; 0x28
 8005342:	af02      	add	r7, sp, #8
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b20      	cmp	r3, #32
 800535c:	d17c      	bne.n	8005458 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Transmit+0x2c>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e075      	b.n	800545a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x3e>
 8005378:	2302      	movs	r3, #2
 800537a:	e06e      	b.n	800545a <HAL_UART_Transmit+0x11c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2221      	movs	r2, #33	; 0x21
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005392:	f7fc fc77 	bl	8001c84 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ac:	d108      	bne.n	80053c0 <HAL_UART_Transmit+0x82>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e003      	b.n	80053c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053d0:	e02a      	b.n	8005428 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	; 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 faf9 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e036      	b.n	800545a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3302      	adds	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e007      	b.n	800541a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1cf      	bne.n	80053d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fac9 	bl	80059d4 <UART_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b0ba      	sub	sp, #232	; 0xe8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005490:	2300      	movs	r3, #0
 8005492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10f      	bne.n	80054ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_UART_IRQHandler+0x66>
 80054b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fbd3 	bl	8005c6e <UART_Receive_IT>
      return;
 80054c8:	e256      	b.n	8005978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80de 	beq.w	8005690 <HAL_UART_IRQHandler+0x22c>
 80054d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80d1 	beq.w	8005690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_UART_IRQHandler+0xae>
 80054fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0201 	orr.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_UART_IRQHandler+0xd2>
 800551e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f043 0202 	orr.w	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HAL_UART_IRQHandler+0xf6>
 8005542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0204 	orr.w	r2, r3, #4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <HAL_UART_IRQHandler+0x126>
 8005566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0208 	orr.w	r2, r3, #8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 81ed 	beq.w	800596e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_UART_IRQHandler+0x14e>
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fb5e 	bl	8005c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_UART_IRQHandler+0x17a>
 80055d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d04f      	beq.n	800567e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa66 	bl	8005ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d141      	bne.n	8005676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800560c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800561e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800562a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1d9      	bne.n	80055f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d013      	beq.n	800566e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	4a7d      	ldr	r2, [pc, #500]	; (8005840 <HAL_UART_IRQHandler+0x3dc>)
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	4618      	mov	r0, r3
 8005654:	f7fd f84b 	bl	80026ee <HAL_DMA_Abort_IT>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005668:	4610      	mov	r0, r2
 800566a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e00e      	b.n	800568c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f99a 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	e00a      	b.n	800568c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f996 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	e006      	b.n	800568c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f992 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800568a:	e170      	b.n	800596e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	bf00      	nop
    return;
 800568e:	e16e      	b.n	800596e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	2b01      	cmp	r3, #1
 8005696:	f040 814a 	bne.w	800592e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 8143 	beq.w	800592e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 813c 	beq.w	800592e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	f040 80b4 	bne.w	8005844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8140 	beq.w	8005972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f080 8139 	bcs.w	8005972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	f000 8088 	beq.w	8005826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800572c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800574e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800575a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1d9      	bne.n	8005716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800578a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800578e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e1      	bne.n	8005762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3314      	adds	r3, #20
 80057be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e3      	bne.n	800579e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005808:	65ba      	str	r2, [r7, #88]	; 0x58
 800580a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800580e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e3      	bne.n	80057e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	4618      	mov	r0, r3
 8005822:	f7fc fef4 	bl	800260e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800582e:	b29b      	uxth	r3, r3
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	b29b      	uxth	r3, r3
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f8c0 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800583c:	e099      	b.n	8005972 <HAL_UART_IRQHandler+0x50e>
 800583e:	bf00      	nop
 8005840:	08005b77 	.word	0x08005b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800584c:	b29b      	uxth	r3, r3
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 808b 	beq.w	8005976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8086 	beq.w	8005976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800588e:	647a      	str	r2, [r7, #68]	; 0x44
 8005890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	623b      	str	r3, [r7, #32]
   return(result);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3314      	adds	r3, #20
 80058c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e3      	bne.n	80058a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800590c:	61fa      	str	r2, [r7, #28]
 800590e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	617b      	str	r3, [r7, #20]
   return(result);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e3      	bne.n	80058e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f848 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800592c:	e023      	b.n	8005976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_UART_IRQHandler+0x4ea>
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f929 	bl	8005b9e <UART_Transmit_IT>
    return;
 800594c:	e014      	b.n	8005978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <HAL_UART_IRQHandler+0x514>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f969 	bl	8005c3e <UART_EndTransmit_IT>
    return;
 800596c:	e004      	b.n	8005978 <HAL_UART_IRQHandler+0x514>
    return;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <HAL_UART_IRQHandler+0x514>
      return;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_UART_IRQHandler+0x514>
      return;
 8005976:	bf00      	nop
  }
}
 8005978:	37e8      	adds	r7, #232	; 0xe8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b090      	sub	sp, #64	; 0x40
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e4:	e050      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d04c      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80059f4:	f7fc f946 	bl	8001c84 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d241      	bcs.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a24:	637a      	str	r2, [r7, #52]	; 0x34
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a58:	623a      	str	r2, [r7, #32]
 8005a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d09f      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3740      	adds	r7, #64	; 0x40
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b095      	sub	sp, #84	; 0x54
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d119      	bne.n	8005b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0310 	bic.w	r3, r3, #16
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b48:	61ba      	str	r2, [r7, #24]
 8005b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6979      	ldr	r1, [r7, #20]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	613b      	str	r3, [r7, #16]
   return(result);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b6a:	bf00      	nop
 8005b6c:	3754      	adds	r7, #84	; 0x54
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ff09 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b21      	cmp	r3, #33	; 0x21
 8005bb0:	d13e      	bne.n	8005c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d114      	bne.n	8005be6 <UART_Transmit_IT+0x48>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e008      	b.n	8005bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6211      	str	r1, [r2, #32]
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4619      	mov	r1, r3
 8005c06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fe8e 	bl	8005980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08c      	sub	sp, #48	; 0x30
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b22      	cmp	r3, #34	; 0x22
 8005c80:	f040 80ab 	bne.w	8005dda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d117      	bne.n	8005cbe <UART_Receive_IT+0x50>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
 8005cbc:	e026      	b.n	8005d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d007      	beq.n	8005ce2 <UART_Receive_IT+0x74>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <UART_Receive_IT+0x82>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e008      	b.n	8005d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d15a      	bne.n	8005dd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0220 	bic.w	r2, r2, #32
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d135      	bne.n	8005dcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	613b      	str	r3, [r7, #16]
   return(result);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	623a      	str	r2, [r7, #32]
 8005d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	69f9      	ldr	r1, [r7, #28]
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d10a      	bne.n	8005dbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fdf9 	bl	80059bc <HAL_UARTEx_RxEventCallback>
 8005dca:	e002      	b.n	8005dd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fde1 	bl	8005994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e002      	b.n	8005ddc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	; 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0c0      	sub	sp, #256	; 0x100
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	68d9      	ldr	r1, [r3, #12]
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	ea40 0301 	orr.w	r3, r0, r1
 8005e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e3c:	f021 010c 	bic.w	r1, r1, #12
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	ea40 0301 	orr.w	r3, r0, r1
 8005e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8f      	ldr	r3, [pc, #572]	; (80060b0 <UART_SetConfig+0x2cc>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d005      	beq.n	8005e84 <UART_SetConfig+0xa0>
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b8d      	ldr	r3, [pc, #564]	; (80060b4 <UART_SetConfig+0x2d0>)
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d104      	bne.n	8005e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fe f8ba 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8005e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e8c:	e003      	b.n	8005e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8e:	f7fe f8a1 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8005e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	f040 810c 	bne.w	80060bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	462b      	mov	r3, r5
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	eb12 0801 	adds.w	r8, r2, r1
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb43 0901 	adc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	eb49 0303 	adc.w	r3, r9, r3
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f12:	460b      	mov	r3, r1
 8005f14:	18db      	adds	r3, r3, r3
 8005f16:	653b      	str	r3, [r7, #80]	; 0x50
 8005f18:	4613      	mov	r3, r2
 8005f1a:	eb42 0303 	adc.w	r3, r2, r3
 8005f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f28:	f7fa f9ba 	bl	80002a0 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <UART_SetConfig+0x2d4>)
 8005f32:	fba3 2302 	umull	r2, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	011c      	lsls	r4, r3, #4
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f54:	415b      	adcs	r3, r3
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f62:	4649      	mov	r1, r9
 8005f64:	eb43 0b01 	adc.w	fp, r3, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7c:	4692      	mov	sl, r2
 8005f7e:	469b      	mov	fp, r3
 8005f80:	4643      	mov	r3, r8
 8005f82:	eb1a 0303 	adds.w	r3, sl, r3
 8005f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	18db      	adds	r3, r3, r3
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
 8005fae:	4613      	mov	r3, r2
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fbe:	f7fa f96f 	bl	80002a0 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <UART_SetConfig+0x2d4>)
 8005fca:	fba3 2301 	umull	r2, r3, r3, r1
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2264      	movs	r2, #100	; 0x64
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	1acb      	subs	r3, r1, r3
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <UART_SetConfig+0x2d4>)
 8005fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fec:	441c      	add	r4, r3
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	1891      	adds	r1, r2, r2
 8006006:	63b9      	str	r1, [r7, #56]	; 0x38
 8006008:	415b      	adcs	r3, r3
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006010:	4641      	mov	r1, r8
 8006012:	1851      	adds	r1, r2, r1
 8006014:	6339      	str	r1, [r7, #48]	; 0x30
 8006016:	4649      	mov	r1, r9
 8006018:	414b      	adcs	r3, r1
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006028:	4659      	mov	r1, fp
 800602a:	00cb      	lsls	r3, r1, #3
 800602c:	4651      	mov	r1, sl
 800602e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006032:	4651      	mov	r1, sl
 8006034:	00ca      	lsls	r2, r1, #3
 8006036:	4610      	mov	r0, r2
 8006038:	4619      	mov	r1, r3
 800603a:	4603      	mov	r3, r0
 800603c:	4642      	mov	r2, r8
 800603e:	189b      	adds	r3, r3, r2
 8006040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006044:	464b      	mov	r3, r9
 8006046:	460a      	mov	r2, r1
 8006048:	eb42 0303 	adc.w	r3, r2, r3
 800604c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800605c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006064:	460b      	mov	r3, r1
 8006066:	18db      	adds	r3, r3, r3
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
 800606a:	4613      	mov	r3, r2
 800606c:	eb42 0303 	adc.w	r3, r2, r3
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800607a:	f7fa f911 	bl	80002a0 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <UART_SetConfig+0x2d4>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	; 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	3332      	adds	r3, #50	; 0x32
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <UART_SetConfig+0x2d4>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 0207 	and.w	r2, r3, #7
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4422      	add	r2, r4
 80060aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060ac:	e105      	b.n	80062ba <UART_SetConfig+0x4d6>
 80060ae:	bf00      	nop
 80060b0:	40011000 	.word	0x40011000
 80060b4:	40011400 	.word	0x40011400
 80060b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	6239      	str	r1, [r7, #32]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060de:	4641      	mov	r1, r8
 80060e0:	1854      	adds	r4, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0501 	adc.w	r5, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	00eb      	lsls	r3, r5, #3
 80060f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f6:	00e2      	lsls	r2, r4, #3
 80060f8:	4614      	mov	r4, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	4643      	mov	r3, r8
 80060fe:	18e3      	adds	r3, r4, r3
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006104:	464b      	mov	r3, r9
 8006106:	eb45 0303 	adc.w	r3, r5, r3
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800612a:	4629      	mov	r1, r5
 800612c:	008b      	lsls	r3, r1, #2
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006134:	4621      	mov	r1, r4
 8006136:	008a      	lsls	r2, r1, #2
 8006138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800613c:	f7fa f8b0 	bl	80002a0 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <UART_SetConfig+0x4e4>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011c      	lsls	r4, r3, #4
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800615c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	61b9      	str	r1, [r7, #24]
 8006168:	415b      	adcs	r3, r3
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006170:	4641      	mov	r1, r8
 8006172:	1851      	adds	r1, r2, r1
 8006174:	6139      	str	r1, [r7, #16]
 8006176:	4649      	mov	r1, r9
 8006178:	414b      	adcs	r3, r1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006188:	4659      	mov	r1, fp
 800618a:	00cb      	lsls	r3, r1, #3
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006192:	4651      	mov	r1, sl
 8006194:	00ca      	lsls	r2, r1, #3
 8006196:	4610      	mov	r0, r2
 8006198:	4619      	mov	r1, r3
 800619a:	4603      	mov	r3, r0
 800619c:	4642      	mov	r2, r8
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061c8:	4649      	mov	r1, r9
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	4641      	mov	r1, r8
 80061ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d2:	4641      	mov	r1, r8
 80061d4:	008a      	lsls	r2, r1, #2
 80061d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061da:	f7fa f861 	bl	80002a0 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <UART_SetConfig+0x4e4>)
 80061e4:	fba3 1302 	umull	r1, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	2164      	movs	r1, #100	; 0x64
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	3332      	adds	r3, #50	; 0x32
 80061f6:	4a34      	ldr	r2, [pc, #208]	; (80062c8 <UART_SetConfig+0x4e4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006202:	441c      	add	r4, r3
 8006204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006208:	2200      	movs	r2, #0
 800620a:	673b      	str	r3, [r7, #112]	; 0x70
 800620c:	677a      	str	r2, [r7, #116]	; 0x74
 800620e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	1891      	adds	r1, r2, r2
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	415b      	adcs	r3, r3
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006222:	4641      	mov	r1, r8
 8006224:	1851      	adds	r1, r2, r1
 8006226:	6039      	str	r1, [r7, #0]
 8006228:	4649      	mov	r1, r9
 800622a:	414b      	adcs	r3, r1
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800623a:	4659      	mov	r1, fp
 800623c:	00cb      	lsls	r3, r1, #3
 800623e:	4651      	mov	r1, sl
 8006240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006244:	4651      	mov	r1, sl
 8006246:	00ca      	lsls	r2, r1, #3
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	4603      	mov	r3, r0
 800624e:	4642      	mov	r2, r8
 8006250:	189b      	adds	r3, r3, r2
 8006252:	66bb      	str	r3, [r7, #104]	; 0x68
 8006254:	464b      	mov	r3, r9
 8006256:	460a      	mov	r2, r1
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	663b      	str	r3, [r7, #96]	; 0x60
 8006268:	667a      	str	r2, [r7, #100]	; 0x64
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006276:	4649      	mov	r1, r9
 8006278:	008b      	lsls	r3, r1, #2
 800627a:	4641      	mov	r1, r8
 800627c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006280:	4641      	mov	r1, r8
 8006282:	008a      	lsls	r2, r1, #2
 8006284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006288:	f7fa f80a 	bl	80002a0 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <UART_SetConfig+0x4e4>)
 8006292:	fba3 1302 	umull	r1, r3, r3, r2
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2164      	movs	r1, #100	; 0x64
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	3332      	adds	r3, #50	; 0x32
 80062a4:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <UART_SetConfig+0x4e4>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4422      	add	r2, r4
 80062b8:	609a      	str	r2, [r3, #8]
}
 80062ba:	bf00      	nop
 80062bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062c0:	46bd      	mov	sp, r7
 80062c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c6:	bf00      	nop
 80062c8:	51eb851f 	.word	0x51eb851f

080062cc <__errno>:
 80062cc:	4b01      	ldr	r3, [pc, #4]	; (80062d4 <__errno+0x8>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000014 	.word	0x20000014

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4d0d      	ldr	r5, [pc, #52]	; (8006310 <__libc_init_array+0x38>)
 80062dc:	4c0d      	ldr	r4, [pc, #52]	; (8006314 <__libc_init_array+0x3c>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	2600      	movs	r6, #0
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	4d0b      	ldr	r5, [pc, #44]	; (8006318 <__libc_init_array+0x40>)
 80062ea:	4c0c      	ldr	r4, [pc, #48]	; (800631c <__libc_init_array+0x44>)
 80062ec:	f001 fa34 	bl	8007758 <_init>
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	2600      	movs	r6, #0
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	080079e0 	.word	0x080079e0
 8006314:	080079e0 	.word	0x080079e0
 8006318:	080079e0 	.word	0x080079e0
 800631c:	080079e4 	.word	0x080079e4

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <iprintf>:
 8006330:	b40f      	push	{r0, r1, r2, r3}
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <iprintf+0x2c>)
 8006334:	b513      	push	{r0, r1, r4, lr}
 8006336:	681c      	ldr	r4, [r3, #0]
 8006338:	b124      	cbz	r4, 8006344 <iprintf+0x14>
 800633a:	69a3      	ldr	r3, [r4, #24]
 800633c:	b913      	cbnz	r3, 8006344 <iprintf+0x14>
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fab2 	bl	80068a8 <__sinit>
 8006344:	ab05      	add	r3, sp, #20
 8006346:	9a04      	ldr	r2, [sp, #16]
 8006348:	68a1      	ldr	r1, [r4, #8]
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fe17 	bl	8006f80 <_vfiprintf_r>
 8006352:	b002      	add	sp, #8
 8006354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006358:	b004      	add	sp, #16
 800635a:	4770      	bx	lr
 800635c:	20000014 	.word	0x20000014

08006360 <_puts_r>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	460e      	mov	r6, r1
 8006364:	4605      	mov	r5, r0
 8006366:	b118      	cbz	r0, 8006370 <_puts_r+0x10>
 8006368:	6983      	ldr	r3, [r0, #24]
 800636a:	b90b      	cbnz	r3, 8006370 <_puts_r+0x10>
 800636c:	f000 fa9c 	bl	80068a8 <__sinit>
 8006370:	69ab      	ldr	r3, [r5, #24]
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	b913      	cbnz	r3, 800637c <_puts_r+0x1c>
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fa96 	bl	80068a8 <__sinit>
 800637c:	4b2c      	ldr	r3, [pc, #176]	; (8006430 <_puts_r+0xd0>)
 800637e:	429c      	cmp	r4, r3
 8006380:	d120      	bne.n	80063c4 <_puts_r+0x64>
 8006382:	686c      	ldr	r4, [r5, #4]
 8006384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006386:	07db      	lsls	r3, r3, #31
 8006388:	d405      	bmi.n	8006396 <_puts_r+0x36>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	0598      	lsls	r0, r3, #22
 800638e:	d402      	bmi.n	8006396 <_puts_r+0x36>
 8006390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006392:	f000 fb27 	bl	80069e4 <__retarget_lock_acquire_recursive>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	0719      	lsls	r1, r3, #28
 800639a:	d51d      	bpl.n	80063d8 <_puts_r+0x78>
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	b1db      	cbz	r3, 80063d8 <_puts_r+0x78>
 80063a0:	3e01      	subs	r6, #1
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063a8:	3b01      	subs	r3, #1
 80063aa:	60a3      	str	r3, [r4, #8]
 80063ac:	bb39      	cbnz	r1, 80063fe <_puts_r+0x9e>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da38      	bge.n	8006424 <_puts_r+0xc4>
 80063b2:	4622      	mov	r2, r4
 80063b4:	210a      	movs	r1, #10
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f89c 	bl	80064f4 <__swbuf_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	d011      	beq.n	80063e4 <_puts_r+0x84>
 80063c0:	250a      	movs	r5, #10
 80063c2:	e011      	b.n	80063e8 <_puts_r+0x88>
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <_puts_r+0xd4>)
 80063c6:	429c      	cmp	r4, r3
 80063c8:	d101      	bne.n	80063ce <_puts_r+0x6e>
 80063ca:	68ac      	ldr	r4, [r5, #8]
 80063cc:	e7da      	b.n	8006384 <_puts_r+0x24>
 80063ce:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <_puts_r+0xd8>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	bf08      	it	eq
 80063d4:	68ec      	ldreq	r4, [r5, #12]
 80063d6:	e7d5      	b.n	8006384 <_puts_r+0x24>
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f8dc 	bl	8006598 <__swsetup_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d0dd      	beq.n	80063a0 <_puts_r+0x40>
 80063e4:	f04f 35ff 	mov.w	r5, #4294967295
 80063e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d405      	bmi.n	80063fa <_puts_r+0x9a>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	059b      	lsls	r3, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_puts_r+0x9a>
 80063f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063f6:	f000 faf6 	bl	80069e6 <__retarget_lock_release_recursive>
 80063fa:	4628      	mov	r0, r5
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da04      	bge.n	800640c <_puts_r+0xac>
 8006402:	69a2      	ldr	r2, [r4, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	dc06      	bgt.n	8006416 <_puts_r+0xb6>
 8006408:	290a      	cmp	r1, #10
 800640a:	d004      	beq.n	8006416 <_puts_r+0xb6>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	7019      	strb	r1, [r3, #0]
 8006414:	e7c5      	b.n	80063a2 <_puts_r+0x42>
 8006416:	4622      	mov	r2, r4
 8006418:	4628      	mov	r0, r5
 800641a:	f000 f86b 	bl	80064f4 <__swbuf_r>
 800641e:	3001      	adds	r0, #1
 8006420:	d1bf      	bne.n	80063a2 <_puts_r+0x42>
 8006422:	e7df      	b.n	80063e4 <_puts_r+0x84>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	250a      	movs	r5, #10
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	6022      	str	r2, [r4, #0]
 800642c:	701d      	strb	r5, [r3, #0]
 800642e:	e7db      	b.n	80063e8 <_puts_r+0x88>
 8006430:	08007964 	.word	0x08007964
 8006434:	08007984 	.word	0x08007984
 8006438:	08007944 	.word	0x08007944

0800643c <puts>:
 800643c:	4b02      	ldr	r3, [pc, #8]	; (8006448 <puts+0xc>)
 800643e:	4601      	mov	r1, r0
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	f7ff bf8d 	b.w	8006360 <_puts_r>
 8006446:	bf00      	nop
 8006448:	20000014 	.word	0x20000014

0800644c <sniprintf>:
 800644c:	b40c      	push	{r2, r3}
 800644e:	b530      	push	{r4, r5, lr}
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <sniprintf+0x64>)
 8006452:	1e0c      	subs	r4, r1, #0
 8006454:	681d      	ldr	r5, [r3, #0]
 8006456:	b09d      	sub	sp, #116	; 0x74
 8006458:	da08      	bge.n	800646c <sniprintf+0x20>
 800645a:	238b      	movs	r3, #139	; 0x8b
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	b01d      	add	sp, #116	; 0x74
 8006464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006468:	b002      	add	sp, #8
 800646a:	4770      	bx	lr
 800646c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006470:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006474:	bf14      	ite	ne
 8006476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800647a:	4623      	moveq	r3, r4
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006484:	9002      	str	r0, [sp, #8]
 8006486:	9006      	str	r0, [sp, #24]
 8006488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800648c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800648e:	ab21      	add	r3, sp, #132	; 0x84
 8006490:	a902      	add	r1, sp, #8
 8006492:	4628      	mov	r0, r5
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	f000 fc49 	bl	8006d2c <_svfiprintf_r>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	bfbc      	itt	lt
 800649e:	238b      	movlt	r3, #139	; 0x8b
 80064a0:	602b      	strlt	r3, [r5, #0]
 80064a2:	2c00      	cmp	r4, #0
 80064a4:	d0dd      	beq.n	8006462 <sniprintf+0x16>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	e7d9      	b.n	8006462 <sniprintf+0x16>
 80064ae:	bf00      	nop
 80064b0:	20000014 	.word	0x20000014

080064b4 <siprintf>:
 80064b4:	b40e      	push	{r1, r2, r3}
 80064b6:	b500      	push	{lr}
 80064b8:	b09c      	sub	sp, #112	; 0x70
 80064ba:	ab1d      	add	r3, sp, #116	; 0x74
 80064bc:	9002      	str	r0, [sp, #8]
 80064be:	9006      	str	r0, [sp, #24]
 80064c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064c4:	4809      	ldr	r0, [pc, #36]	; (80064ec <siprintf+0x38>)
 80064c6:	9107      	str	r1, [sp, #28]
 80064c8:	9104      	str	r1, [sp, #16]
 80064ca:	4909      	ldr	r1, [pc, #36]	; (80064f0 <siprintf+0x3c>)
 80064cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d0:	9105      	str	r1, [sp, #20]
 80064d2:	6800      	ldr	r0, [r0, #0]
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	a902      	add	r1, sp, #8
 80064d8:	f000 fc28 	bl	8006d2c <_svfiprintf_r>
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	b01c      	add	sp, #112	; 0x70
 80064e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e8:	b003      	add	sp, #12
 80064ea:	4770      	bx	lr
 80064ec:	20000014 	.word	0x20000014
 80064f0:	ffff0208 	.word	0xffff0208

080064f4 <__swbuf_r>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	460e      	mov	r6, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	4605      	mov	r5, r0
 80064fc:	b118      	cbz	r0, 8006506 <__swbuf_r+0x12>
 80064fe:	6983      	ldr	r3, [r0, #24]
 8006500:	b90b      	cbnz	r3, 8006506 <__swbuf_r+0x12>
 8006502:	f000 f9d1 	bl	80068a8 <__sinit>
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <__swbuf_r+0x98>)
 8006508:	429c      	cmp	r4, r3
 800650a:	d12b      	bne.n	8006564 <__swbuf_r+0x70>
 800650c:	686c      	ldr	r4, [r5, #4]
 800650e:	69a3      	ldr	r3, [r4, #24]
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	071a      	lsls	r2, r3, #28
 8006516:	d52f      	bpl.n	8006578 <__swbuf_r+0x84>
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	b36b      	cbz	r3, 8006578 <__swbuf_r+0x84>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	1ac0      	subs	r0, r0, r3
 8006522:	6963      	ldr	r3, [r4, #20]
 8006524:	b2f6      	uxtb	r6, r6
 8006526:	4283      	cmp	r3, r0
 8006528:	4637      	mov	r7, r6
 800652a:	dc04      	bgt.n	8006536 <__swbuf_r+0x42>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f926 	bl	8006780 <_fflush_r>
 8006534:	bb30      	cbnz	r0, 8006584 <__swbuf_r+0x90>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	3b01      	subs	r3, #1
 800653a:	60a3      	str	r3, [r4, #8]
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	6022      	str	r2, [r4, #0]
 8006542:	701e      	strb	r6, [r3, #0]
 8006544:	6963      	ldr	r3, [r4, #20]
 8006546:	3001      	adds	r0, #1
 8006548:	4283      	cmp	r3, r0
 800654a:	d004      	beq.n	8006556 <__swbuf_r+0x62>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d506      	bpl.n	8006560 <__swbuf_r+0x6c>
 8006552:	2e0a      	cmp	r6, #10
 8006554:	d104      	bne.n	8006560 <__swbuf_r+0x6c>
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f911 	bl	8006780 <_fflush_r>
 800655e:	b988      	cbnz	r0, 8006584 <__swbuf_r+0x90>
 8006560:	4638      	mov	r0, r7
 8006562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <__swbuf_r+0x9c>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d101      	bne.n	800656e <__swbuf_r+0x7a>
 800656a:	68ac      	ldr	r4, [r5, #8]
 800656c:	e7cf      	b.n	800650e <__swbuf_r+0x1a>
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <__swbuf_r+0xa0>)
 8006570:	429c      	cmp	r4, r3
 8006572:	bf08      	it	eq
 8006574:	68ec      	ldreq	r4, [r5, #12]
 8006576:	e7ca      	b.n	800650e <__swbuf_r+0x1a>
 8006578:	4621      	mov	r1, r4
 800657a:	4628      	mov	r0, r5
 800657c:	f000 f80c 	bl	8006598 <__swsetup_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	d0cb      	beq.n	800651c <__swbuf_r+0x28>
 8006584:	f04f 37ff 	mov.w	r7, #4294967295
 8006588:	e7ea      	b.n	8006560 <__swbuf_r+0x6c>
 800658a:	bf00      	nop
 800658c:	08007964 	.word	0x08007964
 8006590:	08007984 	.word	0x08007984
 8006594:	08007944 	.word	0x08007944

08006598 <__swsetup_r>:
 8006598:	4b32      	ldr	r3, [pc, #200]	; (8006664 <__swsetup_r+0xcc>)
 800659a:	b570      	push	{r4, r5, r6, lr}
 800659c:	681d      	ldr	r5, [r3, #0]
 800659e:	4606      	mov	r6, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	b125      	cbz	r5, 80065ae <__swsetup_r+0x16>
 80065a4:	69ab      	ldr	r3, [r5, #24]
 80065a6:	b913      	cbnz	r3, 80065ae <__swsetup_r+0x16>
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 f97d 	bl	80068a8 <__sinit>
 80065ae:	4b2e      	ldr	r3, [pc, #184]	; (8006668 <__swsetup_r+0xd0>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d10f      	bne.n	80065d4 <__swsetup_r+0x3c>
 80065b4:	686c      	ldr	r4, [r5, #4]
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065bc:	0719      	lsls	r1, r3, #28
 80065be:	d42c      	bmi.n	800661a <__swsetup_r+0x82>
 80065c0:	06dd      	lsls	r5, r3, #27
 80065c2:	d411      	bmi.n	80065e8 <__swsetup_r+0x50>
 80065c4:	2309      	movs	r3, #9
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	e03e      	b.n	8006652 <__swsetup_r+0xba>
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <__swsetup_r+0xd4>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d101      	bne.n	80065de <__swsetup_r+0x46>
 80065da:	68ac      	ldr	r4, [r5, #8]
 80065dc:	e7eb      	b.n	80065b6 <__swsetup_r+0x1e>
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <__swsetup_r+0xd8>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	bf08      	it	eq
 80065e4:	68ec      	ldreq	r4, [r5, #12]
 80065e6:	e7e6      	b.n	80065b6 <__swsetup_r+0x1e>
 80065e8:	0758      	lsls	r0, r3, #29
 80065ea:	d512      	bpl.n	8006612 <__swsetup_r+0x7a>
 80065ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ee:	b141      	cbz	r1, 8006602 <__swsetup_r+0x6a>
 80065f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065f4:	4299      	cmp	r1, r3
 80065f6:	d002      	beq.n	80065fe <__swsetup_r+0x66>
 80065f8:	4630      	mov	r0, r6
 80065fa:	f000 fa5b 	bl	8006ab4 <_free_r>
 80065fe:	2300      	movs	r3, #0
 8006600:	6363      	str	r3, [r4, #52]	; 0x34
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	2300      	movs	r3, #0
 800660c:	6063      	str	r3, [r4, #4]
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f043 0308 	orr.w	r3, r3, #8
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	b94b      	cbnz	r3, 8006632 <__swsetup_r+0x9a>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006628:	d003      	beq.n	8006632 <__swsetup_r+0x9a>
 800662a:	4621      	mov	r1, r4
 800662c:	4630      	mov	r0, r6
 800662e:	f000 fa01 	bl	8006a34 <__smakebuf_r>
 8006632:	89a0      	ldrh	r0, [r4, #12]
 8006634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006638:	f010 0301 	ands.w	r3, r0, #1
 800663c:	d00a      	beq.n	8006654 <__swsetup_r+0xbc>
 800663e:	2300      	movs	r3, #0
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	6963      	ldr	r3, [r4, #20]
 8006644:	425b      	negs	r3, r3
 8006646:	61a3      	str	r3, [r4, #24]
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b943      	cbnz	r3, 800665e <__swsetup_r+0xc6>
 800664c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006650:	d1ba      	bne.n	80065c8 <__swsetup_r+0x30>
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	0781      	lsls	r1, r0, #30
 8006656:	bf58      	it	pl
 8006658:	6963      	ldrpl	r3, [r4, #20]
 800665a:	60a3      	str	r3, [r4, #8]
 800665c:	e7f4      	b.n	8006648 <__swsetup_r+0xb0>
 800665e:	2000      	movs	r0, #0
 8006660:	e7f7      	b.n	8006652 <__swsetup_r+0xba>
 8006662:	bf00      	nop
 8006664:	20000014 	.word	0x20000014
 8006668:	08007964 	.word	0x08007964
 800666c:	08007984 	.word	0x08007984
 8006670:	08007944 	.word	0x08007944

08006674 <__sflush_r>:
 8006674:	898a      	ldrh	r2, [r1, #12]
 8006676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	4605      	mov	r5, r0
 800667c:	0710      	lsls	r0, r2, #28
 800667e:	460c      	mov	r4, r1
 8006680:	d458      	bmi.n	8006734 <__sflush_r+0xc0>
 8006682:	684b      	ldr	r3, [r1, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dc05      	bgt.n	8006694 <__sflush_r+0x20>
 8006688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	dc02      	bgt.n	8006694 <__sflush_r+0x20>
 800668e:	2000      	movs	r0, #0
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006696:	2e00      	cmp	r6, #0
 8006698:	d0f9      	beq.n	800668e <__sflush_r+0x1a>
 800669a:	2300      	movs	r3, #0
 800669c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a0:	682f      	ldr	r7, [r5, #0]
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	d032      	beq.n	800670c <__sflush_r+0x98>
 80066a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	075a      	lsls	r2, r3, #29
 80066ac:	d505      	bpl.n	80066ba <__sflush_r+0x46>
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	1ac0      	subs	r0, r0, r3
 80066b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b4:	b10b      	cbz	r3, 80066ba <__sflush_r+0x46>
 80066b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066b8:	1ac0      	subs	r0, r0, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	4602      	mov	r2, r0
 80066be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c0:	6a21      	ldr	r1, [r4, #32]
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b0      	blx	r6
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	d106      	bne.n	80066da <__sflush_r+0x66>
 80066cc:	6829      	ldr	r1, [r5, #0]
 80066ce:	291d      	cmp	r1, #29
 80066d0:	d82c      	bhi.n	800672c <__sflush_r+0xb8>
 80066d2:	4a2a      	ldr	r2, [pc, #168]	; (800677c <__sflush_r+0x108>)
 80066d4:	40ca      	lsrs	r2, r1
 80066d6:	07d6      	lsls	r6, r2, #31
 80066d8:	d528      	bpl.n	800672c <__sflush_r+0xb8>
 80066da:	2200      	movs	r2, #0
 80066dc:	6062      	str	r2, [r4, #4]
 80066de:	04d9      	lsls	r1, r3, #19
 80066e0:	6922      	ldr	r2, [r4, #16]
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	d504      	bpl.n	80066f0 <__sflush_r+0x7c>
 80066e6:	1c42      	adds	r2, r0, #1
 80066e8:	d101      	bne.n	80066ee <__sflush_r+0x7a>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b903      	cbnz	r3, 80066f0 <__sflush_r+0x7c>
 80066ee:	6560      	str	r0, [r4, #84]	; 0x54
 80066f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f2:	602f      	str	r7, [r5, #0]
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d0ca      	beq.n	800668e <__sflush_r+0x1a>
 80066f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <__sflush_r+0x92>
 8006700:	4628      	mov	r0, r5
 8006702:	f000 f9d7 	bl	8006ab4 <_free_r>
 8006706:	2000      	movs	r0, #0
 8006708:	6360      	str	r0, [r4, #52]	; 0x34
 800670a:	e7c1      	b.n	8006690 <__sflush_r+0x1c>
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	2301      	movs	r3, #1
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	1c41      	adds	r1, r0, #1
 8006716:	d1c7      	bne.n	80066a8 <__sflush_r+0x34>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c4      	beq.n	80066a8 <__sflush_r+0x34>
 800671e:	2b1d      	cmp	r3, #29
 8006720:	d001      	beq.n	8006726 <__sflush_r+0xb2>
 8006722:	2b16      	cmp	r3, #22
 8006724:	d101      	bne.n	800672a <__sflush_r+0xb6>
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	e7b1      	b.n	800668e <__sflush_r+0x1a>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7ad      	b.n	8006690 <__sflush_r+0x1c>
 8006734:	690f      	ldr	r7, [r1, #16]
 8006736:	2f00      	cmp	r7, #0
 8006738:	d0a9      	beq.n	800668e <__sflush_r+0x1a>
 800673a:	0793      	lsls	r3, r2, #30
 800673c:	680e      	ldr	r6, [r1, #0]
 800673e:	bf08      	it	eq
 8006740:	694b      	ldreq	r3, [r1, #20]
 8006742:	600f      	str	r7, [r1, #0]
 8006744:	bf18      	it	ne
 8006746:	2300      	movne	r3, #0
 8006748:	eba6 0807 	sub.w	r8, r6, r7
 800674c:	608b      	str	r3, [r1, #8]
 800674e:	f1b8 0f00 	cmp.w	r8, #0
 8006752:	dd9c      	ble.n	800668e <__sflush_r+0x1a>
 8006754:	6a21      	ldr	r1, [r4, #32]
 8006756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006758:	4643      	mov	r3, r8
 800675a:	463a      	mov	r2, r7
 800675c:	4628      	mov	r0, r5
 800675e:	47b0      	blx	r6
 8006760:	2800      	cmp	r0, #0
 8006762:	dc06      	bgt.n	8006772 <__sflush_r+0xfe>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	e78e      	b.n	8006690 <__sflush_r+0x1c>
 8006772:	4407      	add	r7, r0
 8006774:	eba8 0800 	sub.w	r8, r8, r0
 8006778:	e7e9      	b.n	800674e <__sflush_r+0xda>
 800677a:	bf00      	nop
 800677c:	20400001 	.word	0x20400001

08006780 <_fflush_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	690b      	ldr	r3, [r1, #16]
 8006784:	4605      	mov	r5, r0
 8006786:	460c      	mov	r4, r1
 8006788:	b913      	cbnz	r3, 8006790 <_fflush_r+0x10>
 800678a:	2500      	movs	r5, #0
 800678c:	4628      	mov	r0, r5
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	b118      	cbz	r0, 800679a <_fflush_r+0x1a>
 8006792:	6983      	ldr	r3, [r0, #24]
 8006794:	b90b      	cbnz	r3, 800679a <_fflush_r+0x1a>
 8006796:	f000 f887 	bl	80068a8 <__sinit>
 800679a:	4b14      	ldr	r3, [pc, #80]	; (80067ec <_fflush_r+0x6c>)
 800679c:	429c      	cmp	r4, r3
 800679e:	d11b      	bne.n	80067d8 <_fflush_r+0x58>
 80067a0:	686c      	ldr	r4, [r5, #4]
 80067a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0ef      	beq.n	800678a <_fflush_r+0xa>
 80067aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067ac:	07d0      	lsls	r0, r2, #31
 80067ae:	d404      	bmi.n	80067ba <_fflush_r+0x3a>
 80067b0:	0599      	lsls	r1, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_fflush_r+0x3a>
 80067b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b6:	f000 f915 	bl	80069e4 <__retarget_lock_acquire_recursive>
 80067ba:	4628      	mov	r0, r5
 80067bc:	4621      	mov	r1, r4
 80067be:	f7ff ff59 	bl	8006674 <__sflush_r>
 80067c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c4:	07da      	lsls	r2, r3, #31
 80067c6:	4605      	mov	r5, r0
 80067c8:	d4e0      	bmi.n	800678c <_fflush_r+0xc>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	059b      	lsls	r3, r3, #22
 80067ce:	d4dd      	bmi.n	800678c <_fflush_r+0xc>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f000 f908 	bl	80069e6 <__retarget_lock_release_recursive>
 80067d6:	e7d9      	b.n	800678c <_fflush_r+0xc>
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <_fflush_r+0x70>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d101      	bne.n	80067e2 <_fflush_r+0x62>
 80067de:	68ac      	ldr	r4, [r5, #8]
 80067e0:	e7df      	b.n	80067a2 <_fflush_r+0x22>
 80067e2:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <_fflush_r+0x74>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	bf08      	it	eq
 80067e8:	68ec      	ldreq	r4, [r5, #12]
 80067ea:	e7da      	b.n	80067a2 <_fflush_r+0x22>
 80067ec:	08007964 	.word	0x08007964
 80067f0:	08007984 	.word	0x08007984
 80067f4:	08007944 	.word	0x08007944

080067f8 <std>:
 80067f8:	2300      	movs	r3, #0
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4604      	mov	r4, r0
 80067fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006806:	6083      	str	r3, [r0, #8]
 8006808:	8181      	strh	r1, [r0, #12]
 800680a:	6643      	str	r3, [r0, #100]	; 0x64
 800680c:	81c2      	strh	r2, [r0, #14]
 800680e:	6183      	str	r3, [r0, #24]
 8006810:	4619      	mov	r1, r3
 8006812:	2208      	movs	r2, #8
 8006814:	305c      	adds	r0, #92	; 0x5c
 8006816:	f7ff fd83 	bl	8006320 <memset>
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <std+0x38>)
 800681c:	6263      	str	r3, [r4, #36]	; 0x24
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <std+0x3c>)
 8006820:	62a3      	str	r3, [r4, #40]	; 0x28
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <std+0x40>)
 8006824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <std+0x44>)
 8006828:	6224      	str	r4, [r4, #32]
 800682a:	6323      	str	r3, [r4, #48]	; 0x30
 800682c:	bd10      	pop	{r4, pc}
 800682e:	bf00      	nop
 8006830:	08007529 	.word	0x08007529
 8006834:	0800754b 	.word	0x0800754b
 8006838:	08007583 	.word	0x08007583
 800683c:	080075a7 	.word	0x080075a7

08006840 <_cleanup_r>:
 8006840:	4901      	ldr	r1, [pc, #4]	; (8006848 <_cleanup_r+0x8>)
 8006842:	f000 b8af 	b.w	80069a4 <_fwalk_reent>
 8006846:	bf00      	nop
 8006848:	08006781 	.word	0x08006781

0800684c <__sfmoreglue>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2268      	movs	r2, #104	; 0x68
 8006850:	1e4d      	subs	r5, r1, #1
 8006852:	4355      	muls	r5, r2
 8006854:	460e      	mov	r6, r1
 8006856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800685a:	f000 f997 	bl	8006b8c <_malloc_r>
 800685e:	4604      	mov	r4, r0
 8006860:	b140      	cbz	r0, 8006874 <__sfmoreglue+0x28>
 8006862:	2100      	movs	r1, #0
 8006864:	e9c0 1600 	strd	r1, r6, [r0]
 8006868:	300c      	adds	r0, #12
 800686a:	60a0      	str	r0, [r4, #8]
 800686c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006870:	f7ff fd56 	bl	8006320 <memset>
 8006874:	4620      	mov	r0, r4
 8006876:	bd70      	pop	{r4, r5, r6, pc}

08006878 <__sfp_lock_acquire>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__sfp_lock_acquire+0x8>)
 800687a:	f000 b8b3 	b.w	80069e4 <__retarget_lock_acquire_recursive>
 800687e:	bf00      	nop
 8006880:	200002b9 	.word	0x200002b9

08006884 <__sfp_lock_release>:
 8006884:	4801      	ldr	r0, [pc, #4]	; (800688c <__sfp_lock_release+0x8>)
 8006886:	f000 b8ae 	b.w	80069e6 <__retarget_lock_release_recursive>
 800688a:	bf00      	nop
 800688c:	200002b9 	.word	0x200002b9

08006890 <__sinit_lock_acquire>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sinit_lock_acquire+0x8>)
 8006892:	f000 b8a7 	b.w	80069e4 <__retarget_lock_acquire_recursive>
 8006896:	bf00      	nop
 8006898:	200002ba 	.word	0x200002ba

0800689c <__sinit_lock_release>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sinit_lock_release+0x8>)
 800689e:	f000 b8a2 	b.w	80069e6 <__retarget_lock_release_recursive>
 80068a2:	bf00      	nop
 80068a4:	200002ba 	.word	0x200002ba

080068a8 <__sinit>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	4604      	mov	r4, r0
 80068ac:	f7ff fff0 	bl	8006890 <__sinit_lock_acquire>
 80068b0:	69a3      	ldr	r3, [r4, #24]
 80068b2:	b11b      	cbz	r3, 80068bc <__sinit+0x14>
 80068b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b8:	f7ff bff0 	b.w	800689c <__sinit_lock_release>
 80068bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068c0:	6523      	str	r3, [r4, #80]	; 0x50
 80068c2:	4b13      	ldr	r3, [pc, #76]	; (8006910 <__sinit+0x68>)
 80068c4:	4a13      	ldr	r2, [pc, #76]	; (8006914 <__sinit+0x6c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	bf04      	itt	eq
 80068ce:	2301      	moveq	r3, #1
 80068d0:	61a3      	streq	r3, [r4, #24]
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 f820 	bl	8006918 <__sfp>
 80068d8:	6060      	str	r0, [r4, #4]
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 f81c 	bl	8006918 <__sfp>
 80068e0:	60a0      	str	r0, [r4, #8]
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 f818 	bl	8006918 <__sfp>
 80068e8:	2200      	movs	r2, #0
 80068ea:	60e0      	str	r0, [r4, #12]
 80068ec:	2104      	movs	r1, #4
 80068ee:	6860      	ldr	r0, [r4, #4]
 80068f0:	f7ff ff82 	bl	80067f8 <std>
 80068f4:	68a0      	ldr	r0, [r4, #8]
 80068f6:	2201      	movs	r2, #1
 80068f8:	2109      	movs	r1, #9
 80068fa:	f7ff ff7d 	bl	80067f8 <std>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	2202      	movs	r2, #2
 8006902:	2112      	movs	r1, #18
 8006904:	f7ff ff78 	bl	80067f8 <std>
 8006908:	2301      	movs	r3, #1
 800690a:	61a3      	str	r3, [r4, #24]
 800690c:	e7d2      	b.n	80068b4 <__sinit+0xc>
 800690e:	bf00      	nop
 8006910:	08007940 	.word	0x08007940
 8006914:	08006841 	.word	0x08006841

08006918 <__sfp>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	4607      	mov	r7, r0
 800691c:	f7ff ffac 	bl	8006878 <__sfp_lock_acquire>
 8006920:	4b1e      	ldr	r3, [pc, #120]	; (800699c <__sfp+0x84>)
 8006922:	681e      	ldr	r6, [r3, #0]
 8006924:	69b3      	ldr	r3, [r6, #24]
 8006926:	b913      	cbnz	r3, 800692e <__sfp+0x16>
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff ffbd 	bl	80068a8 <__sinit>
 800692e:	3648      	adds	r6, #72	; 0x48
 8006930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006934:	3b01      	subs	r3, #1
 8006936:	d503      	bpl.n	8006940 <__sfp+0x28>
 8006938:	6833      	ldr	r3, [r6, #0]
 800693a:	b30b      	cbz	r3, 8006980 <__sfp+0x68>
 800693c:	6836      	ldr	r6, [r6, #0]
 800693e:	e7f7      	b.n	8006930 <__sfp+0x18>
 8006940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006944:	b9d5      	cbnz	r5, 800697c <__sfp+0x64>
 8006946:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <__sfp+0x88>)
 8006948:	60e3      	str	r3, [r4, #12]
 800694a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800694e:	6665      	str	r5, [r4, #100]	; 0x64
 8006950:	f000 f847 	bl	80069e2 <__retarget_lock_init_recursive>
 8006954:	f7ff ff96 	bl	8006884 <__sfp_lock_release>
 8006958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800695c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006960:	6025      	str	r5, [r4, #0]
 8006962:	61a5      	str	r5, [r4, #24]
 8006964:	2208      	movs	r2, #8
 8006966:	4629      	mov	r1, r5
 8006968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800696c:	f7ff fcd8 	bl	8006320 <memset>
 8006970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006978:	4620      	mov	r0, r4
 800697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697c:	3468      	adds	r4, #104	; 0x68
 800697e:	e7d9      	b.n	8006934 <__sfp+0x1c>
 8006980:	2104      	movs	r1, #4
 8006982:	4638      	mov	r0, r7
 8006984:	f7ff ff62 	bl	800684c <__sfmoreglue>
 8006988:	4604      	mov	r4, r0
 800698a:	6030      	str	r0, [r6, #0]
 800698c:	2800      	cmp	r0, #0
 800698e:	d1d5      	bne.n	800693c <__sfp+0x24>
 8006990:	f7ff ff78 	bl	8006884 <__sfp_lock_release>
 8006994:	230c      	movs	r3, #12
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	e7ee      	b.n	8006978 <__sfp+0x60>
 800699a:	bf00      	nop
 800699c:	08007940 	.word	0x08007940
 80069a0:	ffff0001 	.word	0xffff0001

080069a4 <_fwalk_reent>:
 80069a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	4606      	mov	r6, r0
 80069aa:	4688      	mov	r8, r1
 80069ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069b0:	2700      	movs	r7, #0
 80069b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b6:	f1b9 0901 	subs.w	r9, r9, #1
 80069ba:	d505      	bpl.n	80069c8 <_fwalk_reent+0x24>
 80069bc:	6824      	ldr	r4, [r4, #0]
 80069be:	2c00      	cmp	r4, #0
 80069c0:	d1f7      	bne.n	80069b2 <_fwalk_reent+0xe>
 80069c2:	4638      	mov	r0, r7
 80069c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c8:	89ab      	ldrh	r3, [r5, #12]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d907      	bls.n	80069de <_fwalk_reent+0x3a>
 80069ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069d2:	3301      	adds	r3, #1
 80069d4:	d003      	beq.n	80069de <_fwalk_reent+0x3a>
 80069d6:	4629      	mov	r1, r5
 80069d8:	4630      	mov	r0, r6
 80069da:	47c0      	blx	r8
 80069dc:	4307      	orrs	r7, r0
 80069de:	3568      	adds	r5, #104	; 0x68
 80069e0:	e7e9      	b.n	80069b6 <_fwalk_reent+0x12>

080069e2 <__retarget_lock_init_recursive>:
 80069e2:	4770      	bx	lr

080069e4 <__retarget_lock_acquire_recursive>:
 80069e4:	4770      	bx	lr

080069e6 <__retarget_lock_release_recursive>:
 80069e6:	4770      	bx	lr

080069e8 <__swhatbuf_r>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	460e      	mov	r6, r1
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	b096      	sub	sp, #88	; 0x58
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	da08      	bge.n	8006a0c <__swhatbuf_r+0x24>
 80069fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	061a      	lsls	r2, r3, #24
 8006a04:	d410      	bmi.n	8006a28 <__swhatbuf_r+0x40>
 8006a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0a:	e00e      	b.n	8006a2a <__swhatbuf_r+0x42>
 8006a0c:	466a      	mov	r2, sp
 8006a0e:	f000 fdf1 	bl	80075f4 <_fstat_r>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	dbf1      	blt.n	80069fa <__swhatbuf_r+0x12>
 8006a16:	9a01      	ldr	r2, [sp, #4]
 8006a18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a20:	425a      	negs	r2, r3
 8006a22:	415a      	adcs	r2, r3
 8006a24:	602a      	str	r2, [r5, #0]
 8006a26:	e7ee      	b.n	8006a06 <__swhatbuf_r+0x1e>
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	b016      	add	sp, #88	; 0x58
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a34 <__smakebuf_r>:
 8006a34:	898b      	ldrh	r3, [r1, #12]
 8006a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a38:	079d      	lsls	r5, r3, #30
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	d507      	bpl.n	8006a50 <__smakebuf_r+0x1c>
 8006a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	6163      	str	r3, [r4, #20]
 8006a4c:	b002      	add	sp, #8
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	ab01      	add	r3, sp, #4
 8006a52:	466a      	mov	r2, sp
 8006a54:	f7ff ffc8 	bl	80069e8 <__swhatbuf_r>
 8006a58:	9900      	ldr	r1, [sp, #0]
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 f895 	bl	8006b8c <_malloc_r>
 8006a62:	b948      	cbnz	r0, 8006a78 <__smakebuf_r+0x44>
 8006a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a68:	059a      	lsls	r2, r3, #22
 8006a6a:	d4ef      	bmi.n	8006a4c <__smakebuf_r+0x18>
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	f043 0302 	orr.w	r3, r3, #2
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	e7e3      	b.n	8006a40 <__smakebuf_r+0xc>
 8006a78:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <__smakebuf_r+0x7c>)
 8006a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	9b00      	ldr	r3, [sp, #0]
 8006a88:	6163      	str	r3, [r4, #20]
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	6120      	str	r0, [r4, #16]
 8006a8e:	b15b      	cbz	r3, 8006aa8 <__smakebuf_r+0x74>
 8006a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a94:	4630      	mov	r0, r6
 8006a96:	f000 fdbf 	bl	8007618 <_isatty_r>
 8006a9a:	b128      	cbz	r0, 8006aa8 <__smakebuf_r+0x74>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	89a0      	ldrh	r0, [r4, #12]
 8006aaa:	4305      	orrs	r5, r0
 8006aac:	81a5      	strh	r5, [r4, #12]
 8006aae:	e7cd      	b.n	8006a4c <__smakebuf_r+0x18>
 8006ab0:	08006841 	.word	0x08006841

08006ab4 <_free_r>:
 8006ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	d044      	beq.n	8006b44 <_free_r+0x90>
 8006aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006abe:	9001      	str	r0, [sp, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ac6:	bfb8      	it	lt
 8006ac8:	18e4      	addlt	r4, r4, r3
 8006aca:	f000 fdef 	bl	80076ac <__malloc_lock>
 8006ace:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <_free_r+0x94>)
 8006ad0:	9801      	ldr	r0, [sp, #4]
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	b933      	cbnz	r3, 8006ae4 <_free_r+0x30>
 8006ad6:	6063      	str	r3, [r4, #4]
 8006ad8:	6014      	str	r4, [r2, #0]
 8006ada:	b003      	add	sp, #12
 8006adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ae0:	f000 bdea 	b.w	80076b8 <__malloc_unlock>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d908      	bls.n	8006afa <_free_r+0x46>
 8006ae8:	6825      	ldr	r5, [r4, #0]
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	428b      	cmp	r3, r1
 8006aee:	bf01      	itttt	eq
 8006af0:	6819      	ldreq	r1, [r3, #0]
 8006af2:	685b      	ldreq	r3, [r3, #4]
 8006af4:	1949      	addeq	r1, r1, r5
 8006af6:	6021      	streq	r1, [r4, #0]
 8006af8:	e7ed      	b.n	8006ad6 <_free_r+0x22>
 8006afa:	461a      	mov	r2, r3
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b10b      	cbz	r3, 8006b04 <_free_r+0x50>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d9fa      	bls.n	8006afa <_free_r+0x46>
 8006b04:	6811      	ldr	r1, [r2, #0]
 8006b06:	1855      	adds	r5, r2, r1
 8006b08:	42a5      	cmp	r5, r4
 8006b0a:	d10b      	bne.n	8006b24 <_free_r+0x70>
 8006b0c:	6824      	ldr	r4, [r4, #0]
 8006b0e:	4421      	add	r1, r4
 8006b10:	1854      	adds	r4, r2, r1
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	6011      	str	r1, [r2, #0]
 8006b16:	d1e0      	bne.n	8006ada <_free_r+0x26>
 8006b18:	681c      	ldr	r4, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	6053      	str	r3, [r2, #4]
 8006b1e:	4421      	add	r1, r4
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	e7da      	b.n	8006ada <_free_r+0x26>
 8006b24:	d902      	bls.n	8006b2c <_free_r+0x78>
 8006b26:	230c      	movs	r3, #12
 8006b28:	6003      	str	r3, [r0, #0]
 8006b2a:	e7d6      	b.n	8006ada <_free_r+0x26>
 8006b2c:	6825      	ldr	r5, [r4, #0]
 8006b2e:	1961      	adds	r1, r4, r5
 8006b30:	428b      	cmp	r3, r1
 8006b32:	bf04      	itt	eq
 8006b34:	6819      	ldreq	r1, [r3, #0]
 8006b36:	685b      	ldreq	r3, [r3, #4]
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	bf04      	itt	eq
 8006b3c:	1949      	addeq	r1, r1, r5
 8006b3e:	6021      	streq	r1, [r4, #0]
 8006b40:	6054      	str	r4, [r2, #4]
 8006b42:	e7ca      	b.n	8006ada <_free_r+0x26>
 8006b44:	b003      	add	sp, #12
 8006b46:	bd30      	pop	{r4, r5, pc}
 8006b48:	200002bc 	.word	0x200002bc

08006b4c <sbrk_aligned>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	4e0e      	ldr	r6, [pc, #56]	; (8006b88 <sbrk_aligned+0x3c>)
 8006b50:	460c      	mov	r4, r1
 8006b52:	6831      	ldr	r1, [r6, #0]
 8006b54:	4605      	mov	r5, r0
 8006b56:	b911      	cbnz	r1, 8006b5e <sbrk_aligned+0x12>
 8006b58:	f000 fcd6 	bl	8007508 <_sbrk_r>
 8006b5c:	6030      	str	r0, [r6, #0]
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 fcd1 	bl	8007508 <_sbrk_r>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d00a      	beq.n	8006b80 <sbrk_aligned+0x34>
 8006b6a:	1cc4      	adds	r4, r0, #3
 8006b6c:	f024 0403 	bic.w	r4, r4, #3
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d007      	beq.n	8006b84 <sbrk_aligned+0x38>
 8006b74:	1a21      	subs	r1, r4, r0
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 fcc6 	bl	8007508 <_sbrk_r>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d101      	bne.n	8006b84 <sbrk_aligned+0x38>
 8006b80:	f04f 34ff 	mov.w	r4, #4294967295
 8006b84:	4620      	mov	r0, r4
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	200002c0 	.word	0x200002c0

08006b8c <_malloc_r>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	1ccd      	adds	r5, r1, #3
 8006b92:	f025 0503 	bic.w	r5, r5, #3
 8006b96:	3508      	adds	r5, #8
 8006b98:	2d0c      	cmp	r5, #12
 8006b9a:	bf38      	it	cc
 8006b9c:	250c      	movcc	r5, #12
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	db01      	blt.n	8006ba8 <_malloc_r+0x1c>
 8006ba4:	42a9      	cmp	r1, r5
 8006ba6:	d905      	bls.n	8006bb4 <_malloc_r+0x28>
 8006ba8:	230c      	movs	r3, #12
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	2600      	movs	r6, #0
 8006bae:	4630      	mov	r0, r6
 8006bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb4:	4e2e      	ldr	r6, [pc, #184]	; (8006c70 <_malloc_r+0xe4>)
 8006bb6:	f000 fd79 	bl	80076ac <__malloc_lock>
 8006bba:	6833      	ldr	r3, [r6, #0]
 8006bbc:	461c      	mov	r4, r3
 8006bbe:	bb34      	cbnz	r4, 8006c0e <_malloc_r+0x82>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f7ff ffc2 	bl	8006b4c <sbrk_aligned>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	4604      	mov	r4, r0
 8006bcc:	d14d      	bne.n	8006c6a <_malloc_r+0xde>
 8006bce:	6834      	ldr	r4, [r6, #0]
 8006bd0:	4626      	mov	r6, r4
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	d140      	bne.n	8006c58 <_malloc_r+0xcc>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4638      	mov	r0, r7
 8006bdc:	eb04 0803 	add.w	r8, r4, r3
 8006be0:	f000 fc92 	bl	8007508 <_sbrk_r>
 8006be4:	4580      	cmp	r8, r0
 8006be6:	d13a      	bne.n	8006c5e <_malloc_r+0xd2>
 8006be8:	6821      	ldr	r1, [r4, #0]
 8006bea:	3503      	adds	r5, #3
 8006bec:	1a6d      	subs	r5, r5, r1
 8006bee:	f025 0503 	bic.w	r5, r5, #3
 8006bf2:	3508      	adds	r5, #8
 8006bf4:	2d0c      	cmp	r5, #12
 8006bf6:	bf38      	it	cc
 8006bf8:	250c      	movcc	r5, #12
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f7ff ffa5 	bl	8006b4c <sbrk_aligned>
 8006c02:	3001      	adds	r0, #1
 8006c04:	d02b      	beq.n	8006c5e <_malloc_r+0xd2>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	442b      	add	r3, r5
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	e00e      	b.n	8006c2c <_malloc_r+0xa0>
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	1b52      	subs	r2, r2, r5
 8006c12:	d41e      	bmi.n	8006c52 <_malloc_r+0xc6>
 8006c14:	2a0b      	cmp	r2, #11
 8006c16:	d916      	bls.n	8006c46 <_malloc_r+0xba>
 8006c18:	1961      	adds	r1, r4, r5
 8006c1a:	42a3      	cmp	r3, r4
 8006c1c:	6025      	str	r5, [r4, #0]
 8006c1e:	bf18      	it	ne
 8006c20:	6059      	strne	r1, [r3, #4]
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	bf08      	it	eq
 8006c26:	6031      	streq	r1, [r6, #0]
 8006c28:	5162      	str	r2, [r4, r5]
 8006c2a:	604b      	str	r3, [r1, #4]
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f104 060b 	add.w	r6, r4, #11
 8006c32:	f000 fd41 	bl	80076b8 <__malloc_unlock>
 8006c36:	f026 0607 	bic.w	r6, r6, #7
 8006c3a:	1d23      	adds	r3, r4, #4
 8006c3c:	1af2      	subs	r2, r6, r3
 8006c3e:	d0b6      	beq.n	8006bae <_malloc_r+0x22>
 8006c40:	1b9b      	subs	r3, r3, r6
 8006c42:	50a3      	str	r3, [r4, r2]
 8006c44:	e7b3      	b.n	8006bae <_malloc_r+0x22>
 8006c46:	6862      	ldr	r2, [r4, #4]
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	bf0c      	ite	eq
 8006c4c:	6032      	streq	r2, [r6, #0]
 8006c4e:	605a      	strne	r2, [r3, #4]
 8006c50:	e7ec      	b.n	8006c2c <_malloc_r+0xa0>
 8006c52:	4623      	mov	r3, r4
 8006c54:	6864      	ldr	r4, [r4, #4]
 8006c56:	e7b2      	b.n	8006bbe <_malloc_r+0x32>
 8006c58:	4634      	mov	r4, r6
 8006c5a:	6876      	ldr	r6, [r6, #4]
 8006c5c:	e7b9      	b.n	8006bd2 <_malloc_r+0x46>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	603b      	str	r3, [r7, #0]
 8006c62:	4638      	mov	r0, r7
 8006c64:	f000 fd28 	bl	80076b8 <__malloc_unlock>
 8006c68:	e7a1      	b.n	8006bae <_malloc_r+0x22>
 8006c6a:	6025      	str	r5, [r4, #0]
 8006c6c:	e7de      	b.n	8006c2c <_malloc_r+0xa0>
 8006c6e:	bf00      	nop
 8006c70:	200002bc 	.word	0x200002bc

08006c74 <__ssputs_r>:
 8006c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c78:	688e      	ldr	r6, [r1, #8]
 8006c7a:	429e      	cmp	r6, r3
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	4690      	mov	r8, r2
 8006c82:	461f      	mov	r7, r3
 8006c84:	d838      	bhi.n	8006cf8 <__ssputs_r+0x84>
 8006c86:	898a      	ldrh	r2, [r1, #12]
 8006c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c8c:	d032      	beq.n	8006cf4 <__ssputs_r+0x80>
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	6909      	ldr	r1, [r1, #16]
 8006c92:	eba5 0901 	sub.w	r9, r5, r1
 8006c96:	6965      	ldr	r5, [r4, #20]
 8006c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	444b      	add	r3, r9
 8006ca4:	106d      	asrs	r5, r5, #1
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	bf38      	it	cc
 8006caa:	461d      	movcc	r5, r3
 8006cac:	0553      	lsls	r3, r2, #21
 8006cae:	d531      	bpl.n	8006d14 <__ssputs_r+0xa0>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7ff ff6b 	bl	8006b8c <_malloc_r>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	b950      	cbnz	r0, 8006cd0 <__ssputs_r+0x5c>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	f8ca 3000 	str.w	r3, [sl]
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd0:	6921      	ldr	r1, [r4, #16]
 8006cd2:	464a      	mov	r2, r9
 8006cd4:	f000 fcc2 	bl	800765c <memcpy>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	6126      	str	r6, [r4, #16]
 8006ce6:	6165      	str	r5, [r4, #20]
 8006ce8:	444e      	add	r6, r9
 8006cea:	eba5 0509 	sub.w	r5, r5, r9
 8006cee:	6026      	str	r6, [r4, #0]
 8006cf0:	60a5      	str	r5, [r4, #8]
 8006cf2:	463e      	mov	r6, r7
 8006cf4:	42be      	cmp	r6, r7
 8006cf6:	d900      	bls.n	8006cfa <__ssputs_r+0x86>
 8006cf8:	463e      	mov	r6, r7
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4641      	mov	r1, r8
 8006d00:	f000 fcba 	bl	8007678 <memmove>
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	1b9b      	subs	r3, r3, r6
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	4433      	add	r3, r6
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	2000      	movs	r0, #0
 8006d12:	e7db      	b.n	8006ccc <__ssputs_r+0x58>
 8006d14:	462a      	mov	r2, r5
 8006d16:	f000 fcd5 	bl	80076c4 <_realloc_r>
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <__ssputs_r+0x70>
 8006d20:	6921      	ldr	r1, [r4, #16]
 8006d22:	4650      	mov	r0, sl
 8006d24:	f7ff fec6 	bl	8006ab4 <_free_r>
 8006d28:	e7c7      	b.n	8006cba <__ssputs_r+0x46>
	...

08006d2c <_svfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4698      	mov	r8, r3
 8006d32:	898b      	ldrh	r3, [r1, #12]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	b09d      	sub	sp, #116	; 0x74
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	d50e      	bpl.n	8006d5e <_svfiprintf_r+0x32>
 8006d40:	690b      	ldr	r3, [r1, #16]
 8006d42:	b963      	cbnz	r3, 8006d5e <_svfiprintf_r+0x32>
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	f7ff ff21 	bl	8006b8c <_malloc_r>
 8006d4a:	6028      	str	r0, [r5, #0]
 8006d4c:	6128      	str	r0, [r5, #16]
 8006d4e:	b920      	cbnz	r0, 8006d5a <_svfiprintf_r+0x2e>
 8006d50:	230c      	movs	r3, #12
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e0d1      	b.n	8006efe <_svfiprintf_r+0x1d2>
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	616b      	str	r3, [r5, #20]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	2320      	movs	r3, #32
 8006d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6c:	2330      	movs	r3, #48	; 0x30
 8006d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f18 <_svfiprintf_r+0x1ec>
 8006d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d76:	f04f 0901 	mov.w	r9, #1
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	469a      	mov	sl, r3
 8006d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d82:	b10a      	cbz	r2, 8006d88 <_svfiprintf_r+0x5c>
 8006d84:	2a25      	cmp	r2, #37	; 0x25
 8006d86:	d1f9      	bne.n	8006d7c <_svfiprintf_r+0x50>
 8006d88:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8c:	d00b      	beq.n	8006da6 <_svfiprintf_r+0x7a>
 8006d8e:	465b      	mov	r3, fp
 8006d90:	4622      	mov	r2, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ff6d 	bl	8006c74 <__ssputs_r>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f000 80aa 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da2:	445a      	add	r2, fp
 8006da4:	9209      	str	r2, [sp, #36]	; 0x24
 8006da6:	f89a 3000 	ldrb.w	r3, [sl]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a2 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dba:	f10a 0a01 	add.w	sl, sl, #1
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	9307      	str	r3, [sp, #28]
 8006dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2205      	movs	r2, #5
 8006dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd0:	4851      	ldr	r0, [pc, #324]	; (8006f18 <_svfiprintf_r+0x1ec>)
 8006dd2:	f7f9 fa15 	bl	8000200 <memchr>
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	b9d8      	cbnz	r0, 8006e12 <_svfiprintf_r+0xe6>
 8006dda:	06d0      	lsls	r0, r2, #27
 8006ddc:	bf44      	itt	mi
 8006dde:	2320      	movmi	r3, #32
 8006de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de4:	0711      	lsls	r1, r2, #28
 8006de6:	bf44      	itt	mi
 8006de8:	232b      	movmi	r3, #43	; 0x2b
 8006dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dee:	f89a 3000 	ldrb.w	r3, [sl]
 8006df2:	2b2a      	cmp	r3, #42	; 0x2a
 8006df4:	d015      	beq.n	8006e22 <_svfiprintf_r+0xf6>
 8006df6:	9a07      	ldr	r2, [sp, #28]
 8006df8:	4654      	mov	r4, sl
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f04f 0c0a 	mov.w	ip, #10
 8006e00:	4621      	mov	r1, r4
 8006e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e06:	3b30      	subs	r3, #48	; 0x30
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d94e      	bls.n	8006eaa <_svfiprintf_r+0x17e>
 8006e0c:	b1b0      	cbz	r0, 8006e3c <_svfiprintf_r+0x110>
 8006e0e:	9207      	str	r2, [sp, #28]
 8006e10:	e014      	b.n	8006e3c <_svfiprintf_r+0x110>
 8006e12:	eba0 0308 	sub.w	r3, r0, r8
 8006e16:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	46a2      	mov	sl, r4
 8006e20:	e7d2      	b.n	8006dc8 <_svfiprintf_r+0x9c>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	1d19      	adds	r1, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	9103      	str	r1, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfbb      	ittet	lt
 8006e2e:	425b      	neglt	r3, r3
 8006e30:	f042 0202 	orrlt.w	r2, r2, #2
 8006e34:	9307      	strge	r3, [sp, #28]
 8006e36:	9307      	strlt	r3, [sp, #28]
 8006e38:	bfb8      	it	lt
 8006e3a:	9204      	strlt	r2, [sp, #16]
 8006e3c:	7823      	ldrb	r3, [r4, #0]
 8006e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e40:	d10c      	bne.n	8006e5c <_svfiprintf_r+0x130>
 8006e42:	7863      	ldrb	r3, [r4, #1]
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d135      	bne.n	8006eb4 <_svfiprintf_r+0x188>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9203      	str	r2, [sp, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfb8      	it	lt
 8006e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e58:	3402      	adds	r4, #2
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f28 <_svfiprintf_r+0x1fc>
 8006e60:	7821      	ldrb	r1, [r4, #0]
 8006e62:	2203      	movs	r2, #3
 8006e64:	4650      	mov	r0, sl
 8006e66:	f7f9 f9cb 	bl	8000200 <memchr>
 8006e6a:	b140      	cbz	r0, 8006e7e <_svfiprintf_r+0x152>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	eba0 000a 	sub.w	r0, r0, sl
 8006e72:	fa03 f000 	lsl.w	r0, r3, r0
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e82:	4826      	ldr	r0, [pc, #152]	; (8006f1c <_svfiprintf_r+0x1f0>)
 8006e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e88:	2206      	movs	r2, #6
 8006e8a:	f7f9 f9b9 	bl	8000200 <memchr>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d038      	beq.n	8006f04 <_svfiprintf_r+0x1d8>
 8006e92:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <_svfiprintf_r+0x1f4>)
 8006e94:	bb1b      	cbnz	r3, 8006ede <_svfiprintf_r+0x1b2>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	3307      	adds	r3, #7
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	4433      	add	r3, r6
 8006ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea8:	e767      	b.n	8006d7a <_svfiprintf_r+0x4e>
 8006eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eae:	460c      	mov	r4, r1
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e7a5      	b.n	8006e00 <_svfiprintf_r+0xd4>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	9305      	str	r3, [sp, #20]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec6:	3a30      	subs	r2, #48	; 0x30
 8006ec8:	2a09      	cmp	r2, #9
 8006eca:	d903      	bls.n	8006ed4 <_svfiprintf_r+0x1a8>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0c5      	beq.n	8006e5c <_svfiprintf_r+0x130>
 8006ed0:	9105      	str	r1, [sp, #20]
 8006ed2:	e7c3      	b.n	8006e5c <_svfiprintf_r+0x130>
 8006ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed8:	4604      	mov	r4, r0
 8006eda:	2301      	movs	r3, #1
 8006edc:	e7f0      	b.n	8006ec0 <_svfiprintf_r+0x194>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f3af 8000 	nop.w
 8006eee:	1c42      	adds	r2, r0, #1
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	d1d6      	bne.n	8006ea2 <_svfiprintf_r+0x176>
 8006ef4:	89ab      	ldrh	r3, [r5, #12]
 8006ef6:	065b      	lsls	r3, r3, #25
 8006ef8:	f53f af2c 	bmi.w	8006d54 <_svfiprintf_r+0x28>
 8006efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efe:	b01d      	add	sp, #116	; 0x74
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f000 f9d4 	bl	80072bc <_printf_i>
 8006f14:	e7eb      	b.n	8006eee <_svfiprintf_r+0x1c2>
 8006f16:	bf00      	nop
 8006f18:	080079a4 	.word	0x080079a4
 8006f1c:	080079ae 	.word	0x080079ae
 8006f20:	00000000 	.word	0x00000000
 8006f24:	08006c75 	.word	0x08006c75
 8006f28:	080079aa 	.word	0x080079aa

08006f2c <__sfputc_r>:
 8006f2c:	6893      	ldr	r3, [r2, #8]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	b410      	push	{r4}
 8006f34:	6093      	str	r3, [r2, #8]
 8006f36:	da08      	bge.n	8006f4a <__sfputc_r+0x1e>
 8006f38:	6994      	ldr	r4, [r2, #24]
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	db01      	blt.n	8006f42 <__sfputc_r+0x16>
 8006f3e:	290a      	cmp	r1, #10
 8006f40:	d103      	bne.n	8006f4a <__sfputc_r+0x1e>
 8006f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f46:	f7ff bad5 	b.w	80064f4 <__swbuf_r>
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	1c58      	adds	r0, r3, #1
 8006f4e:	6010      	str	r0, [r2, #0]
 8006f50:	7019      	strb	r1, [r3, #0]
 8006f52:	4608      	mov	r0, r1
 8006f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <__sfputs_r>:
 8006f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	460f      	mov	r7, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	18d5      	adds	r5, r2, r3
 8006f64:	42ac      	cmp	r4, r5
 8006f66:	d101      	bne.n	8006f6c <__sfputs_r+0x12>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e007      	b.n	8006f7c <__sfputs_r+0x22>
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	463a      	mov	r2, r7
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ffda 	bl	8006f2c <__sfputc_r>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d1f3      	bne.n	8006f64 <__sfputs_r+0xa>
 8006f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f80 <_vfiprintf_r>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	460d      	mov	r5, r1
 8006f86:	b09d      	sub	sp, #116	; 0x74
 8006f88:	4614      	mov	r4, r2
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	b118      	cbz	r0, 8006f98 <_vfiprintf_r+0x18>
 8006f90:	6983      	ldr	r3, [r0, #24]
 8006f92:	b90b      	cbnz	r3, 8006f98 <_vfiprintf_r+0x18>
 8006f94:	f7ff fc88 	bl	80068a8 <__sinit>
 8006f98:	4b89      	ldr	r3, [pc, #548]	; (80071c0 <_vfiprintf_r+0x240>)
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	d11b      	bne.n	8006fd6 <_vfiprintf_r+0x56>
 8006f9e:	6875      	ldr	r5, [r6, #4]
 8006fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa2:	07d9      	lsls	r1, r3, #31
 8006fa4:	d405      	bmi.n	8006fb2 <_vfiprintf_r+0x32>
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	059a      	lsls	r2, r3, #22
 8006faa:	d402      	bmi.n	8006fb2 <_vfiprintf_r+0x32>
 8006fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fae:	f7ff fd19 	bl	80069e4 <__retarget_lock_acquire_recursive>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	071b      	lsls	r3, r3, #28
 8006fb6:	d501      	bpl.n	8006fbc <_vfiprintf_r+0x3c>
 8006fb8:	692b      	ldr	r3, [r5, #16]
 8006fba:	b9eb      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x78>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff faea 	bl	8006598 <__swsetup_r>
 8006fc4:	b1c0      	cbz	r0, 8006ff8 <_vfiprintf_r+0x78>
 8006fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc8:	07dc      	lsls	r4, r3, #31
 8006fca:	d50e      	bpl.n	8006fea <_vfiprintf_r+0x6a>
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	b01d      	add	sp, #116	; 0x74
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <_vfiprintf_r+0x244>)
 8006fd8:	429d      	cmp	r5, r3
 8006fda:	d101      	bne.n	8006fe0 <_vfiprintf_r+0x60>
 8006fdc:	68b5      	ldr	r5, [r6, #8]
 8006fde:	e7df      	b.n	8006fa0 <_vfiprintf_r+0x20>
 8006fe0:	4b79      	ldr	r3, [pc, #484]	; (80071c8 <_vfiprintf_r+0x248>)
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	bf08      	it	eq
 8006fe6:	68f5      	ldreq	r5, [r6, #12]
 8006fe8:	e7da      	b.n	8006fa0 <_vfiprintf_r+0x20>
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	0598      	lsls	r0, r3, #22
 8006fee:	d4ed      	bmi.n	8006fcc <_vfiprintf_r+0x4c>
 8006ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ff2:	f7ff fcf8 	bl	80069e6 <__retarget_lock_release_recursive>
 8006ff6:	e7e9      	b.n	8006fcc <_vfiprintf_r+0x4c>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007002:	f8cd 800c 	str.w	r8, [sp, #12]
 8007006:	2330      	movs	r3, #48	; 0x30
 8007008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071cc <_vfiprintf_r+0x24c>
 800700c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007010:	f04f 0901 	mov.w	r9, #1
 8007014:	4623      	mov	r3, r4
 8007016:	469a      	mov	sl, r3
 8007018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701c:	b10a      	cbz	r2, 8007022 <_vfiprintf_r+0xa2>
 800701e:	2a25      	cmp	r2, #37	; 0x25
 8007020:	d1f9      	bne.n	8007016 <_vfiprintf_r+0x96>
 8007022:	ebba 0b04 	subs.w	fp, sl, r4
 8007026:	d00b      	beq.n	8007040 <_vfiprintf_r+0xc0>
 8007028:	465b      	mov	r3, fp
 800702a:	4622      	mov	r2, r4
 800702c:	4629      	mov	r1, r5
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff93 	bl	8006f5a <__sfputs_r>
 8007034:	3001      	adds	r0, #1
 8007036:	f000 80aa 	beq.w	800718e <_vfiprintf_r+0x20e>
 800703a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703c:	445a      	add	r2, fp
 800703e:	9209      	str	r2, [sp, #36]	; 0x24
 8007040:	f89a 3000 	ldrb.w	r3, [sl]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a2 	beq.w	800718e <_vfiprintf_r+0x20e>
 800704a:	2300      	movs	r3, #0
 800704c:	f04f 32ff 	mov.w	r2, #4294967295
 8007050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007054:	f10a 0a01 	add.w	sl, sl, #1
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	9307      	str	r3, [sp, #28]
 800705c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007060:	931a      	str	r3, [sp, #104]	; 0x68
 8007062:	4654      	mov	r4, sl
 8007064:	2205      	movs	r2, #5
 8007066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706a:	4858      	ldr	r0, [pc, #352]	; (80071cc <_vfiprintf_r+0x24c>)
 800706c:	f7f9 f8c8 	bl	8000200 <memchr>
 8007070:	9a04      	ldr	r2, [sp, #16]
 8007072:	b9d8      	cbnz	r0, 80070ac <_vfiprintf_r+0x12c>
 8007074:	06d1      	lsls	r1, r2, #27
 8007076:	bf44      	itt	mi
 8007078:	2320      	movmi	r3, #32
 800707a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707e:	0713      	lsls	r3, r2, #28
 8007080:	bf44      	itt	mi
 8007082:	232b      	movmi	r3, #43	; 0x2b
 8007084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007088:	f89a 3000 	ldrb.w	r3, [sl]
 800708c:	2b2a      	cmp	r3, #42	; 0x2a
 800708e:	d015      	beq.n	80070bc <_vfiprintf_r+0x13c>
 8007090:	9a07      	ldr	r2, [sp, #28]
 8007092:	4654      	mov	r4, sl
 8007094:	2000      	movs	r0, #0
 8007096:	f04f 0c0a 	mov.w	ip, #10
 800709a:	4621      	mov	r1, r4
 800709c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a0:	3b30      	subs	r3, #48	; 0x30
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	d94e      	bls.n	8007144 <_vfiprintf_r+0x1c4>
 80070a6:	b1b0      	cbz	r0, 80070d6 <_vfiprintf_r+0x156>
 80070a8:	9207      	str	r2, [sp, #28]
 80070aa:	e014      	b.n	80070d6 <_vfiprintf_r+0x156>
 80070ac:	eba0 0308 	sub.w	r3, r0, r8
 80070b0:	fa09 f303 	lsl.w	r3, r9, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	46a2      	mov	sl, r4
 80070ba:	e7d2      	b.n	8007062 <_vfiprintf_r+0xe2>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	1d19      	adds	r1, r3, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	9103      	str	r1, [sp, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfbb      	ittet	lt
 80070c8:	425b      	neglt	r3, r3
 80070ca:	f042 0202 	orrlt.w	r2, r2, #2
 80070ce:	9307      	strge	r3, [sp, #28]
 80070d0:	9307      	strlt	r3, [sp, #28]
 80070d2:	bfb8      	it	lt
 80070d4:	9204      	strlt	r2, [sp, #16]
 80070d6:	7823      	ldrb	r3, [r4, #0]
 80070d8:	2b2e      	cmp	r3, #46	; 0x2e
 80070da:	d10c      	bne.n	80070f6 <_vfiprintf_r+0x176>
 80070dc:	7863      	ldrb	r3, [r4, #1]
 80070de:	2b2a      	cmp	r3, #42	; 0x2a
 80070e0:	d135      	bne.n	800714e <_vfiprintf_r+0x1ce>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	9203      	str	r2, [sp, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfb8      	it	lt
 80070ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f2:	3402      	adds	r4, #2
 80070f4:	9305      	str	r3, [sp, #20]
 80070f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071dc <_vfiprintf_r+0x25c>
 80070fa:	7821      	ldrb	r1, [r4, #0]
 80070fc:	2203      	movs	r2, #3
 80070fe:	4650      	mov	r0, sl
 8007100:	f7f9 f87e 	bl	8000200 <memchr>
 8007104:	b140      	cbz	r0, 8007118 <_vfiprintf_r+0x198>
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	eba0 000a 	sub.w	r0, r0, sl
 800710c:	fa03 f000 	lsl.w	r0, r3, r0
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	4303      	orrs	r3, r0
 8007114:	3401      	adds	r4, #1
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	482c      	ldr	r0, [pc, #176]	; (80071d0 <_vfiprintf_r+0x250>)
 800711e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007122:	2206      	movs	r2, #6
 8007124:	f7f9 f86c 	bl	8000200 <memchr>
 8007128:	2800      	cmp	r0, #0
 800712a:	d03f      	beq.n	80071ac <_vfiprintf_r+0x22c>
 800712c:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <_vfiprintf_r+0x254>)
 800712e:	bb1b      	cbnz	r3, 8007178 <_vfiprintf_r+0x1f8>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	3307      	adds	r3, #7
 8007134:	f023 0307 	bic.w	r3, r3, #7
 8007138:	3308      	adds	r3, #8
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	443b      	add	r3, r7
 8007140:	9309      	str	r3, [sp, #36]	; 0x24
 8007142:	e767      	b.n	8007014 <_vfiprintf_r+0x94>
 8007144:	fb0c 3202 	mla	r2, ip, r2, r3
 8007148:	460c      	mov	r4, r1
 800714a:	2001      	movs	r0, #1
 800714c:	e7a5      	b.n	800709a <_vfiprintf_r+0x11a>
 800714e:	2300      	movs	r3, #0
 8007150:	3401      	adds	r4, #1
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	4619      	mov	r1, r3
 8007156:	f04f 0c0a 	mov.w	ip, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007160:	3a30      	subs	r2, #48	; 0x30
 8007162:	2a09      	cmp	r2, #9
 8007164:	d903      	bls.n	800716e <_vfiprintf_r+0x1ee>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0c5      	beq.n	80070f6 <_vfiprintf_r+0x176>
 800716a:	9105      	str	r1, [sp, #20]
 800716c:	e7c3      	b.n	80070f6 <_vfiprintf_r+0x176>
 800716e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007172:	4604      	mov	r4, r0
 8007174:	2301      	movs	r3, #1
 8007176:	e7f0      	b.n	800715a <_vfiprintf_r+0x1da>
 8007178:	ab03      	add	r3, sp, #12
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	462a      	mov	r2, r5
 800717e:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <_vfiprintf_r+0x258>)
 8007180:	a904      	add	r1, sp, #16
 8007182:	4630      	mov	r0, r6
 8007184:	f3af 8000 	nop.w
 8007188:	4607      	mov	r7, r0
 800718a:	1c78      	adds	r0, r7, #1
 800718c:	d1d6      	bne.n	800713c <_vfiprintf_r+0x1bc>
 800718e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007190:	07d9      	lsls	r1, r3, #31
 8007192:	d405      	bmi.n	80071a0 <_vfiprintf_r+0x220>
 8007194:	89ab      	ldrh	r3, [r5, #12]
 8007196:	059a      	lsls	r2, r3, #22
 8007198:	d402      	bmi.n	80071a0 <_vfiprintf_r+0x220>
 800719a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800719c:	f7ff fc23 	bl	80069e6 <__retarget_lock_release_recursive>
 80071a0:	89ab      	ldrh	r3, [r5, #12]
 80071a2:	065b      	lsls	r3, r3, #25
 80071a4:	f53f af12 	bmi.w	8006fcc <_vfiprintf_r+0x4c>
 80071a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071aa:	e711      	b.n	8006fd0 <_vfiprintf_r+0x50>
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <_vfiprintf_r+0x258>)
 80071b4:	a904      	add	r1, sp, #16
 80071b6:	4630      	mov	r0, r6
 80071b8:	f000 f880 	bl	80072bc <_printf_i>
 80071bc:	e7e4      	b.n	8007188 <_vfiprintf_r+0x208>
 80071be:	bf00      	nop
 80071c0:	08007964 	.word	0x08007964
 80071c4:	08007984 	.word	0x08007984
 80071c8:	08007944 	.word	0x08007944
 80071cc:	080079a4 	.word	0x080079a4
 80071d0:	080079ae 	.word	0x080079ae
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f5b 	.word	0x08006f5b
 80071dc:	080079aa 	.word	0x080079aa

080071e0 <_printf_common>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	4616      	mov	r6, r2
 80071e6:	4699      	mov	r9, r3
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	690b      	ldr	r3, [r1, #16]
 80071ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfb8      	it	lt
 80071f4:	4613      	movlt	r3, r2
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071fc:	4607      	mov	r7, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b10a      	cbz	r2, 8007206 <_printf_common+0x26>
 8007202:	3301      	adds	r3, #1
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	0699      	lsls	r1, r3, #26
 800720a:	bf42      	ittt	mi
 800720c:	6833      	ldrmi	r3, [r6, #0]
 800720e:	3302      	addmi	r3, #2
 8007210:	6033      	strmi	r3, [r6, #0]
 8007212:	6825      	ldr	r5, [r4, #0]
 8007214:	f015 0506 	ands.w	r5, r5, #6
 8007218:	d106      	bne.n	8007228 <_printf_common+0x48>
 800721a:	f104 0a19 	add.w	sl, r4, #25
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	6832      	ldr	r2, [r6, #0]
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	42ab      	cmp	r3, r5
 8007226:	dc26      	bgt.n	8007276 <_printf_common+0x96>
 8007228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800722c:	1e13      	subs	r3, r2, #0
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	bf18      	it	ne
 8007232:	2301      	movne	r3, #1
 8007234:	0692      	lsls	r2, r2, #26
 8007236:	d42b      	bmi.n	8007290 <_printf_common+0xb0>
 8007238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800723c:	4649      	mov	r1, r9
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d01e      	beq.n	8007284 <_printf_common+0xa4>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	68e5      	ldr	r5, [r4, #12]
 800724a:	6832      	ldr	r2, [r6, #0]
 800724c:	f003 0306 	and.w	r3, r3, #6
 8007250:	2b04      	cmp	r3, #4
 8007252:	bf08      	it	eq
 8007254:	1aad      	subeq	r5, r5, r2
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	bf0c      	ite	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	2500      	movne	r5, #0
 8007262:	4293      	cmp	r3, r2
 8007264:	bfc4      	itt	gt
 8007266:	1a9b      	subgt	r3, r3, r2
 8007268:	18ed      	addgt	r5, r5, r3
 800726a:	2600      	movs	r6, #0
 800726c:	341a      	adds	r4, #26
 800726e:	42b5      	cmp	r5, r6
 8007270:	d11a      	bne.n	80072a8 <_printf_common+0xc8>
 8007272:	2000      	movs	r0, #0
 8007274:	e008      	b.n	8007288 <_printf_common+0xa8>
 8007276:	2301      	movs	r3, #1
 8007278:	4652      	mov	r2, sl
 800727a:	4649      	mov	r1, r9
 800727c:	4638      	mov	r0, r7
 800727e:	47c0      	blx	r8
 8007280:	3001      	adds	r0, #1
 8007282:	d103      	bne.n	800728c <_printf_common+0xac>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	3501      	adds	r5, #1
 800728e:	e7c6      	b.n	800721e <_printf_common+0x3e>
 8007290:	18e1      	adds	r1, r4, r3
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	2030      	movs	r0, #48	; 0x30
 8007296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800729a:	4422      	add	r2, r4
 800729c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a4:	3302      	adds	r3, #2
 80072a6:	e7c7      	b.n	8007238 <_printf_common+0x58>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4622      	mov	r2, r4
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d0e6      	beq.n	8007284 <_printf_common+0xa4>
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7d9      	b.n	800726e <_printf_common+0x8e>
	...

080072bc <_printf_i>:
 80072bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	7e0f      	ldrb	r7, [r1, #24]
 80072c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072c4:	2f78      	cmp	r7, #120	; 0x78
 80072c6:	4691      	mov	r9, r2
 80072c8:	4680      	mov	r8, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	469a      	mov	sl, r3
 80072ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072d2:	d807      	bhi.n	80072e4 <_printf_i+0x28>
 80072d4:	2f62      	cmp	r7, #98	; 0x62
 80072d6:	d80a      	bhi.n	80072ee <_printf_i+0x32>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	f000 80d8 	beq.w	800748e <_printf_i+0x1d2>
 80072de:	2f58      	cmp	r7, #88	; 0x58
 80072e0:	f000 80a3 	beq.w	800742a <_printf_i+0x16e>
 80072e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072ec:	e03a      	b.n	8007364 <_printf_i+0xa8>
 80072ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072f2:	2b15      	cmp	r3, #21
 80072f4:	d8f6      	bhi.n	80072e4 <_printf_i+0x28>
 80072f6:	a101      	add	r1, pc, #4	; (adr r1, 80072fc <_printf_i+0x40>)
 80072f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007369 	.word	0x08007369
 8007304:	080072e5 	.word	0x080072e5
 8007308:	080072e5 	.word	0x080072e5
 800730c:	080072e5 	.word	0x080072e5
 8007310:	080072e5 	.word	0x080072e5
 8007314:	08007369 	.word	0x08007369
 8007318:	080072e5 	.word	0x080072e5
 800731c:	080072e5 	.word	0x080072e5
 8007320:	080072e5 	.word	0x080072e5
 8007324:	080072e5 	.word	0x080072e5
 8007328:	08007475 	.word	0x08007475
 800732c:	08007399 	.word	0x08007399
 8007330:	08007457 	.word	0x08007457
 8007334:	080072e5 	.word	0x080072e5
 8007338:	080072e5 	.word	0x080072e5
 800733c:	08007497 	.word	0x08007497
 8007340:	080072e5 	.word	0x080072e5
 8007344:	08007399 	.word	0x08007399
 8007348:	080072e5 	.word	0x080072e5
 800734c:	080072e5 	.word	0x080072e5
 8007350:	0800745f 	.word	0x0800745f
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007364:	2301      	movs	r3, #1
 8007366:	e0a3      	b.n	80074b0 <_printf_i+0x1f4>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	6829      	ldr	r1, [r5, #0]
 800736c:	0606      	lsls	r6, r0, #24
 800736e:	f101 0304 	add.w	r3, r1, #4
 8007372:	d50a      	bpl.n	800738a <_printf_i+0xce>
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	2e00      	cmp	r6, #0
 800737a:	da03      	bge.n	8007384 <_printf_i+0xc8>
 800737c:	232d      	movs	r3, #45	; 0x2d
 800737e:	4276      	negs	r6, r6
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	485e      	ldr	r0, [pc, #376]	; (8007500 <_printf_i+0x244>)
 8007386:	230a      	movs	r3, #10
 8007388:	e019      	b.n	80073be <_printf_i+0x102>
 800738a:	680e      	ldr	r6, [r1, #0]
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007392:	bf18      	it	ne
 8007394:	b236      	sxthne	r6, r6
 8007396:	e7ef      	b.n	8007378 <_printf_i+0xbc>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1d19      	adds	r1, r3, #4
 800739e:	6029      	str	r1, [r5, #0]
 80073a0:	0601      	lsls	r1, r0, #24
 80073a2:	d501      	bpl.n	80073a8 <_printf_i+0xec>
 80073a4:	681e      	ldr	r6, [r3, #0]
 80073a6:	e002      	b.n	80073ae <_printf_i+0xf2>
 80073a8:	0646      	lsls	r6, r0, #25
 80073aa:	d5fb      	bpl.n	80073a4 <_printf_i+0xe8>
 80073ac:	881e      	ldrh	r6, [r3, #0]
 80073ae:	4854      	ldr	r0, [pc, #336]	; (8007500 <_printf_i+0x244>)
 80073b0:	2f6f      	cmp	r7, #111	; 0x6f
 80073b2:	bf0c      	ite	eq
 80073b4:	2308      	moveq	r3, #8
 80073b6:	230a      	movne	r3, #10
 80073b8:	2100      	movs	r1, #0
 80073ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073be:	6865      	ldr	r5, [r4, #4]
 80073c0:	60a5      	str	r5, [r4, #8]
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	bfa2      	ittt	ge
 80073c6:	6821      	ldrge	r1, [r4, #0]
 80073c8:	f021 0104 	bicge.w	r1, r1, #4
 80073cc:	6021      	strge	r1, [r4, #0]
 80073ce:	b90e      	cbnz	r6, 80073d4 <_printf_i+0x118>
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d04d      	beq.n	8007470 <_printf_i+0x1b4>
 80073d4:	4615      	mov	r5, r2
 80073d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073da:	fb03 6711 	mls	r7, r3, r1, r6
 80073de:	5dc7      	ldrb	r7, [r0, r7]
 80073e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073e4:	4637      	mov	r7, r6
 80073e6:	42bb      	cmp	r3, r7
 80073e8:	460e      	mov	r6, r1
 80073ea:	d9f4      	bls.n	80073d6 <_printf_i+0x11a>
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d10b      	bne.n	8007408 <_printf_i+0x14c>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07de      	lsls	r6, r3, #31
 80073f4:	d508      	bpl.n	8007408 <_printf_i+0x14c>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	6861      	ldr	r1, [r4, #4]
 80073fa:	4299      	cmp	r1, r3
 80073fc:	bfde      	ittt	le
 80073fe:	2330      	movle	r3, #48	; 0x30
 8007400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007408:	1b52      	subs	r2, r2, r5
 800740a:	6122      	str	r2, [r4, #16]
 800740c:	f8cd a000 	str.w	sl, [sp]
 8007410:	464b      	mov	r3, r9
 8007412:	aa03      	add	r2, sp, #12
 8007414:	4621      	mov	r1, r4
 8007416:	4640      	mov	r0, r8
 8007418:	f7ff fee2 	bl	80071e0 <_printf_common>
 800741c:	3001      	adds	r0, #1
 800741e:	d14c      	bne.n	80074ba <_printf_i+0x1fe>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	b004      	add	sp, #16
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	4835      	ldr	r0, [pc, #212]	; (8007500 <_printf_i+0x244>)
 800742c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007430:	6829      	ldr	r1, [r5, #0]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	f851 6b04 	ldr.w	r6, [r1], #4
 8007438:	6029      	str	r1, [r5, #0]
 800743a:	061d      	lsls	r5, r3, #24
 800743c:	d514      	bpl.n	8007468 <_printf_i+0x1ac>
 800743e:	07df      	lsls	r7, r3, #31
 8007440:	bf44      	itt	mi
 8007442:	f043 0320 	orrmi.w	r3, r3, #32
 8007446:	6023      	strmi	r3, [r4, #0]
 8007448:	b91e      	cbnz	r6, 8007452 <_printf_i+0x196>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f023 0320 	bic.w	r3, r3, #32
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	2310      	movs	r3, #16
 8007454:	e7b0      	b.n	80073b8 <_printf_i+0xfc>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	2378      	movs	r3, #120	; 0x78
 8007460:	4828      	ldr	r0, [pc, #160]	; (8007504 <_printf_i+0x248>)
 8007462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007466:	e7e3      	b.n	8007430 <_printf_i+0x174>
 8007468:	0659      	lsls	r1, r3, #25
 800746a:	bf48      	it	mi
 800746c:	b2b6      	uxthmi	r6, r6
 800746e:	e7e6      	b.n	800743e <_printf_i+0x182>
 8007470:	4615      	mov	r5, r2
 8007472:	e7bb      	b.n	80073ec <_printf_i+0x130>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	6826      	ldr	r6, [r4, #0]
 8007478:	6961      	ldr	r1, [r4, #20]
 800747a:	1d18      	adds	r0, r3, #4
 800747c:	6028      	str	r0, [r5, #0]
 800747e:	0635      	lsls	r5, r6, #24
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	d501      	bpl.n	8007488 <_printf_i+0x1cc>
 8007484:	6019      	str	r1, [r3, #0]
 8007486:	e002      	b.n	800748e <_printf_i+0x1d2>
 8007488:	0670      	lsls	r0, r6, #25
 800748a:	d5fb      	bpl.n	8007484 <_printf_i+0x1c8>
 800748c:	8019      	strh	r1, [r3, #0]
 800748e:	2300      	movs	r3, #0
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	4615      	mov	r5, r2
 8007494:	e7ba      	b.n	800740c <_printf_i+0x150>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	1d1a      	adds	r2, r3, #4
 800749a:	602a      	str	r2, [r5, #0]
 800749c:	681d      	ldr	r5, [r3, #0]
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	2100      	movs	r1, #0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7f8 feac 	bl	8000200 <memchr>
 80074a8:	b108      	cbz	r0, 80074ae <_printf_i+0x1f2>
 80074aa:	1b40      	subs	r0, r0, r5
 80074ac:	6060      	str	r0, [r4, #4]
 80074ae:	6863      	ldr	r3, [r4, #4]
 80074b0:	6123      	str	r3, [r4, #16]
 80074b2:	2300      	movs	r3, #0
 80074b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b8:	e7a8      	b.n	800740c <_printf_i+0x150>
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	462a      	mov	r2, r5
 80074be:	4649      	mov	r1, r9
 80074c0:	4640      	mov	r0, r8
 80074c2:	47d0      	blx	sl
 80074c4:	3001      	adds	r0, #1
 80074c6:	d0ab      	beq.n	8007420 <_printf_i+0x164>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	079b      	lsls	r3, r3, #30
 80074cc:	d413      	bmi.n	80074f6 <_printf_i+0x23a>
 80074ce:	68e0      	ldr	r0, [r4, #12]
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	4298      	cmp	r0, r3
 80074d4:	bfb8      	it	lt
 80074d6:	4618      	movlt	r0, r3
 80074d8:	e7a4      	b.n	8007424 <_printf_i+0x168>
 80074da:	2301      	movs	r3, #1
 80074dc:	4632      	mov	r2, r6
 80074de:	4649      	mov	r1, r9
 80074e0:	4640      	mov	r0, r8
 80074e2:	47d0      	blx	sl
 80074e4:	3001      	adds	r0, #1
 80074e6:	d09b      	beq.n	8007420 <_printf_i+0x164>
 80074e8:	3501      	adds	r5, #1
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	9903      	ldr	r1, [sp, #12]
 80074ee:	1a5b      	subs	r3, r3, r1
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dcf2      	bgt.n	80074da <_printf_i+0x21e>
 80074f4:	e7eb      	b.n	80074ce <_printf_i+0x212>
 80074f6:	2500      	movs	r5, #0
 80074f8:	f104 0619 	add.w	r6, r4, #25
 80074fc:	e7f5      	b.n	80074ea <_printf_i+0x22e>
 80074fe:	bf00      	nop
 8007500:	080079b5 	.word	0x080079b5
 8007504:	080079c6 	.word	0x080079c6

08007508 <_sbrk_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_sbrk_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa f9fc 	bl	8001910 <_sbrk>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_sbrk_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_sbrk_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	200002c4 	.word	0x200002c4

08007528 <__sread>:
 8007528:	b510      	push	{r4, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	f000 f8f8 	bl	8007724 <_read_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	bfab      	itete	ge
 8007538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800753a:	89a3      	ldrhlt	r3, [r4, #12]
 800753c:	181b      	addge	r3, r3, r0
 800753e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007542:	bfac      	ite	ge
 8007544:	6563      	strge	r3, [r4, #84]	; 0x54
 8007546:	81a3      	strhlt	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__swrite>:
 800754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	461f      	mov	r7, r3
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	4616      	mov	r6, r2
 800755a:	d505      	bpl.n	8007568 <__swrite+0x1e>
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	2302      	movs	r3, #2
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f868 	bl	8007638 <_lseek_r>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 b817 	b.w	80075b0 <_write_r>

08007582 <__sseek>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 f855 	bl	8007638 <_lseek_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	bf15      	itete	ne
 8007594:	6560      	strne	r0, [r4, #84]	; 0x54
 8007596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800759a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800759e:	81a3      	strheq	r3, [r4, #12]
 80075a0:	bf18      	it	ne
 80075a2:	81a3      	strhne	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}

080075a6 <__sclose>:
 80075a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075aa:	f000 b813 	b.w	80075d4 <_close_r>
	...

080075b0 <_write_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_write_r+0x20>)
 80075b4:	4604      	mov	r4, r0
 80075b6:	4608      	mov	r0, r1
 80075b8:	4611      	mov	r1, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7fa f955 	bl	800186e <_write>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_write_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_write_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	200002c4 	.word	0x200002c4

080075d4 <_close_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d06      	ldr	r5, [pc, #24]	; (80075f0 <_close_r+0x1c>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7fa f961 	bl	80018a6 <_close>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_close_r+0x1a>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_close_r+0x1a>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	200002c4 	.word	0x200002c4

080075f4 <_fstat_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	; (8007614 <_fstat_r+0x20>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	f7fa f95c 	bl	80018be <_fstat>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d102      	bne.n	8007610 <_fstat_r+0x1c>
 800760a:	682b      	ldr	r3, [r5, #0]
 800760c:	b103      	cbz	r3, 8007610 <_fstat_r+0x1c>
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	bd38      	pop	{r3, r4, r5, pc}
 8007612:	bf00      	nop
 8007614:	200002c4 	.word	0x200002c4

08007618 <_isatty_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d06      	ldr	r5, [pc, #24]	; (8007634 <_isatty_r+0x1c>)
 800761c:	2300      	movs	r3, #0
 800761e:	4604      	mov	r4, r0
 8007620:	4608      	mov	r0, r1
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	f7fa f95b 	bl	80018de <_isatty>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_isatty_r+0x1a>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_isatty_r+0x1a>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	200002c4 	.word	0x200002c4

08007638 <_lseek_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	; (8007658 <_lseek_r+0x20>)
 800763c:	4604      	mov	r4, r0
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	2200      	movs	r2, #0
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7fa f954 	bl	80018f4 <_lseek>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_lseek_r+0x1e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_lseek_r+0x1e>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	200002c4 	.word	0x200002c4

0800765c <memcpy>:
 800765c:	440a      	add	r2, r1
 800765e:	4291      	cmp	r1, r2
 8007660:	f100 33ff 	add.w	r3, r0, #4294967295
 8007664:	d100      	bne.n	8007668 <memcpy+0xc>
 8007666:	4770      	bx	lr
 8007668:	b510      	push	{r4, lr}
 800766a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007672:	4291      	cmp	r1, r2
 8007674:	d1f9      	bne.n	800766a <memcpy+0xe>
 8007676:	bd10      	pop	{r4, pc}

08007678 <memmove>:
 8007678:	4288      	cmp	r0, r1
 800767a:	b510      	push	{r4, lr}
 800767c:	eb01 0402 	add.w	r4, r1, r2
 8007680:	d902      	bls.n	8007688 <memmove+0x10>
 8007682:	4284      	cmp	r4, r0
 8007684:	4623      	mov	r3, r4
 8007686:	d807      	bhi.n	8007698 <memmove+0x20>
 8007688:	1e43      	subs	r3, r0, #1
 800768a:	42a1      	cmp	r1, r4
 800768c:	d008      	beq.n	80076a0 <memmove+0x28>
 800768e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007696:	e7f8      	b.n	800768a <memmove+0x12>
 8007698:	4402      	add	r2, r0
 800769a:	4601      	mov	r1, r0
 800769c:	428a      	cmp	r2, r1
 800769e:	d100      	bne.n	80076a2 <memmove+0x2a>
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076aa:	e7f7      	b.n	800769c <memmove+0x24>

080076ac <__malloc_lock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__malloc_lock+0x8>)
 80076ae:	f7ff b999 	b.w	80069e4 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	200002b8 	.word	0x200002b8

080076b8 <__malloc_unlock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_unlock+0x8>)
 80076ba:	f7ff b994 	b.w	80069e6 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	200002b8 	.word	0x200002b8

080076c4 <_realloc_r>:
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	4680      	mov	r8, r0
 80076ca:	4614      	mov	r4, r2
 80076cc:	460e      	mov	r6, r1
 80076ce:	b921      	cbnz	r1, 80076da <_realloc_r+0x16>
 80076d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	4611      	mov	r1, r2
 80076d6:	f7ff ba59 	b.w	8006b8c <_malloc_r>
 80076da:	b92a      	cbnz	r2, 80076e8 <_realloc_r+0x24>
 80076dc:	f7ff f9ea 	bl	8006ab4 <_free_r>
 80076e0:	4625      	mov	r5, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e8:	f000 f82e 	bl	8007748 <_malloc_usable_size_r>
 80076ec:	4284      	cmp	r4, r0
 80076ee:	4607      	mov	r7, r0
 80076f0:	d802      	bhi.n	80076f8 <_realloc_r+0x34>
 80076f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076f6:	d812      	bhi.n	800771e <_realloc_r+0x5a>
 80076f8:	4621      	mov	r1, r4
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fa46 	bl	8006b8c <_malloc_r>
 8007700:	4605      	mov	r5, r0
 8007702:	2800      	cmp	r0, #0
 8007704:	d0ed      	beq.n	80076e2 <_realloc_r+0x1e>
 8007706:	42bc      	cmp	r4, r7
 8007708:	4622      	mov	r2, r4
 800770a:	4631      	mov	r1, r6
 800770c:	bf28      	it	cs
 800770e:	463a      	movcs	r2, r7
 8007710:	f7ff ffa4 	bl	800765c <memcpy>
 8007714:	4631      	mov	r1, r6
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff f9cc 	bl	8006ab4 <_free_r>
 800771c:	e7e1      	b.n	80076e2 <_realloc_r+0x1e>
 800771e:	4635      	mov	r5, r6
 8007720:	e7df      	b.n	80076e2 <_realloc_r+0x1e>
	...

08007724 <_read_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_read_r+0x20>)
 8007728:	4604      	mov	r4, r0
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7fa f87e 	bl	8001834 <_read>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_read_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_read_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200002c4 	.word	0x200002c4

08007748 <_malloc_usable_size_r>:
 8007748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774c:	1f18      	subs	r0, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfbc      	itt	lt
 8007752:	580b      	ldrlt	r3, [r1, r0]
 8007754:	18c0      	addlt	r0, r0, r3
 8007756:	4770      	bx	lr

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
