
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800336c  0800336c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003374  08003374  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eafa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002185  00000000  00000000  0002eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00030cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e1c  00000000  00000000  000326d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010af8  00000000  00000000  000564f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe94  00000000  00000000  00066fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142e80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037a4  00000000  00000000  00142ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800333c 	.word	0x0800333c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800333c 	.word	0x0800333c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0x84>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <MX_GPIO_Init+0x84>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_GPIO_Init+0x84>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_GPIO_Init+0x84>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_GPIO_Init+0x84>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_GPIO_Init+0x84>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_GPIO_Init+0x84>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_GPIO_Init+0x84>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_GPIO_Init+0x84>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_GPIO_Init+0x84>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <MX_GPIO_Init+0x84>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_GPIO_Init+0x84>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fb04 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f81c 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f7ff ffb4 	bl	80004f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000588:	f000 f890 	bl	80006ac <MX_RTC_Init>
  MX_USART3_UART_Init();
 800058c:	f000 fa60 	bl	8000a50 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000590:	f000 f940 	bl	8000814 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x40>)
 8000598:	f001 fe04 	bl	80021a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x40>)
 80005a0:	f001 fe00 	bl	80021a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005a4:	2108      	movs	r1, #8
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0x40>)
 80005a8:	f001 fdfc 	bl	80021a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005ac:	210c      	movs	r1, #12
 80005ae:	4802      	ldr	r0, [pc, #8]	; (80005b8 <main+0x40>)
 80005b0:	f001 fdf8 	bl	80021a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x3c>
 80005b6:	bf00      	nop
 80005b8:	20000048 	.word	0x20000048

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 feae 	bl	800332c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <SystemClock_Config+0xdc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <SystemClock_Config+0xdc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <SystemClock_Config+0xe0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <SystemClock_Config+0xe0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000618:	2306      	movs	r3, #6
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000634:	23b4      	movs	r3, #180	; 0xb4
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fdf3 	bl	8001230 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f826 	bl	80006a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000654:	f000 fd9c 	bl	8001190 <HAL_PWREx_EnableOverDrive>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065e:	f000 f81f 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f84d 	bl	8001720 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800068c:	f000 f808 	bl	80006a0 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_RTC_Init+0x44>)
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_RTC_Init+0x48>)
 80006b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_RTC_Init+0x44>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_RTC_Init+0x44>)
 80006be:	227f      	movs	r2, #127	; 0x7f
 80006c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_RTC_Init+0x44>)
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_RTC_Init+0x44>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_RTC_Init+0x44>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_RTC_Init+0x44>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_RTC_Init+0x44>)
 80006dc:	f001 fbc0 	bl	8001e60 <HAL_RTC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006e6:	f7ff ffdb 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40002800 	.word	0x40002800

080006f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2230      	movs	r2, #48	; 0x30
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fe0f 	bl	800332c <memset>
  if(rtcHandle->Instance==RTC)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <HAL_RTC_MspInit+0x4c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d111      	bne.n	800073c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000718:	2320      	movs	r3, #32
 800071a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f9da 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000732:	f7ff ffb5 	bl	80006a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <HAL_RTC_MspInit+0x50>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40002800 	.word	0x40002800
 8000748:	42470e3c 	.word	0x42470e3c

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <HAL_MspInit+0x4c>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 fa20 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <MX_TIM3_Init+0x140>)
 8000848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_TIM3_Init+0x13c>)
 800084c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000-1;
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_TIM3_Init+0x13c>)
 800085a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800085e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086c:	4838      	ldr	r0, [pc, #224]	; (8000950 <MX_TIM3_Init+0x13c>)
 800086e:	f001 fbf1 	bl	8002054 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000878:	f7ff ff12 	bl	80006a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000886:	4619      	mov	r1, r3
 8000888:	4831      	ldr	r0, [pc, #196]	; (8000950 <MX_TIM3_Init+0x13c>)
 800088a:	f001 fe15 	bl	80024b8 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000894:	f7ff ff04 	bl	80006a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000898:	482d      	ldr	r0, [pc, #180]	; (8000950 <MX_TIM3_Init+0x13c>)
 800089a:	f001 fc2a 	bl	80020f2 <HAL_TIM_PWM_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008a4:	f7ff fefc 	bl	80006a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4619      	mov	r1, r3
 80008b6:	4826      	ldr	r0, [pc, #152]	; (8000950 <MX_TIM3_Init+0x13c>)
 80008b8:	f002 f9d6 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008c2:	f7ff feed 	bl	80006a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 22500-1;
 80008ca:	f245 73e3 	movw	r3, #22499	; 0x57e3
 80008ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_TIM3_Init+0x13c>)
 80008e0:	f001 fd28 	bl	8002334 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80008ea:	f7ff fed9 	bl	80006a0 <Error_Handler>
  }
  sConfigOC.Pulse = 11250-1;
 80008ee:	f642 33f1 	movw	r3, #11249	; 0x2bf1
 80008f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <MX_TIM3_Init+0x13c>)
 80008fc:	f001 fd1a 	bl	8002334 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000906:	f7ff fecb 	bl	80006a0 <Error_Handler>
  }
  sConfigOC.Pulse = 5625-1;
 800090a:	f241 53f8 	movw	r3, #5624	; 0x15f8
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2208      	movs	r2, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000918:	f001 fd0c 	bl	8002334 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000922:	f7ff febd 	bl	80006a0 <Error_Handler>
  }
  sConfigOC.Pulse = 2812-1;
 8000926:	f640 23fb 	movw	r3, #2811	; 0xafb
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000934:	f001 fcfe 	bl	8002334 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 800093e:	f7ff feaf 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM3_Init+0x13c>)
 8000944:	f000 f82a 	bl	800099c <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	; 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000048 	.word	0x20000048
 8000954:	40000400 	.word	0x40000400

08000958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_TIM_Base_MspInit+0x3c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10d      	bne.n	8000986 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0x40>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x40>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_TIM_Base_MspInit+0x40>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40000400 	.word	0x40000400
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_TIM_MspPostInit+0xa4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d13b      	bne.n	8000a36 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_TIM_MspPostInit+0xa8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a06:	2302      	movs	r3, #2
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <HAL_TIM_MspPostInit+0xac>)
 8000a12:	f000 fa11 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a16:	2303      	movs	r3, #3
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a26:	2302      	movs	r3, #2
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_TIM_MspPostInit+0xb0>)
 8000a32:	f000 fa01 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40000400 	.word	0x40000400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART3_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a88:	f002 f96a 	bl	8002d60 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f7ff fe05 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1c:	f000 f98c 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5e:	f7ff fe47 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 fbbf 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fd07 	bl	8000578 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	200000d8 	.word	0x200000d8

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f90d 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fdc6 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f917 	bl	8000e1e <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f8ed 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000d4 	.word	0x200000d4

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000d4 	.word	0x200000d4

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e177      	b.n	8001144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8166 	bne.w	800113e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80c0 	beq.w	800113e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a65      	ldr	r2, [pc, #404]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a61      	ldr	r2, [pc, #388]	; (8001160 <HAL_GPIO_Init+0x328>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d037      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_GPIO_Init+0x330>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d031      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_GPIO_Init+0x334>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a55      	ldr	r2, [pc, #340]	; (8001170 <HAL_GPIO_Init+0x338>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a54      	ldr	r2, [pc, #336]	; (8001174 <HAL_GPIO_Init+0x33c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <HAL_GPIO_Init+0x340>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x22a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x344>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x348>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x34c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x350>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x21a>
 800104e:	2309      	movs	r3, #9
 8001050:	e012      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001052:	230a      	movs	r3, #10
 8001054:	e010      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001056:	2308      	movs	r3, #8
 8001058:	e00e      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105a:	2307      	movs	r3, #7
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105e:	2306      	movs	r3, #6
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x328>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_GPIO_Init+0x354>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_GPIO_Init+0x354>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_GPIO_Init+0x354>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_GPIO_Init+0x354>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x354>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_GPIO_Init+0x354>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_Init+0x354>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_GPIO_Init+0x354>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f ae84 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021400 	.word	0x40021400
 800117c:	40021800 	.word	0x40021800
 8001180:	40021c00 	.word	0x40021c00
 8001184:	40022000 	.word	0x40022000
 8001188:	40022400 	.word	0x40022400
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_PWREx_EnableOverDrive+0x94>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff fd4a 	bl	8000c54 <HAL_GetTick>
 80011c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c2:	e009      	b.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c4:	f7ff fd46 	bl	8000c54 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d2:	d901      	bls.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e01f      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d1ee      	bne.n	80011c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff fd32 	bl	8000c54 <HAL_GetTick>
 80011f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f2:	e009      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f4:	f7ff fd2e 	bl	8000c54 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	d901      	bls.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e007      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001214:	d1ee      	bne.n	80011f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	420e0040 	.word	0x420e0040
 8001228:	40007000 	.word	0x40007000
 800122c:	420e0044 	.word	0x420e0044

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e267      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6f      	ldr	r2, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a68      	ldr	r2, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcb4 	bl	8000c54 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcb0 	bl	8000c54 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e207      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fca0 	bl	8000c54 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fc9c 	bl	8000c54 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f3      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc55 	bl	8000c54 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc51 	bl	8000c54 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a8      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc34 	bl	8000c54 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc30 	bl	8000c54 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e187      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc14 	bl	8000c54 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc10 	bl	8000c54 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e167      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fbfd 	bl	8000c54 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fbf9 	bl	8000c54 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e150      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8097 	beq.w	80015c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a7c      	ldr	r2, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbb9 	bl	8000c54 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fbb5 	bl	8000c54 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e10c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x2ea>
 800150c:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x30c>
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fb7a 	bl	8000c54 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fb76 	bl	8000c54 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0cb      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ee      	beq.n	8001564 <HAL_RCC_OscConfig+0x334>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb64 	bl	8000c54 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fb60 	bl	8000c54 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0b5      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a38      	ldr	r2, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a1 	beq.w	8001710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d05c      	beq.n	8001694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d141      	bne.n	8001666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb34 	bl	8000c54 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb30 	bl	8000c54 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e087      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb09 	bl	8000c54 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb05 	bl	8000c54 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e05c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x416>
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff faf2 	bl	8000c54 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff faee 	bl	8000c54 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x444>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d028      	beq.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11a      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa20 	bl	8000c54 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa1c 	bl	8000c54 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f980 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08003354 	.word	0x08003354
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b090      	sub	sp, #64	; 0x40
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
 80018f8:	2300      	movs	r3, #0
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80a1 	bhi.w	8001a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e09b      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001924:	e09b      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192a:	e098      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d028      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	627a      	str	r2, [r7, #36]	; 0x24
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001954:	2100      	movs	r1, #0
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001958:	fb03 f201 	mul.w	r2, r3, r1
 800195c:	2300      	movs	r3, #0
 800195e:	fb00 f303 	mul.w	r3, r0, r3
 8001962:	4413      	add	r3, r2
 8001964:	4a43      	ldr	r2, [pc, #268]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001966:	fba0 1202 	umull	r1, r2, r0, r2
 800196a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800196c:	460a      	mov	r2, r1
 800196e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001972:	4413      	add	r3, r2
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	2200      	movs	r2, #0
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	61fa      	str	r2, [r7, #28]
 800197e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001986:	f7fe fc31 	bl	80001ec <__aeabi_uldivmod>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4613      	mov	r3, r2
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001992:	e053      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	2200      	movs	r2, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	617a      	str	r2, [r7, #20]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019a6:	f04f 0b00 	mov.w	fp, #0
 80019aa:	4652      	mov	r2, sl
 80019ac:	465b      	mov	r3, fp
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	0159      	lsls	r1, r3, #5
 80019b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019bc:	0150      	lsls	r0, r2, #5
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	ebb2 080a 	subs.w	r8, r2, sl
 80019c6:	eb63 090b 	sbc.w	r9, r3, fp
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019de:	ebb2 0408 	subs.w	r4, r2, r8
 80019e2:	eb63 0509 	sbc.w	r5, r3, r9
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	00eb      	lsls	r3, r5, #3
 80019f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f4:	00e2      	lsls	r2, r4, #3
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	eb14 030a 	adds.w	r3, r4, sl
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	eb45 030b 	adc.w	r3, r5, fp
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a12:	4629      	mov	r1, r5
 8001a14:	028b      	lsls	r3, r1, #10
 8001a16:	4621      	mov	r1, r4
 8001a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	028a      	lsls	r2, r1, #10
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	2200      	movs	r2, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a30:	f7fe fbdc 	bl	80001ec <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3301      	adds	r3, #1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3740      	adds	r7, #64	; 0x40
 8001a64:	46bd      	mov	sp, r7
 8001a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	017d7840 	.word	0x017d7840

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0a9b      	lsrs	r3, r3, #10
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08003364 	.word	0x08003364

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffdc 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0b5b      	lsrs	r3, r3, #13
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08003364 	.word	0x08003364

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d075      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b14:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b1a:	f7ff f89b 	bl	8000c54 <HAL_GetTick>
 8001b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b22:	f7ff f897 	bl	8000c54 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e189      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	019a      	lsls	r2, r3, #6
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	071b      	lsls	r3, r3, #28
 8001b58:	4981      	ldr	r1, [pc, #516]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01f      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b72:	0f1b      	lsrs	r3, r3, #28
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	019a      	lsls	r2, r3, #6
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	431a      	orrs	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	071b      	lsls	r3, r3, #28
 8001b8c:	4974      	ldr	r1, [pc, #464]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b94:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b9a:	f023 021f 	bic.w	r2, r3, #31
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	496e      	ldr	r1, [pc, #440]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	019a      	lsls	r2, r3, #6
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	071b      	lsls	r3, r3, #28
 8001bcc:	4964      	ldr	r1, [pc, #400]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001bd4:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bda:	f7ff f83b 	bl	8000c54 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001be2:	f7ff f837 	bl	8000c54 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e129      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bf4:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d079      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1e:	f7ff f819 	bl	8000c54 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c26:	f7ff f815 	bl	8000c54 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e107      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c44:	d0ef      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c58:	0f1b      	lsrs	r3, r3, #28
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	019a      	lsls	r2, r3, #6
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	061b      	lsls	r3, r3, #24
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	071b      	lsls	r3, r3, #28
 8001c72:	493b      	ldr	r1, [pc, #236]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4934      	ldr	r1, [pc, #208]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01e      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	0e1b      	lsrs	r3, r3, #24
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	019a      	lsls	r2, r3, #6
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	071b      	lsls	r3, r3, #28
 8001cc0:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe ffb6 	bl	8000c54 <HAL_GetTick>
 8001ce8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cec:	f7fe ffb2 	bl	8000c54 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0a4      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d0a:	d1ef      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 808b 	beq.w	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d42:	f7fe ff87 	bl	8000c54 <HAL_GetTick>
 8001d46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d48:	e010      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7fe ff83 	bl	8000c54 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d909      	bls.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e075      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001d5c:	42470068 	.word	0x42470068
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470070 	.word	0x42470070
 8001d68:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0e8      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02f      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d028      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001dac:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d114      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff49 	bl	8000c54 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7fe ff45 	bl	8000c54 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e035      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ee      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001df4:	d10d      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0a:	4912      	ldr	r1, [pc, #72]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e005      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e1c:	6093      	str	r3, [r2, #8]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2a:	490a      	ldr	r1, [pc, #40]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001e44:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40007000 	.word	0x40007000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	42470e40 	.word	0x42470e40
 8001e5c:	424711e0 	.word	0x424711e0

08001e60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e066      	b.n	8001f44 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f5b      	ldrb	r3, [r3, #29]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fc36 	bl	80006f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	22ca      	movs	r2, #202	; 0xca
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2253      	movs	r2, #83	; 0x53
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f87a 	bl	8001f9c <RTC_EnterInitMode>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12c      	bne.n	8001f0c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68d2      	ldr	r2, [r2, #12]
 8001eec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6919      	ldr	r1, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f881 	bl	800200a <RTC_ExitInitMode>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d113      	bne.n	8001f3a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f68:	f7fe fe74 	bl	8000c54 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f6e:	e009      	b.n	8001f84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f70:	f7fe fe70 	bl	8000c54 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7e:	d901      	bls.n	8001f84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e007      	b.n	8001f94 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ee      	beq.n	8001f70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d122      	bne.n	8002000 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fca:	f7fe fe43 	bl	8000c54 <HAL_GetTick>
 8001fce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fd0:	e00c      	b.n	8001fec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fd2:	f7fe fe3f 	bl	8000c54 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe0:	d904      	bls.n	8001fec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <RTC_EnterInitMode+0x64>
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1e8      	bne.n	8001fd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002024:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff89 	bl	8001f4c <HAL_RTC_WaitForSynchro>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2204      	movs	r2, #4
 8002044:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e041      	b.n	80020ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fc6c 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3304      	adds	r3, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f000 fad8 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e041      	b.n	8002188 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f839 	bl	8002190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f000 fa89 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_TIM_PWM_Start+0x24>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e022      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d109      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x3e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	bf14      	ite	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	2300      	moveq	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e015      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d109      	bne.n	80021fc <HAL_TIM_PWM_Start+0x58>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e008      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07c      	b.n	8002310 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_TIM_PWM_Start+0x82>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002224:	e013      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0x92>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	e00b      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0xa2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002244:	e003      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fce0 	bl	8002c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_TIM_PWM_Start+0x174>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_PWM_Start+0xcc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	; (800231c <HAL_TIM_PWM_Start+0x178>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_TIM_PWM_Start+0xd0>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_TIM_PWM_Start+0xd2>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_TIM_PWM_Start+0x174>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d01d      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_TIM_PWM_Start+0x17c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d018      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_TIM_PWM_Start+0x180>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_TIM_PWM_Start+0x184>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_TIM_PWM_Start+0x178>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_TIM_PWM_Start+0x188>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_TIM_PWM_Start+0x18c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d010      	beq.n	800230e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e007      	b.n	800230e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010000 	.word	0x40010000
 800231c:	40010400 	.word	0x40010400
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40014000 	.word	0x40014000
 8002330:	40001800 	.word	0x40001800

08002334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0ae      	b.n	80024b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	f200 809f 	bhi.w	80024a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800239d 	.word	0x0800239d
 800236c:	080024a1 	.word	0x080024a1
 8002370:	080024a1 	.word	0x080024a1
 8002374:	080024a1 	.word	0x080024a1
 8002378:	080023dd 	.word	0x080023dd
 800237c:	080024a1 	.word	0x080024a1
 8002380:	080024a1 	.word	0x080024a1
 8002384:	080024a1 	.word	0x080024a1
 8002388:	0800241f 	.word	0x0800241f
 800238c:	080024a1 	.word	0x080024a1
 8002390:	080024a1 	.word	0x080024a1
 8002394:	080024a1 	.word	0x080024a1
 8002398:	0800245f 	.word	0x0800245f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f9f0 	bl	8002788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6999      	ldr	r1, [r3, #24]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	619a      	str	r2, [r3, #24]
      break;
 80023da:	e064      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa40 	bl	8002868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	021a      	lsls	r2, r3, #8
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	619a      	str	r2, [r3, #24]
      break;
 800241c:	e043      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa95 	bl	8002954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0208 	orr.w	r2, r2, #8
 8002438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0204 	bic.w	r2, r2, #4
 8002448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69d9      	ldr	r1, [r3, #28]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	61da      	str	r2, [r3, #28]
      break;
 800245c:	e023      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fae9 	bl	8002a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	61da      	str	r2, [r3, #28]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
      break;
 80024a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_ConfigClockSource+0x1c>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0b4      	b.n	800263e <HAL_TIM_ConfigClockSource+0x186>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0xd4>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	f000 8086 	beq.w	800262a <HAL_TIM_ConfigClockSource+0x172>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0xa6>
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002530:	2b60      	cmp	r3, #96	; 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002538:	2b50      	cmp	r3, #80	; 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f000 fb35 	bl	8002bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04f      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f000 fb1e 	bl	8002bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 fa92 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	; 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 faeb 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 fab1 	bl	8002b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	; 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fadb 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 fa72 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 facb 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002610:	e00c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 fac2 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002622:	e003      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e000      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800262a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a40      	ldr	r2, [pc, #256]	; (800275c <TIM_Base_SetConfig+0x114>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <TIM_Base_SetConfig+0x118>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <TIM_Base_SetConfig+0x120>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3a      	ldr	r2, [pc, #232]	; (800276c <TIM_Base_SetConfig+0x124>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2f      	ldr	r2, [pc, #188]	; (800275c <TIM_Base_SetConfig+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d027      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <TIM_Base_SetConfig+0x118>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d023      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <TIM_Base_SetConfig+0x120>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a29      	ldr	r2, [pc, #164]	; (800276c <TIM_Base_SetConfig+0x124>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d017      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <TIM_Base_SetConfig+0x128>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <TIM_Base_SetConfig+0x12c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00f      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <TIM_Base_SetConfig+0x130>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00b      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <TIM_Base_SetConfig+0x134>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <TIM_Base_SetConfig+0x138>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d003      	beq.n	80026fa <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <TIM_Base_SetConfig+0x13c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d108      	bne.n	800270c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <TIM_Base_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <TIM_Base_SetConfig+0x124>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40010400 	.word	0x40010400
 8002770:	40014000 	.word	0x40014000
 8002774:	40014400 	.word	0x40014400
 8002778:	40014800 	.word	0x40014800
 800277c:	40001800 	.word	0x40001800
 8002780:	40001c00 	.word	0x40001c00
 8002784:	40002000 	.word	0x40002000

08002788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f023 0201 	bic.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f023 0302 	bic.w	r3, r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <TIM_OC1_SetConfig+0xd8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_OC1_SetConfig+0x64>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <TIM_OC1_SetConfig+0xdc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10c      	bne.n	8002806 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0308 	bic.w	r3, r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <TIM_OC1_SetConfig+0xd8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_OC1_SetConfig+0x8e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <TIM_OC1_SetConfig+0xdc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d111      	bne.n	800283a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800281c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	621a      	str	r2, [r3, #32]
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40010000 	.word	0x40010000
 8002864:	40010400 	.word	0x40010400

08002868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0210 	bic.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0320 	bic.w	r3, r3, #32
 80028b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <TIM_OC2_SetConfig+0xe4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_OC2_SetConfig+0x68>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <TIM_OC2_SetConfig+0xe8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10d      	bne.n	80028ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <TIM_OC2_SetConfig+0xe4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_OC2_SetConfig+0x94>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <TIM_OC2_SetConfig+0xe8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d113      	bne.n	8002924 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800290a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40010400 	.word	0x40010400

08002954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800299c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <TIM_OC3_SetConfig+0xe0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_OC3_SetConfig+0x66>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <TIM_OC3_SetConfig+0xe4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10d      	bne.n	80029d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <TIM_OC3_SetConfig+0xe0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_OC3_SetConfig+0x92>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <TIM_OC3_SetConfig+0xe4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	621a      	str	r2, [r3, #32]
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010400 	.word	0x40010400

08002a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	031b      	lsls	r3, r3, #12
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <TIM_OC4_SetConfig+0xa4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <TIM_OC4_SetConfig+0x68>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <TIM_OC4_SetConfig+0xa8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d109      	bne.n	8002ab8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	621a      	str	r2, [r3, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 030a 	bic.w	r3, r3, #10
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f023 0210 	bic.w	r2, r3, #16
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	031b      	lsls	r3, r3, #12
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f043 0307 	orr.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2201      	movs	r2, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e05a      	b.n	8002d36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d01d      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d018      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10c      	bne.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40010400 	.word	0x40010400
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40001800 	.word	0x40001800

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e03f      	b.n	8002df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fe8c 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f829 	bl	8002dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b0c0      	sub	sp, #256	; 0x100
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	ea40 0301 	orr.w	r3, r0, r1
 8002e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e54:	f021 010c 	bic.w	r1, r1, #12
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e62:	430b      	orrs	r3, r1
 8002e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	6999      	ldr	r1, [r3, #24]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	ea40 0301 	orr.w	r3, r0, r1
 8002e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	; (80030c8 <UART_SetConfig+0x2cc>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d005      	beq.n	8002e9c <UART_SetConfig+0xa0>
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <UART_SetConfig+0x2d0>)
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d104      	bne.n	8002ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e9c:	f7fe fe0c 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8002ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ea4:	e003      	b.n	8002eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea6:	f7fe fdf3 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8002eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb8:	f040 810c 	bne.w	80030d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ede:	4621      	mov	r1, r4
 8002ee0:	eb12 0801 	adds.w	r8, r2, r1
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb43 0901 	adc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	eb49 0303 	adc.w	r3, r9, r3
 8002f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	18db      	adds	r3, r3, r3
 8002f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f30:	4613      	mov	r3, r2
 8002f32:	eb42 0303 	adc.w	r3, r2, r3
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
 8002f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f40:	f7fd f954 	bl	80001ec <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	011c      	lsls	r4, r3, #4
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f74:	4641      	mov	r1, r8
 8002f76:	eb12 0a01 	adds.w	sl, r2, r1
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f94:	4692      	mov	sl, r2
 8002f96:	469b      	mov	fp, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	18db      	adds	r3, r3, r3
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fd6:	f7fd f909 	bl	80001ec <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2264      	movs	r2, #100	; 0x64
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	1acb      	subs	r3, r1, r3
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003004:	441c      	add	r4, r3
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003020:	415b      	adcs	r3, r3
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003028:	4641      	mov	r1, r8
 800302a:	1851      	adds	r1, r2, r1
 800302c:	6339      	str	r1, [r7, #48]	; 0x30
 800302e:	4649      	mov	r1, r9
 8003030:	414b      	adcs	r3, r1
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003040:	4659      	mov	r1, fp
 8003042:	00cb      	lsls	r3, r1, #3
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304a:	4651      	mov	r1, sl
 800304c:	00ca      	lsls	r2, r1, #3
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4642      	mov	r2, r8
 8003056:	189b      	adds	r3, r3, r2
 8003058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800305c:	464b      	mov	r3, r9
 800305e:	460a      	mov	r2, r1
 8003060:	eb42 0303 	adc.w	r3, r2, r3
 8003064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800307c:	460b      	mov	r3, r1
 800307e:	18db      	adds	r3, r3, r3
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	4613      	mov	r3, r2
 8003084:	eb42 0303 	adc.w	r3, r2, r3
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003092:	f7fd f8ab 	bl	80001ec <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <UART_SetConfig+0x2d4>)
 800309c:	fba3 1302 	umull	r1, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	2164      	movs	r1, #100	; 0x64
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	3332      	adds	r3, #50	; 0x32
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <UART_SetConfig+0x2d4>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4422      	add	r2, r4
 80030c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c4:	e105      	b.n	80032d2 <UART_SetConfig+0x4d6>
 80030c6:	bf00      	nop
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030e6:	4642      	mov	r2, r8
 80030e8:	464b      	mov	r3, r9
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	6239      	str	r1, [r7, #32]
 80030ee:	415b      	adcs	r3, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f6:	4641      	mov	r1, r8
 80030f8:	1854      	adds	r4, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0501 	adc.w	r5, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310e:	00e2      	lsls	r2, r4, #3
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4643      	mov	r3, r8
 8003116:	18e3      	adds	r3, r4, r3
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800311c:	464b      	mov	r3, r9
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003142:	4629      	mov	r1, r5
 8003144:	008b      	lsls	r3, r1, #2
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314c:	4621      	mov	r1, r4
 800314e:	008a      	lsls	r2, r1, #2
 8003150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003154:	f7fd f84a 	bl	80001ec <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4b60      	ldr	r3, [pc, #384]	; (80032e0 <UART_SetConfig+0x4e4>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011c      	lsls	r4, r3, #4
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003178:	4642      	mov	r2, r8
 800317a:	464b      	mov	r3, r9
 800317c:	1891      	adds	r1, r2, r2
 800317e:	61b9      	str	r1, [r7, #24]
 8003180:	415b      	adcs	r3, r3
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	4641      	mov	r1, r8
 800318a:	1851      	adds	r1, r2, r1
 800318c:	6139      	str	r1, [r7, #16]
 800318e:	4649      	mov	r1, r9
 8003190:	414b      	adcs	r3, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a0:	4659      	mov	r1, fp
 80031a2:	00cb      	lsls	r3, r1, #3
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031aa:	4651      	mov	r1, sl
 80031ac:	00ca      	lsls	r2, r1, #3
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	4642      	mov	r2, r8
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031bc:	464b      	mov	r3, r9
 80031be:	460a      	mov	r2, r1
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031e0:	4649      	mov	r1, r9
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	4641      	mov	r1, r8
 80031e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ea:	4641      	mov	r1, r8
 80031ec:	008a      	lsls	r2, r1, #2
 80031ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031f2:	f7fc fffb 	bl	80001ec <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <UART_SetConfig+0x4e4>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <UART_SetConfig+0x4e4>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321a:	441c      	add	r4, r3
 800321c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003220:	2200      	movs	r2, #0
 8003222:	673b      	str	r3, [r7, #112]	; 0x70
 8003224:	677a      	str	r2, [r7, #116]	; 0x74
 8003226:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800322a:	4642      	mov	r2, r8
 800322c:	464b      	mov	r3, r9
 800322e:	1891      	adds	r1, r2, r2
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	415b      	adcs	r3, r3
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800323a:	4641      	mov	r1, r8
 800323c:	1851      	adds	r1, r2, r1
 800323e:	6039      	str	r1, [r7, #0]
 8003240:	4649      	mov	r1, r9
 8003242:	414b      	adcs	r3, r1
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003252:	4659      	mov	r1, fp
 8003254:	00cb      	lsls	r3, r1, #3
 8003256:	4651      	mov	r1, sl
 8003258:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325c:	4651      	mov	r1, sl
 800325e:	00ca      	lsls	r2, r1, #3
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	4603      	mov	r3, r0
 8003266:	4642      	mov	r2, r8
 8003268:	189b      	adds	r3, r3, r2
 800326a:	66bb      	str	r3, [r7, #104]	; 0x68
 800326c:	464b      	mov	r3, r9
 800326e:	460a      	mov	r2, r1
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	663b      	str	r3, [r7, #96]	; 0x60
 8003280:	667a      	str	r2, [r7, #100]	; 0x64
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800328e:	4649      	mov	r1, r9
 8003290:	008b      	lsls	r3, r1, #2
 8003292:	4641      	mov	r1, r8
 8003294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003298:	4641      	mov	r1, r8
 800329a:	008a      	lsls	r2, r1, #2
 800329c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032a0:	f7fc ffa4 	bl	80001ec <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <UART_SetConfig+0x4e4>)
 80032aa:	fba3 1302 	umull	r1, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2164      	movs	r1, #100	; 0x64
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <UART_SetConfig+0x4e4>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4422      	add	r2, r4
 80032d0:	609a      	str	r2, [r3, #8]
}
 80032d2:	bf00      	nop
 80032d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	51eb851f 	.word	0x51eb851f

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4d0d      	ldr	r5, [pc, #52]	; (800331c <__libc_init_array+0x38>)
 80032e8:	4c0d      	ldr	r4, [pc, #52]	; (8003320 <__libc_init_array+0x3c>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	2600      	movs	r6, #0
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	4d0b      	ldr	r5, [pc, #44]	; (8003324 <__libc_init_array+0x40>)
 80032f6:	4c0c      	ldr	r4, [pc, #48]	; (8003328 <__libc_init_array+0x44>)
 80032f8:	f000 f820 	bl	800333c <_init>
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	2600      	movs	r6, #0
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f855 3b04 	ldr.w	r3, [r5], #4
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f855 3b04 	ldr.w	r3, [r5], #4
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	08003374 	.word	0x08003374
 8003320:	08003374 	.word	0x08003374
 8003324:	08003374 	.word	0x08003374
 8003328:	08003378 	.word	0x08003378

0800332c <memset>:
 800332c:	4402      	add	r2, r0
 800332e:	4603      	mov	r3, r0
 8003330:	4293      	cmp	r3, r2
 8003332:	d100      	bne.n	8003336 <memset+0xa>
 8003334:	4770      	bx	lr
 8003336:	f803 1b01 	strb.w	r1, [r3], #1
 800333a:	e7f9      	b.n	8003330 <memset+0x4>

0800333c <_init>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr

08003348 <_fini>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr
